
//gc-labfile01/LabMyDocs/jebugay/My Documents/Spring2018/CPE490/Lab5/Lab5/Interrupts.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	c0 02 00 00 cc 02 00 00 d8 02 00 00 e4 02 00 00     ................
  30:	f0 02 00 00 bc 0e 00 00 5c 02 00 00 fc 02 00 00     ........\.......

00000040 <__cs3_reset_generic>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb00035f 	bl	e58 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000fe4 	.word	0x00000fe4

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00001420 	.word	0x00001420

00000124 <__cs3_heap_start_ptr>:
 124:	00001458 	.word	0x00001458

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00001428 	.word	0x00001428
 170:	0000142b 	.word	0x0000142b
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00001428 	.word	0x00001428
 1bc:	00001428 	.word	0x00001428
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00001428 	.word	0x00001428
 200:	00000000 	.word	0x00000000
 204:	00000f48 	.word	0x00000f48

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000f48 	.word	0x00000f48
 250:	0000142c 	.word	0x0000142c
 254:	00000fe8 	.word	0x00000fe8
 258:	00000000 	.word	0x00000000

0000025c <__cs3_isr_irq>:
Global Variables:
***************************************************************************************************/

// Define the IRQ exception handler
void __attribute__ ((interrupt)) __cs3_isr_irq (void)
{
 25c:	e24ee004 	sub	lr, lr, #4
 260:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
 264:	e28db018 	add	r11, sp, #24
 268:	e24dd00c 	sub	sp, sp, #12
    // Read the ICCIAR from the CPU interface in the GIC
    int address;
    int interrupt_ID;
    
    address = MPCORE_GIC_CPUIF + ICCIAR;
 26c:	e30c310c 	movw	r3, #49420	; 0xc10c
 270:	e34f3ffe 	movt	r3, #65534	; 0xfffe
 274:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
    interrupt_ID = *(int *)address;
 278:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
 27c:	e5933000 	ldr	r3, [r3]
 280:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
   
    // if (interrupt_ID == KEYS_IRQ)       // check if interrupt is from the KEYs
        // ButtonsISR ();
    // else if(interrupt_ID == MPCORE_PRIV_TIMER_IRQ)
        // TimerISR();
    if(interrupt_ID == PS2_IRQ)
 284:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
 288:	e353004f 	cmp	r3, #79	; 0x4f
 28c:	1a000008 	bne	2b4 <__cs3_isr_irq+0x58>
        PS2ISR();
 290:	eb0000da 	bl	600 <PS2ISR>
    else
        while (1);                          // if unexpected, then stay here

    // Write to the End of Interrupt Register (ICCEOIR)
    address = MPCORE_GIC_CPUIF + ICCEOIR;
 294:	e30c3110 	movw	r3, #49424	; 0xc110
 298:	e34f3ffe 	movt	r3, #65534	; 0xfffe
 29c:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
    *(int *)address = interrupt_ID;
 2a0:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
 2a4:	e51b2024 	ldr	r2, [r11, #-36]	; 0xffffffdc
 2a8:	e5832000 	str	r2, [r3]

    return;
 2ac:	e1a00000 	nop			; (mov r0, r0)
 2b0:	ea000000 	b	2b8 <__cs3_isr_irq+0x5c>
    // else if(interrupt_ID == MPCORE_PRIV_TIMER_IRQ)
        // TimerISR();
    if(interrupt_ID == PS2_IRQ)
        PS2ISR();
    else
        while (1);                          // if unexpected, then stay here
 2b4:	eafffffe 	b	2b4 <__cs3_isr_irq+0x58>
    // Write to the End of Interrupt Register (ICCEOIR)
    address = MPCORE_GIC_CPUIF + ICCEOIR;
    *(int *)address = interrupt_ID;

    return;
} 
 2b8:	e24bd018 	sub	sp, r11, #24
 2bc:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

000002c0 <__cs3_reset>:

// Define the remaining exception handlers
void __attribute__ ((interrupt)) __cs3_reset (void)
{
 2c0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 2c4:	e28db000 	add	r11, sp, #0
    while(1);
 2c8:	eafffffe 	b	2c8 <__cs3_reset+0x8>

000002cc <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void)
{
 2cc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 2d0:	e28db000 	add	r11, sp, #0
    while(1);
 2d4:	eafffffe 	b	2d4 <__cs3_isr_undef+0x8>

000002d8 <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void)
{
 2d8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 2dc:	e28db000 	add	r11, sp, #0
    while(1);
 2e0:	eafffffe 	b	2e0 <__cs3_isr_swi+0x8>

000002e4 <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void)
{
 2e4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 2e8:	e28db000 	add	r11, sp, #0
    while(1);
 2ec:	eafffffe 	b	2ec <__cs3_isr_pabort+0x8>

000002f0 <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void)
{
 2f0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 2f4:	e28db000 	add	r11, sp, #0
    while(1);
 2f8:	eafffffe 	b	2f8 <__cs3_isr_dabort+0x8>

000002fc <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void)
{
 2fc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 300:	e28db000 	add	r11, sp, #0
    while(1);
 304:	eafffffe 	b	304 <__cs3_isr_fiq+0x8>

00000308 <disable_A9_interrupts>:
}

void disable_A9_interrupts(void)
{
 308:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 30c:	e28db000 	add	r11, sp, #0
 310:	e24dd00c 	sub	sp, sp, #12
    int status = 0b11010011;
 314:	e3a030d3 	mov	r3, #211	; 0xd3
 318:	e50b3008 	str	r3, [r11, #-8]
    asm("msr cpsr, %[ps]" : : [ps]"r"(status));
 31c:	e51b3008 	ldr	r3, [r11, #-8]
 320:	e129f003 	msr	CPSR_fc, r3
}
 324:	e28bd000 	add	sp, r11, #0
 328:	e8bd0800 	ldmfd	sp!, {r11}
 32c:	e12fff1e 	bx	lr

00000330 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack(void)
{
 330:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 334:	e28db000 	add	r11, sp, #0
 338:	e24dd00c 	sub	sp, sp, #12
    int stack, mode;
    stack = A9_ONCHIP_END - 7;      // top of A9 onchip memory, aligned to 8 bytes
 33c:	e3e03007 	mvn	r3, #7
 340:	e50b3008 	str	r3, [r11, #-8]
    /* change processor to IRQ mode with interrupts disabled */
    mode = INT_DISABLE | IRQ_MODE;
 344:	e3a030d2 	mov	r3, #210	; 0xd2
 348:	e50b300c 	str	r3, [r11, #-12]
    asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
 34c:	e51b300c 	ldr	r3, [r11, #-12]
 350:	e129f003 	msr	CPSR_fc, r3
    /* set banked stack pointer */
    asm("mov sp, %[ps]" : : [ps] "r" (stack));
 354:	e51b3008 	ldr	r3, [r11, #-8]
 358:	e1a0d003 	mov	sp, r3

    /* go back to SVC mode before executing subroutine return! */
    mode = INT_DISABLE | SVC_MODE;
 35c:	e3a030d3 	mov	r3, #211	; 0xd3
 360:	e50b300c 	str	r3, [r11, #-12]
    asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
 364:	e51b300c 	ldr	r3, [r11, #-12]
 368:	e129f003 	msr	CPSR_fc, r3
}
 36c:	e28bd000 	add	sp, r11, #0
 370:	e8bd0800 	ldmfd	sp!, {r11}
 374:	e12fff1e 	bx	lr

00000378 <enable_A9_interrupts>:

void enable_A9_interrupts(void)
{
 378:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 37c:	e28db000 	add	r11, sp, #0
 380:	e24dd00c 	sub	sp, sp, #12
    int status = SVC_MODE | INT_ENABLE;
 384:	e3a03053 	mov	r3, #83	; 0x53
 388:	e50b3008 	str	r3, [r11, #-8]
    asm("msr cpsr, %[ps]" : : [ps]"r"(status));
 38c:	e51b3008 	ldr	r3, [r11, #-8]
 390:	e129f003 	msr	CPSR_fc, r3
}
 394:	e28bd000 	add	sp, r11, #0
 398:	e8bd0800 	ldmfd	sp!, {r11}
 39c:	e12fff1e 	bx	lr

000003a0 <config_GIC>:

void config_GIC(void) // STEP 3 IN SECTION 3.1 OF USING THE ARM GENERIC INTERRUPT CONTROLLER
{
 3a0:	e92d4800 	push	{r11, lr}
 3a4:	e28db004 	add	r11, sp, #4
 3a8:	e24dd008 	sub	sp, sp, #8
    int address;
    // config_interrupt (KEYS_IRQ, CPU0);  // configure the FPGA KEYs interrupt

    // Custom:
    // config_interrupt(MPCORE_PRIV_TIMER_IRQ, CPU0); // Hopefully, this configures the timer interrupts.
    config_interrupt (PS2_IRQ, CPU0);               // PS2
 3ac:	e3a0004f 	mov	r0, #79	; 0x4f
 3b0:	e3a01001 	mov	r1, #1
 3b4:	eb000013 	bl	408 <config_interrupt>
    
    // Set Interrupt Priority Mask Register (ICCPMR). Enable interrupts of all priorities 
    address = MPCORE_GIC_CPUIF + ICCPMR;
 3b8:	e30c3104 	movw	r3, #49412	; 0xc104
 3bc:	e34f3ffe 	movt	r3, #65534	; 0xfffe
 3c0:	e50b3008 	str	r3, [r11, #-8]
    *(int *) address = 0xFFFF;       
 3c4:	e51b3008 	ldr	r3, [r11, #-8]
 3c8:	e30f2fff 	movw	r2, #65535	; 0xffff
 3cc:	e5832000 	str	r2, [r3]

    // Set CPU Interface Control Register (ICCICR). Enable signaling of interrupts
    address = MPCORE_GIC_CPUIF + ICCICR;
 3d0:	e3a03cc1 	mov	r3, #49408	; 0xc100
 3d4:	e34f3ffe 	movt	r3, #65534	; 0xfffe
 3d8:	e50b3008 	str	r3, [r11, #-8]
    *(int *) address = 1;       
 3dc:	e51b3008 	ldr	r3, [r11, #-8]
 3e0:	e3a02001 	mov	r2, #1
 3e4:	e5832000 	str	r2, [r3]

    // Configure the Distributor Control Register (ICDDCR) to send pending interrupts to CPUs 
    address = MPCORE_GIC_DIST + ICDDCR;
 3e8:	e3a03a0d 	mov	r3, #53248	; 0xd000
 3ec:	e34f3ffe 	movt	r3, #65534	; 0xfffe
 3f0:	e50b3008 	str	r3, [r11, #-8]
    *(int *) address = 1;          
 3f4:	e51b3008 	ldr	r3, [r11, #-8]
 3f8:	e3a02001 	mov	r2, #1
 3fc:	e5832000 	str	r2, [r3]
}
 400:	e24bd004 	sub	sp, r11, #4
 404:	e8bd8800 	pop	{r11, pc}

00000408 <config_interrupt>:

void config_interrupt (int N, int CPU_target)
{
 408:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 40c:	e28db000 	add	r11, sp, #0
 410:	e24dd01c 	sub	sp, sp, #28
 414:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
 418:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
    int reg_offset, index, value, address;
    
    /* Configure the Interrupt Set-Enable Registers (ICDISERn). 
     * reg_offset = (integer_div(N / 32) * 4
     * value = 1 << (N mod 32) */
    reg_offset = (N >> 3) & 0xFFFFFFFC; 
 41c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
 420:	e1a031c3 	asr	r3, r3, #3
 424:	e3c33003 	bic	r3, r3, #3
 428:	e50b3008 	str	r3, [r11, #-8]
    index = N & 0x1F;
 42c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
 430:	e203301f 	and	r3, r3, #31
 434:	e50b300c 	str	r3, [r11, #-12]
    value = 0x1 << index;
 438:	e3a02001 	mov	r2, #1
 43c:	e51b300c 	ldr	r3, [r11, #-12]
 440:	e1a03312 	lsl	r3, r2, r3
 444:	e50b3010 	str	r3, [r11, #-16]
    address = MPCORE_GIC_DIST + ICDISER + reg_offset;
 448:	e51b3008 	ldr	r3, [r11, #-8]
 44c:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
 450:	e2433c03 	sub	r3, r3, #768	; 0x300
 454:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    /* Now that we know the register address and value, set the appropriate bit */
   *(int *)address |= value;
 458:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
 45c:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
 460:	e5921000 	ldr	r1, [r2]
 464:	e51b2010 	ldr	r2, [r11, #-16]
 468:	e1812002 	orr	r2, r1, r2
 46c:	e5832000 	str	r2, [r3]

    /* Configure the Interrupt Processor Targets Register (ICDIPTRn)
     * reg_offset = integer_div(N / 4) * 4
     * index = N mod 4 */
    reg_offset = (N & 0xFFFFFFFC);
 470:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
 474:	e3c33003 	bic	r3, r3, #3
 478:	e50b3008 	str	r3, [r11, #-8]
    index = N & 0x3;
 47c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
 480:	e2033003 	and	r3, r3, #3
 484:	e50b300c 	str	r3, [r11, #-12]
    address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
 488:	e51b2008 	ldr	r2, [r11, #-8]
 48c:	e51b300c 	ldr	r3, [r11, #-12]
 490:	e0823003 	add	r3, r2, r3
 494:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
 498:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    /* Now that we know the register address and value, write to (only) the appropriate byte */
    *(char *)address = (char) CPU_target;
 49c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
 4a0:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
 4a4:	e6ef2072 	uxtb	r2, r2
 4a8:	e5c32000 	strb	r2, [r3]
}
 4ac:	e28bd000 	add	sp, r11, #0
 4b0:	e8bd0800 	ldmfd	sp!, {r11}
 4b4:	e12fff1e 	bx	lr

000004b8 <configINTs>:

void configINTs()
{
 4b8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 4bc:	e28db000 	add	r11, sp, #0
 4c0:	e24dd00c 	sub	sp, sp, #12
    // volatile int * KEY_ptr = (int *) KEY_BASE;              // pushbutton KEY base address
    // volatile int* timerPtr = (int*) MPCORE_PRIV_TIMER;      // timer base address
    volatile int * PS2_ptr = (int *) PS2_BASE;  // PS/2 port address
 4c4:	e3a03c01 	mov	r3, #256	; 0x100
 4c8:	e34f3f20 	movt	r3, #65312	; 0xff20
 4cc:	e50b3008 	str	r3, [r11, #-8]

    *(PS2_ptr) = 0xFF;              /* reset */
 4d0:	e51b3008 	ldr	r3, [r11, #-8]
 4d4:	e3a020ff 	mov	r2, #255	; 0xff
 4d8:	e5832000 	str	r2, [r3]
    *(PS2_ptr + 1) = 0x1;           /* write to the PS/2 Control register to enable interrupts */
 4dc:	e51b3008 	ldr	r3, [r11, #-8]
 4e0:	e2833004 	add	r3, r3, #4
 4e4:	e3a02001 	mov	r2, #1
 4e8:	e5832000 	str	r2, [r3]
    // *(KEY_ptr + 2) = 0x01;                                  // enable interrupts for KEY0

/*    *(timerPtr) = 2000;                                     // Interrupt every 0.001s
    *(timerPtr + 2) |= (100 << 8);                          // Prescale 100
    *(timerPtr + 2) |= 0x07;                                // Turn on I, A, and E*/
}
 4ec:	e28bd000 	add	sp, r11, #0
 4f0:	e8bd0800 	ldmfd	sp!, {r11}
 4f4:	e12fff1e 	bx	lr

000004f8 <put_jtag>:
#include "JTAG_UART.h"
#include "Interrupts.h"


void put_jtag( char c )
{
 4f8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 4fc:	e28db000 	add	r11, sp, #0
 500:	e24dd014 	sub	sp, sp, #20
 504:	e1a03000 	mov	r3, r0
 508:	e54b300d 	strb	r3, [r11, #-13]
    volatile int * JTAG_UART_ptr    = (int *) JTAG_UART_BASE;   // JTAG UART address
 50c:	e3a03a01 	mov	r3, #4096	; 0x1000
 510:	e34f3f20 	movt	r3, #65312	; 0xff20
 514:	e50b3008 	str	r3, [r11, #-8]

    int control;
    control = *(JTAG_UART_ptr + 1);     // read the JTAG_UART control register
 518:	e51b3008 	ldr	r3, [r11, #-8]
 51c:	e5933004 	ldr	r3, [r3, #4]
 520:	e50b300c 	str	r3, [r11, #-12]
    if (control & 0xFFFF0000)               // if space, echo character, else ignore 
 524:	e51b300c 	ldr	r3, [r11, #-12]
 528:	e1a03823 	lsr	r3, r3, #16
 52c:	e1a03803 	lsl	r3, r3, #16
 530:	e3530000 	cmp	r3, #0
 534:	0a000002 	beq	544 <put_jtag+0x4c>
        *(JTAG_UART_ptr) = c;
 538:	e55b200d 	ldrb	r2, [r11, #-13]
 53c:	e51b3008 	ldr	r3, [r11, #-8]
 540:	e5832000 	str	r2, [r3]
}
 544:	e28bd000 	add	sp, r11, #0
 548:	e8bd0800 	ldmfd	sp!, {r11}
 54c:	e12fff1e 	bx	lr

00000550 <get_jtag>:

char get_jtag( void )
{
 550:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 554:	e28db000 	add	r11, sp, #0
 558:	e24dd00c 	sub	sp, sp, #12
    volatile int * JTAG_UART_ptr    = (int *) JTAG_UART_BASE;   // JTAG UART address
 55c:	e3a03a01 	mov	r3, #4096	; 0x1000
 560:	e34f3f20 	movt	r3, #65312	; 0xff20
 564:	e50b3008 	str	r3, [r11, #-8]

    int data;
    data = *(JTAG_UART_ptr);                // read the JTAG_UART data register
 568:	e51b3008 	ldr	r3, [r11, #-8]
 56c:	e5933000 	ldr	r3, [r3]
 570:	e50b300c 	str	r3, [r11, #-12]
    if (data & 0x00008000)                  // check RVALID to see if there is new data
 574:	e51b300c 	ldr	r3, [r11, #-12]
 578:	e2033902 	and	r3, r3, #32768	; 0x8000
 57c:	e3530000 	cmp	r3, #0
 580:	0a000002 	beq	590 <get_jtag+0x40>
        return ((char) data & 0xFF);
 584:	e51b300c 	ldr	r3, [r11, #-12]
 588:	e6ef3073 	uxtb	r3, r3
 58c:	ea000000 	b	594 <get_jtag+0x44>
    else
        return ('\0');
 590:	e3a03000 	mov	r3, #0
}
 594:	e1a00003 	mov	r0, r3
 598:	e28bd000 	add	sp, r11, #0
 59c:	e8bd0800 	ldmfd	sp!, {r11}
 5a0:	e12fff1e 	bx	lr

000005a4 <GetDigit>:

char GetDigit(unsigned char value)
{
 5a4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 5a8:	e28db000 	add	r11, sp, #0
 5ac:	e24dd01c 	sub	sp, sp, #28
 5b0:	e1a03000 	mov	r3, r0
 5b4:	e54b3015 	strb	r3, [r11, #-21]	; 0xffffffeb
    char digits[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
 5b8:	e3003f4c 	movw	r3, #3916	; 0xf4c
 5bc:	e3403000 	movt	r3, #0
 5c0:	e24bc014 	sub	r12, r11, #20
 5c4:	e5930000 	ldr	r0, [r3]
 5c8:	e5931004 	ldr	r1, [r3, #4]
 5cc:	e5932008 	ldr	r2, [r3, #8]
 5d0:	e593300c 	ldr	r3, [r3, #12]
 5d4:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}

    return digits[value];
 5d8:	e55b2015 	ldrb	r2, [r11, #-21]	; 0xffffffeb
 5dc:	e3e0300f 	mvn	r3, #15
 5e0:	e24b1004 	sub	r1, r11, #4
 5e4:	e0812002 	add	r2, r1, r2
 5e8:	e0823003 	add	r3, r2, r3
 5ec:	e5d33000 	ldrb	r3, [r3]
}
 5f0:	e1a00003 	mov	r0, r3
 5f4:	e28bd000 	add	sp, r11, #0
 5f8:	e8bd0800 	ldmfd	sp!, {r11}
 5fc:	e12fff1e 	bx	lr

00000600 <PS2ISR>:
/***************************************************************************************************
Function Definitions:
***************************************************************************************************/

void PS2ISR(void)
{
 600:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 604:	e28db000 	add	r11, sp, #0
 608:	e24dd014 	sub	sp, sp, #20
    

    volatile int * PS2_ptr = (int *) 0xFF200100;        // PS/2 port address
 60c:	e3a03c01 	mov	r3, #256	; 0x100
 610:	e34f3f20 	movt	r3, #65312	; 0xff20
 614:	e50b3008 	str	r3, [r11, #-8]
    int PS2_data, RAVAIL;

    PS2_data = *(PS2_ptr);                                  // read the Data register in the PS/2 port
 618:	e51b3008 	ldr	r3, [r11, #-8]
 61c:	e5933000 	ldr	r3, [r3]
 620:	e50b300c 	str	r3, [r11, #-12]
    RAVAIL = (PS2_data & 0xFFFF0000) >> 16;         // extract the RAVAIL field
 624:	e51b300c 	ldr	r3, [r11, #-12]
 628:	e1a03823 	lsr	r3, r3, #16
 62c:	e50b3010 	str	r3, [r11, #-16]
    if (RAVAIL > 0)
 630:	e51b3010 	ldr	r3, [r11, #-16]
 634:	e3530000 	cmp	r3, #0
 638:	da000010 	ble	680 <PS2ISR+0x80>
    {
        /* always save the last three bytes received */
        code.byte1 = code.byte2;
 63c:	e3013444 	movw	r3, #5188	; 0x1444
 640:	e3403000 	movt	r3, #0
 644:	e5d32001 	ldrb	r2, [r3, #1]
 648:	e3013444 	movw	r3, #5188	; 0x1444
 64c:	e3403000 	movt	r3, #0
 650:	e5c32000 	strb	r2, [r3]
        code.byte2 = code.byte3;
 654:	e3013444 	movw	r3, #5188	; 0x1444
 658:	e3403000 	movt	r3, #0
 65c:	e5d32002 	ldrb	r2, [r3, #2]
 660:	e3013444 	movw	r3, #5188	; 0x1444
 664:	e3403000 	movt	r3, #0
 668:	e5c32001 	strb	r2, [r3, #1]
        code.byte3 = PS2_data & 0xFF;
 66c:	e51b300c 	ldr	r3, [r11, #-12]
 670:	e6ef2073 	uxtb	r2, r3
 674:	e3013444 	movw	r3, #5188	; 0x1444
 678:	e3403000 	movt	r3, #0
 67c:	e5c32002 	strb	r2, [r3, #2]
    }

    code.word = ( (code.byte1 << 16) | (code.byte2 << 8) | (code.byte3) );
 680:	e3013444 	movw	r3, #5188	; 0x1444
 684:	e3403000 	movt	r3, #0
 688:	e5d33000 	ldrb	r3, [r3]
 68c:	e1a02803 	lsl	r2, r3, #16
 690:	e3013444 	movw	r3, #5188	; 0x1444
 694:	e3403000 	movt	r3, #0
 698:	e5d33001 	ldrb	r3, [r3, #1]
 69c:	e1a03403 	lsl	r3, r3, #8
 6a0:	e1822003 	orr	r2, r2, r3
 6a4:	e3013444 	movw	r3, #5188	; 0x1444
 6a8:	e3403000 	movt	r3, #0
 6ac:	e5d33002 	ldrb	r3, [r3, #2]
 6b0:	e1822003 	orr	r2, r2, r3
 6b4:	e3013444 	movw	r3, #5188	; 0x1444
 6b8:	e3403000 	movt	r3, #0
 6bc:	e5832004 	str	r2, [r3, #4]
}
 6c0:	e28bd000 	add	sp, r11, #0
 6c4:	e8bd0800 	ldmfd	sp!, {r11}
 6c8:	e12fff1e 	bx	lr

000006cc <CodeLookup>:

unsigned char CodeLookup(void)
{
 6cc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 6d0:	e28db000 	add	r11, sp, #0
 6d4:	e24dd00c 	sub	sp, sp, #12
        0x007DF07D, // KP 9
        0x005AF05A, // ENTER i 10
        0x00E0F05A, // KP EN i 11
    };

    int i = 0;
 6d8:	e3a03000 	mov	r3, #0
 6dc:	e50b3008 	str	r3, [r11, #-8]
    for(i; i < 12; i++)
 6e0:	ea000012 	b	730 <CodeLookup+0x64>
    {
        if(code.word == codes[i])
 6e4:	e3013444 	movw	r3, #5188	; 0x1444
 6e8:	e3403000 	movt	r3, #0
 6ec:	e5932004 	ldr	r2, [r3, #4]
 6f0:	e3003f5c 	movw	r3, #3932	; 0xf5c
 6f4:	e3403000 	movt	r3, #0
 6f8:	e51b1008 	ldr	r1, [r11, #-8]
 6fc:	e7933101 	ldr	r3, [r3, r1, lsl #2]
 700:	e1520003 	cmp	r2, r3
 704:	1a000006 	bne	724 <CodeLookup+0x58>
        {
            code.word = 0x00;
 708:	e3013444 	movw	r3, #5188	; 0x1444
 70c:	e3403000 	movt	r3, #0
 710:	e3a02000 	mov	r2, #0
 714:	e5832004 	str	r2, [r3, #4]
            return i;
 718:	e51b3008 	ldr	r3, [r11, #-8]
 71c:	e6ef3073 	uxtb	r3, r3
 720:	ea000006 	b	740 <CodeLookup+0x74>
        0x005AF05A, // ENTER i 10
        0x00E0F05A, // KP EN i 11
    };

    int i = 0;
    for(i; i < 12; i++)
 724:	e51b3008 	ldr	r3, [r11, #-8]
 728:	e2833001 	add	r3, r3, #1
 72c:	e50b3008 	str	r3, [r11, #-8]
 730:	e51b3008 	ldr	r3, [r11, #-8]
 734:	e353000b 	cmp	r3, #11
 738:	daffffe9 	ble	6e4 <CodeLookup+0x18>
        {
            code.word = 0x00;
            return i;
        }
    }
    return 100;
 73c:	e3a03064 	mov	r3, #100	; 0x64
}
 740:	e1a00003 	mov	r0, r3
 744:	e28bd000 	add	sp, r11, #0
 748:	e8bd0800 	ldmfd	sp!, {r11}
 74c:	e12fff1e 	bx	lr

00000750 <InitSegments>:

/***************************************************************************************************
Function Definitions:
***************************************************************************************************/
void InitSegments(void)
{
 750:	e92d4800 	push	{r11, lr}
 754:	e28db004 	add	r11, sp, #4
    displays.hex5 = GetSegments(0);
 758:	e3a00000 	mov	r0, #0
 75c:	eb000028 	bl	804 <GetSegments>
 760:	e1a03000 	mov	r3, r0
 764:	e1a02003 	mov	r2, r3
 768:	e301344c 	movw	r3, #5196	; 0x144c
 76c:	e3403000 	movt	r3, #0
 770:	e5c32000 	strb	r2, [r3]
    displays.hex4 = GetSegments(0);
 774:	e3a00000 	mov	r0, #0
 778:	eb000021 	bl	804 <GetSegments>
 77c:	e1a03000 	mov	r3, r0
 780:	e1a02003 	mov	r2, r3
 784:	e301344c 	movw	r3, #5196	; 0x144c
 788:	e3403000 	movt	r3, #0
 78c:	e5c32001 	strb	r2, [r3, #1]
    displays.hex3 = GetSegments(0);
 790:	e3a00000 	mov	r0, #0
 794:	eb00001a 	bl	804 <GetSegments>
 798:	e1a03000 	mov	r3, r0
 79c:	e1a02003 	mov	r2, r3
 7a0:	e301344c 	movw	r3, #5196	; 0x144c
 7a4:	e3403000 	movt	r3, #0
 7a8:	e5c32002 	strb	r2, [r3, #2]
    displays.hex2 = GetSegments(0);
 7ac:	e3a00000 	mov	r0, #0
 7b0:	eb000013 	bl	804 <GetSegments>
 7b4:	e1a03000 	mov	r3, r0
 7b8:	e1a02003 	mov	r2, r3
 7bc:	e301344c 	movw	r3, #5196	; 0x144c
 7c0:	e3403000 	movt	r3, #0
 7c4:	e5c32003 	strb	r2, [r3, #3]
    displays.hex1 = GetSegments(0);
 7c8:	e3a00000 	mov	r0, #0
 7cc:	eb00000c 	bl	804 <GetSegments>
 7d0:	e1a03000 	mov	r3, r0
 7d4:	e1a02003 	mov	r2, r3
 7d8:	e301344c 	movw	r3, #5196	; 0x144c
 7dc:	e3403000 	movt	r3, #0
 7e0:	e5c32004 	strb	r2, [r3, #4]
    displays.hex0 = GetSegments(0);
 7e4:	e3a00000 	mov	r0, #0
 7e8:	eb000005 	bl	804 <GetSegments>
 7ec:	e1a03000 	mov	r3, r0
 7f0:	e1a02003 	mov	r2, r3
 7f4:	e301344c 	movw	r3, #5196	; 0x144c
 7f8:	e3403000 	movt	r3, #0
 7fc:	e5c32005 	strb	r2, [r3, #5]
}
 800:	e8bd8800 	pop	{r11, pc}

00000804 <GetSegments>:

unsigned char GetSegments(unsigned char number)
{
 804:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 808:	e28db000 	add	r11, sp, #0
 80c:	e24dd014 	sub	sp, sp, #20
 810:	e1a03000 	mov	r3, r0
 814:	e54b300d 	strb	r3, [r11, #-13]
    unsigned char segments;

    switch(number)
 818:	e55b300d 	ldrb	r3, [r11, #-13]
 81c:	e3530009 	cmp	r3, #9
 820:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 824:	ea000027 	b	8c8 <GetSegments+0xc4>
 828:	00000850 	.word	0x00000850
 82c:	0000085c 	.word	0x0000085c
 830:	00000868 	.word	0x00000868
 834:	00000874 	.word	0x00000874
 838:	00000880 	.word	0x00000880
 83c:	0000088c 	.word	0x0000088c
 840:	00000898 	.word	0x00000898
 844:	000008a4 	.word	0x000008a4
 848:	000008b0 	.word	0x000008b0
 84c:	000008bc 	.word	0x000008bc
    {
        case 0:
            segments = 0b00111111;
 850:	e3a0303f 	mov	r3, #63	; 0x3f
 854:	e54b3005 	strb	r3, [r11, #-5]
            break;
 858:	ea00001a 	b	8c8 <GetSegments+0xc4>
        case 1:
            segments = 0b00000110;
 85c:	e3a03006 	mov	r3, #6
 860:	e54b3005 	strb	r3, [r11, #-5]
            break;
 864:	ea000017 	b	8c8 <GetSegments+0xc4>
        case 2:
            segments = 0b01011011;
 868:	e3a0305b 	mov	r3, #91	; 0x5b
 86c:	e54b3005 	strb	r3, [r11, #-5]
            break;
 870:	ea000014 	b	8c8 <GetSegments+0xc4>
        case 3:
            segments = 0b01001111;
 874:	e3a0304f 	mov	r3, #79	; 0x4f
 878:	e54b3005 	strb	r3, [r11, #-5]
            break;
 87c:	ea000011 	b	8c8 <GetSegments+0xc4>
        case 4:
            segments = 0b01100110;
 880:	e3a03066 	mov	r3, #102	; 0x66
 884:	e54b3005 	strb	r3, [r11, #-5]
            break;
 888:	ea00000e 	b	8c8 <GetSegments+0xc4>
        case 5:
            segments = 0b01101101;
 88c:	e3a0306d 	mov	r3, #109	; 0x6d
 890:	e54b3005 	strb	r3, [r11, #-5]
            break;
 894:	ea00000b 	b	8c8 <GetSegments+0xc4>
        case 6:
            segments = 0b01111101;
 898:	e3a0307d 	mov	r3, #125	; 0x7d
 89c:	e54b3005 	strb	r3, [r11, #-5]
            break;
 8a0:	ea000008 	b	8c8 <GetSegments+0xc4>
        case 7:
            segments = 0b00000111;
 8a4:	e3a03007 	mov	r3, #7
 8a8:	e54b3005 	strb	r3, [r11, #-5]
            break;
 8ac:	ea000005 	b	8c8 <GetSegments+0xc4>
        case 8:
            segments = 0b01111111;
 8b0:	e3a0307f 	mov	r3, #127	; 0x7f
 8b4:	e54b3005 	strb	r3, [r11, #-5]
            break;
 8b8:	ea000002 	b	8c8 <GetSegments+0xc4>
        case 9:
            segments = 0b01101111;
 8bc:	e3a0306f 	mov	r3, #111	; 0x6f
 8c0:	e54b3005 	strb	r3, [r11, #-5]
            break;
 8c4:	e1a00000 	nop			; (mov r0, r0)
    }
    return segments;
 8c8:	e55b3005 	ldrb	r3, [r11, #-5]
}
 8cc:	e1a00003 	mov	r0, r3
 8d0:	e28bd000 	add	sp, r11, #0
 8d4:	e8bd0800 	ldmfd	sp!, {r11}
 8d8:	e12fff1e 	bx	lr

000008dc <PutSegments>:

void PutSegments(void)
{
 8dc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 8e0:	e28db000 	add	r11, sp, #0
 8e4:	e24dd00c 	sub	sp, sp, #12
    volatile int* hex5Ptr = (int*)0xFF200030;
 8e8:	e3a03030 	mov	r3, #48	; 0x30
 8ec:	e34f3f20 	movt	r3, #65312	; 0xff20
 8f0:	e50b3008 	str	r3, [r11, #-8]
    volatile int* hex3Ptr = (int*)0xFF200020;
 8f4:	e3a03020 	mov	r3, #32
 8f8:	e34f3f20 	movt	r3, #65312	; 0xff20
 8fc:	e50b300c 	str	r3, [r11, #-12]

    *(hex5Ptr) = ( (displays.hex5 << 8) | (displays.hex4) );
 900:	e301344c 	movw	r3, #5196	; 0x144c
 904:	e3403000 	movt	r3, #0
 908:	e5d33000 	ldrb	r3, [r3]
 90c:	e1a02403 	lsl	r2, r3, #8
 910:	e301344c 	movw	r3, #5196	; 0x144c
 914:	e3403000 	movt	r3, #0
 918:	e5d33001 	ldrb	r3, [r3, #1]
 91c:	e1822003 	orr	r2, r2, r3
 920:	e51b3008 	ldr	r3, [r11, #-8]
 924:	e5832000 	str	r2, [r3]
    *(hex3Ptr) = ( (displays.hex3 << 24) | (displays.hex2 << 16) | (displays.hex1 << 8) | (displays.hex0) );
 928:	e301344c 	movw	r3, #5196	; 0x144c
 92c:	e3403000 	movt	r3, #0
 930:	e5d33002 	ldrb	r3, [r3, #2]
 934:	e1a02c03 	lsl	r2, r3, #24
 938:	e301344c 	movw	r3, #5196	; 0x144c
 93c:	e3403000 	movt	r3, #0
 940:	e5d33003 	ldrb	r3, [r3, #3]
 944:	e1a03803 	lsl	r3, r3, #16
 948:	e1822003 	orr	r2, r2, r3
 94c:	e301344c 	movw	r3, #5196	; 0x144c
 950:	e3403000 	movt	r3, #0
 954:	e5d33004 	ldrb	r3, [r3, #4]
 958:	e1a03403 	lsl	r3, r3, #8
 95c:	e1822003 	orr	r2, r2, r3
 960:	e301344c 	movw	r3, #5196	; 0x144c
 964:	e3403000 	movt	r3, #0
 968:	e5d33005 	ldrb	r3, [r3, #5]
 96c:	e1822003 	orr	r2, r2, r3
 970:	e51b300c 	ldr	r3, [r11, #-12]
 974:	e5832000 	str	r2, [r3]
}
 978:	e28bd000 	add	sp, r11, #0
 97c:	e8bd0800 	ldmfd	sp!, {r11}
 980:	e12fff1e 	bx	lr

00000984 <ShiftSegments>:

void ShiftSegments(unsigned char number)
{
 984:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 988:	e28db000 	add	r11, sp, #0
 98c:	e24dd00c 	sub	sp, sp, #12
 990:	e1a03000 	mov	r3, r0
 994:	e54b3005 	strb	r3, [r11, #-5]
    displays.hex5 = displays.hex4;
 998:	e301344c 	movw	r3, #5196	; 0x144c
 99c:	e3403000 	movt	r3, #0
 9a0:	e5d32001 	ldrb	r2, [r3, #1]
 9a4:	e301344c 	movw	r3, #5196	; 0x144c
 9a8:	e3403000 	movt	r3, #0
 9ac:	e5c32000 	strb	r2, [r3]
    displays.hex4 = displays.hex3;
 9b0:	e301344c 	movw	r3, #5196	; 0x144c
 9b4:	e3403000 	movt	r3, #0
 9b8:	e5d32002 	ldrb	r2, [r3, #2]
 9bc:	e301344c 	movw	r3, #5196	; 0x144c
 9c0:	e3403000 	movt	r3, #0
 9c4:	e5c32001 	strb	r2, [r3, #1]
    displays.hex3 = displays.hex2;
 9c8:	e301344c 	movw	r3, #5196	; 0x144c
 9cc:	e3403000 	movt	r3, #0
 9d0:	e5d32003 	ldrb	r2, [r3, #3]
 9d4:	e301344c 	movw	r3, #5196	; 0x144c
 9d8:	e3403000 	movt	r3, #0
 9dc:	e5c32002 	strb	r2, [r3, #2]
    displays.hex2 = displays.hex1;
 9e0:	e301344c 	movw	r3, #5196	; 0x144c
 9e4:	e3403000 	movt	r3, #0
 9e8:	e5d32004 	ldrb	r2, [r3, #4]
 9ec:	e301344c 	movw	r3, #5196	; 0x144c
 9f0:	e3403000 	movt	r3, #0
 9f4:	e5c32003 	strb	r2, [r3, #3]
    displays.hex1 = displays.hex0;
 9f8:	e301344c 	movw	r3, #5196	; 0x144c
 9fc:	e3403000 	movt	r3, #0
 a00:	e5d32005 	ldrb	r2, [r3, #5]
 a04:	e301344c 	movw	r3, #5196	; 0x144c
 a08:	e3403000 	movt	r3, #0
 a0c:	e5c32004 	strb	r2, [r3, #4]
    displays.hex0 = number;
 a10:	e301344c 	movw	r3, #5196	; 0x144c
 a14:	e3403000 	movt	r3, #0
 a18:	e55b2005 	ldrb	r2, [r11, #-5]
 a1c:	e5c32005 	strb	r2, [r3, #5]
}
 a20:	e28bd000 	add	sp, r11, #0
 a24:	e8bd0800 	ldmfd	sp!, {r11}
 a28:	e12fff1e 	bx	lr

00000a2c <main>:

/***************************************************************************************************
Program Start:
***************************************************************************************************/
int main(void)
{
 a2c:	e92d4800 	push	{r11, lr}
 a30:	e28db004 	add	r11, sp, #4
 a34:	e24dd008 	sub	sp, sp, #8
    disable_A9_interrupts ();       // disable interrupts in the A9 processor
 a38:	ebfffe32 	bl	308 <disable_A9_interrupts>
    set_A9_IRQ_stack ();            // initialize the stack pointer for IRQ mode
 a3c:	ebfffe3b 	bl	330 <set_A9_IRQ_stack>
    config_GIC ();                  // configure the general interrupt controller
 a40:	ebfffe56 	bl	3a0 <config_GIC>
    configINTs();                   // configure interrupts
 a44:	ebfffe9b 	bl	4b8 <configINTs>
    enable_A9_interrupts ();        // enable interrupts in the A9 processor
 a48:	ebfffe4a 	bl	378 <enable_A9_interrupts>

    unsigned char codeIndex = 100;
 a4c:	e3a03064 	mov	r3, #100	; 0x64
 a50:	e54b3006 	strb	r3, [r11, #-6]
    unsigned char enter = 0;
 a54:	e3a03000 	mov	r3, #0
 a58:	e54b3005 	strb	r3, [r11, #-5]

    InitSegments();
 a5c:	ebffff3b 	bl	750 <InitSegments>
    PutSegments();
 a60:	ebffff9d 	bl	8dc <PutSegments>
 a64:	ea000000 	b	a6c <main+0x40>
                case 10:
                case 11:
                    enter = 1;
            }
        }
    }
 a68:	e1a00000 	nop			; (mov r0, r0)

    InitSegments();
    PutSegments();
    while(1)
    {
        codeIndex = CodeLookup();
 a6c:	ebffff16 	bl	6cc <CodeLookup>
 a70:	e1a03000 	mov	r3, r0
 a74:	e54b3006 	strb	r3, [r11, #-6]
        if( codeIndex == 100 )      // If CodeLookup returns 100, then no match was found
 a78:	e55b3006 	ldrb	r3, [r11, #-6]
 a7c:	e3530064 	cmp	r3, #100	; 0x64
 a80:	0afffff8 	beq	a68 <main+0x3c>
        {
            // Do nothing
        }
        else
        {
            put_jtag( GetDigit(codeIndex) );
 a84:	e55b3006 	ldrb	r3, [r11, #-6]
 a88:	e1a00003 	mov	r0, r3
 a8c:	ebfffec4 	bl	5a4 <GetDigit>
 a90:	e1a03000 	mov	r3, r0
 a94:	e1a00003 	mov	r0, r3
 a98:	ebfffe96 	bl	4f8 <put_jtag>
            put_jtag('\n');
 a9c:	e3a0000a 	mov	r0, #10
 aa0:	ebfffe94 	bl	4f8 <put_jtag>
            if(enter)
 aa4:	e55b3005 	ldrb	r3, [r11, #-5]
 aa8:	e3530000 	cmp	r3, #0
 aac:	0a000002 	beq	abc <main+0x90>
            {
                InitSegments();
 ab0:	ebffff26 	bl	750 <InitSegments>
                enter = 0;
 ab4:	e3a03000 	mov	r3, #0
 ab8:	e54b3005 	strb	r3, [r11, #-5]
            }
            switch(codeIndex)
 abc:	e55b3006 	ldrb	r3, [r11, #-6]
 ac0:	e353000b 	cmp	r3, #11
 ac4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 ac8:	eaffffe6 	b	a68 <main+0x3c>
 acc:	00000afc 	.word	0x00000afc
 ad0:	00000afc 	.word	0x00000afc
 ad4:	00000afc 	.word	0x00000afc
 ad8:	00000afc 	.word	0x00000afc
 adc:	00000afc 	.word	0x00000afc
 ae0:	00000afc 	.word	0x00000afc
 ae4:	00000afc 	.word	0x00000afc
 ae8:	00000afc 	.word	0x00000afc
 aec:	00000afc 	.word	0x00000afc
 af0:	00000afc 	.word	0x00000afc
 af4:	00000b20 	.word	0x00000b20
 af8:	00000b20 	.word	0x00000b20
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                    ShiftSegments(GetSegments(codeIndex));
 afc:	e55b3006 	ldrb	r3, [r11, #-6]
 b00:	e1a00003 	mov	r0, r3
 b04:	ebffff3e 	bl	804 <GetSegments>
 b08:	e1a03000 	mov	r3, r0
 b0c:	e1a00003 	mov	r0, r3
 b10:	ebffff9b 	bl	984 <ShiftSegments>
                    PutSegments();
 b14:	ebffff70 	bl	8dc <PutSegments>
                    break;
 b18:	e1a00000 	nop			; (mov r0, r0)
                case 10:
                case 11:
                    enter = 1;
            }
        }
    }
 b1c:	eaffffd1 	b	a68 <main+0x3c>
                    ShiftSegments(GetSegments(codeIndex));
                    PutSegments();
                    break;
                case 10:
                case 11:
                    enter = 1;
 b20:	e3a03001 	mov	r3, #1
 b24:	e54b3005 	strb	r3, [r11, #-5]
            }
        }
    }
 b28:	eaffffce 	b	a68 <main+0x3c>

00000b2c <atexit>:
 b2c:	e1a01000 	mov	r1, r0
 b30:	e3a00000 	mov	r0, #0
 b34:	e92d4008 	push	{r3, lr}
 b38:	e1a02000 	mov	r2, r0
 b3c:	e1a03000 	mov	r3, r0
 b40:	eb00000e 	bl	b80 <__register_exitproc>
 b44:	e8bd4008 	pop	{r3, lr}
 b48:	e12fff1e 	bx	lr

00000b4c <exit>:
 b4c:	e92d4008 	push	{r3, lr}
 b50:	e3a01000 	mov	r1, #0
 b54:	e1a04000 	mov	r4, r0
 b58:	eb000045 	bl	c74 <__call_exitprocs>
 b5c:	e59f3018 	ldr	r3, [pc, #24]	; b7c <exit+0x30>
 b60:	e5930000 	ldr	r0, [r3]
 b64:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 b68:	e3530000 	cmp	r3, #0
 b6c:	11a0e00f 	movne	lr, pc
 b70:	112fff13 	bxne	r3
 b74:	e1a00004 	mov	r0, r4
 b78:	eb0000c9 	bl	ea4 <_exit>
 b7c:	00000f8c 	.word	0x00000f8c

00000b80 <__register_exitproc>:
 b80:	e59fc0e4 	ldr	r12, [pc, #228]	; c6c <__register_exitproc+0xec>
 b84:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 b88:	e59c4000 	ldr	r4, [r12]
 b8c:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 b90:	e35c0000 	cmp	r12, #0
 b94:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 b98:	e59c5004 	ldr	r5, [r12, #4]
 b9c:	0584c148 	streq	r12, [r4, #328]	; 0x148
 ba0:	e355001f 	cmp	r5, #31
 ba4:	e24dd010 	sub	sp, sp, #16
 ba8:	e1a06000 	mov	r6, r0
 bac:	da000015 	ble	c08 <__register_exitproc+0x88>
 bb0:	e59f00b8 	ldr	r0, [pc, #184]	; c70 <__register_exitproc+0xf0>
 bb4:	e3500000 	cmp	r0, #0
 bb8:	1a000001 	bne	bc4 <__register_exitproc+0x44>
 bbc:	e3e00000 	mvn	r0, #0
 bc0:	ea000018 	b	c28 <__register_exitproc+0xa8>
 bc4:	e3a00e19 	mov	r0, #400	; 0x190
 bc8:	e58d100c 	str	r1, [sp, #12]
 bcc:	e58d2008 	str	r2, [sp, #8]
 bd0:	e58d3004 	str	r3, [sp, #4]
 bd4:	e320f000 	nop	{0}
 bd8:	e250c000 	subs	r12, r0, #0
 bdc:	e59d100c 	ldr	r1, [sp, #12]
 be0:	e59d2008 	ldr	r2, [sp, #8]
 be4:	e59d3004 	ldr	r3, [sp, #4]
 be8:	0afffff3 	beq	bbc <__register_exitproc+0x3c>
 bec:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 bf0:	e3a00000 	mov	r0, #0
 bf4:	e58c0004 	str	r0, [r12, #4]
 bf8:	e58c5000 	str	r5, [r12]
 bfc:	e584c148 	str	r12, [r4, #328]	; 0x148
 c00:	e58c0188 	str	r0, [r12, #392]	; 0x188
 c04:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 c08:	e3560000 	cmp	r6, #0
 c0c:	e59c4004 	ldr	r4, [r12, #4]
 c10:	1a000007 	bne	c34 <__register_exitproc+0xb4>
 c14:	e2843002 	add	r3, r4, #2
 c18:	e2844001 	add	r4, r4, #1
 c1c:	e78c1103 	str	r1, [r12, r3, lsl #2]
 c20:	e58c4004 	str	r4, [r12, #4]
 c24:	e3a00000 	mov	r0, #0
 c28:	e28dd010 	add	sp, sp, #16
 c2c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 c30:	e12fff1e 	bx	lr
 c34:	e3a00001 	mov	r0, #1
 c38:	e1a00410 	lsl	r0, r0, r4
 c3c:	e08c8104 	add	r8, r12, r4, lsl #2
 c40:	e3560002 	cmp	r6, #2
 c44:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 c48:	e5883108 	str	r3, [r8, #264]	; 0x108
 c4c:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 c50:	e1877000 	orr	r7, r7, r0
 c54:	01830000 	orreq	r0, r3, r0
 c58:	e1a05008 	mov	r5, r8
 c5c:	e5882088 	str	r2, [r8, #136]	; 0x88
 c60:	e58c7188 	str	r7, [r12, #392]	; 0x188
 c64:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 c68:	eaffffe9 	b	c14 <__register_exitproc+0x94>
 c6c:	00000f8c 	.word	0x00000f8c
 c70:	00000000 	.word	0x00000000

00000c74 <__call_exitprocs>:
 c74:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 c78:	e59f3168 	ldr	r3, [pc, #360]	; de8 <__call_exitprocs+0x174>
 c7c:	e5933000 	ldr	r3, [r3]
 c80:	e24dd014 	sub	sp, sp, #20
 c84:	e58d3004 	str	r3, [sp, #4]
 c88:	e2833f52 	add	r3, r3, #328	; 0x148
 c8c:	e58d0008 	str	r0, [sp, #8]
 c90:	e58d300c 	str	r3, [sp, #12]
 c94:	e1a07001 	mov	r7, r1
 c98:	e3a08001 	mov	r8, #1
 c9c:	e59d3004 	ldr	r3, [sp, #4]
 ca0:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 ca4:	e3560000 	cmp	r6, #0
 ca8:	e59db00c 	ldr	r11, [sp, #12]
 cac:	0a000033 	beq	d80 <__call_exitprocs+0x10c>
 cb0:	e5965004 	ldr	r5, [r6, #4]
 cb4:	e2554001 	subs	r4, r5, #1
 cb8:	5286a088 	addpl	r10, r6, #136	; 0x88
 cbc:	5285501f 	addpl	r5, r5, #31
 cc0:	508a5105 	addpl	r5, r10, r5, lsl #2
 cc4:	5a000007 	bpl	ce8 <__call_exitprocs+0x74>
 cc8:	ea000029 	b	d74 <__call_exitprocs+0x100>
 ccc:	e5953000 	ldr	r3, [r5]
 cd0:	e1530007 	cmp	r3, r7
 cd4:	0a000005 	beq	cf0 <__call_exitprocs+0x7c>
 cd8:	e2444001 	sub	r4, r4, #1
 cdc:	e3740001 	cmn	r4, #1
 ce0:	e2455004 	sub	r5, r5, #4
 ce4:	0a000022 	beq	d74 <__call_exitprocs+0x100>
 ce8:	e3570000 	cmp	r7, #0
 cec:	1afffff6 	bne	ccc <__call_exitprocs+0x58>
 cf0:	e5963004 	ldr	r3, [r6, #4]
 cf4:	e06a2005 	rsb	r2, r10, r5
 cf8:	e2433001 	sub	r3, r3, #1
 cfc:	e0862002 	add	r2, r6, r2
 d00:	e1530004 	cmp	r3, r4
 d04:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 d08:	13a01000 	movne	r1, #0
 d0c:	05864004 	streq	r4, [r6, #4]
 d10:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 d14:	e3530000 	cmp	r3, #0
 d18:	0affffee 	beq	cd8 <__call_exitprocs+0x64>
 d1c:	e1a02418 	lsl	r2, r8, r4
 d20:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 d24:	e1120001 	tst	r2, r1
 d28:	e5969004 	ldr	r9, [r6, #4]
 d2c:	0a000016 	beq	d8c <__call_exitprocs+0x118>
 d30:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 d34:	e1120001 	tst	r2, r1
 d38:	1a000016 	bne	d98 <__call_exitprocs+0x124>
 d3c:	e59d0008 	ldr	r0, [sp, #8]
 d40:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 d44:	e1a0e00f 	mov	lr, pc
 d48:	e12fff13 	bx	r3
 d4c:	e5963004 	ldr	r3, [r6, #4]
 d50:	e1530009 	cmp	r3, r9
 d54:	1affffd0 	bne	c9c <__call_exitprocs+0x28>
 d58:	e59b3000 	ldr	r3, [r11]
 d5c:	e1530006 	cmp	r3, r6
 d60:	1affffcd 	bne	c9c <__call_exitprocs+0x28>
 d64:	e2444001 	sub	r4, r4, #1
 d68:	e3740001 	cmn	r4, #1
 d6c:	e2455004 	sub	r5, r5, #4
 d70:	1affffdc 	bne	ce8 <__call_exitprocs+0x74>
 d74:	e59f1070 	ldr	r1, [pc, #112]	; dec <__call_exitprocs+0x178>
 d78:	e3510000 	cmp	r1, #0
 d7c:	1a000009 	bne	da8 <__call_exitprocs+0x134>
 d80:	e28dd014 	add	sp, sp, #20
 d84:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 d88:	e12fff1e 	bx	lr
 d8c:	e1a0e00f 	mov	lr, pc
 d90:	e12fff13 	bx	r3
 d94:	eaffffec 	b	d4c <__call_exitprocs+0xd8>
 d98:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 d9c:	e1a0e00f 	mov	lr, pc
 da0:	e12fff13 	bx	r3
 da4:	eaffffe8 	b	d4c <__call_exitprocs+0xd8>
 da8:	e5963004 	ldr	r3, [r6, #4]
 dac:	e3530000 	cmp	r3, #0
 db0:	e5963000 	ldr	r3, [r6]
 db4:	1a000008 	bne	ddc <__call_exitprocs+0x168>
 db8:	e3530000 	cmp	r3, #0
 dbc:	0a000006 	beq	ddc <__call_exitprocs+0x168>
 dc0:	e1a00006 	mov	r0, r6
 dc4:	e58b3000 	str	r3, [r11]
 dc8:	e320f000 	nop	{0}
 dcc:	e59b6000 	ldr	r6, [r11]
 dd0:	e3560000 	cmp	r6, #0
 dd4:	1affffb5 	bne	cb0 <__call_exitprocs+0x3c>
 dd8:	eaffffe8 	b	d80 <__call_exitprocs+0x10c>
 ddc:	e1a0b006 	mov	r11, r6
 de0:	e1a06003 	mov	r6, r3
 de4:	eafffff9 	b	dd0 <__call_exitprocs+0x15c>
 de8:	00000f8c 	.word	0x00000f8c
 dec:	00000000 	.word	0x00000000

00000df0 <register_fini>:
 df0:	e92d4008 	push	{r3, lr}
 df4:	e59f3010 	ldr	r3, [pc, #16]	; e0c <register_fini+0x1c>
 df8:	e3530000 	cmp	r3, #0
 dfc:	159f000c 	ldrne	r0, [pc, #12]	; e10 <register_fini+0x20>
 e00:	1bffff49 	blne	b2c <atexit>
 e04:	e8bd4008 	pop	{r3, lr}
 e08:	e12fff1e 	bx	lr
 e0c:	00000fb4 	.word	0x00000fb4
 e10:	00000e14 	.word	0x00000e14

00000e14 <__libc_fini_array>:
 e14:	e92d4038 	push	{r3, r4, r5, lr}
 e18:	e59f5030 	ldr	r5, [pc, #48]	; e50 <__libc_fini_array+0x3c>
 e1c:	e59f4030 	ldr	r4, [pc, #48]	; e54 <__libc_fini_array+0x40>
 e20:	e0654004 	rsb	r4, r5, r4
 e24:	e1b04144 	asrs	r4, r4, #2
 e28:	10855104 	addne	r5, r5, r4, lsl #2
 e2c:	0a000004 	beq	e44 <__libc_fini_array+0x30>
 e30:	e5353004 	ldr	r3, [r5, #-4]!
 e34:	e1a0e00f 	mov	lr, pc
 e38:	e12fff13 	bx	r3
 e3c:	e2544001 	subs	r4, r4, #1
 e40:	1afffffa 	bne	e30 <__libc_fini_array+0x1c>
 e44:	eb00005a 	bl	fb4 <__libc_fini>
 e48:	e8bd4038 	pop	{r3, r4, r5, lr}
 e4c:	e12fff1e 	bx	lr
 e50:	00000fcc 	.word	0x00000fcc
 e54:	00000fd0 	.word	0x00000fd0

00000e58 <__cs3_premain>:
 e58:	e92d4008 	push	{r3, lr}
 e5c:	eb000017 	bl	ec0 <__libc_init_array>
 e60:	e59f3030 	ldr	r3, [pc, #48]	; e98 <__cs3_premain+0x40>
 e64:	e3530000 	cmp	r3, #0
 e68:	15930000 	ldrne	r0, [r3]
 e6c:	01a00003 	moveq	r0, r3
 e70:	e59f3024 	ldr	r3, [pc, #36]	; e9c <__cs3_premain+0x44>
 e74:	e3530000 	cmp	r3, #0
 e78:	15931000 	ldrne	r1, [r3]
 e7c:	01a01003 	moveq	r1, r3
 e80:	e3a02000 	mov	r2, #0
 e84:	ebfffee8 	bl	a2c <main>
 e88:	e59f3010 	ldr	r3, [pc, #16]	; ea0 <__cs3_premain+0x48>
 e8c:	e3530000 	cmp	r3, #0
 e90:	1bffff2d 	blne	b4c <exit>
 e94:	eafffffe 	b	e94 <__cs3_premain+0x3c>
	...
 ea0:	00000b4c 	.word	0x00000b4c

00000ea4 <_exit>:
 ea4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 ea8:	e3a00018 	mov	r0, #24
 eac:	e59f1004 	ldr	r1, [pc, #4]	; eb8 <_exit+0x14>
 eb0:	ef123456 	svc	0x00123456
 eb4:	eafffffe 	b	eb4 <_exit+0x10>
 eb8:	00020026 	.word	0x00020026

00000ebc <__cs3_isr_interrupt>:
 ebc:	eafffffe 	b	ebc <__cs3_isr_interrupt>

00000ec0 <__libc_init_array>:
 ec0:	e92d4070 	push	{r4, r5, r6, lr}
 ec4:	e59f506c 	ldr	r5, [pc, #108]	; f38 <__libc_init_array+0x78>
 ec8:	e59f606c 	ldr	r6, [pc, #108]	; f3c <__libc_init_array+0x7c>
 ecc:	e0656006 	rsb	r6, r5, r6
 ed0:	e1b06146 	asrs	r6, r6, #2
 ed4:	12455004 	subne	r5, r5, #4
 ed8:	13a04000 	movne	r4, #0
 edc:	0a000005 	beq	ef8 <__libc_init_array+0x38>
 ee0:	e5b53004 	ldr	r3, [r5, #4]!
 ee4:	e2844001 	add	r4, r4, #1
 ee8:	e1a0e00f 	mov	lr, pc
 eec:	e12fff13 	bx	r3
 ef0:	e1560004 	cmp	r6, r4
 ef4:	1afffff9 	bne	ee0 <__libc_init_array+0x20>
 ef8:	e59f5040 	ldr	r5, [pc, #64]	; f40 <__libc_init_array+0x80>
 efc:	e59f6040 	ldr	r6, [pc, #64]	; f44 <__libc_init_array+0x84>
 f00:	e0656006 	rsb	r6, r5, r6
 f04:	eb000022 	bl	f94 <_init>
 f08:	e1b06146 	asrs	r6, r6, #2
 f0c:	12455004 	subne	r5, r5, #4
 f10:	13a04000 	movne	r4, #0
 f14:	0a000005 	beq	f30 <__libc_init_array+0x70>
 f18:	e5b53004 	ldr	r3, [r5, #4]!
 f1c:	e2844001 	add	r4, r4, #1
 f20:	e1a0e00f 	mov	lr, pc
 f24:	e12fff13 	bx	r3
 f28:	e1560004 	cmp	r6, r4
 f2c:	1afffff9 	bne	f18 <__libc_init_array+0x58>
 f30:	e8bd4070 	pop	{r4, r5, r6, lr}
 f34:	e12fff1e 	bx	lr
 f38:	00000fac 	.word	0x00000fac
 f3c:	00000fac 	.word	0x00000fac
 f40:	00000fac 	.word	0x00000fac
 f44:	00000fb4 	.word	0x00000fb4

Disassembly of section .rodata:

00000f4c <codes.4077-0x10>:
 f4c:	33323130 	.word	0x33323130
 f50:	37363534 	.word	0x37363534
 f54:	42413938 	.word	0x42413938
 f58:	46454443 	.word	0x46454443

00000f5c <codes.4077>:
 f5c:	0070f070 0069f069 0072f072 007af07a     p.p.i.i.r.r.z.z.
 f6c:	006bf06b 0073f073 0074f074 006cf06c     k.k.s.s.t.t.l.l.
 f7c:	0075f075 007df07d 005af05a 00e0f05a     u.u.}.}.Z.Z.Z...

00000f8c <_global_impure_ptr>:
 f8c:	00000ff8 00000043                       ....C...

00000f94 <_init>:
 f94:	e1a0c00d 	mov	r12, sp
 f98:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 f9c:	e24cb004 	sub	r11, r12, #4
 fa0:	e24bd028 	sub	sp, r11, #40	; 0x28
 fa4:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 fa8:	e12fff1e 	bx	lr

00000fac <__init_array_start>:
 fac:	00000df0 	.word	0x00000df0

00000fb0 <__frame_dummy_init_array_entry>:
 fb0:	00000208                                ....

00000fb4 <__libc_fini>:
 fb4:	e1a0c00d 	mov	r12, sp
 fb8:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 fbc:	e24cb004 	sub	r11, r12, #4
 fc0:	e24bd028 	sub	sp, r11, #40	; 0x28
 fc4:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 fc8:	e12fff1e 	bx	lr

00000fcc <__fini_array_start>:
 fcc:	000001c4 	.word	0x000001c4

00000fd0 <__cs3_regions>:
	...
 fdc:	00001428 	.word	0x00001428
 fe0:	00000030 	.word	0x00000030

00000fe4 <__cs3_regions_end>:
 fe4:	00000000 	.word	0x00000000
