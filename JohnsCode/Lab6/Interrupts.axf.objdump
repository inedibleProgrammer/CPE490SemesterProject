
//gc-labfile01/LabMyDocs/jebugay/My Documents/Spring2018/CPE490/Lab6/Lab6/Interrupts.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	a8 02 00 00 b4 02 00 00 c0 02 00 00 cc 02 00 00     ................
  30:	d8 02 00 00 44 0b 00 00 5c 02 00 00 e4 02 00 00     ....D...\.......

00000040 <__cs3_reset_generic>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb000281 	bl	ae0 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000c6c 	.word	0x00000c6c

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	000010a8 	.word	0x000010a8

00000124 <__cs3_heap_start_ptr>:
 124:	000010d0 	.word	0x000010d0

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	000010b0 	.word	0x000010b0
 170:	000010b3 	.word	0x000010b3
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	000010b0 	.word	0x000010b0
 1bc:	000010b0 	.word	0x000010b0
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	000010b0 	.word	0x000010b0
 200:	00000000 	.word	0x00000000
 204:	00000bd0 	.word	0x00000bd0

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000bd0 	.word	0x00000bd0
 250:	000010b4 	.word	0x000010b4
 254:	00000c70 	.word	0x00000c70
 258:	00000000 	.word	0x00000000

0000025c <__cs3_isr_irq>:
Global Variables:
***************************************************************************************************/

// Define the IRQ exception handler
void __attribute__ ((interrupt)) __cs3_isr_irq (void)
{
 25c:	e92d080c 	push	{r2, r3, r11}
 260:	e28db008 	add	r11, sp, #8
 264:	e24dd00c 	sub	sp, sp, #12
    // Read the ICCIAR from the CPU interface in the GIC
    int address;
    int interrupt_ID;
    
    address = MPCORE_GIC_CPUIF + ICCIAR;
 268:	e30c310c 	movw	r3, #49420	; 0xc10c
 26c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
 270:	e50b3010 	str	r3, [r11, #-16]
    interrupt_ID = *(int *)address;
 274:	e51b3010 	ldr	r3, [r11, #-16]
 278:	e5933000 	ldr	r3, [r3]
 27c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
         // PS2ISR();
    // else
        // while (1);                          // if unexpected, then stay here

    // Write to the End of Interrupt Register (ICCEOIR)
    address = MPCORE_GIC_CPUIF + ICCEOIR;
 280:	e30c3110 	movw	r3, #49424	; 0xc110
 284:	e34f3ffe 	movt	r3, #65534	; 0xfffe
 288:	e50b3010 	str	r3, [r11, #-16]
    *(int *)address = interrupt_ID;
 28c:	e51b3010 	ldr	r3, [r11, #-16]
 290:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
 294:	e5832000 	str	r2, [r3]

    return;
 298:	e1a00000 	nop			; (mov r0, r0)
} 
 29c:	e24bd008 	sub	sp, r11, #8
 2a0:	e8bd080c 	pop	{r2, r3, r11}
 2a4:	e25ef004 	subs	pc, lr, #4

000002a8 <__cs3_reset>:

// Define the remaining exception handlers
void __attribute__ ((interrupt)) __cs3_reset (void)
{
 2a8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 2ac:	e28db000 	add	r11, sp, #0
    while(1);
 2b0:	eafffffe 	b	2b0 <__cs3_reset+0x8>

000002b4 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void)
{
 2b4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 2b8:	e28db000 	add	r11, sp, #0
    while(1);
 2bc:	eafffffe 	b	2bc <__cs3_isr_undef+0x8>

000002c0 <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void)
{
 2c0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 2c4:	e28db000 	add	r11, sp, #0
    while(1);
 2c8:	eafffffe 	b	2c8 <__cs3_isr_swi+0x8>

000002cc <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void)
{
 2cc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 2d0:	e28db000 	add	r11, sp, #0
    while(1);
 2d4:	eafffffe 	b	2d4 <__cs3_isr_pabort+0x8>

000002d8 <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void)
{
 2d8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 2dc:	e28db000 	add	r11, sp, #0
    while(1);
 2e0:	eafffffe 	b	2e0 <__cs3_isr_dabort+0x8>

000002e4 <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void)
{
 2e4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 2e8:	e28db000 	add	r11, sp, #0
    while(1);
 2ec:	eafffffe 	b	2ec <__cs3_isr_fiq+0x8>

000002f0 <disable_A9_interrupts>:
}

void disable_A9_interrupts(void)
{
 2f0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 2f4:	e28db000 	add	r11, sp, #0
 2f8:	e24dd00c 	sub	sp, sp, #12
    int status = 0b11010011;
 2fc:	e3a030d3 	mov	r3, #211	; 0xd3
 300:	e50b3008 	str	r3, [r11, #-8]
    asm("msr cpsr, %[ps]" : : [ps]"r"(status));
 304:	e51b3008 	ldr	r3, [r11, #-8]
 308:	e129f003 	msr	CPSR_fc, r3
}
 30c:	e28bd000 	add	sp, r11, #0
 310:	e8bd0800 	ldmfd	sp!, {r11}
 314:	e12fff1e 	bx	lr

00000318 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack(void)
{
 318:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 31c:	e28db000 	add	r11, sp, #0
 320:	e24dd00c 	sub	sp, sp, #12
    int stack, mode;
    stack = A9_ONCHIP_END - 7;      // top of A9 onchip memory, aligned to 8 bytes
 324:	e3e03007 	mvn	r3, #7
 328:	e50b3008 	str	r3, [r11, #-8]
    /* change processor to IRQ mode with interrupts disabled */
    mode = INT_DISABLE | IRQ_MODE;
 32c:	e3a030d2 	mov	r3, #210	; 0xd2
 330:	e50b300c 	str	r3, [r11, #-12]
    asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
 334:	e51b300c 	ldr	r3, [r11, #-12]
 338:	e129f003 	msr	CPSR_fc, r3
    /* set banked stack pointer */
    asm("mov sp, %[ps]" : : [ps] "r" (stack));
 33c:	e51b3008 	ldr	r3, [r11, #-8]
 340:	e1a0d003 	mov	sp, r3

    /* go back to SVC mode before executing subroutine return! */
    mode = INT_DISABLE | SVC_MODE;
 344:	e3a030d3 	mov	r3, #211	; 0xd3
 348:	e50b300c 	str	r3, [r11, #-12]
    asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
 34c:	e51b300c 	ldr	r3, [r11, #-12]
 350:	e129f003 	msr	CPSR_fc, r3
}
 354:	e28bd000 	add	sp, r11, #0
 358:	e8bd0800 	ldmfd	sp!, {r11}
 35c:	e12fff1e 	bx	lr

00000360 <enable_A9_interrupts>:

void enable_A9_interrupts(void)
{
 360:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 364:	e28db000 	add	r11, sp, #0
 368:	e24dd00c 	sub	sp, sp, #12
    int status = SVC_MODE | INT_ENABLE;
 36c:	e3a03053 	mov	r3, #83	; 0x53
 370:	e50b3008 	str	r3, [r11, #-8]
    asm("msr cpsr, %[ps]" : : [ps]"r"(status));
 374:	e51b3008 	ldr	r3, [r11, #-8]
 378:	e129f003 	msr	CPSR_fc, r3
}
 37c:	e28bd000 	add	sp, r11, #0
 380:	e8bd0800 	ldmfd	sp!, {r11}
 384:	e12fff1e 	bx	lr

00000388 <config_GIC>:

void config_GIC(void) // STEP 3 IN SECTION 3.1 OF USING THE ARM GENERIC INTERRUPT CONTROLLER
{
 388:	e92d4800 	push	{r11, lr}
 38c:	e28db004 	add	r11, sp, #4
 390:	e24dd008 	sub	sp, sp, #8
    int address;
    // config_interrupt (KEYS_IRQ, CPU0);  // configure the FPGA KEYs interrupt

    // Custom:
    // config_interrupt(MPCORE_PRIV_TIMER_IRQ, CPU0); // Hopefully, this configures the timer interrupts.
    config_interrupt (PS2_IRQ, CPU0);               // PS2
 394:	e3a0004f 	mov	r0, #79	; 0x4f
 398:	e3a01001 	mov	r1, #1
 39c:	eb000013 	bl	3f0 <config_interrupt>
    
    // Set Interrupt Priority Mask Register (ICCPMR). Enable interrupts of all priorities 
    address = MPCORE_GIC_CPUIF + ICCPMR;
 3a0:	e30c3104 	movw	r3, #49412	; 0xc104
 3a4:	e34f3ffe 	movt	r3, #65534	; 0xfffe
 3a8:	e50b3008 	str	r3, [r11, #-8]
    *(int *) address = 0xFFFF;       
 3ac:	e51b3008 	ldr	r3, [r11, #-8]
 3b0:	e30f2fff 	movw	r2, #65535	; 0xffff
 3b4:	e5832000 	str	r2, [r3]

    // Set CPU Interface Control Register (ICCICR). Enable signaling of interrupts
    address = MPCORE_GIC_CPUIF + ICCICR;
 3b8:	e3a03cc1 	mov	r3, #49408	; 0xc100
 3bc:	e34f3ffe 	movt	r3, #65534	; 0xfffe
 3c0:	e50b3008 	str	r3, [r11, #-8]
    *(int *) address = 1;       
 3c4:	e51b3008 	ldr	r3, [r11, #-8]
 3c8:	e3a02001 	mov	r2, #1
 3cc:	e5832000 	str	r2, [r3]

    // Configure the Distributor Control Register (ICDDCR) to send pending interrupts to CPUs 
    address = MPCORE_GIC_DIST + ICDDCR;
 3d0:	e3a03a0d 	mov	r3, #53248	; 0xd000
 3d4:	e34f3ffe 	movt	r3, #65534	; 0xfffe
 3d8:	e50b3008 	str	r3, [r11, #-8]
    *(int *) address = 1;          
 3dc:	e51b3008 	ldr	r3, [r11, #-8]
 3e0:	e3a02001 	mov	r2, #1
 3e4:	e5832000 	str	r2, [r3]
}
 3e8:	e24bd004 	sub	sp, r11, #4
 3ec:	e8bd8800 	pop	{r11, pc}

000003f0 <config_interrupt>:

void config_interrupt (int N, int CPU_target)
{
 3f0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 3f4:	e28db000 	add	r11, sp, #0
 3f8:	e24dd01c 	sub	sp, sp, #28
 3fc:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
 400:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
    int reg_offset, index, value, address;
    
    /* Configure the Interrupt Set-Enable Registers (ICDISERn). 
     * reg_offset = (integer_div(N / 32) * 4
     * value = 1 << (N mod 32) */
    reg_offset = (N >> 3) & 0xFFFFFFFC; 
 404:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
 408:	e1a031c3 	asr	r3, r3, #3
 40c:	e3c33003 	bic	r3, r3, #3
 410:	e50b3008 	str	r3, [r11, #-8]
    index = N & 0x1F;
 414:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
 418:	e203301f 	and	r3, r3, #31
 41c:	e50b300c 	str	r3, [r11, #-12]
    value = 0x1 << index;
 420:	e3a02001 	mov	r2, #1
 424:	e51b300c 	ldr	r3, [r11, #-12]
 428:	e1a03312 	lsl	r3, r2, r3
 42c:	e50b3010 	str	r3, [r11, #-16]
    address = MPCORE_GIC_DIST + ICDISER + reg_offset;
 430:	e51b3008 	ldr	r3, [r11, #-8]
 434:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
 438:	e2433c03 	sub	r3, r3, #768	; 0x300
 43c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    /* Now that we know the register address and value, set the appropriate bit */
   *(int *)address |= value;
 440:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
 444:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
 448:	e5921000 	ldr	r1, [r2]
 44c:	e51b2010 	ldr	r2, [r11, #-16]
 450:	e1812002 	orr	r2, r1, r2
 454:	e5832000 	str	r2, [r3]

    /* Configure the Interrupt Processor Targets Register (ICDIPTRn)
     * reg_offset = integer_div(N / 4) * 4
     * index = N mod 4 */
    reg_offset = (N & 0xFFFFFFFC);
 458:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
 45c:	e3c33003 	bic	r3, r3, #3
 460:	e50b3008 	str	r3, [r11, #-8]
    index = N & 0x3;
 464:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
 468:	e2033003 	and	r3, r3, #3
 46c:	e50b300c 	str	r3, [r11, #-12]
    address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
 470:	e51b2008 	ldr	r2, [r11, #-8]
 474:	e51b300c 	ldr	r3, [r11, #-12]
 478:	e0823003 	add	r3, r2, r3
 47c:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
 480:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    /* Now that we know the register address and value, write to (only) the appropriate byte */
    *(char *)address = (char) CPU_target;
 484:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
 488:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
 48c:	e6ef2072 	uxtb	r2, r2
 490:	e5c32000 	strb	r2, [r3]
}
 494:	e28bd000 	add	sp, r11, #0
 498:	e8bd0800 	ldmfd	sp!, {r11}
 49c:	e12fff1e 	bx	lr

000004a0 <configINTs>:

void configINTs()
{
 4a0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 4a4:	e28db000 	add	r11, sp, #0
    // *(KEY_ptr + 2) = 0x01;                                  // enable interrupts for KEY0

/*    *(timerPtr) = 2000;                                     // Interrupt every 0.001s
    *(timerPtr + 2) |= (100 << 8);                          // Prescale 100
    *(timerPtr + 2) |= 0x07;                                // Turn on I, A, and E*/
}
 4a8:	e28bd000 	add	sp, r11, #0
 4ac:	e8bd0800 	ldmfd	sp!, {r11}
 4b0:	e12fff1e 	bx	lr

000004b4 <VGA_text>:
#include "Monitor.h"
#include "Interrupts.h"

void VGA_text(int x, int y, char * text_ptr)
{
 4b4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 4b8:	e28db000 	add	r11, sp, #0
 4bc:	e24dd01c 	sub	sp, sp, #28
 4c0:	e50b0010 	str	r0, [r11, #-16]
 4c4:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
 4c8:	e50b2018 	str	r2, [r11, #-24]	; 0xffffffe8
    int offset;
    volatile char * character_buffer = (char *) FPGA_CHAR_BASE; // VGA character buffer
 4cc:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
 4d0:	e50b300c 	str	r3, [r11, #-12]

    /* assume that the text string fits on one line */
    offset = (y << 7) + x;
 4d4:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
 4d8:	e1a02383 	lsl	r2, r3, #7
 4dc:	e51b3010 	ldr	r3, [r11, #-16]
 4e0:	e0823003 	add	r3, r2, r3
 4e4:	e50b3008 	str	r3, [r11, #-8]
    while ( *(text_ptr) )
 4e8:	ea00000b 	b	51c <VGA_text+0x68>
    {
        *(character_buffer + offset) = *(text_ptr); // write to the character buffer
 4ec:	e51b3008 	ldr	r3, [r11, #-8]
 4f0:	e51b200c 	ldr	r2, [r11, #-12]
 4f4:	e0823003 	add	r3, r2, r3
 4f8:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
 4fc:	e5d22000 	ldrb	r2, [r2]
 500:	e5c32000 	strb	r2, [r3]
        ++text_ptr;
 504:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
 508:	e2833001 	add	r3, r3, #1
 50c:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
        ++offset;
 510:	e51b3008 	ldr	r3, [r11, #-8]
 514:	e2833001 	add	r3, r3, #1
 518:	e50b3008 	str	r3, [r11, #-8]
    int offset;
    volatile char * character_buffer = (char *) FPGA_CHAR_BASE; // VGA character buffer

    /* assume that the text string fits on one line */
    offset = (y << 7) + x;
    while ( *(text_ptr) )
 51c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
 520:	e5d33000 	ldrb	r3, [r3]
 524:	e3530000 	cmp	r3, #0
 528:	1affffef 	bne	4ec <VGA_text+0x38>
    {
        *(character_buffer + offset) = *(text_ptr); // write to the character buffer
        ++text_ptr;
        ++offset;
    }
}
 52c:	e28bd000 	add	sp, r11, #0
 530:	e8bd0800 	ldmfd	sp!, {r11}
 534:	e12fff1e 	bx	lr

00000538 <VGA_box>:

void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
 538:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 53c:	e28db000 	add	r11, sp, #0
 540:	e24dd024 	sub	sp, sp, #36	; 0x24
 544:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
 548:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
 54c:	e50b2020 	str	r2, [r11, #-32]	; 0xffffffe0
 550:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
    int pixel_ptr, row, col;

    /* assume that the box coordinates are valid */
    for (row = y1; row <= y2; row++)
 554:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
 558:	e50b3008 	str	r3, [r11, #-8]
 55c:	ea000017 	b	5c0 <VGA_box+0x88>
        for (col = x1; col <= x2; ++col)
 560:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
 564:	e50b300c 	str	r3, [r11, #-12]
 568:	ea00000d 	b	5a4 <VGA_box+0x6c>
        {
            pixel_ptr = FPGA_ONCHIP_BASE + (row << 10) + (col << 1);
 56c:	e51b3008 	ldr	r3, [r11, #-8]
 570:	e1a03503 	lsl	r3, r3, #10
 574:	e1a02003 	mov	r2, r3
 578:	e51b300c 	ldr	r3, [r11, #-12]
 57c:	e1a03083 	lsl	r3, r3, #1
 580:	e0823003 	add	r3, r2, r3
 584:	e2833332 	add	r3, r3, #-939524096	; 0xc8000000
 588:	e50b3010 	str	r3, [r11, #-16]
            *(short *)pixel_ptr = pixel_color;      // compute halfword address, set pixel
 58c:	e51b3010 	ldr	r3, [r11, #-16]
 590:	e1db20b4 	ldrh	r2, [r11, #4]
 594:	e1c320b0 	strh	r2, [r3]
{
    int pixel_ptr, row, col;

    /* assume that the box coordinates are valid */
    for (row = y1; row <= y2; row++)
        for (col = x1; col <= x2; ++col)
 598:	e51b300c 	ldr	r3, [r11, #-12]
 59c:	e2833001 	add	r3, r3, #1
 5a0:	e50b300c 	str	r3, [r11, #-12]
 5a4:	e51b200c 	ldr	r2, [r11, #-12]
 5a8:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
 5ac:	e1520003 	cmp	r2, r3
 5b0:	daffffed 	ble	56c <VGA_box+0x34>
void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
    int pixel_ptr, row, col;

    /* assume that the box coordinates are valid */
    for (row = y1; row <= y2; row++)
 5b4:	e51b3008 	ldr	r3, [r11, #-8]
 5b8:	e2833001 	add	r3, r3, #1
 5bc:	e50b3008 	str	r3, [r11, #-8]
 5c0:	e51b2008 	ldr	r2, [r11, #-8]
 5c4:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
 5c8:	e1520003 	cmp	r2, r3
 5cc:	daffffe3 	ble	560 <VGA_box+0x28>
        for (col = x1; col <= x2; ++col)
        {
            pixel_ptr = FPGA_ONCHIP_BASE + (row << 10) + (col << 1);
            *(short *)pixel_ptr = pixel_color;      // compute halfword address, set pixel
        }
 5d0:	e28bd000 	add	sp, r11, #0
 5d4:	e8bd0800 	ldmfd	sp!, {r11}
 5d8:	e12fff1e 	bx	lr

000005dc <main>:

/***************************************************************************************************
Program Start:
***************************************************************************************************/
int main(void)
{
 5dc:	e92d4800 	push	{r11, lr}
 5e0:	e28db004 	add	r11, sp, #4
 5e4:	e24dd080 	sub	sp, sp, #128	; 0x80
    int blue_x1; int blue_y1; int blue_x2; int blue_y2; 
    int screen_x; int screen_y; int char_buffer_x; int char_buffer_y;
    short color;

    /* create a message to be displayed on the VGA display */
    char text_top_VGA[20] = "Altera DE1-SoC\0";
 5e8:	e3003bd4 	movw	r3, #3028	; 0xbd4
 5ec:	e3403000 	movt	r3, #0
 5f0:	e24bc050 	sub	r12, r11, #80	; 0x50
 5f4:	e893000f 	ldm	r3, {r0, r1, r2, r3}
 5f8:	e88c000f 	stm	r12, {r0, r1, r2, r3}
 5fc:	e3a03000 	mov	r3, #0
 600:	e50b3040 	str	r3, [r11, #-64]	; 0xffffffc0
    char text_bottom_VGA[20] = "Computer\0";
 604:	e3002be8 	movw	r2, #3048	; 0xbe8
 608:	e3402000 	movt	r2, #0
 60c:	e24b3064 	sub	r3, r11, #100	; 0x64
 610:	e8920007 	ldm	r2, {r0, r1, r2}
 614:	e8a30003 	stmia	r3!, {r0, r1}
 618:	e1c320b0 	strh	r2, [r3]
 61c:	e24b305a 	sub	r3, r11, #90	; 0x5a
 620:	e3a02000 	mov	r2, #0
 624:	e1c320b0 	strh	r2, [r3]
 628:	e2833002 	add	r3, r3, #2
 62c:	e3a02000 	mov	r2, #0
 630:	e1c320b0 	strh	r2, [r3]
 634:	e2833002 	add	r3, r3, #2
 638:	e3a02000 	mov	r2, #0
 63c:	e1c320b0 	strh	r2, [r3]
 640:	e2833002 	add	r3, r3, #2
 644:	e3a02000 	mov	r2, #0
 648:	e1c320b0 	strh	r2, [r3]
 64c:	e2833002 	add	r3, r3, #2
 650:	e3a02000 	mov	r2, #0
 654:	e1c320b0 	strh	r2, [r3]
 658:	e2833002 	add	r3, r3, #2
    char text_ALTERA[10] = "ALTERA\0";
 65c:	e3003bfc 	movw	r3, #3068	; 0xbfc
 660:	e3403000 	movt	r3, #0
 664:	e24b2070 	sub	r2, r11, #112	; 0x70
 668:	e8930003 	ldm	r3, {r0, r1}
 66c:	e8820003 	stm	r2, {r0, r1}
 670:	e3a03000 	mov	r3, #0
 674:	e14b36b8 	strh	r3, [r11, #-104]	; 0xffffff98
    char text_erase[10] = "      \0";
 678:	e3003c08 	movw	r3, #3080	; 0xc08
 67c:	e3403000 	movt	r3, #0
 680:	e24b207c 	sub	r2, r11, #124	; 0x7c
 684:	e8930003 	ldm	r3, {r0, r1}
 688:	e8820003 	stm	r2, {r0, r1}
 68c:	e3a03000 	mov	r3, #0
 690:	e14b37b4 	strh	r3, [r11, #-116]	; 0xffffff8c

    /* the following variables give the size of the pixel buffer */
    screen_x = 319; screen_y = 239;
 694:	e300313f 	movw	r3, #319	; 0x13f
 698:	e50b3008 	str	r3, [r11, #-8]
 69c:	e3a030ef 	mov	r3, #239	; 0xef
 6a0:	e50b300c 	str	r3, [r11, #-12]
    color = 0x38EF;     // a purple color
 6a4:	e30338ef 	movw	r3, #14575	; 0x38ef
 6a8:	e14b30be 	strh	r3, [r11, #-14]
    VGA_box (0, 0, screen_x, screen_y, color);  // fill the screen with grey
 6ac:	e15b30fe 	ldrsh	r3, [r11, #-14]
 6b0:	e58d3000 	str	r3, [sp]
 6b4:	e3a00000 	mov	r0, #0
 6b8:	e3a01000 	mov	r1, #0
 6bc:	e51b2008 	ldr	r2, [r11, #-8]
 6c0:	e51b300c 	ldr	r3, [r11, #-12]
 6c4:	ebffff9b 	bl	538 <VGA_box>

    // draw a medium-blue box around the above text, based on the character buffer coordinates
    blue_x1 = 28; blue_x2 = 52; blue_y1 = 26; blue_y2 = 34;
 6c8:	e3a0301c 	mov	r3, #28
 6cc:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
 6d0:	e3a03034 	mov	r3, #52	; 0x34
 6d4:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
 6d8:	e3a0301a 	mov	r3, #26
 6dc:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
 6e0:	e3a03022 	mov	r3, #34	; 0x22
 6e4:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0

    // character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
    color = 0x187F;     // a medium blue color
 6e8:	e301387f 	movw	r3, #6271	; 0x187f
 6ec:	e14b30be 	strh	r3, [r11, #-14]
    VGA_box (blue_x1 * 4, blue_y1 * 4, blue_x2 * 4, blue_y2 * 4, color);
 6f0:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
 6f4:	e1a00103 	lsl	r0, r3, #2
 6f8:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
 6fc:	e1a01103 	lsl	r1, r3, #2
 700:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
 704:	e1a02103 	lsl	r2, r3, #2
 708:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
 70c:	e1a03103 	lsl	r3, r3, #2
 710:	e15bc0fe 	ldrsh	r12, [r11, #-14]
 714:	e58dc000 	str	r12, [sp]
 718:	ebffff86 	bl	538 <VGA_box>

    /* output text message in the middle of the VGA monitor */
    VGA_text (blue_x1 + 5, blue_y1 + 3, text_top_VGA);
 71c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
 720:	e2831005 	add	r1, r3, #5
 724:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
 728:	e2832003 	add	r2, r3, #3
 72c:	e24b3050 	sub	r3, r11, #80	; 0x50
 730:	e1a00001 	mov	r0, r1
 734:	e1a01002 	mov	r1, r2
 738:	e1a02003 	mov	r2, r3
 73c:	ebffff5c 	bl	4b4 <VGA_text>
    VGA_text (blue_x1 + 5, blue_y1 + 4, text_bottom_VGA);
 740:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
 744:	e2831005 	add	r1, r3, #5
 748:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
 74c:	e2832004 	add	r2, r3, #4
 750:	e24b3064 	sub	r3, r11, #100	; 0x64
 754:	e1a00001 	mov	r0, r1
 758:	e1a01002 	mov	r1, r2
 75c:	e1a02003 	mov	r2, r3
 760:	ebffff53 	bl	4b4 <VGA_text>

    char_buffer_x = 79; char_buffer_y = 59;
 764:	e3a0304f 	mov	r3, #79	; 0x4f
 768:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
 76c:	e3a0303b 	mov	r3, #59	; 0x3b
 770:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
    ALT_x1 = 0; ALT_x2 = 5/* ALTERA = 6 chars */; ALT_y = 0; ALT_inc_x = 1; ALT_inc_y = 1;
 774:	e3a03000 	mov	r3, #0
 778:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
 77c:	e3a03005 	mov	r3, #5
 780:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
 784:	e3a03000 	mov	r3, #0
 788:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
 78c:	e3a03001 	mov	r3, #1
 790:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
 794:	e3a03001 	mov	r3, #1
 798:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4
    VGA_text (ALT_x1, ALT_y, text_ALTERA);
 79c:	e24b3070 	sub	r3, r11, #112	; 0x70
 7a0:	e51b002c 	ldr	r0, [r11, #-44]	; 0xffffffd4
 7a4:	e51b1034 	ldr	r1, [r11, #-52]	; 0xffffffcc
 7a8:	e1a02003 	mov	r2, r3
 7ac:	ebffff40 	bl	4b4 <VGA_text>

    while(1)
    {

    }
 7b0:	eafffffe 	b	7b0 <main+0x1d4>

000007b4 <atexit>:
 7b4:	e1a01000 	mov	r1, r0
 7b8:	e3a00000 	mov	r0, #0
 7bc:	e92d4008 	push	{r3, lr}
 7c0:	e1a02000 	mov	r2, r0
 7c4:	e1a03000 	mov	r3, r0
 7c8:	eb00000e 	bl	808 <__register_exitproc>
 7cc:	e8bd4008 	pop	{r3, lr}
 7d0:	e12fff1e 	bx	lr

000007d4 <exit>:
 7d4:	e92d4008 	push	{r3, lr}
 7d8:	e3a01000 	mov	r1, #0
 7dc:	e1a04000 	mov	r4, r0
 7e0:	eb000045 	bl	8fc <__call_exitprocs>
 7e4:	e59f3018 	ldr	r3, [pc, #24]	; 804 <exit+0x30>
 7e8:	e5930000 	ldr	r0, [r3]
 7ec:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 7f0:	e3530000 	cmp	r3, #0
 7f4:	11a0e00f 	movne	lr, pc
 7f8:	112fff13 	bxne	r3
 7fc:	e1a00004 	mov	r0, r4
 800:	eb0000c9 	bl	b2c <_exit>
 804:	00000c14 	.word	0x00000c14

00000808 <__register_exitproc>:
 808:	e59fc0e4 	ldr	r12, [pc, #228]	; 8f4 <__register_exitproc+0xec>
 80c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 810:	e59c4000 	ldr	r4, [r12]
 814:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 818:	e35c0000 	cmp	r12, #0
 81c:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 820:	e59c5004 	ldr	r5, [r12, #4]
 824:	0584c148 	streq	r12, [r4, #328]	; 0x148
 828:	e355001f 	cmp	r5, #31
 82c:	e24dd010 	sub	sp, sp, #16
 830:	e1a06000 	mov	r6, r0
 834:	da000015 	ble	890 <__register_exitproc+0x88>
 838:	e59f00b8 	ldr	r0, [pc, #184]	; 8f8 <__register_exitproc+0xf0>
 83c:	e3500000 	cmp	r0, #0
 840:	1a000001 	bne	84c <__register_exitproc+0x44>
 844:	e3e00000 	mvn	r0, #0
 848:	ea000018 	b	8b0 <__register_exitproc+0xa8>
 84c:	e3a00e19 	mov	r0, #400	; 0x190
 850:	e58d100c 	str	r1, [sp, #12]
 854:	e58d2008 	str	r2, [sp, #8]
 858:	e58d3004 	str	r3, [sp, #4]
 85c:	e320f000 	nop	{0}
 860:	e250c000 	subs	r12, r0, #0
 864:	e59d100c 	ldr	r1, [sp, #12]
 868:	e59d2008 	ldr	r2, [sp, #8]
 86c:	e59d3004 	ldr	r3, [sp, #4]
 870:	0afffff3 	beq	844 <__register_exitproc+0x3c>
 874:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 878:	e3a00000 	mov	r0, #0
 87c:	e58c0004 	str	r0, [r12, #4]
 880:	e58c5000 	str	r5, [r12]
 884:	e584c148 	str	r12, [r4, #328]	; 0x148
 888:	e58c0188 	str	r0, [r12, #392]	; 0x188
 88c:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 890:	e3560000 	cmp	r6, #0
 894:	e59c4004 	ldr	r4, [r12, #4]
 898:	1a000007 	bne	8bc <__register_exitproc+0xb4>
 89c:	e2843002 	add	r3, r4, #2
 8a0:	e2844001 	add	r4, r4, #1
 8a4:	e78c1103 	str	r1, [r12, r3, lsl #2]
 8a8:	e58c4004 	str	r4, [r12, #4]
 8ac:	e3a00000 	mov	r0, #0
 8b0:	e28dd010 	add	sp, sp, #16
 8b4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 8b8:	e12fff1e 	bx	lr
 8bc:	e3a00001 	mov	r0, #1
 8c0:	e1a00410 	lsl	r0, r0, r4
 8c4:	e08c8104 	add	r8, r12, r4, lsl #2
 8c8:	e3560002 	cmp	r6, #2
 8cc:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 8d0:	e5883108 	str	r3, [r8, #264]	; 0x108
 8d4:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 8d8:	e1877000 	orr	r7, r7, r0
 8dc:	01830000 	orreq	r0, r3, r0
 8e0:	e1a05008 	mov	r5, r8
 8e4:	e5882088 	str	r2, [r8, #136]	; 0x88
 8e8:	e58c7188 	str	r7, [r12, #392]	; 0x188
 8ec:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 8f0:	eaffffe9 	b	89c <__register_exitproc+0x94>
 8f4:	00000c14 	.word	0x00000c14
 8f8:	00000000 	.word	0x00000000

000008fc <__call_exitprocs>:
 8fc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 900:	e59f3168 	ldr	r3, [pc, #360]	; a70 <__call_exitprocs+0x174>
 904:	e5933000 	ldr	r3, [r3]
 908:	e24dd014 	sub	sp, sp, #20
 90c:	e58d3004 	str	r3, [sp, #4]
 910:	e2833f52 	add	r3, r3, #328	; 0x148
 914:	e58d0008 	str	r0, [sp, #8]
 918:	e58d300c 	str	r3, [sp, #12]
 91c:	e1a07001 	mov	r7, r1
 920:	e3a08001 	mov	r8, #1
 924:	e59d3004 	ldr	r3, [sp, #4]
 928:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 92c:	e3560000 	cmp	r6, #0
 930:	e59db00c 	ldr	r11, [sp, #12]
 934:	0a000033 	beq	a08 <__call_exitprocs+0x10c>
 938:	e5965004 	ldr	r5, [r6, #4]
 93c:	e2554001 	subs	r4, r5, #1
 940:	5286a088 	addpl	r10, r6, #136	; 0x88
 944:	5285501f 	addpl	r5, r5, #31
 948:	508a5105 	addpl	r5, r10, r5, lsl #2
 94c:	5a000007 	bpl	970 <__call_exitprocs+0x74>
 950:	ea000029 	b	9fc <__call_exitprocs+0x100>
 954:	e5953000 	ldr	r3, [r5]
 958:	e1530007 	cmp	r3, r7
 95c:	0a000005 	beq	978 <__call_exitprocs+0x7c>
 960:	e2444001 	sub	r4, r4, #1
 964:	e3740001 	cmn	r4, #1
 968:	e2455004 	sub	r5, r5, #4
 96c:	0a000022 	beq	9fc <__call_exitprocs+0x100>
 970:	e3570000 	cmp	r7, #0
 974:	1afffff6 	bne	954 <__call_exitprocs+0x58>
 978:	e5963004 	ldr	r3, [r6, #4]
 97c:	e06a2005 	rsb	r2, r10, r5
 980:	e2433001 	sub	r3, r3, #1
 984:	e0862002 	add	r2, r6, r2
 988:	e1530004 	cmp	r3, r4
 98c:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 990:	13a01000 	movne	r1, #0
 994:	05864004 	streq	r4, [r6, #4]
 998:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 99c:	e3530000 	cmp	r3, #0
 9a0:	0affffee 	beq	960 <__call_exitprocs+0x64>
 9a4:	e1a02418 	lsl	r2, r8, r4
 9a8:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 9ac:	e1120001 	tst	r2, r1
 9b0:	e5969004 	ldr	r9, [r6, #4]
 9b4:	0a000016 	beq	a14 <__call_exitprocs+0x118>
 9b8:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 9bc:	e1120001 	tst	r2, r1
 9c0:	1a000016 	bne	a20 <__call_exitprocs+0x124>
 9c4:	e59d0008 	ldr	r0, [sp, #8]
 9c8:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 9cc:	e1a0e00f 	mov	lr, pc
 9d0:	e12fff13 	bx	r3
 9d4:	e5963004 	ldr	r3, [r6, #4]
 9d8:	e1530009 	cmp	r3, r9
 9dc:	1affffd0 	bne	924 <__call_exitprocs+0x28>
 9e0:	e59b3000 	ldr	r3, [r11]
 9e4:	e1530006 	cmp	r3, r6
 9e8:	1affffcd 	bne	924 <__call_exitprocs+0x28>
 9ec:	e2444001 	sub	r4, r4, #1
 9f0:	e3740001 	cmn	r4, #1
 9f4:	e2455004 	sub	r5, r5, #4
 9f8:	1affffdc 	bne	970 <__call_exitprocs+0x74>
 9fc:	e59f1070 	ldr	r1, [pc, #112]	; a74 <__call_exitprocs+0x178>
 a00:	e3510000 	cmp	r1, #0
 a04:	1a000009 	bne	a30 <__call_exitprocs+0x134>
 a08:	e28dd014 	add	sp, sp, #20
 a0c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 a10:	e12fff1e 	bx	lr
 a14:	e1a0e00f 	mov	lr, pc
 a18:	e12fff13 	bx	r3
 a1c:	eaffffec 	b	9d4 <__call_exitprocs+0xd8>
 a20:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 a24:	e1a0e00f 	mov	lr, pc
 a28:	e12fff13 	bx	r3
 a2c:	eaffffe8 	b	9d4 <__call_exitprocs+0xd8>
 a30:	e5963004 	ldr	r3, [r6, #4]
 a34:	e3530000 	cmp	r3, #0
 a38:	e5963000 	ldr	r3, [r6]
 a3c:	1a000008 	bne	a64 <__call_exitprocs+0x168>
 a40:	e3530000 	cmp	r3, #0
 a44:	0a000006 	beq	a64 <__call_exitprocs+0x168>
 a48:	e1a00006 	mov	r0, r6
 a4c:	e58b3000 	str	r3, [r11]
 a50:	e320f000 	nop	{0}
 a54:	e59b6000 	ldr	r6, [r11]
 a58:	e3560000 	cmp	r6, #0
 a5c:	1affffb5 	bne	938 <__call_exitprocs+0x3c>
 a60:	eaffffe8 	b	a08 <__call_exitprocs+0x10c>
 a64:	e1a0b006 	mov	r11, r6
 a68:	e1a06003 	mov	r6, r3
 a6c:	eafffff9 	b	a58 <__call_exitprocs+0x15c>
 a70:	00000c14 	.word	0x00000c14
 a74:	00000000 	.word	0x00000000

00000a78 <register_fini>:
 a78:	e92d4008 	push	{r3, lr}
 a7c:	e59f3010 	ldr	r3, [pc, #16]	; a94 <register_fini+0x1c>
 a80:	e3530000 	cmp	r3, #0
 a84:	159f000c 	ldrne	r0, [pc, #12]	; a98 <register_fini+0x20>
 a88:	1bffff49 	blne	7b4 <atexit>
 a8c:	e8bd4008 	pop	{r3, lr}
 a90:	e12fff1e 	bx	lr
 a94:	00000c3c 	.word	0x00000c3c
 a98:	00000a9c 	.word	0x00000a9c

00000a9c <__libc_fini_array>:
 a9c:	e92d4038 	push	{r3, r4, r5, lr}
 aa0:	e59f5030 	ldr	r5, [pc, #48]	; ad8 <__libc_fini_array+0x3c>
 aa4:	e59f4030 	ldr	r4, [pc, #48]	; adc <__libc_fini_array+0x40>
 aa8:	e0654004 	rsb	r4, r5, r4
 aac:	e1b04144 	asrs	r4, r4, #2
 ab0:	10855104 	addne	r5, r5, r4, lsl #2
 ab4:	0a000004 	beq	acc <__libc_fini_array+0x30>
 ab8:	e5353004 	ldr	r3, [r5, #-4]!
 abc:	e1a0e00f 	mov	lr, pc
 ac0:	e12fff13 	bx	r3
 ac4:	e2544001 	subs	r4, r4, #1
 ac8:	1afffffa 	bne	ab8 <__libc_fini_array+0x1c>
 acc:	eb00005a 	bl	c3c <__libc_fini>
 ad0:	e8bd4038 	pop	{r3, r4, r5, lr}
 ad4:	e12fff1e 	bx	lr
 ad8:	00000c54 	.word	0x00000c54
 adc:	00000c58 	.word	0x00000c58

00000ae0 <__cs3_premain>:
 ae0:	e92d4008 	push	{r3, lr}
 ae4:	eb000017 	bl	b48 <__libc_init_array>
 ae8:	e59f3030 	ldr	r3, [pc, #48]	; b20 <__cs3_premain+0x40>
 aec:	e3530000 	cmp	r3, #0
 af0:	15930000 	ldrne	r0, [r3]
 af4:	01a00003 	moveq	r0, r3
 af8:	e59f3024 	ldr	r3, [pc, #36]	; b24 <__cs3_premain+0x44>
 afc:	e3530000 	cmp	r3, #0
 b00:	15931000 	ldrne	r1, [r3]
 b04:	01a01003 	moveq	r1, r3
 b08:	e3a02000 	mov	r2, #0
 b0c:	ebfffeb2 	bl	5dc <main>
 b10:	e59f3010 	ldr	r3, [pc, #16]	; b28 <__cs3_premain+0x48>
 b14:	e3530000 	cmp	r3, #0
 b18:	1bffff2d 	blne	7d4 <exit>
 b1c:	eafffffe 	b	b1c <__cs3_premain+0x3c>
	...
 b28:	000007d4 	.word	0x000007d4

00000b2c <_exit>:
 b2c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 b30:	e3a00018 	mov	r0, #24
 b34:	e59f1004 	ldr	r1, [pc, #4]	; b40 <_exit+0x14>
 b38:	ef123456 	svc	0x00123456
 b3c:	eafffffe 	b	b3c <_exit+0x10>
 b40:	00020026 	.word	0x00020026

00000b44 <__cs3_isr_interrupt>:
 b44:	eafffffe 	b	b44 <__cs3_isr_interrupt>

00000b48 <__libc_init_array>:
 b48:	e92d4070 	push	{r4, r5, r6, lr}
 b4c:	e59f506c 	ldr	r5, [pc, #108]	; bc0 <__libc_init_array+0x78>
 b50:	e59f606c 	ldr	r6, [pc, #108]	; bc4 <__libc_init_array+0x7c>
 b54:	e0656006 	rsb	r6, r5, r6
 b58:	e1b06146 	asrs	r6, r6, #2
 b5c:	12455004 	subne	r5, r5, #4
 b60:	13a04000 	movne	r4, #0
 b64:	0a000005 	beq	b80 <__libc_init_array+0x38>
 b68:	e5b53004 	ldr	r3, [r5, #4]!
 b6c:	e2844001 	add	r4, r4, #1
 b70:	e1a0e00f 	mov	lr, pc
 b74:	e12fff13 	bx	r3
 b78:	e1560004 	cmp	r6, r4
 b7c:	1afffff9 	bne	b68 <__libc_init_array+0x20>
 b80:	e59f5040 	ldr	r5, [pc, #64]	; bc8 <__libc_init_array+0x80>
 b84:	e59f6040 	ldr	r6, [pc, #64]	; bcc <__libc_init_array+0x84>
 b88:	e0656006 	rsb	r6, r5, r6
 b8c:	eb000022 	bl	c1c <_init>
 b90:	e1b06146 	asrs	r6, r6, #2
 b94:	12455004 	subne	r5, r5, #4
 b98:	13a04000 	movne	r4, #0
 b9c:	0a000005 	beq	bb8 <__libc_init_array+0x70>
 ba0:	e5b53004 	ldr	r3, [r5, #4]!
 ba4:	e2844001 	add	r4, r4, #1
 ba8:	e1a0e00f 	mov	lr, pc
 bac:	e12fff13 	bx	r3
 bb0:	e1560004 	cmp	r6, r4
 bb4:	1afffff9 	bne	ba0 <__libc_init_array+0x58>
 bb8:	e8bd4070 	pop	{r4, r5, r6, lr}
 bbc:	e12fff1e 	bx	lr
 bc0:	00000c34 	.word	0x00000c34
 bc4:	00000c34 	.word	0x00000c34
 bc8:	00000c34 	.word	0x00000c34
 bcc:	00000c3c 	.word	0x00000c3c

Disassembly of section .rodata:

00000bd4 <_global_impure_ptr-0x40>:
 bd4:	65746c41 	.word	0x65746c41
 bd8:	44206172 	.word	0x44206172
 bdc:	532d3145 	.word	0x532d3145
 be0:	0000436f 	.word	0x0000436f
 be4:	00000000 	.word	0x00000000
 be8:	706d6f43 	.word	0x706d6f43
 bec:	72657475 	.word	0x72657475
	...
 bfc:	45544c41 	.word	0x45544c41
 c00:	00004152 	.word	0x00004152
 c04:	00000000 	.word	0x00000000
 c08:	20202020 	.word	0x20202020
 c0c:	00002020 	.word	0x00002020
 c10:	00000000 	.word	0x00000000

00000c14 <_global_impure_ptr>:
 c14:	00000c80 00000043                       ....C...

00000c1c <_init>:
 c1c:	e1a0c00d 	mov	r12, sp
 c20:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 c24:	e24cb004 	sub	r11, r12, #4
 c28:	e24bd028 	sub	sp, r11, #40	; 0x28
 c2c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 c30:	e12fff1e 	bx	lr

00000c34 <__init_array_start>:
 c34:	00000a78 	.word	0x00000a78

00000c38 <__frame_dummy_init_array_entry>:
 c38:	00000208                                ....

00000c3c <__libc_fini>:
 c3c:	e1a0c00d 	mov	r12, sp
 c40:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 c44:	e24cb004 	sub	r11, r12, #4
 c48:	e24bd028 	sub	sp, r11, #40	; 0x28
 c4c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 c50:	e12fff1e 	bx	lr

00000c54 <__fini_array_start>:
 c54:	000001c4 	.word	0x000001c4

00000c58 <__cs3_regions>:
	...
 c64:	000010b0 	.word	0x000010b0
 c68:	00000020 	.word	0x00000020

00000c6c <__cs3_regions_end>:
 c6c:	00000000 	.word	0x00000000
