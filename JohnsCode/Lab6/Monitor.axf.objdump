
//gc-labfile01/LabMyDocs/jebugay/My Documents/Spring2018/CPE490/Lab6/Lab6/Monitor.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
       0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      20:	18 0b 00 00 24 0b 00 00 30 0b 00 00 3c 0b 00 00     ....$...0...<...
      30:	48 0b 00 00 b0 21 00 00 a0 0a 00 00 54 0b 00 00     H....!......T...

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb00081c 	bl	214c <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	000022a8 	.word	0x000022a8

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	000026e0 	.word	0x000026e0

00000124 <__cs3_heap_start_ptr>:
     124:	00002708 	.word	0x00002708

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	000026e8 	.word	0x000026e8
     170:	000026eb 	.word	0x000026eb
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	000026e8 	.word	0x000026e8
     1bc:	000026e8 	.word	0x000026e8
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	000026e8 	.word	0x000026e8
     200:	00000000 	.word	0x00000000
     204:	0000223c 	.word	0x0000223c

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	0000223c 	.word	0x0000223c
     250:	000026ec 	.word	0x000026ec
     254:	000022a8 	.word	0x000022a8
     258:	00000000 	.word	0x00000000

0000025c <VGA_text>:

/***************************************************************************************************
Function Definitions:
***************************************************************************************************/
void VGA_text (struct CoordinatesChar* coordinatesChar)
{
     25c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     260:	e28db000 	add	r11, sp, #0
     264:	e24dd01c 	sub	sp, sp, #28
     268:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
    int offset;
    volatile char * character_buffer = (char *) FPGA_CHAR_BASE; // VGA character buffer
     26c:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
     270:	e50b3010 	str	r3, [r11, #-16]

    char* text_ptr = &( coordinatesChar->string[0] );
     274:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     278:	e2833008 	add	r3, r3, #8
     27c:	e50b300c 	str	r3, [r11, #-12]

    /* assume that the text string fits on one line */
    offset = (coordinatesChar->y << 7) + coordinatesChar->x;
     280:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     284:	e5933004 	ldr	r3, [r3, #4]
     288:	e1a02383 	lsl	r2, r3, #7
     28c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     290:	e5933000 	ldr	r3, [r3]
     294:	e0823003 	add	r3, r2, r3
     298:	e50b3008 	str	r3, [r11, #-8]
    while ( *(text_ptr) )
     29c:	ea00000b 	b	2d0 <VGA_text+0x74>
    {
        *(character_buffer + offset) = *(text_ptr); // write to the character buffer
     2a0:	e51b3008 	ldr	r3, [r11, #-8]
     2a4:	e51b2010 	ldr	r2, [r11, #-16]
     2a8:	e0823003 	add	r3, r2, r3
     2ac:	e51b200c 	ldr	r2, [r11, #-12]
     2b0:	e5d22000 	ldrb	r2, [r2]
     2b4:	e5c32000 	strb	r2, [r3]
        ++text_ptr;
     2b8:	e51b300c 	ldr	r3, [r11, #-12]
     2bc:	e2833001 	add	r3, r3, #1
     2c0:	e50b300c 	str	r3, [r11, #-12]
        ++offset;
     2c4:	e51b3008 	ldr	r3, [r11, #-8]
     2c8:	e2833001 	add	r3, r3, #1
     2cc:	e50b3008 	str	r3, [r11, #-8]

    char* text_ptr = &( coordinatesChar->string[0] );

    /* assume that the text string fits on one line */
    offset = (coordinatesChar->y << 7) + coordinatesChar->x;
    while ( *(text_ptr) )
     2d0:	e51b300c 	ldr	r3, [r11, #-12]
     2d4:	e5d33000 	ldrb	r3, [r3]
     2d8:	e3530000 	cmp	r3, #0
     2dc:	1affffef 	bne	2a0 <VGA_text+0x44>
    {
        *(character_buffer + offset) = *(text_ptr); // write to the character buffer
        ++text_ptr;
        ++offset;
    }
}
     2e0:	e28bd000 	add	sp, r11, #0
     2e4:	e8bd0800 	ldmfd	sp!, {r11}
     2e8:	e12fff1e 	bx	lr

000002ec <VGA_box>:

void VGA_box(struct Coordinates* coordinates)
{
     2ec:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     2f0:	e28db000 	add	r11, sp, #0
     2f4:	e24dd01c 	sub	sp, sp, #28
     2f8:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
    int pixel_ptr, row, col;

    /* assume that the box coordinates are valid */
    for (row = coordinates->y1; row <= coordinates->y2; row++)
     2fc:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     300:	e5933008 	ldr	r3, [r3, #8]
     304:	e50b3008 	str	r3, [r11, #-8]
     308:	ea00001a 	b	378 <VGA_box+0x8c>
    {
        for (col = coordinates->x1; col <= coordinates->x2; ++col)
     30c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     310:	e5933000 	ldr	r3, [r3]
     314:	e50b300c 	str	r3, [r11, #-12]
     318:	ea00000e 	b	358 <VGA_box+0x6c>
        {
            pixel_ptr = FPGA_ONCHIP_BASE + (row << 10) + (col << 1);
     31c:	e51b3008 	ldr	r3, [r11, #-8]
     320:	e1a03503 	lsl	r3, r3, #10
     324:	e1a02003 	mov	r2, r3
     328:	e51b300c 	ldr	r3, [r11, #-12]
     32c:	e1a03083 	lsl	r3, r3, #1
     330:	e0823003 	add	r3, r2, r3
     334:	e2833332 	add	r3, r3, #-939524096	; 0xc8000000
     338:	e50b3010 	str	r3, [r11, #-16]
            *(short *)pixel_ptr = coordinates->color;      // compute halfword address, set pixel
     33c:	e51b3010 	ldr	r3, [r11, #-16]
     340:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     344:	e1d221b0 	ldrh	r2, [r2, #16]
     348:	e1c320b0 	strh	r2, [r3]
    int pixel_ptr, row, col;

    /* assume that the box coordinates are valid */
    for (row = coordinates->y1; row <= coordinates->y2; row++)
    {
        for (col = coordinates->x1; col <= coordinates->x2; ++col)
     34c:	e51b300c 	ldr	r3, [r11, #-12]
     350:	e2833001 	add	r3, r3, #1
     354:	e50b300c 	str	r3, [r11, #-12]
     358:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     35c:	e5932004 	ldr	r2, [r3, #4]
     360:	e51b300c 	ldr	r3, [r11, #-12]
     364:	e1520003 	cmp	r2, r3
     368:	aaffffeb 	bge	31c <VGA_box+0x30>
void VGA_box(struct Coordinates* coordinates)
{
    int pixel_ptr, row, col;

    /* assume that the box coordinates are valid */
    for (row = coordinates->y1; row <= coordinates->y2; row++)
     36c:	e51b3008 	ldr	r3, [r11, #-8]
     370:	e2833001 	add	r3, r3, #1
     374:	e50b3008 	str	r3, [r11, #-8]
     378:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     37c:	e593200c 	ldr	r2, [r3, #12]
     380:	e51b3008 	ldr	r3, [r11, #-8]
     384:	e1520003 	cmp	r2, r3
     388:	aaffffdf 	bge	30c <VGA_box+0x20>
        {
            pixel_ptr = FPGA_ONCHIP_BASE + (row << 10) + (col << 1);
            *(short *)pixel_ptr = coordinates->color;      // compute halfword address, set pixel
        }
    }
}
     38c:	e28bd000 	add	sp, r11, #0
     390:	e8bd0800 	ldmfd	sp!, {r11}
     394:	e12fff1e 	bx	lr

00000398 <main>:

/***************************************************************************************************
Program Start:
***************************************************************************************************/
int main(void)
{
     398:	e92d4800 	push	{r11, lr}
     39c:	e28db004 	add	r11, sp, #4
     3a0:	e24dd088 	sub	sp, sp, #136	; 0x88
    /************************************************
    * Interrupts:
    ************************************************/
    disable_A9_interrupts ();       // disable interrupts in the A9 processor
     3a4:	eb0001ed 	bl	b60 <disable_A9_interrupts>
    set_A9_IRQ_stack ();            // initialize the stack pointer for IRQ mode
     3a8:	eb0001f6 	bl	b88 <set_A9_IRQ_stack>
    config_GIC ();                  // configure the general interrupt controller
     3ac:	eb000211 	bl	bf8 <config_GIC>
    ConfigINTs();                   // configure pushbutton KEYs to generate interrupts
     3b0:	eb000259 	bl	d1c <ConfigINTs>
    enable_A9_interrupts ();        // enable interrupts in the A9 processor
     3b4:	eb000205 	bl	bd0 <enable_A9_interrupts>

    /************************************************
    * Background:
    ************************************************/
    struct Coordinates background;
    background.x1 = 0;
     3b8:	e3a03000 	mov	r3, #0
     3bc:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
    background.x2 = 319;
     3c0:	e300313f 	movw	r3, #319	; 0x13f
     3c4:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
    background.y1 = 0;
     3c8:	e3a03000 	mov	r3, #0
     3cc:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
    background.y2 = 239;
     3d0:	e3a030ef 	mov	r3, #239	; 0xef
     3d4:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
    background.color = 0b1111100000000000;     
     3d8:	e3a03b3e 	mov	r3, #63488	; 0xf800
     3dc:	e14b32b0 	strh	r3, [r11, #-32]	; 0xffffffe0
                    // 11111 000000 00000 Red
    VGA_box(&background);  // fill the screen with red
     3e0:	e24b3030 	sub	r3, r11, #48	; 0x30
     3e4:	e1a00003 	mov	r0, r3
     3e8:	ebffffbf 	bl	2ec <VGA_box>

    /************************************************
    * White edge
    ************************************************/
    struct Coordinates whiteEdge;
    whiteEdge.x1 = 59;
     3ec:	e3a0303b 	mov	r3, #59	; 0x3b
     3f0:	e50b3044 	str	r3, [r11, #-68]	; 0xffffffbc
    whiteEdge.x2 = 261;
     3f4:	e3003105 	movw	r3, #261	; 0x105
     3f8:	e50b3040 	str	r3, [r11, #-64]	; 0xffffffc0
    whiteEdge.y1 = 111;
     3fc:	e3a0306f 	mov	r3, #111	; 0x6f
     400:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4
    whiteEdge.y2 = 128;
     404:	e3a03080 	mov	r3, #128	; 0x80
     408:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
    whiteEdge.color = 0b1111111111111111;     
     40c:	e3e03000 	mvn	r3, #0
     410:	e14b33b4 	strh	r3, [r11, #-52]	; 0xffffffcc
                    // 11111 000000 00000 Red
    VGA_box(&whiteEdge);  // white border
     414:	e24b3044 	sub	r3, r11, #68	; 0x44
     418:	e1a00003 	mov	r0, r3
     41c:	ebffffb2 	bl	2ec <VGA_box>

    /************************************************
    * Blue Bar:
    ************************************************/
    struct Coordinates loadBar;
    loadBar.x1 = 60;
     420:	e3a0303c 	mov	r3, #60	; 0x3c
     424:	e50b3058 	str	r3, [r11, #-88]	; 0xffffffa8
    loadBar.x2 = 260;
     428:	e3a03f41 	mov	r3, #260	; 0x104
     42c:	e50b3054 	str	r3, [r11, #-84]	; 0xffffffac
    loadBar.y1 = 112;
     430:	e3a03070 	mov	r3, #112	; 0x70
     434:	e50b3050 	str	r3, [r11, #-80]	; 0xffffffb0
    loadBar.y2 = 127;
     438:	e3a0307f 	mov	r3, #127	; 0x7f
     43c:	e50b304c 	str	r3, [r11, #-76]	; 0xffffffb4
    loadBar.color = 0x187F; // Blue
     440:	e301387f 	movw	r3, #6271	; 0x187f
     444:	e14b34b8 	strh	r3, [r11, #-72]	; 0xffffffb8

    VGA_box(&loadBar);
     448:	e24b3058 	sub	r3, r11, #88	; 0x58
     44c:	e1a00003 	mov	r0, r3
     450:	ebffffa5 	bl	2ec <VGA_box>

    /************************************************
    * Characters:
    ************************************************/
    struct CoordinatesChar percentString;
    percentString.x = 35;
     454:	e3a03023 	mov	r3, #35	; 0x23
     458:	e50b3074 	str	r3, [r11, #-116]	; 0xffffff8c
    percentString.y = 25;
     45c:	e3a03019 	mov	r3, #25
     460:	e50b3070 	str	r3, [r11, #-112]	; 0xffffff90

    percentString.string[0] = 'X';
     464:	e3a03058 	mov	r3, #88	; 0x58
     468:	e54b306c 	strb	r3, [r11, #-108]	; 0xffffff94
    percentString.string[1] = 'X';
     46c:	e3a03058 	mov	r3, #88	; 0x58
     470:	e54b306b 	strb	r3, [r11, #-107]	; 0xffffff95
    percentString.string[2] = 'X';
     474:	e3a03058 	mov	r3, #88	; 0x58
     478:	e54b306a 	strb	r3, [r11, #-106]	; 0xffffff96
    percentString.string[3] = '.';
     47c:	e3a0302e 	mov	r3, #46	; 0x2e
     480:	e54b3069 	strb	r3, [r11, #-105]	; 0xffffff97
    percentString.string[4] = 'X';
     484:	e3a03058 	mov	r3, #88	; 0x58
     488:	e54b3068 	strb	r3, [r11, #-104]	; 0xffffff98
    percentString.string[5] = '%';
     48c:	e3a03025 	mov	r3, #37	; 0x25
     490:	e54b3067 	strb	r3, [r11, #-103]	; 0xffffff99
    percentString.string[6] = '\0';
     494:	e3a03000 	mov	r3, #0
     498:	e54b3066 	strb	r3, [r11, #-102]	; 0xffffff9a

    VGA_text(&percentString);
     49c:	e24b3074 	sub	r3, r11, #116	; 0x74
     4a0:	e1a00003 	mov	r0, r3
     4a4:	ebffff6c 	bl	25c <VGA_text>

    /************************************************
    * Local Variables:
    ************************************************/
    double percentFraction = 0.0;
     4a8:	e3a02000 	mov	r2, #0
     4ac:	e3a03000 	mov	r3, #0
     4b0:	e14b21f4 	strd	r2, [r11, #-20]	; 0xffffffec
    int percentInt = 0;
     4b4:	e3a03000 	mov	r3, #0
     4b8:	e50b3008 	str	r3, [r11, #-8]

    volatile int* switchPtr = (int*)(SW_BASE);
     4bc:	e3a03040 	mov	r3, #64	; 0x40
     4c0:	e34f3f20 	movt	r3, #65312	; 0xff20
     4c4:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
    int currentSwitch = (*switchPtr) & 0x3FF;
     4c8:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     4cc:	e5933000 	ldr	r3, [r3]
     4d0:	e1a03b03 	lsl	r3, r3, #22
     4d4:	e1a03b23 	lsr	r3, r3, #22
     4d8:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
     4dc:	ea000000 	b	4e4 <main+0x14c>
            put_jtag('\n');
            

            BUTTON_FLAG = 0;
        }
    }
     4e0:	e1a00000 	nop			; (mov r0, r0)
    struct Digits switchValue;
    struct Digits loadBarSeparated;

    while(1)
    {
        if(TIMER_FLAG)
     4e4:	e3023705 	movw	r3, #9989	; 0x2705
     4e8:	e3403000 	movt	r3, #0
     4ec:	e5d33000 	ldrb	r3, [r3]
     4f0:	e3530000 	cmp	r3, #0
     4f4:	0a000095 	beq	750 <main+0x3b8>
        {
            /************************************************
            * White Background
            ************************************************/
            VGA_box(&whiteEdge);
     4f8:	e24b3044 	sub	r3, r11, #68	; 0x44
     4fc:	e1a00003 	mov	r0, r3
     500:	ebffff79 	bl	2ec <VGA_box>

            /************************************************
            Percent Calculations
            ************************************************/
            percentFraction = ( (*switchPtr & 0x03FF) / (float)(1023) ) * 100 + 0.05;
     504:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     508:	e5933000 	ldr	r3, [r3]
     50c:	e1a03b03 	lsl	r3, r3, #22
     510:	e1a03b23 	lsr	r3, r3, #22
     514:	e1a00003 	mov	r0, r3
     518:	eb00054b 	bl	1a4c <__aeabi_i2f>
     51c:	e1a03000 	mov	r3, r0
     520:	e1a00003 	mov	r0, r3
     524:	e3a01903 	mov	r1, #49152	; 0xc000
     528:	e344147f 	movt	r1, #17535	; 0x447f
     52c:	eb0005e3 	bl	1cc0 <__aeabi_fdiv>
     530:	e1a03000 	mov	r3, r0
     534:	e1a00003 	mov	r0, r3
     538:	e3a01000 	mov	r1, #0
     53c:	e34412c8 	movt	r1, #17096	; 0x42c8
     540:	eb000578 	bl	1b28 <__aeabi_fmul>
     544:	e1a03000 	mov	r3, r0
     548:	e1a00003 	mov	r0, r3
     54c:	eb00035f 	bl	12d0 <__aeabi_f2d>
     550:	e1a02000 	mov	r2, r0
     554:	e1a03001 	mov	r3, r1
     558:	e1a00002 	mov	r0, r2
     55c:	e1a01003 	mov	r1, r3
     560:	e309299a 	movw	r2, #39322	; 0x999a
     564:	e3492999 	movt	r2, #39321	; 0x9999
     568:	e3093999 	movw	r3, #39321	; 0x9999
     56c:	e3433fa9 	movt	r3, #16297	; 0x3fa9
     570:	eb00027f 	bl	f74 <__adddf3>
     574:	e1a02000 	mov	r2, r0
     578:	e1a03001 	mov	r3, r1
     57c:	e14b21f4 	strd	r2, [r11, #-20]	; 0xffffffec
            percentInt = percentFraction; // cast to int
     580:	e14b01d4 	ldrd	r0, [r11, #-20]	; 0xffffffec
     584:	eb0004a5 	bl	1820 <__aeabi_d2iz>
     588:	e1a03000 	mov	r3, r0
     58c:	e50b3008 	str	r3, [r11, #-8]

            /************************************************
            * Find loadBar.x2
            * Print the new loadBar box
            ************************************************/
            loadBar.x2 = (percentFraction * 2) + 60; //260 represents a full bar
     590:	e14b21d4 	ldrd	r2, [r11, #-20]	; 0xffffffec
     594:	e1a00002 	mov	r0, r2
     598:	e1a01003 	mov	r1, r3
     59c:	eb000274 	bl	f74 <__adddf3>
     5a0:	e1a02000 	mov	r2, r0
     5a4:	e1a03001 	mov	r3, r1
     5a8:	e1a00002 	mov	r0, r2
     5ac:	e1a01003 	mov	r1, r3
     5b0:	e3a02000 	mov	r2, #0
     5b4:	e3a03000 	mov	r3, #0
     5b8:	e344304e 	movt	r3, #16462	; 0x404e
     5bc:	eb00026c 	bl	f74 <__adddf3>
     5c0:	e1a02000 	mov	r2, r0
     5c4:	e1a03001 	mov	r3, r1
     5c8:	e1a00002 	mov	r0, r2
     5cc:	e1a01003 	mov	r1, r3
     5d0:	eb000492 	bl	1820 <__aeabi_d2iz>
     5d4:	e1a03000 	mov	r3, r0
     5d8:	e50b3054 	str	r3, [r11, #-84]	; 0xffffffac
            VGA_box(&loadBar);
     5dc:	e24b3058 	sub	r3, r11, #88	; 0x58
     5e0:	e1a00003 	mov	r0, r3
     5e4:	ebffff40 	bl	2ec <VGA_box>

            /************************************************
            * Remove integer part from the fraction
            ************************************************/
            percentFraction = percentFraction - percentInt;
     5e8:	e51b0008 	ldr	r0, [r11, #-8]
     5ec:	eb00032d 	bl	12a8 <__aeabi_i2d>
     5f0:	e1a02000 	mov	r2, r0
     5f4:	e1a03001 	mov	r3, r1
     5f8:	e14b01d4 	ldrd	r0, [r11, #-20]	; 0xffffffec
     5fc:	eb00025b 	bl	f70 <__aeabi_dsub>
     600:	e1a02000 	mov	r2, r0
     604:	e1a03001 	mov	r3, r1
     608:	e14b21f4 	strd	r2, [r11, #-20]	; 0xffffffec

            /************************************************
            * Text management
            ************************************************/
            percentSeparated = DigitSeparator(percentInt);
     60c:	e51b0008 	ldr	r0, [r11, #-8]
     610:	eb0001eb 	bl	dc4 <DigitSeparator>
     614:	e54b008c 	strb	r0, [r11, #-140]	; 0xffffff74
     618:	e7e73450 	ubfx	r3, r0, #8, #8
     61c:	e54b308b 	strb	r3, [r11, #-139]	; 0xffffff75
     620:	e7e73850 	ubfx	r3, r0, #16, #8
     624:	e54b308a 	strb	r3, [r11, #-138]	; 0xffffff76
     628:	e7e73c50 	ubfx	r3, r0, #24, #8
     62c:	e54b3089 	strb	r3, [r11, #-137]	; 0xffffff77
     630:	e51b308c 	ldr	r3, [r11, #-140]	; 0xffffff74
     634:	e50b3078 	str	r3, [r11, #-120]	; 0xffffff88

            if(percentSeparated.hundreds == 1)
     638:	e55b3077 	ldrb	r3, [r11, #-119]	; 0xffffff89
     63c:	e3530001 	cmp	r3, #1
     640:	1a00001f 	bne	6c4 <main+0x32c>
            {
                percentString.string[0] = GetDigit(percentSeparated.hundreds);
     644:	e55b3077 	ldrb	r3, [r11, #-119]	; 0xffffff89
     648:	e1a00003 	mov	r0, r3
     64c:	eb0000e8 	bl	9f4 <GetDigit>
     650:	e1a03000 	mov	r3, r0
     654:	e54b306c 	strb	r3, [r11, #-108]	; 0xffffff94
                percentString.string[1] = GetDigit(percentSeparated.tens);
     658:	e55b3076 	ldrb	r3, [r11, #-118]	; 0xffffff8a
     65c:	e1a00003 	mov	r0, r3
     660:	eb0000e3 	bl	9f4 <GetDigit>
     664:	e1a03000 	mov	r3, r0
     668:	e54b306b 	strb	r3, [r11, #-107]	; 0xffffff95
                percentString.string[2] = GetDigit(percentSeparated.ones);
     66c:	e55b3075 	ldrb	r3, [r11, #-117]	; 0xffffff8b
     670:	e1a00003 	mov	r0, r3
     674:	eb0000de 	bl	9f4 <GetDigit>
     678:	e1a03000 	mov	r3, r0
     67c:	e54b306a 	strb	r3, [r11, #-106]	; 0xffffff96
                percentString.string[4] = GetDigit( (int)(percentFraction * 10) );
     680:	e14b01d4 	ldrd	r0, [r11, #-20]	; 0xffffffec
     684:	e3a02000 	mov	r2, #0
     688:	e3a03000 	mov	r3, #0
     68c:	e3443024 	movt	r3, #16420	; 0x4024
     690:	eb00033b 	bl	1384 <__aeabi_dmul>
     694:	e1a02000 	mov	r2, r0
     698:	e1a03001 	mov	r3, r1
     69c:	e1a00002 	mov	r0, r2
     6a0:	e1a01003 	mov	r1, r3
     6a4:	eb00045d 	bl	1820 <__aeabi_d2iz>
     6a8:	e1a03000 	mov	r3, r0
     6ac:	e6ef3073 	uxtb	r3, r3
     6b0:	e1a00003 	mov	r0, r3
     6b4:	eb0000ce 	bl	9f4 <GetDigit>
     6b8:	e1a03000 	mov	r3, r0
     6bc:	e54b3068 	strb	r3, [r11, #-104]	; 0xffffff98
     6c0:	ea00001b 	b	734 <main+0x39c>
            }
            else
            {
                percentString.string[0] = ' ';
     6c4:	e3a03020 	mov	r3, #32
     6c8:	e54b306c 	strb	r3, [r11, #-108]	; 0xffffff94
                percentString.string[1] = GetDigit(percentSeparated.tens);
     6cc:	e55b3076 	ldrb	r3, [r11, #-118]	; 0xffffff8a
     6d0:	e1a00003 	mov	r0, r3
     6d4:	eb0000c6 	bl	9f4 <GetDigit>
     6d8:	e1a03000 	mov	r3, r0
     6dc:	e54b306b 	strb	r3, [r11, #-107]	; 0xffffff95
                percentString.string[2] = GetDigit(percentSeparated.ones);
     6e0:	e55b3075 	ldrb	r3, [r11, #-117]	; 0xffffff8b
     6e4:	e1a00003 	mov	r0, r3
     6e8:	eb0000c1 	bl	9f4 <GetDigit>
     6ec:	e1a03000 	mov	r3, r0
     6f0:	e54b306a 	strb	r3, [r11, #-106]	; 0xffffff96
                percentString.string[4] = GetDigit( (int)(percentFraction * 10) );
     6f4:	e14b01d4 	ldrd	r0, [r11, #-20]	; 0xffffffec
     6f8:	e3a02000 	mov	r2, #0
     6fc:	e3a03000 	mov	r3, #0
     700:	e3443024 	movt	r3, #16420	; 0x4024
     704:	eb00031e 	bl	1384 <__aeabi_dmul>
     708:	e1a02000 	mov	r2, r0
     70c:	e1a03001 	mov	r3, r1
     710:	e1a00002 	mov	r0, r2
     714:	e1a01003 	mov	r1, r3
     718:	eb000440 	bl	1820 <__aeabi_d2iz>
     71c:	e1a03000 	mov	r3, r0
     720:	e6ef3073 	uxtb	r3, r3
     724:	e1a00003 	mov	r0, r3
     728:	eb0000b1 	bl	9f4 <GetDigit>
     72c:	e1a03000 	mov	r3, r0
     730:	e54b3068 	strb	r3, [r11, #-104]	; 0xffffff98
            }

            VGA_text(&percentString);
     734:	e24b3074 	sub	r3, r11, #116	; 0x74
     738:	e1a00003 	mov	r0, r3
     73c:	ebfffec6 	bl	25c <VGA_text>

            /************************************************
            * Reset global Timer flag
            ************************************************/
            TIMER_FLAG = 0;
     740:	e3023705 	movw	r3, #9989	; 0x2705
     744:	e3403000 	movt	r3, #0
     748:	e3a02000 	mov	r2, #0
     74c:	e5c32000 	strb	r2, [r3]
        }
        
        if(BUTTON_FLAG)
     750:	e3023704 	movw	r3, #9988	; 0x2704
     754:	e3403000 	movt	r3, #0
     758:	e5d33000 	ldrb	r3, [r3]
     75c:	e3530000 	cmp	r3, #0
     760:	0affff5e 	beq	4e0 <main+0x148>
        {
            
            // Test Switch values
            switchValue = DigitSeparator( (*switchPtr) & 0x03FF );
     764:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     768:	e5933000 	ldr	r3, [r3]
     76c:	e1a03b03 	lsl	r3, r3, #22
     770:	e1a03b23 	lsr	r3, r3, #22
     774:	e1a00003 	mov	r0, r3
     778:	eb000191 	bl	dc4 <DigitSeparator>
     77c:	e54b008c 	strb	r0, [r11, #-140]	; 0xffffff74
     780:	e7e73450 	ubfx	r3, r0, #8, #8
     784:	e54b308b 	strb	r3, [r11, #-139]	; 0xffffff75
     788:	e7e73850 	ubfx	r3, r0, #16, #8
     78c:	e54b308a 	strb	r3, [r11, #-138]	; 0xffffff76
     790:	e7e73c50 	ubfx	r3, r0, #24, #8
     794:	e54b3089 	strb	r3, [r11, #-137]	; 0xffffff77
     798:	e51b308c 	ldr	r3, [r11, #-140]	; 0xffffff74
     79c:	e50b307c 	str	r3, [r11, #-124]	; 0xffffff84
            put_jtag(GetDigit(switchValue.thousands));
     7a0:	e55b307c 	ldrb	r3, [r11, #-124]	; 0xffffff84
     7a4:	e1a00003 	mov	r0, r3
     7a8:	eb000091 	bl	9f4 <GetDigit>
     7ac:	e1a03000 	mov	r3, r0
     7b0:	e1a00003 	mov	r0, r3
     7b4:	eb000063 	bl	948 <put_jtag>
            put_jtag(GetDigit(switchValue.hundreds));
     7b8:	e55b307b 	ldrb	r3, [r11, #-123]	; 0xffffff85
     7bc:	e1a00003 	mov	r0, r3
     7c0:	eb00008b 	bl	9f4 <GetDigit>
     7c4:	e1a03000 	mov	r3, r0
     7c8:	e1a00003 	mov	r0, r3
     7cc:	eb00005d 	bl	948 <put_jtag>
            put_jtag(GetDigit(switchValue.tens));
     7d0:	e55b307a 	ldrb	r3, [r11, #-122]	; 0xffffff86
     7d4:	e1a00003 	mov	r0, r3
     7d8:	eb000085 	bl	9f4 <GetDigit>
     7dc:	e1a03000 	mov	r3, r0
     7e0:	e1a00003 	mov	r0, r3
     7e4:	eb000057 	bl	948 <put_jtag>
            put_jtag(GetDigit(switchValue.ones));
     7e8:	e55b3079 	ldrb	r3, [r11, #-121]	; 0xffffff87
     7ec:	e1a00003 	mov	r0, r3
     7f0:	eb00007f 	bl	9f4 <GetDigit>
     7f4:	e1a03000 	mov	r3, r0
     7f8:	e1a00003 	mov	r0, r3
     7fc:	eb000051 	bl	948 <put_jtag>
            put_jtag('\n');
     800:	e3a0000a 	mov	r0, #10
     804:	eb00004f 	bl	948 <put_jtag>

            // Percent values
            percentSeparated = DigitSeparator(percentInt);
     808:	e51b0008 	ldr	r0, [r11, #-8]
     80c:	eb00016c 	bl	dc4 <DigitSeparator>
     810:	e54b008c 	strb	r0, [r11, #-140]	; 0xffffff74
     814:	e7e73450 	ubfx	r3, r0, #8, #8
     818:	e54b308b 	strb	r3, [r11, #-139]	; 0xffffff75
     81c:	e7e73850 	ubfx	r3, r0, #16, #8
     820:	e54b308a 	strb	r3, [r11, #-138]	; 0xffffff76
     824:	e7e73c50 	ubfx	r3, r0, #24, #8
     828:	e54b3089 	strb	r3, [r11, #-137]	; 0xffffff77
     82c:	e51b308c 	ldr	r3, [r11, #-140]	; 0xffffff74
     830:	e50b3078 	str	r3, [r11, #-120]	; 0xffffff88
            put_jtag(GetDigit(percentSeparated.thousands));
     834:	e55b3078 	ldrb	r3, [r11, #-120]	; 0xffffff88
     838:	e1a00003 	mov	r0, r3
     83c:	eb00006c 	bl	9f4 <GetDigit>
     840:	e1a03000 	mov	r3, r0
     844:	e1a00003 	mov	r0, r3
     848:	eb00003e 	bl	948 <put_jtag>
            put_jtag(GetDigit(percentSeparated.hundreds));
     84c:	e55b3077 	ldrb	r3, [r11, #-119]	; 0xffffff89
     850:	e1a00003 	mov	r0, r3
     854:	eb000066 	bl	9f4 <GetDigit>
     858:	e1a03000 	mov	r3, r0
     85c:	e1a00003 	mov	r0, r3
     860:	eb000038 	bl	948 <put_jtag>
            put_jtag(GetDigit(percentSeparated.tens));
     864:	e55b3076 	ldrb	r3, [r11, #-118]	; 0xffffff8a
     868:	e1a00003 	mov	r0, r3
     86c:	eb000060 	bl	9f4 <GetDigit>
     870:	e1a03000 	mov	r3, r0
     874:	e1a00003 	mov	r0, r3
     878:	eb000032 	bl	948 <put_jtag>
            put_jtag(GetDigit(percentSeparated.ones));
     87c:	e55b3075 	ldrb	r3, [r11, #-117]	; 0xffffff8b
     880:	e1a00003 	mov	r0, r3
     884:	eb00005a 	bl	9f4 <GetDigit>
     888:	e1a03000 	mov	r3, r0
     88c:	e1a00003 	mov	r0, r3
     890:	eb00002c 	bl	948 <put_jtag>
            put_jtag('\n');
     894:	e3a0000a 	mov	r0, #10
     898:	eb00002a 	bl	948 <put_jtag>

            // Loadbar values
            loadBarSeparated = DigitSeparator(loadBar.x2);
     89c:	e51b3054 	ldr	r3, [r11, #-84]	; 0xffffffac
     8a0:	e1a00003 	mov	r0, r3
     8a4:	eb000146 	bl	dc4 <DigitSeparator>
     8a8:	e54b008c 	strb	r0, [r11, #-140]	; 0xffffff74
     8ac:	e7e73450 	ubfx	r3, r0, #8, #8
     8b0:	e54b308b 	strb	r3, [r11, #-139]	; 0xffffff75
     8b4:	e7e73850 	ubfx	r3, r0, #16, #8
     8b8:	e54b308a 	strb	r3, [r11, #-138]	; 0xffffff76
     8bc:	e7e73c50 	ubfx	r3, r0, #24, #8
     8c0:	e54b3089 	strb	r3, [r11, #-137]	; 0xffffff77
     8c4:	e51b308c 	ldr	r3, [r11, #-140]	; 0xffffff74
     8c8:	e50b3080 	str	r3, [r11, #-128]	; 0xffffff80
            put_jtag(GetDigit(loadBarSeparated.thousands));
     8cc:	e55b3080 	ldrb	r3, [r11, #-128]	; 0xffffff80
     8d0:	e1a00003 	mov	r0, r3
     8d4:	eb000046 	bl	9f4 <GetDigit>
     8d8:	e1a03000 	mov	r3, r0
     8dc:	e1a00003 	mov	r0, r3
     8e0:	eb000018 	bl	948 <put_jtag>
            put_jtag(GetDigit(loadBarSeparated.hundreds));
     8e4:	e55b307f 	ldrb	r3, [r11, #-127]	; 0xffffff81
     8e8:	e1a00003 	mov	r0, r3
     8ec:	eb000040 	bl	9f4 <GetDigit>
     8f0:	e1a03000 	mov	r3, r0
     8f4:	e1a00003 	mov	r0, r3
     8f8:	eb000012 	bl	948 <put_jtag>
            put_jtag(GetDigit(loadBarSeparated.tens));
     8fc:	e55b307e 	ldrb	r3, [r11, #-126]	; 0xffffff82
     900:	e1a00003 	mov	r0, r3
     904:	eb00003a 	bl	9f4 <GetDigit>
     908:	e1a03000 	mov	r3, r0
     90c:	e1a00003 	mov	r0, r3
     910:	eb00000c 	bl	948 <put_jtag>
            put_jtag(GetDigit(loadBarSeparated.ones));
     914:	e55b307d 	ldrb	r3, [r11, #-125]	; 0xffffff83
     918:	e1a00003 	mov	r0, r3
     91c:	eb000034 	bl	9f4 <GetDigit>
     920:	e1a03000 	mov	r3, r0
     924:	e1a00003 	mov	r0, r3
     928:	eb000006 	bl	948 <put_jtag>
            put_jtag('\n');
     92c:	e3a0000a 	mov	r0, #10
     930:	eb000004 	bl	948 <put_jtag>
            

            BUTTON_FLAG = 0;
     934:	e3023704 	movw	r3, #9988	; 0x2704
     938:	e3403000 	movt	r3, #0
     93c:	e3a02000 	mov	r2, #0
     940:	e5c32000 	strb	r2, [r3]
        }
    }
     944:	eafffee5 	b	4e0 <main+0x148>

00000948 <put_jtag>:
#include "JTAG_UART.h"
#include "Constants.h"


void put_jtag( char c )
{
     948:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     94c:	e28db000 	add	r11, sp, #0
     950:	e24dd014 	sub	sp, sp, #20
     954:	e1a03000 	mov	r3, r0
     958:	e54b300d 	strb	r3, [r11, #-13]
    volatile int * JTAG_UART_ptr    = (int *) JTAG_UART_BASE;   // JTAG UART address
     95c:	e3a03a01 	mov	r3, #4096	; 0x1000
     960:	e34f3f20 	movt	r3, #65312	; 0xff20
     964:	e50b3008 	str	r3, [r11, #-8]

    int control;
    control = *(JTAG_UART_ptr + 1);     // read the JTAG_UART control register
     968:	e51b3008 	ldr	r3, [r11, #-8]
     96c:	e5933004 	ldr	r3, [r3, #4]
     970:	e50b300c 	str	r3, [r11, #-12]
    if (control & 0xFFFF0000)               // if space, echo character, else ignore 
     974:	e51b300c 	ldr	r3, [r11, #-12]
     978:	e1a03823 	lsr	r3, r3, #16
     97c:	e1a03803 	lsl	r3, r3, #16
     980:	e3530000 	cmp	r3, #0
     984:	0a000002 	beq	994 <put_jtag+0x4c>
        *(JTAG_UART_ptr) = c;
     988:	e55b200d 	ldrb	r2, [r11, #-13]
     98c:	e51b3008 	ldr	r3, [r11, #-8]
     990:	e5832000 	str	r2, [r3]
}
     994:	e28bd000 	add	sp, r11, #0
     998:	e8bd0800 	ldmfd	sp!, {r11}
     99c:	e12fff1e 	bx	lr

000009a0 <get_jtag>:

char get_jtag( void )
{
     9a0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     9a4:	e28db000 	add	r11, sp, #0
     9a8:	e24dd00c 	sub	sp, sp, #12
    volatile int * JTAG_UART_ptr    = (int *) JTAG_UART_BASE;   // JTAG UART address
     9ac:	e3a03a01 	mov	r3, #4096	; 0x1000
     9b0:	e34f3f20 	movt	r3, #65312	; 0xff20
     9b4:	e50b3008 	str	r3, [r11, #-8]

    int data;
    data = *(JTAG_UART_ptr);                // read the JTAG_UART data register
     9b8:	e51b3008 	ldr	r3, [r11, #-8]
     9bc:	e5933000 	ldr	r3, [r3]
     9c0:	e50b300c 	str	r3, [r11, #-12]
    if (data & 0x00008000)                  // check RVALID to see if there is new data
     9c4:	e51b300c 	ldr	r3, [r11, #-12]
     9c8:	e2033902 	and	r3, r3, #32768	; 0x8000
     9cc:	e3530000 	cmp	r3, #0
     9d0:	0a000002 	beq	9e0 <get_jtag+0x40>
        return ((char) data & 0xFF);
     9d4:	e51b300c 	ldr	r3, [r11, #-12]
     9d8:	e6ef3073 	uxtb	r3, r3
     9dc:	ea000000 	b	9e4 <get_jtag+0x44>
    else
        return ('\0');
     9e0:	e3a03000 	mov	r3, #0
}
     9e4:	e1a00003 	mov	r0, r3
     9e8:	e28bd000 	add	sp, r11, #0
     9ec:	e8bd0800 	ldmfd	sp!, {r11}
     9f0:	e12fff1e 	bx	lr

000009f4 <GetDigit>:

char GetDigit(unsigned char value)
{
     9f4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     9f8:	e28db000 	add	r11, sp, #0
     9fc:	e24dd01c 	sub	sp, sp, #28
     a00:	e1a03000 	mov	r3, r0
     a04:	e54b3015 	strb	r3, [r11, #-21]	; 0xffffffeb
    char digits[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
     a08:	e3023240 	movw	r3, #8768	; 0x2240
     a0c:	e3403000 	movt	r3, #0
     a10:	e24bc014 	sub	r12, r11, #20
     a14:	e5930000 	ldr	r0, [r3]
     a18:	e5931004 	ldr	r1, [r3, #4]
     a1c:	e5932008 	ldr	r2, [r3, #8]
     a20:	e593300c 	ldr	r3, [r3, #12]
     a24:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}

    return digits[value];
     a28:	e55b2015 	ldrb	r2, [r11, #-21]	; 0xffffffeb
     a2c:	e3e0300f 	mvn	r3, #15
     a30:	e24b1004 	sub	r1, r11, #4
     a34:	e0812002 	add	r2, r1, r2
     a38:	e0823003 	add	r3, r2, r3
     a3c:	e5d33000 	ldrb	r3, [r3]
}
     a40:	e1a00003 	mov	r0, r3
     a44:	e28bd000 	add	sp, r11, #0
     a48:	e8bd0800 	ldmfd	sp!, {r11}
     a4c:	e12fff1e 	bx	lr

00000a50 <ButtonISR>:
/***************************************************************************************************
Function Definitions:
***************************************************************************************************/

void ButtonISR(void)
{
     a50:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     a54:	e28db000 	add	r11, sp, #0
     a58:	e24dd00c 	sub	sp, sp, #12
    volatile int * KEY_ptr = (int *) 0xFF200050;  // pushbutton KEY base address
     a5c:	e3a03050 	mov	r3, #80	; 0x50
     a60:	e34f3f20 	movt	r3, #65312	; 0xff20
     a64:	e50b3008 	str	r3, [r11, #-8]
    int press;

    // Global Variable:
    BUTTON_FLAG = 1;
     a68:	e3023704 	movw	r3, #9988	; 0x2704
     a6c:	e3403000 	movt	r3, #0
     a70:	e3a02001 	mov	r2, #1
     a74:	e5c32000 	strb	r2, [r3]

    press = *(KEY_ptr + 3); // read the pushbutton interrupt register
     a78:	e51b3008 	ldr	r3, [r11, #-8]
     a7c:	e593300c 	ldr	r3, [r3, #12]
     a80:	e50b300c 	str	r3, [r11, #-12]
    *(KEY_ptr + 3) = press; // clear the interrupt
     a84:	e51b3008 	ldr	r3, [r11, #-8]
     a88:	e283300c 	add	r3, r3, #12
     a8c:	e51b200c 	ldr	r2, [r11, #-12]
     a90:	e5832000 	str	r2, [r3]
     a94:	e28bd000 	add	sp, r11, #0
     a98:	e8bd0800 	ldmfd	sp!, {r11}
     a9c:	e12fff1e 	bx	lr

00000aa0 <__cs3_isr_irq>:
Global Variables:
***************************************************************************************************/

// Define the IRQ exception handler
void __attribute__ ((interrupt)) __cs3_isr_irq (void)
{
     aa0:	e24ee004 	sub	lr, lr, #4
     aa4:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
     aa8:	e28db018 	add	r11, sp, #24
     aac:	e24dd00c 	sub	sp, sp, #12
    // Read the ICCIAR from the CPU interface in the GIC
    int address;
    int interrupt_ID;
    
    address = MPCORE_GIC_CPUIF + ICCIAR;
     ab0:	e30c310c 	movw	r3, #49420	; 0xc10c
     ab4:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     ab8:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
    interrupt_ID = *(int *)address;
     abc:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     ac0:	e5933000 	ldr	r3, [r3]
     ac4:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
   
    if (interrupt_ID == KEYS_IRQ)       // check if interrupt is from the KEYs
     ac8:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
     acc:	e3530049 	cmp	r3, #73	; 0x49
     ad0:	1a000001 	bne	adc <__cs3_isr_irq+0x3c>
        ButtonISR();
     ad4:	ebffffdd 	bl	a50 <ButtonISR>
     ad8:	ea000005 	b	af4 <__cs3_isr_irq+0x54>
    else if(interrupt_ID == MPCORE_PRIV_TIMER_IRQ)
     adc:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
     ae0:	e353001d 	cmp	r3, #29
     ae4:	1a000001 	bne	af0 <__cs3_isr_irq+0x50>
        TimerISR();
     ae8:	eb0000ac 	bl	da0 <TimerISR>
     aec:	ea000000 	b	af4 <__cs3_isr_irq+0x54>
    // if(interrupt_ID == PS2_IRQ)
        // PS2ISR();
    else
        while (1);                          // if unexpected, then stay here
     af0:	eafffffe 	b	af0 <__cs3_isr_irq+0x50>

    // Write to the End of Interrupt Register (ICCEOIR)
    address = MPCORE_GIC_CPUIF + ICCEOIR;
     af4:	e30c3110 	movw	r3, #49424	; 0xc110
     af8:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     afc:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
    *(int *)address = interrupt_ID;
     b00:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     b04:	e51b2024 	ldr	r2, [r11, #-36]	; 0xffffffdc
     b08:	e5832000 	str	r2, [r3]

    return;
     b0c:	e1a00000 	nop			; (mov r0, r0)
} 
     b10:	e24bd018 	sub	sp, r11, #24
     b14:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

00000b18 <__cs3_reset>:

// Define the remaining exception handlers
void __attribute__ ((interrupt)) __cs3_reset (void)
{
     b18:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     b1c:	e28db000 	add	r11, sp, #0
    while(1);
     b20:	eafffffe 	b	b20 <__cs3_reset+0x8>

00000b24 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void)
{
     b24:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     b28:	e28db000 	add	r11, sp, #0
    while(1);
     b2c:	eafffffe 	b	b2c <__cs3_isr_undef+0x8>

00000b30 <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void)
{
     b30:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     b34:	e28db000 	add	r11, sp, #0
    while(1);
     b38:	eafffffe 	b	b38 <__cs3_isr_swi+0x8>

00000b3c <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void)
{
     b3c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     b40:	e28db000 	add	r11, sp, #0
    while(1);
     b44:	eafffffe 	b	b44 <__cs3_isr_pabort+0x8>

00000b48 <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void)
{
     b48:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     b4c:	e28db000 	add	r11, sp, #0
    while(1);
     b50:	eafffffe 	b	b50 <__cs3_isr_dabort+0x8>

00000b54 <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void)
{
     b54:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     b58:	e28db000 	add	r11, sp, #0
    while(1);
     b5c:	eafffffe 	b	b5c <__cs3_isr_fiq+0x8>

00000b60 <disable_A9_interrupts>:
}

void disable_A9_interrupts(void)
{
     b60:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     b64:	e28db000 	add	r11, sp, #0
     b68:	e24dd00c 	sub	sp, sp, #12
    int status = 0b11010011;
     b6c:	e3a030d3 	mov	r3, #211	; 0xd3
     b70:	e50b3008 	str	r3, [r11, #-8]
    asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     b74:	e51b3008 	ldr	r3, [r11, #-8]
     b78:	e129f003 	msr	CPSR_fc, r3
}
     b7c:	e28bd000 	add	sp, r11, #0
     b80:	e8bd0800 	ldmfd	sp!, {r11}
     b84:	e12fff1e 	bx	lr

00000b88 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack(void)
{
     b88:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     b8c:	e28db000 	add	r11, sp, #0
     b90:	e24dd00c 	sub	sp, sp, #12
    int stack, mode;
    stack = A9_ONCHIP_END - 7;      // top of A9 onchip memory, aligned to 8 bytes
     b94:	e3e03007 	mvn	r3, #7
     b98:	e50b3008 	str	r3, [r11, #-8]
    /* change processor to IRQ mode with interrupts disabled */
    mode = INT_DISABLE | IRQ_MODE;
     b9c:	e3a030d2 	mov	r3, #210	; 0xd2
     ba0:	e50b300c 	str	r3, [r11, #-12]
    asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     ba4:	e51b300c 	ldr	r3, [r11, #-12]
     ba8:	e129f003 	msr	CPSR_fc, r3
    /* set banked stack pointer */
    asm("mov sp, %[ps]" : : [ps] "r" (stack));
     bac:	e51b3008 	ldr	r3, [r11, #-8]
     bb0:	e1a0d003 	mov	sp, r3

    /* go back to SVC mode before executing subroutine return! */
    mode = INT_DISABLE | SVC_MODE;
     bb4:	e3a030d3 	mov	r3, #211	; 0xd3
     bb8:	e50b300c 	str	r3, [r11, #-12]
    asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     bbc:	e51b300c 	ldr	r3, [r11, #-12]
     bc0:	e129f003 	msr	CPSR_fc, r3
}
     bc4:	e28bd000 	add	sp, r11, #0
     bc8:	e8bd0800 	ldmfd	sp!, {r11}
     bcc:	e12fff1e 	bx	lr

00000bd0 <enable_A9_interrupts>:

void enable_A9_interrupts(void)
{
     bd0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     bd4:	e28db000 	add	r11, sp, #0
     bd8:	e24dd00c 	sub	sp, sp, #12
    int status = SVC_MODE | INT_ENABLE;
     bdc:	e3a03053 	mov	r3, #83	; 0x53
     be0:	e50b3008 	str	r3, [r11, #-8]
    asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     be4:	e51b3008 	ldr	r3, [r11, #-8]
     be8:	e129f003 	msr	CPSR_fc, r3
}
     bec:	e28bd000 	add	sp, r11, #0
     bf0:	e8bd0800 	ldmfd	sp!, {r11}
     bf4:	e12fff1e 	bx	lr

00000bf8 <config_GIC>:

void config_GIC(void) // STEP 3 IN SECTION 3.1 OF USING THE ARM GENERIC INTERRUPT CONTROLLER
{
     bf8:	e92d4800 	push	{r11, lr}
     bfc:	e28db004 	add	r11, sp, #4
     c00:	e24dd008 	sub	sp, sp, #8
    int address;
    config_interrupt (KEYS_IRQ, CPU0);  // configure the FPGA KEYs interrupt
     c04:	e3a00049 	mov	r0, #73	; 0x49
     c08:	e3a01001 	mov	r1, #1
     c0c:	eb000016 	bl	c6c <config_interrupt>

    // Custom:
    config_interrupt(MPCORE_PRIV_TIMER_IRQ, CPU0); // Hopefully, this configures the timer interrupts.
     c10:	e3a0001d 	mov	r0, #29
     c14:	e3a01001 	mov	r1, #1
     c18:	eb000013 	bl	c6c <config_interrupt>
    // config_interrupt (PS2_IRQ, CPU0);               // PS2
    
    // Set Interrupt Priority Mask Register (ICCPMR). Enable interrupts of all priorities 
    address = MPCORE_GIC_CPUIF + ICCPMR;
     c1c:	e30c3104 	movw	r3, #49412	; 0xc104
     c20:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     c24:	e50b3008 	str	r3, [r11, #-8]
    *(int *) address = 0xFFFF;       
     c28:	e51b3008 	ldr	r3, [r11, #-8]
     c2c:	e30f2fff 	movw	r2, #65535	; 0xffff
     c30:	e5832000 	str	r2, [r3]

    // Set CPU Interface Control Register (ICCICR). Enable signaling of interrupts
    address = MPCORE_GIC_CPUIF + ICCICR;
     c34:	e3a03cc1 	mov	r3, #49408	; 0xc100
     c38:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     c3c:	e50b3008 	str	r3, [r11, #-8]
    *(int *) address = 1;       
     c40:	e51b3008 	ldr	r3, [r11, #-8]
     c44:	e3a02001 	mov	r2, #1
     c48:	e5832000 	str	r2, [r3]

    // Configure the Distributor Control Register (ICDDCR) to send pending interrupts to CPUs 
    address = MPCORE_GIC_DIST + ICDDCR;
     c4c:	e3a03a0d 	mov	r3, #53248	; 0xd000
     c50:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     c54:	e50b3008 	str	r3, [r11, #-8]
    *(int *) address = 1;          
     c58:	e51b3008 	ldr	r3, [r11, #-8]
     c5c:	e3a02001 	mov	r2, #1
     c60:	e5832000 	str	r2, [r3]
}
     c64:	e24bd004 	sub	sp, r11, #4
     c68:	e8bd8800 	pop	{r11, pc}

00000c6c <config_interrupt>:

void config_interrupt (int N, int CPU_target)
{
     c6c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     c70:	e28db000 	add	r11, sp, #0
     c74:	e24dd01c 	sub	sp, sp, #28
     c78:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
     c7c:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
    int reg_offset, index, value, address;
    
    /* Configure the Interrupt Set-Enable Registers (ICDISERn). 
     * reg_offset = (integer_div(N / 32) * 4
     * value = 1 << (N mod 32) */
    reg_offset = (N >> 3) & 0xFFFFFFFC; 
     c80:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     c84:	e1a031c3 	asr	r3, r3, #3
     c88:	e3c33003 	bic	r3, r3, #3
     c8c:	e50b3008 	str	r3, [r11, #-8]
    index = N & 0x1F;
     c90:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     c94:	e203301f 	and	r3, r3, #31
     c98:	e50b300c 	str	r3, [r11, #-12]
    value = 0x1 << index;
     c9c:	e3a02001 	mov	r2, #1
     ca0:	e51b300c 	ldr	r3, [r11, #-12]
     ca4:	e1a03312 	lsl	r3, r2, r3
     ca8:	e50b3010 	str	r3, [r11, #-16]
    address = MPCORE_GIC_DIST + ICDISER + reg_offset;
     cac:	e51b3008 	ldr	r3, [r11, #-8]
     cb0:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
     cb4:	e2433c03 	sub	r3, r3, #768	; 0x300
     cb8:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    /* Now that we know the register address and value, set the appropriate bit */
   *(int *)address |= value;
     cbc:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     cc0:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     cc4:	e5921000 	ldr	r1, [r2]
     cc8:	e51b2010 	ldr	r2, [r11, #-16]
     ccc:	e1812002 	orr	r2, r1, r2
     cd0:	e5832000 	str	r2, [r3]

    /* Configure the Interrupt Processor Targets Register (ICDIPTRn)
     * reg_offset = integer_div(N / 4) * 4
     * index = N mod 4 */
    reg_offset = (N & 0xFFFFFFFC);
     cd4:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     cd8:	e3c33003 	bic	r3, r3, #3
     cdc:	e50b3008 	str	r3, [r11, #-8]
    index = N & 0x3;
     ce0:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     ce4:	e2033003 	and	r3, r3, #3
     ce8:	e50b300c 	str	r3, [r11, #-12]
    address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
     cec:	e51b2008 	ldr	r2, [r11, #-8]
     cf0:	e51b300c 	ldr	r3, [r11, #-12]
     cf4:	e0823003 	add	r3, r2, r3
     cf8:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
     cfc:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    /* Now that we know the register address and value, write to (only) the appropriate byte */
    *(char *)address = (char) CPU_target;
     d00:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     d04:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     d08:	e6ef2072 	uxtb	r2, r2
     d0c:	e5c32000 	strb	r2, [r3]
}
     d10:	e28bd000 	add	sp, r11, #0
     d14:	e8bd0800 	ldmfd	sp!, {r11}
     d18:	e12fff1e 	bx	lr

00000d1c <ConfigINTs>:

void ConfigINTs()
{
     d1c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     d20:	e28db000 	add	r11, sp, #0
     d24:	e24dd00c 	sub	sp, sp, #12
    volatile int * KEY_ptr = (int *) KEY_BASE;              // pushbutton KEY base address
     d28:	e3a03050 	mov	r3, #80	; 0x50
     d2c:	e34f3f20 	movt	r3, #65312	; 0xff20
     d30:	e50b3008 	str	r3, [r11, #-8]
    volatile int* timerPtr = (int*) MPCORE_PRIV_TIMER;      // timer base address
     d34:	e3a03cc6 	mov	r3, #50688	; 0xc600
     d38:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     d3c:	e50b300c 	str	r3, [r11, #-12]
    // volatile int * PS2_ptr = (int *) PS2_BASE;  // PS/2 port address

    // *(PS2_ptr) = 0xFF;              /* reset */
    // *(PS2_ptr + 1) = 0x1;           /* write to the PS/2 Control register to enable interrupts */

    *(KEY_ptr + 2) = 0x01;                                  // enable interrupts for KEY0
     d40:	e51b3008 	ldr	r3, [r11, #-8]
     d44:	e2833008 	add	r3, r3, #8
     d48:	e3a02001 	mov	r2, #1
     d4c:	e5832000 	str	r2, [r3]

    *(timerPtr) = 33333;                                     // Interrupt every 0.001s
     d50:	e51b300c 	ldr	r3, [r11, #-12]
     d54:	e3082235 	movw	r2, #33333	; 0x8235
     d58:	e5832000 	str	r2, [r3]
    *(timerPtr + 2) |= (100 << 8);                          // Prescale 100
     d5c:	e51b300c 	ldr	r3, [r11, #-12]
     d60:	e2833008 	add	r3, r3, #8
     d64:	e51b200c 	ldr	r2, [r11, #-12]
     d68:	e2822008 	add	r2, r2, #8
     d6c:	e5922000 	ldr	r2, [r2]
     d70:	e3822b19 	orr	r2, r2, #25600	; 0x6400
     d74:	e5832000 	str	r2, [r3]
    *(timerPtr + 2) |= 0x07;                                // Turn on I, A, and E
     d78:	e51b300c 	ldr	r3, [r11, #-12]
     d7c:	e2833008 	add	r3, r3, #8
     d80:	e51b200c 	ldr	r2, [r11, #-12]
     d84:	e2822008 	add	r2, r2, #8
     d88:	e5922000 	ldr	r2, [r2]
     d8c:	e3822007 	orr	r2, r2, #7
     d90:	e5832000 	str	r2, [r3]
}
     d94:	e28bd000 	add	sp, r11, #0
     d98:	e8bd0800 	ldmfd	sp!, {r11}
     d9c:	e12fff1e 	bx	lr

00000da0 <TimerISR>:

/***************************************************************************************************
Function Definitions:
***************************************************************************************************/
void TimerISR(void)
{
     da0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     da4:	e28db000 	add	r11, sp, #0
    TIMER_FLAG = 1;
     da8:	e3023705 	movw	r3, #9989	; 0x2705
     dac:	e3403000 	movt	r3, #0
     db0:	e3a02001 	mov	r2, #1
     db4:	e5c32000 	strb	r2, [r3]
     db8:	e28bd000 	add	sp, r11, #0
     dbc:	e8bd0800 	ldmfd	sp!, {r11}
     dc0:	e12fff1e 	bx	lr

00000dc4 <DigitSeparator>:

/***************************************************************************************************
Function Definitions:
***************************************************************************************************/
struct Digits DigitSeparator(int number)
{
     dc4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     dc8:	e28db000 	add	r11, sp, #0
     dcc:	e24dd014 	sub	sp, sp, #20
     dd0:	e50b0010 	str	r0, [r11, #-16]
    struct Digits numberSeparated;

    numberSeparated.thousands = number / 1000;
     dd4:	e51b2010 	ldr	r2, [r11, #-16]
     dd8:	e3043dd3 	movw	r3, #19923	; 0x4dd3
     ddc:	e3413062 	movt	r3, #4194	; 0x1062
     de0:	e0c31293 	smull	r1, r3, r3, r2
     de4:	e1a01343 	asr	r1, r3, #6
     de8:	e1a03fc2 	asr	r3, r2, #31
     dec:	e0633001 	rsb	r3, r3, r1
     df0:	e6ef3073 	uxtb	r3, r3
     df4:	e54b300c 	strb	r3, [r11, #-12]
    numberSeparated.hundreds  = (number % 1000) / 100;
     df8:	e51b2010 	ldr	r2, [r11, #-16]
     dfc:	e3043dd3 	movw	r3, #19923	; 0x4dd3
     e00:	e3413062 	movt	r3, #4194	; 0x1062
     e04:	e0c31293 	smull	r1, r3, r3, r2
     e08:	e1a01343 	asr	r1, r3, #6
     e0c:	e1a03fc2 	asr	r3, r2, #31
     e10:	e0633001 	rsb	r3, r3, r1
     e14:	e3a01ffa 	mov	r1, #1000	; 0x3e8
     e18:	e0030391 	mul	r3, r1, r3
     e1c:	e0633002 	rsb	r3, r3, r2
     e20:	e308251f 	movw	r2, #34079	; 0x851f
     e24:	e34521eb 	movt	r2, #20971	; 0x51eb
     e28:	e0c21392 	smull	r1, r2, r2, r3
     e2c:	e1a022c2 	asr	r2, r2, #5
     e30:	e1a03fc3 	asr	r3, r3, #31
     e34:	e0633002 	rsb	r3, r3, r2
     e38:	e6ef3073 	uxtb	r3, r3
     e3c:	e54b300b 	strb	r3, [r11, #-11]
    numberSeparated.tens      = ((number % 1000) % 100) / 10;
     e40:	e51b2010 	ldr	r2, [r11, #-16]
     e44:	e3043dd3 	movw	r3, #19923	; 0x4dd3
     e48:	e3413062 	movt	r3, #4194	; 0x1062
     e4c:	e0c31293 	smull	r1, r3, r3, r2
     e50:	e1a01343 	asr	r1, r3, #6
     e54:	e1a03fc2 	asr	r3, r2, #31
     e58:	e0633001 	rsb	r3, r3, r1
     e5c:	e3a01ffa 	mov	r1, #1000	; 0x3e8
     e60:	e0030391 	mul	r3, r1, r3
     e64:	e0633002 	rsb	r3, r3, r2
     e68:	e308251f 	movw	r2, #34079	; 0x851f
     e6c:	e34521eb 	movt	r2, #20971	; 0x51eb
     e70:	e0c21392 	smull	r1, r2, r2, r3
     e74:	e1a012c2 	asr	r1, r2, #5
     e78:	e1a02fc3 	asr	r2, r3, #31
     e7c:	e0622001 	rsb	r2, r2, r1
     e80:	e3a01064 	mov	r1, #100	; 0x64
     e84:	e0020291 	mul	r2, r1, r2
     e88:	e0622003 	rsb	r2, r2, r3
     e8c:	e3063667 	movw	r3, #26215	; 0x6667
     e90:	e3463666 	movt	r3, #26214	; 0x6666
     e94:	e0c31293 	smull	r1, r3, r3, r2
     e98:	e1a01143 	asr	r1, r3, #2
     e9c:	e1a03fc2 	asr	r3, r2, #31
     ea0:	e0633001 	rsb	r3, r3, r1
     ea4:	e6ef3073 	uxtb	r3, r3
     ea8:	e54b300a 	strb	r3, [r11, #-10]
    numberSeparated.ones      = (((number % 1000) % 100) % 10);
     eac:	e51b2010 	ldr	r2, [r11, #-16]
     eb0:	e3043dd3 	movw	r3, #19923	; 0x4dd3
     eb4:	e3413062 	movt	r3, #4194	; 0x1062
     eb8:	e0c31293 	smull	r1, r3, r3, r2
     ebc:	e1a01343 	asr	r1, r3, #6
     ec0:	e1a03fc2 	asr	r3, r2, #31
     ec4:	e0633001 	rsb	r3, r3, r1
     ec8:	e3a01ffa 	mov	r1, #1000	; 0x3e8
     ecc:	e0030391 	mul	r3, r1, r3
     ed0:	e0633002 	rsb	r3, r3, r2
     ed4:	e308251f 	movw	r2, #34079	; 0x851f
     ed8:	e34521eb 	movt	r2, #20971	; 0x51eb
     edc:	e0c21392 	smull	r1, r2, r2, r3
     ee0:	e1a012c2 	asr	r1, r2, #5
     ee4:	e1a02fc3 	asr	r2, r3, #31
     ee8:	e0622001 	rsb	r2, r2, r1
     eec:	e3a01064 	mov	r1, #100	; 0x64
     ef0:	e0020291 	mul	r2, r1, r2
     ef4:	e0622003 	rsb	r2, r2, r3
     ef8:	e3063667 	movw	r3, #26215	; 0x6667
     efc:	e3463666 	movt	r3, #26214	; 0x6666
     f00:	e0c31293 	smull	r1, r3, r3, r2
     f04:	e1a01143 	asr	r1, r3, #2
     f08:	e1a03fc2 	asr	r3, r2, #31
     f0c:	e0631001 	rsb	r1, r3, r1
     f10:	e1a03001 	mov	r3, r1
     f14:	e1a03103 	lsl	r3, r3, #2
     f18:	e0833001 	add	r3, r3, r1
     f1c:	e1a03083 	lsl	r3, r3, #1
     f20:	e0631002 	rsb	r1, r3, r2
     f24:	e6ef3071 	uxtb	r3, r1
     f28:	e54b3009 	strb	r3, [r11, #-9]

    return numberSeparated;
     f2c:	e51b300c 	ldr	r3, [r11, #-12]
     f30:	e50b3008 	str	r3, [r11, #-8]
     f34:	e3a03000 	mov	r3, #0
     f38:	e55b2008 	ldrb	r2, [r11, #-8]
     f3c:	e7c73012 	bfi	r3, r2, #0, #8
     f40:	e55b2007 	ldrb	r2, [r11, #-7]
     f44:	e7cf3412 	bfi	r3, r2, #8, #8
     f48:	e55b2006 	ldrb	r2, [r11, #-6]
     f4c:	e7d73812 	bfi	r3, r2, #16, #8
     f50:	e55b2005 	ldrb	r2, [r11, #-5]
     f54:	e7df3c12 	bfi	r3, r2, #24, #8
     f58:	e1a00003 	mov	r0, r3
     f5c:	e28bd000 	add	sp, r11, #0
     f60:	e8bd0800 	ldmfd	sp!, {r11}
     f64:	e12fff1e 	bx	lr

00000f68 <__aeabi_drsub>:
     f68:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
     f6c:	ea000000 	b	f74 <__adddf3>

00000f70 <__aeabi_dsub>:
     f70:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

00000f74 <__adddf3>:
     f74:	e92d4030 	push	{r4, r5, lr}
     f78:	e1a04081 	lsl	r4, r1, #1
     f7c:	e1a05083 	lsl	r5, r3, #1
     f80:	e1340005 	teq	r4, r5
     f84:	01300002 	teqeq	r0, r2
     f88:	1194c000 	orrsne	r12, r4, r0
     f8c:	1195c002 	orrsne	r12, r5, r2
     f90:	11f0cac4 	mvnsne	r12, r4, asr #21
     f94:	11f0cac5 	mvnsne	r12, r5, asr #21
     f98:	0a00008c 	beq	11d0 <__adddf3+0x25c>
     f9c:	e1a04aa4 	lsr	r4, r4, #21
     fa0:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
     fa4:	b2655000 	rsblt	r5, r5, #0
     fa8:	da000006 	ble	fc8 <__adddf3+0x54>
     fac:	e0844005 	add	r4, r4, r5
     fb0:	e0202002 	eor	r2, r0, r2
     fb4:	e0213003 	eor	r3, r1, r3
     fb8:	e0220000 	eor	r0, r2, r0
     fbc:	e0231001 	eor	r1, r3, r1
     fc0:	e0202002 	eor	r2, r0, r2
     fc4:	e0213003 	eor	r3, r1, r3
     fc8:	e3550036 	cmp	r5, #54	; 0x36
     fcc:	88bd4030 	pophi	{r4, r5, lr}
     fd0:	812fff1e 	bxhi	lr
     fd4:	e3110102 	tst	r1, #-2147483648	; 0x80000000
     fd8:	e1a01601 	lsl	r1, r1, #12
     fdc:	e3a0c601 	mov	r12, #1048576	; 0x100000
     fe0:	e18c1621 	orr	r1, r12, r1, lsr #12
     fe4:	0a000001 	beq	ff0 <__adddf3+0x7c>
     fe8:	e2700000 	rsbs	r0, r0, #0
     fec:	e2e11000 	rsc	r1, r1, #0
     ff0:	e3130102 	tst	r3, #-2147483648	; 0x80000000
     ff4:	e1a03603 	lsl	r3, r3, #12
     ff8:	e18c3623 	orr	r3, r12, r3, lsr #12
     ffc:	0a000001 	beq	1008 <__adddf3+0x94>
    1000:	e2722000 	rsbs	r2, r2, #0
    1004:	e2e33000 	rsc	r3, r3, #0
    1008:	e1340005 	teq	r4, r5
    100c:	0a000069 	beq	11b8 <__adddf3+0x244>
    1010:	e2444001 	sub	r4, r4, #1
    1014:	e275e020 	rsbs	lr, r5, #32
    1018:	ba000005 	blt	1034 <__adddf3+0xc0>
    101c:	e1a0ce12 	lsl	r12, r2, lr
    1020:	e0900532 	adds	r0, r0, r2, lsr r5
    1024:	e2a11000 	adc	r1, r1, #0
    1028:	e0900e13 	adds	r0, r0, r3, lsl lr
    102c:	e0b11553 	adcs	r1, r1, r3, asr r5
    1030:	ea000006 	b	1050 <__adddf3+0xdc>
    1034:	e2455020 	sub	r5, r5, #32
    1038:	e28ee020 	add	lr, lr, #32
    103c:	e3520001 	cmp	r2, #1
    1040:	e1a0ce13 	lsl	r12, r3, lr
    1044:	238cc002 	orrcs	r12, r12, #2
    1048:	e0900553 	adds	r0, r0, r3, asr r5
    104c:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    1050:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1054:	5a000002 	bpl	1064 <__adddf3+0xf0>
    1058:	e27cc000 	rsbs	r12, r12, #0
    105c:	e2f00000 	rscs	r0, r0, #0
    1060:	e2e11000 	rsc	r1, r1, #0
    1064:	e3510601 	cmp	r1, #1048576	; 0x100000
    1068:	3a00000f 	bcc	10ac <__adddf3+0x138>
    106c:	e3510602 	cmp	r1, #2097152	; 0x200000
    1070:	3a000006 	bcc	1090 <__adddf3+0x11c>
    1074:	e1b010a1 	lsrs	r1, r1, #1
    1078:	e1b00060 	rrxs	r0, r0
    107c:	e1a0c06c 	rrx	r12, r12
    1080:	e2844001 	add	r4, r4, #1
    1084:	e1a02a84 	lsl	r2, r4, #21
    1088:	e3720501 	cmn	r2, #4194304	; 0x400000
    108c:	2a00006b 	bcs	1240 <__adddf3+0x2cc>
    1090:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    1094:	01b0c0a0 	lsrseq	r12, r0, #1
    1098:	e2b00000 	adcs	r0, r0, #0
    109c:	e0a11a04 	adc	r1, r1, r4, lsl #20
    10a0:	e1811005 	orr	r1, r1, r5
    10a4:	e8bd4030 	pop	{r4, r5, lr}
    10a8:	e12fff1e 	bx	lr
    10ac:	e1b0c08c 	lsls	r12, r12, #1
    10b0:	e0b00000 	adcs	r0, r0, r0
    10b4:	e0a11001 	adc	r1, r1, r1
    10b8:	e3110601 	tst	r1, #1048576	; 0x100000
    10bc:	e2444001 	sub	r4, r4, #1
    10c0:	1afffff2 	bne	1090 <__adddf3+0x11c>
    10c4:	e3310000 	teq	r1, #0
    10c8:	13a03014 	movne	r3, #20
    10cc:	03a03034 	moveq	r3, #52	; 0x34
    10d0:	01a01000 	moveq	r1, r0
    10d4:	03a00000 	moveq	r0, #0
    10d8:	e1a02001 	mov	r2, r1
    10dc:	e3520801 	cmp	r2, #65536	; 0x10000
    10e0:	21a02822 	lsrcs	r2, r2, #16
    10e4:	22433010 	subcs	r3, r3, #16
    10e8:	e3520c01 	cmp	r2, #256	; 0x100
    10ec:	21a02422 	lsrcs	r2, r2, #8
    10f0:	22433008 	subcs	r3, r3, #8
    10f4:	e3520010 	cmp	r2, #16
    10f8:	21a02222 	lsrcs	r2, r2, #4
    10fc:	22433004 	subcs	r3, r3, #4
    1100:	e3520004 	cmp	r2, #4
    1104:	22433002 	subcs	r3, r3, #2
    1108:	304330a2 	subcc	r3, r3, r2, lsr #1
    110c:	e04331a2 	sub	r3, r3, r2, lsr #3
    1110:	e2532020 	subs	r2, r3, #32
    1114:	aa000007 	bge	1138 <__adddf3+0x1c4>
    1118:	e292200c 	adds	r2, r2, #12
    111c:	da000004 	ble	1134 <__adddf3+0x1c0>
    1120:	e282c014 	add	r12, r2, #20
    1124:	e262200c 	rsb	r2, r2, #12
    1128:	e1a00c11 	lsl	r0, r1, r12
    112c:	e1a01231 	lsr	r1, r1, r2
    1130:	ea000004 	b	1148 <__adddf3+0x1d4>
    1134:	e2822014 	add	r2, r2, #20
    1138:	d262c020 	rsble	r12, r2, #32
    113c:	e1a01211 	lsl	r1, r1, r2
    1140:	d1811c30 	orrle	r1, r1, r0, lsr r12
    1144:	d1a00210 	lslle	r0, r0, r2
    1148:	e0544003 	subs	r4, r4, r3
    114c:	a0811a04 	addge	r1, r1, r4, lsl #20
    1150:	a1811005 	orrge	r1, r1, r5
    1154:	a8bd4030 	popge	{r4, r5, lr}
    1158:	a12fff1e 	bxge	lr
    115c:	e1e04004 	mvn	r4, r4
    1160:	e254401f 	subs	r4, r4, #31
    1164:	aa00000f 	bge	11a8 <__adddf3+0x234>
    1168:	e294400c 	adds	r4, r4, #12
    116c:	ca000006 	bgt	118c <__adddf3+0x218>
    1170:	e2844014 	add	r4, r4, #20
    1174:	e2642020 	rsb	r2, r4, #32
    1178:	e1a00430 	lsr	r0, r0, r4
    117c:	e1800211 	orr	r0, r0, r1, lsl r2
    1180:	e1851431 	orr	r1, r5, r1, lsr r4
    1184:	e8bd4030 	pop	{r4, r5, lr}
    1188:	e12fff1e 	bx	lr
    118c:	e264400c 	rsb	r4, r4, #12
    1190:	e2642020 	rsb	r2, r4, #32
    1194:	e1a00230 	lsr	r0, r0, r2
    1198:	e1800411 	orr	r0, r0, r1, lsl r4
    119c:	e1a01005 	mov	r1, r5
    11a0:	e8bd4030 	pop	{r4, r5, lr}
    11a4:	e12fff1e 	bx	lr
    11a8:	e1a00431 	lsr	r0, r1, r4
    11ac:	e1a01005 	mov	r1, r5
    11b0:	e8bd4030 	pop	{r4, r5, lr}
    11b4:	e12fff1e 	bx	lr
    11b8:	e3340000 	teq	r4, #0
    11bc:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    11c0:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    11c4:	02844001 	addeq	r4, r4, #1
    11c8:	12455001 	subne	r5, r5, #1
    11cc:	eaffff8f 	b	1010 <__adddf3+0x9c>
    11d0:	e1f0cac4 	mvns	r12, r4, asr #21
    11d4:	11f0cac5 	mvnsne	r12, r5, asr #21
    11d8:	0a00001d 	beq	1254 <__adddf3+0x2e0>
    11dc:	e1340005 	teq	r4, r5
    11e0:	01300002 	teqeq	r0, r2
    11e4:	0a000004 	beq	11fc <__adddf3+0x288>
    11e8:	e194c000 	orrs	r12, r4, r0
    11ec:	01a01003 	moveq	r1, r3
    11f0:	01a00002 	moveq	r0, r2
    11f4:	e8bd4030 	pop	{r4, r5, lr}
    11f8:	e12fff1e 	bx	lr
    11fc:	e1310003 	teq	r1, r3
    1200:	13a01000 	movne	r1, #0
    1204:	13a00000 	movne	r0, #0
    1208:	18bd4030 	popne	{r4, r5, lr}
    120c:	112fff1e 	bxne	lr
    1210:	e1b0caa4 	lsrs	r12, r4, #21
    1214:	1a000004 	bne	122c <__adddf3+0x2b8>
    1218:	e1b00080 	lsls	r0, r0, #1
    121c:	e0b11001 	adcs	r1, r1, r1
    1220:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    1224:	e8bd4030 	pop	{r4, r5, lr}
    1228:	e12fff1e 	bx	lr
    122c:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    1230:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    1234:	38bd4030 	popcc	{r4, r5, lr}
    1238:	312fff1e 	bxcc	lr
    123c:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1240:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    1244:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    1248:	e3a00000 	mov	r0, #0
    124c:	e8bd4030 	pop	{r4, r5, lr}
    1250:	e12fff1e 	bx	lr
    1254:	e1f0cac4 	mvns	r12, r4, asr #21
    1258:	11a01003 	movne	r1, r3
    125c:	11a00002 	movne	r0, r2
    1260:	01f0cac5 	mvnseq	r12, r5, asr #21
    1264:	11a03001 	movne	r3, r1
    1268:	11a02000 	movne	r2, r0
    126c:	e1904601 	orrs	r4, r0, r1, lsl #12
    1270:	01925603 	orrseq	r5, r2, r3, lsl #12
    1274:	01310003 	teqeq	r1, r3
    1278:	13811702 	orrne	r1, r1, #524288	; 0x80000
    127c:	e8bd4030 	pop	{r4, r5, lr}
    1280:	e12fff1e 	bx	lr

00001284 <__aeabi_ui2d>:
    1284:	e3300000 	teq	r0, #0
    1288:	03a01000 	moveq	r1, #0
    128c:	012fff1e 	bxeq	lr
    1290:	e92d4030 	push	{r4, r5, lr}
    1294:	e3a04b01 	mov	r4, #1024	; 0x400
    1298:	e2844032 	add	r4, r4, #50	; 0x32
    129c:	e3a05000 	mov	r5, #0
    12a0:	e3a01000 	mov	r1, #0
    12a4:	eaffff86 	b	10c4 <__adddf3+0x150>

000012a8 <__aeabi_i2d>:
    12a8:	e3300000 	teq	r0, #0
    12ac:	03a01000 	moveq	r1, #0
    12b0:	012fff1e 	bxeq	lr
    12b4:	e92d4030 	push	{r4, r5, lr}
    12b8:	e3a04b01 	mov	r4, #1024	; 0x400
    12bc:	e2844032 	add	r4, r4, #50	; 0x32
    12c0:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    12c4:	42600000 	rsbmi	r0, r0, #0
    12c8:	e3a01000 	mov	r1, #0
    12cc:	eaffff7c 	b	10c4 <__adddf3+0x150>

000012d0 <__aeabi_f2d>:
    12d0:	e1b02080 	lsls	r2, r0, #1
    12d4:	e1a011c2 	asr	r1, r2, #3
    12d8:	e1a01061 	rrx	r1, r1
    12dc:	e1a00e02 	lsl	r0, r2, #28
    12e0:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    12e4:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    12e8:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    12ec:	112fff1e 	bxne	lr
    12f0:	e3320000 	teq	r2, #0
    12f4:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    12f8:	012fff1e 	bxeq	lr
    12fc:	e92d4030 	push	{r4, r5, lr}
    1300:	e3a04d0e 	mov	r4, #896	; 0x380
    1304:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1308:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    130c:	eaffff6c 	b	10c4 <__adddf3+0x150>

00001310 <__aeabi_ul2d>:
    1310:	e1902001 	orrs	r2, r0, r1
    1314:	012fff1e 	bxeq	lr
    1318:	e92d4030 	push	{r4, r5, lr}
    131c:	e3a05000 	mov	r5, #0
    1320:	ea000006 	b	1340 <__aeabi_l2d+0x1c>

00001324 <__aeabi_l2d>:
    1324:	e1902001 	orrs	r2, r0, r1
    1328:	012fff1e 	bxeq	lr
    132c:	e92d4030 	push	{r4, r5, lr}
    1330:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    1334:	5a000001 	bpl	1340 <__aeabi_l2d+0x1c>
    1338:	e2700000 	rsbs	r0, r0, #0
    133c:	e2e11000 	rsc	r1, r1, #0
    1340:	e3a04b01 	mov	r4, #1024	; 0x400
    1344:	e2844032 	add	r4, r4, #50	; 0x32
    1348:	e1b0cb21 	lsrs	r12, r1, #22
    134c:	0affff44 	beq	1064 <__adddf3+0xf0>
    1350:	e3a02003 	mov	r2, #3
    1354:	e1b0c1ac 	lsrs	r12, r12, #3
    1358:	12822003 	addne	r2, r2, #3
    135c:	e1b0c1ac 	lsrs	r12, r12, #3
    1360:	12822003 	addne	r2, r2, #3
    1364:	e08221ac 	add	r2, r2, r12, lsr #3
    1368:	e2623020 	rsb	r3, r2, #32
    136c:	e1a0c310 	lsl	r12, r0, r3
    1370:	e1a00230 	lsr	r0, r0, r2
    1374:	e1800311 	orr	r0, r0, r1, lsl r3
    1378:	e1a01231 	lsr	r1, r1, r2
    137c:	e0844002 	add	r4, r4, r2
    1380:	eaffff37 	b	1064 <__adddf3+0xf0>

00001384 <__aeabi_dmul>:
    1384:	e92d4070 	push	{r4, r5, r6, lr}
    1388:	e3a0c0ff 	mov	r12, #255	; 0xff
    138c:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    1390:	e01c4a21 	ands	r4, r12, r1, lsr #20
    1394:	101c5a23 	andsne	r5, r12, r3, lsr #20
    1398:	1134000c 	teqne	r4, r12
    139c:	1135000c 	teqne	r5, r12
    13a0:	0b000075 	bleq	157c <__aeabi_dmul+0x1f8>
    13a4:	e0844005 	add	r4, r4, r5
    13a8:	e0216003 	eor	r6, r1, r3
    13ac:	e1c11a8c 	bic	r1, r1, r12, lsl #21
    13b0:	e1c33a8c 	bic	r3, r3, r12, lsl #21
    13b4:	e1905601 	orrs	r5, r0, r1, lsl #12
    13b8:	11925603 	orrsne	r5, r2, r3, lsl #12
    13bc:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    13c0:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    13c4:	0a00001d 	beq	1440 <__aeabi_dmul+0xbc>
    13c8:	e08ec290 	umull	r12, lr, r0, r2
    13cc:	e3a05000 	mov	r5, #0
    13d0:	e0a5e291 	umlal	lr, r5, r1, r2
    13d4:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    13d8:	e0a5e390 	umlal	lr, r5, r0, r3
    13dc:	e3a06000 	mov	r6, #0
    13e0:	e0a65391 	umlal	r5, r6, r1, r3
    13e4:	e33c0000 	teq	r12, #0
    13e8:	138ee001 	orrne	lr, lr, #1
    13ec:	e24440ff 	sub	r4, r4, #255	; 0xff
    13f0:	e3560c02 	cmp	r6, #512	; 0x200
    13f4:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    13f8:	2a000002 	bcs	1408 <__aeabi_dmul+0x84>
    13fc:	e1b0e08e 	lsls	lr, lr, #1
    1400:	e0b55005 	adcs	r5, r5, r5
    1404:	e0a66006 	adc	r6, r6, r6
    1408:	e1821586 	orr	r1, r2, r6, lsl #11
    140c:	e1811aa5 	orr	r1, r1, r5, lsr #21
    1410:	e1a00585 	lsl	r0, r5, #11
    1414:	e1800aae 	orr	r0, r0, lr, lsr #21
    1418:	e1a0e58e 	lsl	lr, lr, #11
    141c:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    1420:	835c0c07 	cmphi	r12, #1792	; 0x700
    1424:	8a000011 	bhi	1470 <__aeabi_dmul+0xec>
    1428:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    142c:	01b0e0a0 	lsrseq	lr, r0, #1
    1430:	e2b00000 	adcs	r0, r0, #0
    1434:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1438:	e8bd4070 	pop	{r4, r5, r6, lr}
    143c:	e12fff1e 	bx	lr
    1440:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    1444:	e1861001 	orr	r1, r6, r1
    1448:	e1800002 	orr	r0, r0, r2
    144c:	e0211003 	eor	r1, r1, r3
    1450:	e05440ac 	subs	r4, r4, r12, lsr #1
    1454:	c074500c 	rsbsgt	r5, r4, r12
    1458:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    145c:	c8bd4070 	popgt	{r4, r5, r6, lr}
    1460:	c12fff1e 	bxgt	lr
    1464:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    1468:	e3a0e000 	mov	lr, #0
    146c:	e2544001 	subs	r4, r4, #1
    1470:	ca00005d 	bgt	15ec <__aeabi_dmul+0x268>
    1474:	e3740036 	cmn	r4, #54	; 0x36
    1478:	d3a00000 	movle	r0, #0
    147c:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    1480:	d8bd4070 	pople	{r4, r5, r6, lr}
    1484:	d12fff1e 	bxle	lr
    1488:	e2644000 	rsb	r4, r4, #0
    148c:	e2544020 	subs	r4, r4, #32
    1490:	aa00001a 	bge	1500 <__aeabi_dmul+0x17c>
    1494:	e294400c 	adds	r4, r4, #12
    1498:	ca00000c 	bgt	14d0 <__aeabi_dmul+0x14c>
    149c:	e2844014 	add	r4, r4, #20
    14a0:	e2645020 	rsb	r5, r4, #32
    14a4:	e1a03510 	lsl	r3, r0, r5
    14a8:	e1a00430 	lsr	r0, r0, r4
    14ac:	e1800511 	orr	r0, r0, r1, lsl r5
    14b0:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    14b4:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    14b8:	e0900fa3 	adds	r0, r0, r3, lsr #31
    14bc:	e0a21431 	adc	r1, r2, r1, lsr r4
    14c0:	e19ee083 	orrs	lr, lr, r3, lsl #1
    14c4:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    14c8:	e8bd4070 	pop	{r4, r5, r6, lr}
    14cc:	e12fff1e 	bx	lr
    14d0:	e264400c 	rsb	r4, r4, #12
    14d4:	e2645020 	rsb	r5, r4, #32
    14d8:	e1a03410 	lsl	r3, r0, r4
    14dc:	e1a00530 	lsr	r0, r0, r5
    14e0:	e1800411 	orr	r0, r0, r1, lsl r4
    14e4:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    14e8:	e0900fa3 	adds	r0, r0, r3, lsr #31
    14ec:	e2a11000 	adc	r1, r1, #0
    14f0:	e19ee083 	orrs	lr, lr, r3, lsl #1
    14f4:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    14f8:	e8bd4070 	pop	{r4, r5, r6, lr}
    14fc:	e12fff1e 	bx	lr
    1500:	e2645020 	rsb	r5, r4, #32
    1504:	e18ee510 	orr	lr, lr, r0, lsl r5
    1508:	e1a03430 	lsr	r3, r0, r4
    150c:	e1833511 	orr	r3, r3, r1, lsl r5
    1510:	e1a00431 	lsr	r0, r1, r4
    1514:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1518:	e1c00431 	bic	r0, r0, r1, lsr r4
    151c:	e0800fa3 	add	r0, r0, r3, lsr #31
    1520:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1524:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1528:	e8bd4070 	pop	{r4, r5, r6, lr}
    152c:	e12fff1e 	bx	lr
    1530:	e3340000 	teq	r4, #0
    1534:	1a000008 	bne	155c <__aeabi_dmul+0x1d8>
    1538:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    153c:	e1b00080 	lsls	r0, r0, #1
    1540:	e0a11001 	adc	r1, r1, r1
    1544:	e3110601 	tst	r1, #1048576	; 0x100000
    1548:	02444001 	subeq	r4, r4, #1
    154c:	0afffffa 	beq	153c <__aeabi_dmul+0x1b8>
    1550:	e1811006 	orr	r1, r1, r6
    1554:	e3350000 	teq	r5, #0
    1558:	112fff1e 	bxne	lr
    155c:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    1560:	e1b02082 	lsls	r2, r2, #1
    1564:	e0a33003 	adc	r3, r3, r3
    1568:	e3130601 	tst	r3, #1048576	; 0x100000
    156c:	02455001 	subeq	r5, r5, #1
    1570:	0afffffa 	beq	1560 <__aeabi_dmul+0x1dc>
    1574:	e1833006 	orr	r3, r3, r6
    1578:	e12fff1e 	bx	lr
    157c:	e134000c 	teq	r4, r12
    1580:	e00c5a23 	and	r5, r12, r3, lsr #20
    1584:	1135000c 	teqne	r5, r12
    1588:	0a000007 	beq	15ac <__aeabi_dmul+0x228>
    158c:	e1906081 	orrs	r6, r0, r1, lsl #1
    1590:	11926083 	orrsne	r6, r2, r3, lsl #1
    1594:	1affffe5 	bne	1530 <__aeabi_dmul+0x1ac>
    1598:	e0211003 	eor	r1, r1, r3
    159c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    15a0:	e3a00000 	mov	r0, #0
    15a4:	e8bd4070 	pop	{r4, r5, r6, lr}
    15a8:	e12fff1e 	bx	lr
    15ac:	e1906081 	orrs	r6, r0, r1, lsl #1
    15b0:	01a00002 	moveq	r0, r2
    15b4:	01a01003 	moveq	r1, r3
    15b8:	11926083 	orrsne	r6, r2, r3, lsl #1
    15bc:	0a000010 	beq	1604 <__aeabi_dmul+0x280>
    15c0:	e134000c 	teq	r4, r12
    15c4:	1a000001 	bne	15d0 <__aeabi_dmul+0x24c>
    15c8:	e1906601 	orrs	r6, r0, r1, lsl #12
    15cc:	1a00000c 	bne	1604 <__aeabi_dmul+0x280>
    15d0:	e135000c 	teq	r5, r12
    15d4:	1a000003 	bne	15e8 <__aeabi_dmul+0x264>
    15d8:	e1926603 	orrs	r6, r2, r3, lsl #12
    15dc:	11a00002 	movne	r0, r2
    15e0:	11a01003 	movne	r1, r3
    15e4:	1a000006 	bne	1604 <__aeabi_dmul+0x280>
    15e8:	e0211003 	eor	r1, r1, r3
    15ec:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    15f0:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    15f4:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    15f8:	e3a00000 	mov	r0, #0
    15fc:	e8bd4070 	pop	{r4, r5, r6, lr}
    1600:	e12fff1e 	bx	lr
    1604:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    1608:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    160c:	e8bd4070 	pop	{r4, r5, r6, lr}
    1610:	e12fff1e 	bx	lr

00001614 <__aeabi_ddiv>:
    1614:	e92d4070 	push	{r4, r5, r6, lr}
    1618:	e3a0c0ff 	mov	r12, #255	; 0xff
    161c:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    1620:	e01c4a21 	ands	r4, r12, r1, lsr #20
    1624:	101c5a23 	andsne	r5, r12, r3, lsr #20
    1628:	1134000c 	teqne	r4, r12
    162c:	1135000c 	teqne	r5, r12
    1630:	0b00005e 	bleq	17b0 <__aeabi_ddiv+0x19c>
    1634:	e0444005 	sub	r4, r4, r5
    1638:	e021e003 	eor	lr, r1, r3
    163c:	e1925603 	orrs	r5, r2, r3, lsl #12
    1640:	e1a01601 	lsl	r1, r1, #12
    1644:	0a00004c 	beq	177c <__aeabi_ddiv+0x168>
    1648:	e1a03603 	lsl	r3, r3, #12
    164c:	e3a05201 	mov	r5, #268435456	; 0x10000000
    1650:	e1853223 	orr	r3, r5, r3, lsr #4
    1654:	e1833c22 	orr	r3, r3, r2, lsr #24
    1658:	e1a02402 	lsl	r2, r2, #8
    165c:	e1855221 	orr	r5, r5, r1, lsr #4
    1660:	e1855c20 	orr	r5, r5, r0, lsr #24
    1664:	e1a06400 	lsl	r6, r0, #8
    1668:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    166c:	e1550003 	cmp	r5, r3
    1670:	01560002 	cmpeq	r6, r2
    1674:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    1678:	e2844c03 	add	r4, r4, #768	; 0x300
    167c:	2a000001 	bcs	1688 <__aeabi_ddiv+0x74>
    1680:	e1b030a3 	lsrs	r3, r3, #1
    1684:	e1a02062 	rrx	r2, r2
    1688:	e0566002 	subs	r6, r6, r2
    168c:	e0c55003 	sbc	r5, r5, r3
    1690:	e1b030a3 	lsrs	r3, r3, #1
    1694:	e1a02062 	rrx	r2, r2
    1698:	e3a00601 	mov	r0, #1048576	; 0x100000
    169c:	e3a0c702 	mov	r12, #524288	; 0x80000
    16a0:	e056e002 	subs	lr, r6, r2
    16a4:	e0d5e003 	sbcs	lr, r5, r3
    16a8:	20466002 	subcs	r6, r6, r2
    16ac:	21a0500e 	movcs	r5, lr
    16b0:	2180000c 	orrcs	r0, r0, r12
    16b4:	e1b030a3 	lsrs	r3, r3, #1
    16b8:	e1a02062 	rrx	r2, r2
    16bc:	e056e002 	subs	lr, r6, r2
    16c0:	e0d5e003 	sbcs	lr, r5, r3
    16c4:	20466002 	subcs	r6, r6, r2
    16c8:	21a0500e 	movcs	r5, lr
    16cc:	218000ac 	orrcs	r0, r0, r12, lsr #1
    16d0:	e1b030a3 	lsrs	r3, r3, #1
    16d4:	e1a02062 	rrx	r2, r2
    16d8:	e056e002 	subs	lr, r6, r2
    16dc:	e0d5e003 	sbcs	lr, r5, r3
    16e0:	20466002 	subcs	r6, r6, r2
    16e4:	21a0500e 	movcs	r5, lr
    16e8:	2180012c 	orrcs	r0, r0, r12, lsr #2
    16ec:	e1b030a3 	lsrs	r3, r3, #1
    16f0:	e1a02062 	rrx	r2, r2
    16f4:	e056e002 	subs	lr, r6, r2
    16f8:	e0d5e003 	sbcs	lr, r5, r3
    16fc:	20466002 	subcs	r6, r6, r2
    1700:	21a0500e 	movcs	r5, lr
    1704:	218001ac 	orrcs	r0, r0, r12, lsr #3
    1708:	e195e006 	orrs	lr, r5, r6
    170c:	0a00000d 	beq	1748 <__aeabi_ddiv+0x134>
    1710:	e1a05205 	lsl	r5, r5, #4
    1714:	e1855e26 	orr	r5, r5, r6, lsr #28
    1718:	e1a06206 	lsl	r6, r6, #4
    171c:	e1a03183 	lsl	r3, r3, #3
    1720:	e1833ea2 	orr	r3, r3, r2, lsr #29
    1724:	e1a02182 	lsl	r2, r2, #3
    1728:	e1b0c22c 	lsrs	r12, r12, #4
    172c:	1affffdb 	bne	16a0 <__aeabi_ddiv+0x8c>
    1730:	e3110601 	tst	r1, #1048576	; 0x100000
    1734:	1a000006 	bne	1754 <__aeabi_ddiv+0x140>
    1738:	e1811000 	orr	r1, r1, r0
    173c:	e3a00000 	mov	r0, #0
    1740:	e3a0c102 	mov	r12, #-2147483648	; 0x80000000
    1744:	eaffffd5 	b	16a0 <__aeabi_ddiv+0x8c>
    1748:	e3110601 	tst	r1, #1048576	; 0x100000
    174c:	01811000 	orreq	r1, r1, r0
    1750:	03a00000 	moveq	r0, #0
    1754:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    1758:	835c0c07 	cmphi	r12, #1792	; 0x700
    175c:	8affff43 	bhi	1470 <__aeabi_dmul+0xec>
    1760:	e055c003 	subs	r12, r5, r3
    1764:	0056c002 	subseq	r12, r6, r2
    1768:	01b0c0a0 	lsrseq	r12, r0, #1
    176c:	e2b00000 	adcs	r0, r0, #0
    1770:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1774:	e8bd4070 	pop	{r4, r5, r6, lr}
    1778:	e12fff1e 	bx	lr
    177c:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    1780:	e18e1621 	orr	r1, lr, r1, lsr #12
    1784:	e09440ac 	adds	r4, r4, r12, lsr #1
    1788:	c074500c 	rsbsgt	r5, r4, r12
    178c:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    1790:	c8bd4070 	popgt	{r4, r5, r6, lr}
    1794:	c12fff1e 	bxgt	lr
    1798:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    179c:	e3a0e000 	mov	lr, #0
    17a0:	e2544001 	subs	r4, r4, #1
    17a4:	eaffff31 	b	1470 <__aeabi_dmul+0xec>
    17a8:	e185e006 	orr	lr, r5, r6
    17ac:	eaffff2f 	b	1470 <__aeabi_dmul+0xec>
    17b0:	e00c5a23 	and	r5, r12, r3, lsr #20
    17b4:	e134000c 	teq	r4, r12
    17b8:	0135000c 	teqeq	r5, r12
    17bc:	0affff90 	beq	1604 <__aeabi_dmul+0x280>
    17c0:	e134000c 	teq	r4, r12
    17c4:	1a000006 	bne	17e4 <__aeabi_ddiv+0x1d0>
    17c8:	e1904601 	orrs	r4, r0, r1, lsl #12
    17cc:	1affff8c 	bne	1604 <__aeabi_dmul+0x280>
    17d0:	e135000c 	teq	r5, r12
    17d4:	1affff83 	bne	15e8 <__aeabi_dmul+0x264>
    17d8:	e1a00002 	mov	r0, r2
    17dc:	e1a01003 	mov	r1, r3
    17e0:	eaffff87 	b	1604 <__aeabi_dmul+0x280>
    17e4:	e135000c 	teq	r5, r12
    17e8:	1a000004 	bne	1800 <__aeabi_ddiv+0x1ec>
    17ec:	e1925603 	orrs	r5, r2, r3, lsl #12
    17f0:	0affff68 	beq	1598 <__aeabi_dmul+0x214>
    17f4:	e1a00002 	mov	r0, r2
    17f8:	e1a01003 	mov	r1, r3
    17fc:	eaffff80 	b	1604 <__aeabi_dmul+0x280>
    1800:	e1906081 	orrs	r6, r0, r1, lsl #1
    1804:	11926083 	orrsne	r6, r2, r3, lsl #1
    1808:	1affff48 	bne	1530 <__aeabi_dmul+0x1ac>
    180c:	e1904081 	orrs	r4, r0, r1, lsl #1
    1810:	1affff74 	bne	15e8 <__aeabi_dmul+0x264>
    1814:	e1925083 	orrs	r5, r2, r3, lsl #1
    1818:	1affff5e 	bne	1598 <__aeabi_dmul+0x214>
    181c:	eaffff78 	b	1604 <__aeabi_dmul+0x280>

00001820 <__aeabi_d2iz>:
    1820:	e1a02081 	lsl	r2, r1, #1
    1824:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    1828:	2a00000c 	bcs	1860 <__aeabi_d2iz+0x40>
    182c:	5a000009 	bpl	1858 <__aeabi_d2iz+0x38>
    1830:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    1834:	e0532ac2 	subs	r2, r3, r2, asr #21
    1838:	9a00000a 	bls	1868 <__aeabi_d2iz+0x48>
    183c:	e1a03581 	lsl	r3, r1, #11
    1840:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    1844:	e1833aa0 	orr	r3, r3, r0, lsr #21
    1848:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    184c:	e1a00233 	lsr	r0, r3, r2
    1850:	12600000 	rsbne	r0, r0, #0
    1854:	e12fff1e 	bx	lr
    1858:	e3a00000 	mov	r0, #0
    185c:	e12fff1e 	bx	lr
    1860:	e1900601 	orrs	r0, r0, r1, lsl #12
    1864:	1a000002 	bne	1874 <__aeabi_d2iz+0x54>
    1868:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    186c:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    1870:	e12fff1e 	bx	lr
    1874:	e3a00000 	mov	r0, #0
    1878:	e12fff1e 	bx	lr

0000187c <__aeabi_frsub>:
    187c:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
    1880:	ea000000 	b	1888 <__addsf3>

00001884 <__aeabi_fsub>:
    1884:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000

00001888 <__addsf3>:
    1888:	e1b02080 	lsls	r2, r0, #1
    188c:	11b03081 	lslsne	r3, r1, #1
    1890:	11320003 	teqne	r2, r3
    1894:	11f0cc42 	mvnsne	r12, r2, asr #24
    1898:	11f0cc43 	mvnsne	r12, r3, asr #24
    189c:	0a000047 	beq	19c0 <__addsf3+0x138>
    18a0:	e1a02c22 	lsr	r2, r2, #24
    18a4:	e0723c23 	rsbs	r3, r2, r3, lsr #24
    18a8:	c0822003 	addgt	r2, r2, r3
    18ac:	c0201001 	eorgt	r1, r0, r1
    18b0:	c0210000 	eorgt	r0, r1, r0
    18b4:	c0201001 	eorgt	r1, r0, r1
    18b8:	b2633000 	rsblt	r3, r3, #0
    18bc:	e3530019 	cmp	r3, #25
    18c0:	812fff1e 	bxhi	lr
    18c4:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    18c8:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    18cc:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
    18d0:	12600000 	rsbne	r0, r0, #0
    18d4:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    18d8:	e3811502 	orr	r1, r1, #8388608	; 0x800000
    18dc:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
    18e0:	12611000 	rsbne	r1, r1, #0
    18e4:	e1320003 	teq	r2, r3
    18e8:	0a00002e 	beq	19a8 <__addsf3+0x120>
    18ec:	e2422001 	sub	r2, r2, #1
    18f0:	e0900351 	adds	r0, r0, r1, asr r3
    18f4:	e2633020 	rsb	r3, r3, #32
    18f8:	e1a01311 	lsl	r1, r1, r3
    18fc:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    1900:	5a000001 	bpl	190c <__addsf3+0x84>
    1904:	e2711000 	rsbs	r1, r1, #0
    1908:	e2e00000 	rsc	r0, r0, #0
    190c:	e3500502 	cmp	r0, #8388608	; 0x800000
    1910:	3a00000b 	bcc	1944 <__addsf3+0xbc>
    1914:	e3500401 	cmp	r0, #16777216	; 0x1000000
    1918:	3a000004 	bcc	1930 <__addsf3+0xa8>
    191c:	e1b000a0 	lsrs	r0, r0, #1
    1920:	e1a01061 	rrx	r1, r1
    1924:	e2822001 	add	r2, r2, #1
    1928:	e35200fe 	cmp	r2, #254	; 0xfe
    192c:	2a000038 	bcs	1a14 <__addsf3+0x18c>
    1930:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    1934:	e0a00b82 	adc	r0, r0, r2, lsl #23
    1938:	03c00001 	biceq	r0, r0, #1
    193c:	e1800003 	orr	r0, r0, r3
    1940:	e12fff1e 	bx	lr
    1944:	e1b01081 	lsls	r1, r1, #1
    1948:	e0a00000 	adc	r0, r0, r0
    194c:	e3100502 	tst	r0, #8388608	; 0x800000
    1950:	e2422001 	sub	r2, r2, #1
    1954:	1afffff5 	bne	1930 <__addsf3+0xa8>
    1958:	e1b0c620 	lsrs	r12, r0, #12
    195c:	01a00600 	lsleq	r0, r0, #12
    1960:	0242200c 	subeq	r2, r2, #12
    1964:	e31008ff 	tst	r0, #16711680	; 0xff0000
    1968:	01a00400 	lsleq	r0, r0, #8
    196c:	02422008 	subeq	r2, r2, #8
    1970:	e310060f 	tst	r0, #15728640	; 0xf00000
    1974:	01a00200 	lsleq	r0, r0, #4
    1978:	02422004 	subeq	r2, r2, #4
    197c:	e3100503 	tst	r0, #12582912	; 0xc00000
    1980:	01a00100 	lsleq	r0, r0, #2
    1984:	02422002 	subeq	r2, r2, #2
    1988:	e3500502 	cmp	r0, #8388608	; 0x800000
    198c:	31a00080 	lslcc	r0, r0, #1
    1990:	e2d22000 	sbcs	r2, r2, #0
    1994:	a0800b82 	addge	r0, r0, r2, lsl #23
    1998:	b2622000 	rsblt	r2, r2, #0
    199c:	a1800003 	orrge	r0, r0, r3
    19a0:	b1830230 	orrlt	r0, r3, r0, lsr r2
    19a4:	e12fff1e 	bx	lr
    19a8:	e3320000 	teq	r2, #0
    19ac:	e2211502 	eor	r1, r1, #8388608	; 0x800000
    19b0:	02200502 	eoreq	r0, r0, #8388608	; 0x800000
    19b4:	02822001 	addeq	r2, r2, #1
    19b8:	12433001 	subne	r3, r3, #1
    19bc:	eaffffca 	b	18ec <__addsf3+0x64>
    19c0:	e1a03081 	lsl	r3, r1, #1
    19c4:	e1f0cc42 	mvns	r12, r2, asr #24
    19c8:	11f0cc43 	mvnsne	r12, r3, asr #24
    19cc:	0a000013 	beq	1a20 <__addsf3+0x198>
    19d0:	e1320003 	teq	r2, r3
    19d4:	0a000002 	beq	19e4 <__addsf3+0x15c>
    19d8:	e3320000 	teq	r2, #0
    19dc:	01a00001 	moveq	r0, r1
    19e0:	e12fff1e 	bx	lr
    19e4:	e1300001 	teq	r0, r1
    19e8:	13a00000 	movne	r0, #0
    19ec:	112fff1e 	bxne	lr
    19f0:	e31204ff 	tst	r2, #-16777216	; 0xff000000
    19f4:	1a000002 	bne	1a04 <__addsf3+0x17c>
    19f8:	e1b00080 	lsls	r0, r0, #1
    19fc:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
    1a00:	e12fff1e 	bx	lr
    1a04:	e2922402 	adds	r2, r2, #33554432	; 0x2000000
    1a08:	32800502 	addcc	r0, r0, #8388608	; 0x800000
    1a0c:	312fff1e 	bxcc	lr
    1a10:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    1a14:	e383047f 	orr	r0, r3, #2130706432	; 0x7f000000
    1a18:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    1a1c:	e12fff1e 	bx	lr
    1a20:	e1f02c42 	mvns	r2, r2, asr #24
    1a24:	11a00001 	movne	r0, r1
    1a28:	01f03c43 	mvnseq	r3, r3, asr #24
    1a2c:	11a01000 	movne	r1, r0
    1a30:	e1b02480 	lsls	r2, r0, #9
    1a34:	01b03481 	lslseq	r3, r1, #9
    1a38:	01300001 	teqeq	r0, r1
    1a3c:	13800501 	orrne	r0, r0, #4194304	; 0x400000
    1a40:	e12fff1e 	bx	lr

00001a44 <__aeabi_ui2f>:
    1a44:	e3a03000 	mov	r3, #0
    1a48:	ea000001 	b	1a54 <__aeabi_i2f+0x8>

00001a4c <__aeabi_i2f>:
    1a4c:	e2103102 	ands	r3, r0, #-2147483648	; 0x80000000
    1a50:	42600000 	rsbmi	r0, r0, #0
    1a54:	e1b0c000 	movs	r12, r0
    1a58:	012fff1e 	bxeq	lr
    1a5c:	e383344b 	orr	r3, r3, #1258291200	; 0x4b000000
    1a60:	e1a01000 	mov	r1, r0
    1a64:	e3a00000 	mov	r0, #0
    1a68:	ea00000f 	b	1aac <__aeabi_l2f+0x30>

00001a6c <__aeabi_ul2f>:
    1a6c:	e1902001 	orrs	r2, r0, r1
    1a70:	012fff1e 	bxeq	lr
    1a74:	e3a03000 	mov	r3, #0
    1a78:	ea000005 	b	1a94 <__aeabi_l2f+0x18>

00001a7c <__aeabi_l2f>:
    1a7c:	e1902001 	orrs	r2, r0, r1
    1a80:	012fff1e 	bxeq	lr
    1a84:	e2113102 	ands	r3, r1, #-2147483648	; 0x80000000
    1a88:	5a000001 	bpl	1a94 <__aeabi_l2f+0x18>
    1a8c:	e2700000 	rsbs	r0, r0, #0
    1a90:	e2e11000 	rsc	r1, r1, #0
    1a94:	e1b0c001 	movs	r12, r1
    1a98:	01a0c000 	moveq	r12, r0
    1a9c:	01a01000 	moveq	r1, r0
    1aa0:	03a00000 	moveq	r0, #0
    1aa4:	e383345b 	orr	r3, r3, #1526726656	; 0x5b000000
    1aa8:	02433201 	subeq	r3, r3, #268435456	; 0x10000000
    1aac:	e2433502 	sub	r3, r3, #8388608	; 0x800000
    1ab0:	e3a02017 	mov	r2, #23
    1ab4:	e35c0801 	cmp	r12, #65536	; 0x10000
    1ab8:	21a0c82c 	lsrcs	r12, r12, #16
    1abc:	22422010 	subcs	r2, r2, #16
    1ac0:	e35c0c01 	cmp	r12, #256	; 0x100
    1ac4:	21a0c42c 	lsrcs	r12, r12, #8
    1ac8:	22422008 	subcs	r2, r2, #8
    1acc:	e35c0010 	cmp	r12, #16
    1ad0:	21a0c22c 	lsrcs	r12, r12, #4
    1ad4:	22422004 	subcs	r2, r2, #4
    1ad8:	e35c0004 	cmp	r12, #4
    1adc:	22422002 	subcs	r2, r2, #2
    1ae0:	304220ac 	subcc	r2, r2, r12, lsr #1
    1ae4:	e05221ac 	subs	r2, r2, r12, lsr #3
    1ae8:	e0433b82 	sub	r3, r3, r2, lsl #23
    1aec:	ba000006 	blt	1b0c <__aeabi_l2f+0x90>
    1af0:	e0833211 	add	r3, r3, r1, lsl r2
    1af4:	e1a0c210 	lsl	r12, r0, r2
    1af8:	e2622020 	rsb	r2, r2, #32
    1afc:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    1b00:	e0a30230 	adc	r0, r3, r0, lsr r2
    1b04:	03c00001 	biceq	r0, r0, #1
    1b08:	e12fff1e 	bx	lr
    1b0c:	e2822020 	add	r2, r2, #32
    1b10:	e1a0c211 	lsl	r12, r1, r2
    1b14:	e2622020 	rsb	r2, r2, #32
    1b18:	e190008c 	orrs	r0, r0, r12, lsl #1
    1b1c:	e0a30231 	adc	r0, r3, r1, lsr r2
    1b20:	01c00fac 	biceq	r0, r0, r12, lsr #31
    1b24:	e12fff1e 	bx	lr

00001b28 <__aeabi_fmul>:
    1b28:	e3a0c0ff 	mov	r12, #255	; 0xff
    1b2c:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    1b30:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    1b34:	1132000c 	teqne	r2, r12
    1b38:	1133000c 	teqne	r3, r12
    1b3c:	0a00003e 	beq	1c3c <__aeabi_fmul+0x114>
    1b40:	e0822003 	add	r2, r2, r3
    1b44:	e020c001 	eor	r12, r0, r1
    1b48:	e1b00480 	lsls	r0, r0, #9
    1b4c:	11b01481 	lslsne	r1, r1, #9
    1b50:	0a000010 	beq	1b98 <__aeabi_fmul+0x70>
    1b54:	e3a03302 	mov	r3, #134217728	; 0x8000000
    1b58:	e18302a0 	orr	r0, r3, r0, lsr #5
    1b5c:	e18312a1 	orr	r1, r3, r1, lsr #5
    1b60:	e0813190 	umull	r3, r1, r0, r1
    1b64:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    1b68:	e3510502 	cmp	r1, #8388608	; 0x800000
    1b6c:	31a01081 	lslcc	r1, r1, #1
    1b70:	31811fa3 	orrcc	r1, r1, r3, lsr #31
    1b74:	31a03083 	lslcc	r3, r3, #1
    1b78:	e1800001 	orr	r0, r0, r1
    1b7c:	e2c2207f 	sbc	r2, r2, #127	; 0x7f
    1b80:	e35200fd 	cmp	r2, #253	; 0xfd
    1b84:	8a00000f 	bhi	1bc8 <__aeabi_fmul+0xa0>
    1b88:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    1b8c:	e0a00b82 	adc	r0, r0, r2, lsl #23
    1b90:	03c00001 	biceq	r0, r0, #1
    1b94:	e12fff1e 	bx	lr
    1b98:	e3300000 	teq	r0, #0
    1b9c:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    1ba0:	01a01481 	lsleq	r1, r1, #9
    1ba4:	e18c04a0 	orr	r0, r12, r0, lsr #9
    1ba8:	e18004a1 	orr	r0, r0, r1, lsr #9
    1bac:	e252207f 	subs	r2, r2, #127	; 0x7f
    1bb0:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    1bb4:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    1bb8:	c12fff1e 	bxgt	lr
    1bbc:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    1bc0:	e3a03000 	mov	r3, #0
    1bc4:	e2522001 	subs	r2, r2, #1
    1bc8:	ca000035 	bgt	1ca4 <__aeabi_fmul+0x17c>
    1bcc:	e3720019 	cmn	r2, #25
    1bd0:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
    1bd4:	d12fff1e 	bxle	lr
    1bd8:	e2622000 	rsb	r2, r2, #0
    1bdc:	e1b01080 	lsls	r1, r0, #1
    1be0:	e1a01231 	lsr	r1, r1, r2
    1be4:	e2622020 	rsb	r2, r2, #32
    1be8:	e1a0c210 	lsl	r12, r0, r2
    1bec:	e1b00061 	rrxs	r0, r1
    1bf0:	e2a00000 	adc	r0, r0, #0
    1bf4:	e193308c 	orrs	r3, r3, r12, lsl #1
    1bf8:	01c00fac 	biceq	r0, r0, r12, lsr #31
    1bfc:	e12fff1e 	bx	lr
    1c00:	e3320000 	teq	r2, #0
    1c04:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    1c08:	01a00080 	lsleq	r0, r0, #1
    1c0c:	03100502 	tsteq	r0, #8388608	; 0x800000
    1c10:	02422001 	subeq	r2, r2, #1
    1c14:	0afffffb 	beq	1c08 <__aeabi_fmul+0xe0>
    1c18:	e180000c 	orr	r0, r0, r12
    1c1c:	e3330000 	teq	r3, #0
    1c20:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    1c24:	01a01081 	lsleq	r1, r1, #1
    1c28:	03110502 	tsteq	r1, #8388608	; 0x800000
    1c2c:	02433001 	subeq	r3, r3, #1
    1c30:	0afffffb 	beq	1c24 <__aeabi_fmul+0xfc>
    1c34:	e181100c 	orr	r1, r1, r12
    1c38:	eaffffc0 	b	1b40 <__aeabi_fmul+0x18>
    1c3c:	e00c3ba1 	and	r3, r12, r1, lsr #23
    1c40:	e132000c 	teq	r2, r12
    1c44:	1133000c 	teqne	r3, r12
    1c48:	0a000005 	beq	1c64 <__aeabi_fmul+0x13c>
    1c4c:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    1c50:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    1c54:	1affffe9 	bne	1c00 <__aeabi_fmul+0xd8>
    1c58:	e0200001 	eor	r0, r0, r1
    1c5c:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    1c60:	e12fff1e 	bx	lr
    1c64:	e3300000 	teq	r0, #0
    1c68:	13300102 	teqne	r0, #-2147483648	; 0x80000000
    1c6c:	01a00001 	moveq	r0, r1
    1c70:	13310000 	teqne	r1, #0
    1c74:	13310102 	teqne	r1, #-2147483648	; 0x80000000
    1c78:	0a00000d 	beq	1cb4 <__aeabi_fmul+0x18c>
    1c7c:	e132000c 	teq	r2, r12
    1c80:	1a000001 	bne	1c8c <__aeabi_fmul+0x164>
    1c84:	e1b02480 	lsls	r2, r0, #9
    1c88:	1a000009 	bne	1cb4 <__aeabi_fmul+0x18c>
    1c8c:	e133000c 	teq	r3, r12
    1c90:	1a000002 	bne	1ca0 <__aeabi_fmul+0x178>
    1c94:	e1b03481 	lsls	r3, r1, #9
    1c98:	11a00001 	movne	r0, r1
    1c9c:	1a000004 	bne	1cb4 <__aeabi_fmul+0x18c>
    1ca0:	e0200001 	eor	r0, r0, r1
    1ca4:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    1ca8:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    1cac:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    1cb0:	e12fff1e 	bx	lr
    1cb4:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    1cb8:	e3800503 	orr	r0, r0, #12582912	; 0xc00000
    1cbc:	e12fff1e 	bx	lr

00001cc0 <__aeabi_fdiv>:
    1cc0:	e3a0c0ff 	mov	r12, #255	; 0xff
    1cc4:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    1cc8:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    1ccc:	1132000c 	teqne	r2, r12
    1cd0:	1133000c 	teqne	r3, r12
    1cd4:	0a00003a 	beq	1dc4 <__aeabi_fdiv+0x104>
    1cd8:	e0422003 	sub	r2, r2, r3
    1cdc:	e020c001 	eor	r12, r0, r1
    1ce0:	e1b01481 	lsls	r1, r1, #9
    1ce4:	e1a00480 	lsl	r0, r0, #9
    1ce8:	0a00001c 	beq	1d60 <__aeabi_fdiv+0xa0>
    1cec:	e3a03201 	mov	r3, #268435456	; 0x10000000
    1cf0:	e1831221 	orr	r1, r3, r1, lsr #4
    1cf4:	e1833220 	orr	r3, r3, r0, lsr #4
    1cf8:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    1cfc:	e1530001 	cmp	r3, r1
    1d00:	31a03083 	lslcc	r3, r3, #1
    1d04:	e2a2207d 	adc	r2, r2, #125	; 0x7d
    1d08:	e3a0c502 	mov	r12, #8388608	; 0x800000
    1d0c:	e1530001 	cmp	r3, r1
    1d10:	20433001 	subcs	r3, r3, r1
    1d14:	2180000c 	orrcs	r0, r0, r12
    1d18:	e15300a1 	cmp	r3, r1, lsr #1
    1d1c:	204330a1 	subcs	r3, r3, r1, lsr #1
    1d20:	218000ac 	orrcs	r0, r0, r12, lsr #1
    1d24:	e1530121 	cmp	r3, r1, lsr #2
    1d28:	20433121 	subcs	r3, r3, r1, lsr #2
    1d2c:	2180012c 	orrcs	r0, r0, r12, lsr #2
    1d30:	e15301a1 	cmp	r3, r1, lsr #3
    1d34:	204331a1 	subcs	r3, r3, r1, lsr #3
    1d38:	218001ac 	orrcs	r0, r0, r12, lsr #3
    1d3c:	e1b03203 	lsls	r3, r3, #4
    1d40:	11b0c22c 	lsrsne	r12, r12, #4
    1d44:	1afffff0 	bne	1d0c <__aeabi_fdiv+0x4c>
    1d48:	e35200fd 	cmp	r2, #253	; 0xfd
    1d4c:	8affff9d 	bhi	1bc8 <__aeabi_fmul+0xa0>
    1d50:	e1530001 	cmp	r3, r1
    1d54:	e0a00b82 	adc	r0, r0, r2, lsl #23
    1d58:	03c00001 	biceq	r0, r0, #1
    1d5c:	e12fff1e 	bx	lr
    1d60:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    1d64:	e18c04a0 	orr	r0, r12, r0, lsr #9
    1d68:	e292207f 	adds	r2, r2, #127	; 0x7f
    1d6c:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    1d70:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    1d74:	c12fff1e 	bxgt	lr
    1d78:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    1d7c:	e3a03000 	mov	r3, #0
    1d80:	e2522001 	subs	r2, r2, #1
    1d84:	eaffff8f 	b	1bc8 <__aeabi_fmul+0xa0>
    1d88:	e3320000 	teq	r2, #0
    1d8c:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    1d90:	01a00080 	lsleq	r0, r0, #1
    1d94:	03100502 	tsteq	r0, #8388608	; 0x800000
    1d98:	02422001 	subeq	r2, r2, #1
    1d9c:	0afffffb 	beq	1d90 <__aeabi_fdiv+0xd0>
    1da0:	e180000c 	orr	r0, r0, r12
    1da4:	e3330000 	teq	r3, #0
    1da8:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    1dac:	01a01081 	lsleq	r1, r1, #1
    1db0:	03110502 	tsteq	r1, #8388608	; 0x800000
    1db4:	02433001 	subeq	r3, r3, #1
    1db8:	0afffffb 	beq	1dac <__aeabi_fdiv+0xec>
    1dbc:	e181100c 	orr	r1, r1, r12
    1dc0:	eaffffc4 	b	1cd8 <__aeabi_fdiv+0x18>
    1dc4:	e00c3ba1 	and	r3, r12, r1, lsr #23
    1dc8:	e132000c 	teq	r2, r12
    1dcc:	1a000005 	bne	1de8 <__aeabi_fdiv+0x128>
    1dd0:	e1b02480 	lsls	r2, r0, #9
    1dd4:	1affffb6 	bne	1cb4 <__aeabi_fmul+0x18c>
    1dd8:	e133000c 	teq	r3, r12
    1ddc:	1affffaf 	bne	1ca0 <__aeabi_fmul+0x178>
    1de0:	e1a00001 	mov	r0, r1
    1de4:	eaffffb2 	b	1cb4 <__aeabi_fmul+0x18c>
    1de8:	e133000c 	teq	r3, r12
    1dec:	1a000003 	bne	1e00 <__aeabi_fdiv+0x140>
    1df0:	e1b03481 	lsls	r3, r1, #9
    1df4:	0affff97 	beq	1c58 <__aeabi_fmul+0x130>
    1df8:	e1a00001 	mov	r0, r1
    1dfc:	eaffffac 	b	1cb4 <__aeabi_fmul+0x18c>
    1e00:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    1e04:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    1e08:	1affffde 	bne	1d88 <__aeabi_fdiv+0xc8>
    1e0c:	e3d02102 	bics	r2, r0, #-2147483648	; 0x80000000
    1e10:	1affffa2 	bne	1ca0 <__aeabi_fmul+0x178>
    1e14:	e3d13102 	bics	r3, r1, #-2147483648	; 0x80000000
    1e18:	1affff8e 	bne	1c58 <__aeabi_fmul+0x130>
    1e1c:	eaffffa4 	b	1cb4 <__aeabi_fmul+0x18c>

00001e20 <atexit>:
    1e20:	e1a01000 	mov	r1, r0
    1e24:	e3a00000 	mov	r0, #0
    1e28:	e92d4008 	push	{r3, lr}
    1e2c:	e1a02000 	mov	r2, r0
    1e30:	e1a03000 	mov	r3, r0
    1e34:	eb00000e 	bl	1e74 <__register_exitproc>
    1e38:	e8bd4008 	pop	{r3, lr}
    1e3c:	e12fff1e 	bx	lr

00001e40 <exit>:
    1e40:	e92d4008 	push	{r3, lr}
    1e44:	e3a01000 	mov	r1, #0
    1e48:	e1a04000 	mov	r4, r0
    1e4c:	eb000045 	bl	1f68 <__call_exitprocs>
    1e50:	e59f3018 	ldr	r3, [pc, #24]	; 1e70 <exit+0x30>
    1e54:	e5930000 	ldr	r0, [r3]
    1e58:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    1e5c:	e3530000 	cmp	r3, #0
    1e60:	11a0e00f 	movne	lr, pc
    1e64:	112fff13 	bxne	r3
    1e68:	e1a00004 	mov	r0, r4
    1e6c:	eb0000c9 	bl	2198 <_exit>
    1e70:	00002250 	.word	0x00002250

00001e74 <__register_exitproc>:
    1e74:	e59fc0e4 	ldr	r12, [pc, #228]	; 1f60 <__register_exitproc+0xec>
    1e78:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    1e7c:	e59c4000 	ldr	r4, [r12]
    1e80:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    1e84:	e35c0000 	cmp	r12, #0
    1e88:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    1e8c:	e59c5004 	ldr	r5, [r12, #4]
    1e90:	0584c148 	streq	r12, [r4, #328]	; 0x148
    1e94:	e355001f 	cmp	r5, #31
    1e98:	e24dd010 	sub	sp, sp, #16
    1e9c:	e1a06000 	mov	r6, r0
    1ea0:	da000015 	ble	1efc <__register_exitproc+0x88>
    1ea4:	e59f00b8 	ldr	r0, [pc, #184]	; 1f64 <__register_exitproc+0xf0>
    1ea8:	e3500000 	cmp	r0, #0
    1eac:	1a000001 	bne	1eb8 <__register_exitproc+0x44>
    1eb0:	e3e00000 	mvn	r0, #0
    1eb4:	ea000018 	b	1f1c <__register_exitproc+0xa8>
    1eb8:	e3a00e19 	mov	r0, #400	; 0x190
    1ebc:	e58d100c 	str	r1, [sp, #12]
    1ec0:	e58d2008 	str	r2, [sp, #8]
    1ec4:	e58d3004 	str	r3, [sp, #4]
    1ec8:	e320f000 	nop	{0}
    1ecc:	e250c000 	subs	r12, r0, #0
    1ed0:	e59d100c 	ldr	r1, [sp, #12]
    1ed4:	e59d2008 	ldr	r2, [sp, #8]
    1ed8:	e59d3004 	ldr	r3, [sp, #4]
    1edc:	0afffff3 	beq	1eb0 <__register_exitproc+0x3c>
    1ee0:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    1ee4:	e3a00000 	mov	r0, #0
    1ee8:	e58c0004 	str	r0, [r12, #4]
    1eec:	e58c5000 	str	r5, [r12]
    1ef0:	e584c148 	str	r12, [r4, #328]	; 0x148
    1ef4:	e58c0188 	str	r0, [r12, #392]	; 0x188
    1ef8:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    1efc:	e3560000 	cmp	r6, #0
    1f00:	e59c4004 	ldr	r4, [r12, #4]
    1f04:	1a000007 	bne	1f28 <__register_exitproc+0xb4>
    1f08:	e2843002 	add	r3, r4, #2
    1f0c:	e2844001 	add	r4, r4, #1
    1f10:	e78c1103 	str	r1, [r12, r3, lsl #2]
    1f14:	e58c4004 	str	r4, [r12, #4]
    1f18:	e3a00000 	mov	r0, #0
    1f1c:	e28dd010 	add	sp, sp, #16
    1f20:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    1f24:	e12fff1e 	bx	lr
    1f28:	e3a00001 	mov	r0, #1
    1f2c:	e1a00410 	lsl	r0, r0, r4
    1f30:	e08c8104 	add	r8, r12, r4, lsl #2
    1f34:	e3560002 	cmp	r6, #2
    1f38:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    1f3c:	e5883108 	str	r3, [r8, #264]	; 0x108
    1f40:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    1f44:	e1877000 	orr	r7, r7, r0
    1f48:	01830000 	orreq	r0, r3, r0
    1f4c:	e1a05008 	mov	r5, r8
    1f50:	e5882088 	str	r2, [r8, #136]	; 0x88
    1f54:	e58c7188 	str	r7, [r12, #392]	; 0x188
    1f58:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    1f5c:	eaffffe9 	b	1f08 <__register_exitproc+0x94>
    1f60:	00002250 	.word	0x00002250
    1f64:	00000000 	.word	0x00000000

00001f68 <__call_exitprocs>:
    1f68:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1f6c:	e59f3168 	ldr	r3, [pc, #360]	; 20dc <__call_exitprocs+0x174>
    1f70:	e5933000 	ldr	r3, [r3]
    1f74:	e24dd014 	sub	sp, sp, #20
    1f78:	e58d3004 	str	r3, [sp, #4]
    1f7c:	e2833f52 	add	r3, r3, #328	; 0x148
    1f80:	e58d0008 	str	r0, [sp, #8]
    1f84:	e58d300c 	str	r3, [sp, #12]
    1f88:	e1a07001 	mov	r7, r1
    1f8c:	e3a08001 	mov	r8, #1
    1f90:	e59d3004 	ldr	r3, [sp, #4]
    1f94:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    1f98:	e3560000 	cmp	r6, #0
    1f9c:	e59db00c 	ldr	r11, [sp, #12]
    1fa0:	0a000033 	beq	2074 <__call_exitprocs+0x10c>
    1fa4:	e5965004 	ldr	r5, [r6, #4]
    1fa8:	e2554001 	subs	r4, r5, #1
    1fac:	5286a088 	addpl	r10, r6, #136	; 0x88
    1fb0:	5285501f 	addpl	r5, r5, #31
    1fb4:	508a5105 	addpl	r5, r10, r5, lsl #2
    1fb8:	5a000007 	bpl	1fdc <__call_exitprocs+0x74>
    1fbc:	ea000029 	b	2068 <__call_exitprocs+0x100>
    1fc0:	e5953000 	ldr	r3, [r5]
    1fc4:	e1530007 	cmp	r3, r7
    1fc8:	0a000005 	beq	1fe4 <__call_exitprocs+0x7c>
    1fcc:	e2444001 	sub	r4, r4, #1
    1fd0:	e3740001 	cmn	r4, #1
    1fd4:	e2455004 	sub	r5, r5, #4
    1fd8:	0a000022 	beq	2068 <__call_exitprocs+0x100>
    1fdc:	e3570000 	cmp	r7, #0
    1fe0:	1afffff6 	bne	1fc0 <__call_exitprocs+0x58>
    1fe4:	e5963004 	ldr	r3, [r6, #4]
    1fe8:	e06a2005 	rsb	r2, r10, r5
    1fec:	e2433001 	sub	r3, r3, #1
    1ff0:	e0862002 	add	r2, r6, r2
    1ff4:	e1530004 	cmp	r3, r4
    1ff8:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    1ffc:	13a01000 	movne	r1, #0
    2000:	05864004 	streq	r4, [r6, #4]
    2004:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    2008:	e3530000 	cmp	r3, #0
    200c:	0affffee 	beq	1fcc <__call_exitprocs+0x64>
    2010:	e1a02418 	lsl	r2, r8, r4
    2014:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    2018:	e1120001 	tst	r2, r1
    201c:	e5969004 	ldr	r9, [r6, #4]
    2020:	0a000016 	beq	2080 <__call_exitprocs+0x118>
    2024:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    2028:	e1120001 	tst	r2, r1
    202c:	1a000016 	bne	208c <__call_exitprocs+0x124>
    2030:	e59d0008 	ldr	r0, [sp, #8]
    2034:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    2038:	e1a0e00f 	mov	lr, pc
    203c:	e12fff13 	bx	r3
    2040:	e5963004 	ldr	r3, [r6, #4]
    2044:	e1530009 	cmp	r3, r9
    2048:	1affffd0 	bne	1f90 <__call_exitprocs+0x28>
    204c:	e59b3000 	ldr	r3, [r11]
    2050:	e1530006 	cmp	r3, r6
    2054:	1affffcd 	bne	1f90 <__call_exitprocs+0x28>
    2058:	e2444001 	sub	r4, r4, #1
    205c:	e3740001 	cmn	r4, #1
    2060:	e2455004 	sub	r5, r5, #4
    2064:	1affffdc 	bne	1fdc <__call_exitprocs+0x74>
    2068:	e59f1070 	ldr	r1, [pc, #112]	; 20e0 <__call_exitprocs+0x178>
    206c:	e3510000 	cmp	r1, #0
    2070:	1a000009 	bne	209c <__call_exitprocs+0x134>
    2074:	e28dd014 	add	sp, sp, #20
    2078:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    207c:	e12fff1e 	bx	lr
    2080:	e1a0e00f 	mov	lr, pc
    2084:	e12fff13 	bx	r3
    2088:	eaffffec 	b	2040 <__call_exitprocs+0xd8>
    208c:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    2090:	e1a0e00f 	mov	lr, pc
    2094:	e12fff13 	bx	r3
    2098:	eaffffe8 	b	2040 <__call_exitprocs+0xd8>
    209c:	e5963004 	ldr	r3, [r6, #4]
    20a0:	e3530000 	cmp	r3, #0
    20a4:	e5963000 	ldr	r3, [r6]
    20a8:	1a000008 	bne	20d0 <__call_exitprocs+0x168>
    20ac:	e3530000 	cmp	r3, #0
    20b0:	0a000006 	beq	20d0 <__call_exitprocs+0x168>
    20b4:	e1a00006 	mov	r0, r6
    20b8:	e58b3000 	str	r3, [r11]
    20bc:	e320f000 	nop	{0}
    20c0:	e59b6000 	ldr	r6, [r11]
    20c4:	e3560000 	cmp	r6, #0
    20c8:	1affffb5 	bne	1fa4 <__call_exitprocs+0x3c>
    20cc:	eaffffe8 	b	2074 <__call_exitprocs+0x10c>
    20d0:	e1a0b006 	mov	r11, r6
    20d4:	e1a06003 	mov	r6, r3
    20d8:	eafffff9 	b	20c4 <__call_exitprocs+0x15c>
    20dc:	00002250 	.word	0x00002250
    20e0:	00000000 	.word	0x00000000

000020e4 <register_fini>:
    20e4:	e92d4008 	push	{r3, lr}
    20e8:	e59f3010 	ldr	r3, [pc, #16]	; 2100 <register_fini+0x1c>
    20ec:	e3530000 	cmp	r3, #0
    20f0:	159f000c 	ldrne	r0, [pc, #12]	; 2104 <register_fini+0x20>
    20f4:	1bffff49 	blne	1e20 <atexit>
    20f8:	e8bd4008 	pop	{r3, lr}
    20fc:	e12fff1e 	bx	lr
    2100:	00002278 	.word	0x00002278
    2104:	00002108 	.word	0x00002108

00002108 <__libc_fini_array>:
    2108:	e92d4038 	push	{r3, r4, r5, lr}
    210c:	e59f5030 	ldr	r5, [pc, #48]	; 2144 <__libc_fini_array+0x3c>
    2110:	e59f4030 	ldr	r4, [pc, #48]	; 2148 <__libc_fini_array+0x40>
    2114:	e0654004 	rsb	r4, r5, r4
    2118:	e1b04144 	asrs	r4, r4, #2
    211c:	10855104 	addne	r5, r5, r4, lsl #2
    2120:	0a000004 	beq	2138 <__libc_fini_array+0x30>
    2124:	e5353004 	ldr	r3, [r5, #-4]!
    2128:	e1a0e00f 	mov	lr, pc
    212c:	e12fff13 	bx	r3
    2130:	e2544001 	subs	r4, r4, #1
    2134:	1afffffa 	bne	2124 <__libc_fini_array+0x1c>
    2138:	eb00004e 	bl	2278 <__libc_fini>
    213c:	e8bd4038 	pop	{r3, r4, r5, lr}
    2140:	e12fff1e 	bx	lr
    2144:	00002290 	.word	0x00002290
    2148:	00002294 	.word	0x00002294

0000214c <__cs3_premain>:
    214c:	e92d4008 	push	{r3, lr}
    2150:	eb000017 	bl	21b4 <__libc_init_array>
    2154:	e59f3030 	ldr	r3, [pc, #48]	; 218c <__cs3_premain+0x40>
    2158:	e3530000 	cmp	r3, #0
    215c:	15930000 	ldrne	r0, [r3]
    2160:	01a00003 	moveq	r0, r3
    2164:	e59f3024 	ldr	r3, [pc, #36]	; 2190 <__cs3_premain+0x44>
    2168:	e3530000 	cmp	r3, #0
    216c:	15931000 	ldrne	r1, [r3]
    2170:	01a01003 	moveq	r1, r3
    2174:	e3a02000 	mov	r2, #0
    2178:	ebfff886 	bl	398 <main>
    217c:	e59f3010 	ldr	r3, [pc, #16]	; 2194 <__cs3_premain+0x48>
    2180:	e3530000 	cmp	r3, #0
    2184:	1bffff2d 	blne	1e40 <exit>
    2188:	eafffffe 	b	2188 <__cs3_premain+0x3c>
	...
    2194:	00001e40 	.word	0x00001e40

00002198 <_exit>:
    2198:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    219c:	e3a00018 	mov	r0, #24
    21a0:	e59f1004 	ldr	r1, [pc, #4]	; 21ac <_exit+0x14>
    21a4:	ef123456 	svc	0x00123456
    21a8:	eafffffe 	b	21a8 <_exit+0x10>
    21ac:	00020026 	.word	0x00020026

000021b0 <__cs3_isr_interrupt>:
    21b0:	eafffffe 	b	21b0 <__cs3_isr_interrupt>

000021b4 <__libc_init_array>:
    21b4:	e92d4070 	push	{r4, r5, r6, lr}
    21b8:	e59f506c 	ldr	r5, [pc, #108]	; 222c <__libc_init_array+0x78>
    21bc:	e59f606c 	ldr	r6, [pc, #108]	; 2230 <__libc_init_array+0x7c>
    21c0:	e0656006 	rsb	r6, r5, r6
    21c4:	e1b06146 	asrs	r6, r6, #2
    21c8:	12455004 	subne	r5, r5, #4
    21cc:	13a04000 	movne	r4, #0
    21d0:	0a000005 	beq	21ec <__libc_init_array+0x38>
    21d4:	e5b53004 	ldr	r3, [r5, #4]!
    21d8:	e2844001 	add	r4, r4, #1
    21dc:	e1a0e00f 	mov	lr, pc
    21e0:	e12fff13 	bx	r3
    21e4:	e1560004 	cmp	r6, r4
    21e8:	1afffff9 	bne	21d4 <__libc_init_array+0x20>
    21ec:	e59f5040 	ldr	r5, [pc, #64]	; 2234 <__libc_init_array+0x80>
    21f0:	e59f6040 	ldr	r6, [pc, #64]	; 2238 <__libc_init_array+0x84>
    21f4:	e0656006 	rsb	r6, r5, r6
    21f8:	eb000016 	bl	2258 <_init>
    21fc:	e1b06146 	asrs	r6, r6, #2
    2200:	12455004 	subne	r5, r5, #4
    2204:	13a04000 	movne	r4, #0
    2208:	0a000005 	beq	2224 <__libc_init_array+0x70>
    220c:	e5b53004 	ldr	r3, [r5, #4]!
    2210:	e2844001 	add	r4, r4, #1
    2214:	e1a0e00f 	mov	lr, pc
    2218:	e12fff13 	bx	r3
    221c:	e1560004 	cmp	r6, r4
    2220:	1afffff9 	bne	220c <__libc_init_array+0x58>
    2224:	e8bd4070 	pop	{r4, r5, r6, lr}
    2228:	e12fff1e 	bx	lr
    222c:	00002270 	.word	0x00002270
    2230:	00002270 	.word	0x00002270
    2234:	00002270 	.word	0x00002270
    2238:	00002278 	.word	0x00002278

Disassembly of section .rodata:

00002240 <_global_impure_ptr-0x10>:
    2240:	33323130 	.word	0x33323130
    2244:	37363534 	.word	0x37363534
    2248:	42413938 	.word	0x42413938
    224c:	46454443 	.word	0x46454443

00002250 <_global_impure_ptr>:
    2250:	000022b8 00000043                       ."..C...

00002258 <_init>:
    2258:	e1a0c00d 	mov	r12, sp
    225c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    2260:	e24cb004 	sub	r11, r12, #4
    2264:	e24bd028 	sub	sp, r11, #40	; 0x28
    2268:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    226c:	e12fff1e 	bx	lr

00002270 <__init_array_start>:
    2270:	000020e4 	.word	0x000020e4

00002274 <__frame_dummy_init_array_entry>:
    2274:	00000208                                ....

00002278 <__libc_fini>:
    2278:	e1a0c00d 	mov	r12, sp
    227c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    2280:	e24cb004 	sub	r11, r12, #4
    2284:	e24bd028 	sub	sp, r11, #40	; 0x28
    2288:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    228c:	e12fff1e 	bx	lr

00002290 <__fini_array_start>:
    2290:	000001c4 	.word	0x000001c4

00002294 <__cs3_regions>:
	...
    22a0:	000026e8 	.word	0x000026e8
    22a4:	00000020 	.word	0x00000020
