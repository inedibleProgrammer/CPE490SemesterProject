
//gc-labfile01/LabMyDocs/jebugay/My Documents/Spring2018/CPE490/Lab7/Backups/Lab7ADCWorks/Button.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
       0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      20:	24 03 00 00 30 03 00 00 3c 03 00 00 48 03 00 00     $...0...<...H...
      30:	54 03 00 00 58 11 00 00 ac 02 00 00 60 03 00 00     T...X.......`...

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb000406 	bl	10f4 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00001250 	.word	0x00001250

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00001688 	.word	0x00001688

00000124 <__cs3_heap_start_ptr>:
     124:	000016b0 	.word	0x000016b0

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00001690 	.word	0x00001690
     170:	00001693 	.word	0x00001693
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	00001690 	.word	0x00001690
     1bc:	00001690 	.word	0x00001690
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00001690 	.word	0x00001690
     200:	00000000 	.word	0x00000000
     204:	000011e4 	.word	0x000011e4

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	000011e4 	.word	0x000011e4
     250:	00001694 	.word	0x00001694
     254:	00001250 	.word	0x00001250
     258:	00000000 	.word	0x00000000

0000025c <ButtonISR>:
/***************************************************************************************************
Function Definitions:
***************************************************************************************************/

void ButtonISR(void)
{
     25c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     260:	e28db000 	add	r11, sp, #0
     264:	e24dd00c 	sub	sp, sp, #12
    volatile int * KEY_ptr = (int *) 0xFF200050;  // pushbutton KEY base address
     268:	e3a03050 	mov	r3, #80	; 0x50
     26c:	e34f3f20 	movt	r3, #65312	; 0xff20
     270:	e50b3008 	str	r3, [r11, #-8]
    int press;

    // Global Variable:
    BUTTON_FLAG = 1;
     274:	e30136ac 	movw	r3, #5804	; 0x16ac
     278:	e3403000 	movt	r3, #0
     27c:	e3a02001 	mov	r2, #1
     280:	e5c32000 	strb	r2, [r3]

    press = *(KEY_ptr + 3); // read the pushbutton interrupt register
     284:	e51b3008 	ldr	r3, [r11, #-8]
     288:	e593300c 	ldr	r3, [r3, #12]
     28c:	e50b300c 	str	r3, [r11, #-12]
    *(KEY_ptr + 3) = press; // clear the interrupt
     290:	e51b3008 	ldr	r3, [r11, #-8]
     294:	e283300c 	add	r3, r3, #12
     298:	e51b200c 	ldr	r2, [r11, #-12]
     29c:	e5832000 	str	r2, [r3]
     2a0:	e28bd000 	add	sp, r11, #0
     2a4:	e8bd0800 	ldmfd	sp!, {r11}
     2a8:	e12fff1e 	bx	lr

000002ac <__cs3_isr_irq>:
Global Variables:
***************************************************************************************************/

// Define the IRQ exception handler
void __attribute__ ((interrupt)) __cs3_isr_irq (void)
{
     2ac:	e24ee004 	sub	lr, lr, #4
     2b0:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
     2b4:	e28db018 	add	r11, sp, #24
     2b8:	e24dd00c 	sub	sp, sp, #12
    // Read the ICCIAR from the CPU interface in the GIC
    int address;
    int interrupt_ID;
    
    address = MPCORE_GIC_CPUIF + ICCIAR;
     2bc:	e30c310c 	movw	r3, #49420	; 0xc10c
     2c0:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     2c4:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
    interrupt_ID = *(int *)address;
     2c8:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     2cc:	e5933000 	ldr	r3, [r3]
     2d0:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
   
    if (interrupt_ID == KEYS_IRQ)       // check if interrupt is from the KEYs
     2d4:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
     2d8:	e3530049 	cmp	r3, #73	; 0x49
     2dc:	1a000001 	bne	2e8 <__cs3_isr_irq+0x3c>
        ButtonISR();
     2e0:	ebffffdd 	bl	25c <ButtonISR>
     2e4:	ea000005 	b	300 <__cs3_isr_irq+0x54>
    else if(interrupt_ID == MPCORE_PRIV_TIMER_IRQ)
     2e8:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
     2ec:	e353001d 	cmp	r3, #29
     2f0:	1a000001 	bne	2fc <__cs3_isr_irq+0x50>
        TimerISR();
     2f4:	eb0001f1 	bl	ac0 <TimerISR>
     2f8:	ea000000 	b	300 <__cs3_isr_irq+0x54>
    // if(interrupt_ID == PS2_IRQ)
        // PS2ISR();
    else
        while (1);                          // if unexpected, then stay here
     2fc:	eafffffe 	b	2fc <__cs3_isr_irq+0x50>

    // Write to the End of Interrupt Register (ICCEOIR)
    address = MPCORE_GIC_CPUIF + ICCEOIR;
     300:	e30c3110 	movw	r3, #49424	; 0xc110
     304:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     308:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
    *(int *)address = interrupt_ID;
     30c:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     310:	e51b2024 	ldr	r2, [r11, #-36]	; 0xffffffdc
     314:	e5832000 	str	r2, [r3]

    return;
     318:	e1a00000 	nop			; (mov r0, r0)
} 
     31c:	e24bd018 	sub	sp, r11, #24
     320:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

00000324 <__cs3_reset>:

// Define the remaining exception handlers
void __attribute__ ((interrupt)) __cs3_reset (void)
{
     324:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     328:	e28db000 	add	r11, sp, #0
    while(1);
     32c:	eafffffe 	b	32c <__cs3_reset+0x8>

00000330 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void)
{
     330:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     334:	e28db000 	add	r11, sp, #0
    while(1);
     338:	eafffffe 	b	338 <__cs3_isr_undef+0x8>

0000033c <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void)
{
     33c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     340:	e28db000 	add	r11, sp, #0
    while(1);
     344:	eafffffe 	b	344 <__cs3_isr_swi+0x8>

00000348 <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void)
{
     348:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     34c:	e28db000 	add	r11, sp, #0
    while(1);
     350:	eafffffe 	b	350 <__cs3_isr_pabort+0x8>

00000354 <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void)
{
     354:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     358:	e28db000 	add	r11, sp, #0
    while(1);
     35c:	eafffffe 	b	35c <__cs3_isr_dabort+0x8>

00000360 <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void)
{
     360:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     364:	e28db000 	add	r11, sp, #0
    while(1);
     368:	eafffffe 	b	368 <__cs3_isr_fiq+0x8>

0000036c <disable_A9_interrupts>:
}

void disable_A9_interrupts(void)
{
     36c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     370:	e28db000 	add	r11, sp, #0
     374:	e24dd00c 	sub	sp, sp, #12
    int status = 0b11010011;
     378:	e3a030d3 	mov	r3, #211	; 0xd3
     37c:	e50b3008 	str	r3, [r11, #-8]
    asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     380:	e51b3008 	ldr	r3, [r11, #-8]
     384:	e129f003 	msr	CPSR_fc, r3
}
     388:	e28bd000 	add	sp, r11, #0
     38c:	e8bd0800 	ldmfd	sp!, {r11}
     390:	e12fff1e 	bx	lr

00000394 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack(void)
{
     394:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     398:	e28db000 	add	r11, sp, #0
     39c:	e24dd00c 	sub	sp, sp, #12
    int stack, mode;
    stack = A9_ONCHIP_END - 7;      // top of A9 onchip memory, aligned to 8 bytes
     3a0:	e3e03007 	mvn	r3, #7
     3a4:	e50b3008 	str	r3, [r11, #-8]
    /* change processor to IRQ mode with interrupts disabled */
    mode = INT_DISABLE | IRQ_MODE;
     3a8:	e3a030d2 	mov	r3, #210	; 0xd2
     3ac:	e50b300c 	str	r3, [r11, #-12]
    asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     3b0:	e51b300c 	ldr	r3, [r11, #-12]
     3b4:	e129f003 	msr	CPSR_fc, r3
    /* set banked stack pointer */
    asm("mov sp, %[ps]" : : [ps] "r" (stack));
     3b8:	e51b3008 	ldr	r3, [r11, #-8]
     3bc:	e1a0d003 	mov	sp, r3

    /* go back to SVC mode before executing subroutine return! */
    mode = INT_DISABLE | SVC_MODE;
     3c0:	e3a030d3 	mov	r3, #211	; 0xd3
     3c4:	e50b300c 	str	r3, [r11, #-12]
    asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     3c8:	e51b300c 	ldr	r3, [r11, #-12]
     3cc:	e129f003 	msr	CPSR_fc, r3
}
     3d0:	e28bd000 	add	sp, r11, #0
     3d4:	e8bd0800 	ldmfd	sp!, {r11}
     3d8:	e12fff1e 	bx	lr

000003dc <enable_A9_interrupts>:

void enable_A9_interrupts(void)
{
     3dc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     3e0:	e28db000 	add	r11, sp, #0
     3e4:	e24dd00c 	sub	sp, sp, #12
    int status = SVC_MODE | INT_ENABLE;
     3e8:	e3a03053 	mov	r3, #83	; 0x53
     3ec:	e50b3008 	str	r3, [r11, #-8]
    asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     3f0:	e51b3008 	ldr	r3, [r11, #-8]
     3f4:	e129f003 	msr	CPSR_fc, r3
}
     3f8:	e28bd000 	add	sp, r11, #0
     3fc:	e8bd0800 	ldmfd	sp!, {r11}
     400:	e12fff1e 	bx	lr

00000404 <config_GIC>:

void config_GIC(void) // STEP 3 IN SECTION 3.1 OF USING THE ARM GENERIC INTERRUPT CONTROLLER
{
     404:	e92d4800 	push	{r11, lr}
     408:	e28db004 	add	r11, sp, #4
     40c:	e24dd008 	sub	sp, sp, #8
    int address;
    config_interrupt (KEYS_IRQ, CPU0);  // configure the FPGA KEYs interrupt
     410:	e3a00049 	mov	r0, #73	; 0x49
     414:	e3a01001 	mov	r1, #1
     418:	eb000016 	bl	478 <config_interrupt>

    // Custom:
    config_interrupt(MPCORE_PRIV_TIMER_IRQ, CPU0); // Hopefully, this configures the timer interrupts.
     41c:	e3a0001d 	mov	r0, #29
     420:	e3a01001 	mov	r1, #1
     424:	eb000013 	bl	478 <config_interrupt>
    // config_interrupt (PS2_IRQ, CPU0);               // PS2
    
    // Set Interrupt Priority Mask Register (ICCPMR). Enable interrupts of all priorities 
    address = MPCORE_GIC_CPUIF + ICCPMR;
     428:	e30c3104 	movw	r3, #49412	; 0xc104
     42c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     430:	e50b3008 	str	r3, [r11, #-8]
    *(int *) address = 0xFFFF;       
     434:	e51b3008 	ldr	r3, [r11, #-8]
     438:	e30f2fff 	movw	r2, #65535	; 0xffff
     43c:	e5832000 	str	r2, [r3]

    // Set CPU Interface Control Register (ICCICR). Enable signaling of interrupts
    address = MPCORE_GIC_CPUIF + ICCICR;
     440:	e3a03cc1 	mov	r3, #49408	; 0xc100
     444:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     448:	e50b3008 	str	r3, [r11, #-8]
    *(int *) address = 1;       
     44c:	e51b3008 	ldr	r3, [r11, #-8]
     450:	e3a02001 	mov	r2, #1
     454:	e5832000 	str	r2, [r3]

    // Configure the Distributor Control Register (ICDDCR) to send pending interrupts to CPUs 
    address = MPCORE_GIC_DIST + ICDDCR;
     458:	e3a03a0d 	mov	r3, #53248	; 0xd000
     45c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     460:	e50b3008 	str	r3, [r11, #-8]
    *(int *) address = 1;          
     464:	e51b3008 	ldr	r3, [r11, #-8]
     468:	e3a02001 	mov	r2, #1
     46c:	e5832000 	str	r2, [r3]
}
     470:	e24bd004 	sub	sp, r11, #4
     474:	e8bd8800 	pop	{r11, pc}

00000478 <config_interrupt>:

void config_interrupt (int N, int CPU_target)
{
     478:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     47c:	e28db000 	add	r11, sp, #0
     480:	e24dd01c 	sub	sp, sp, #28
     484:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
     488:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
    int reg_offset, index, value, address;
    
    /* Configure the Interrupt Set-Enable Registers (ICDISERn). 
     * reg_offset = (integer_div(N / 32) * 4
     * value = 1 << (N mod 32) */
    reg_offset = (N >> 3) & 0xFFFFFFFC; 
     48c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     490:	e1a031c3 	asr	r3, r3, #3
     494:	e3c33003 	bic	r3, r3, #3
     498:	e50b3008 	str	r3, [r11, #-8]
    index = N & 0x1F;
     49c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     4a0:	e203301f 	and	r3, r3, #31
     4a4:	e50b300c 	str	r3, [r11, #-12]
    value = 0x1 << index;
     4a8:	e3a02001 	mov	r2, #1
     4ac:	e51b300c 	ldr	r3, [r11, #-12]
     4b0:	e1a03312 	lsl	r3, r2, r3
     4b4:	e50b3010 	str	r3, [r11, #-16]
    address = MPCORE_GIC_DIST + ICDISER + reg_offset;
     4b8:	e51b3008 	ldr	r3, [r11, #-8]
     4bc:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
     4c0:	e2433c03 	sub	r3, r3, #768	; 0x300
     4c4:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    /* Now that we know the register address and value, set the appropriate bit */
   *(int *)address |= value;
     4c8:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     4cc:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     4d0:	e5921000 	ldr	r1, [r2]
     4d4:	e51b2010 	ldr	r2, [r11, #-16]
     4d8:	e1812002 	orr	r2, r1, r2
     4dc:	e5832000 	str	r2, [r3]

    /* Configure the Interrupt Processor Targets Register (ICDIPTRn)
     * reg_offset = integer_div(N / 4) * 4
     * index = N mod 4 */
    reg_offset = (N & 0xFFFFFFFC);
     4e0:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     4e4:	e3c33003 	bic	r3, r3, #3
     4e8:	e50b3008 	str	r3, [r11, #-8]
    index = N & 0x3;
     4ec:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     4f0:	e2033003 	and	r3, r3, #3
     4f4:	e50b300c 	str	r3, [r11, #-12]
    address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
     4f8:	e51b2008 	ldr	r2, [r11, #-8]
     4fc:	e51b300c 	ldr	r3, [r11, #-12]
     500:	e0823003 	add	r3, r2, r3
     504:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
     508:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    /* Now that we know the register address and value, write to (only) the appropriate byte */
    *(char *)address = (char) CPU_target;
     50c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     510:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     514:	e6ef2072 	uxtb	r2, r2
     518:	e5c32000 	strb	r2, [r3]
}
     51c:	e28bd000 	add	sp, r11, #0
     520:	e8bd0800 	ldmfd	sp!, {r11}
     524:	e12fff1e 	bx	lr

00000528 <ConfigINTs>:

void ConfigINTs()
{
     528:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     52c:	e28db000 	add	r11, sp, #0
     530:	e24dd00c 	sub	sp, sp, #12
    volatile int * KEY_ptr = (int *) KEY_BASE;              // pushbutton KEY base address
     534:	e3a03050 	mov	r3, #80	; 0x50
     538:	e34f3f20 	movt	r3, #65312	; 0xff20
     53c:	e50b3008 	str	r3, [r11, #-8]
    volatile int* timerPtr = (int*) MPCORE_PRIV_TIMER;      // timer base address
     540:	e3a03cc6 	mov	r3, #50688	; 0xc600
     544:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     548:	e50b300c 	str	r3, [r11, #-12]
    // volatile int * PS2_ptr = (int *) PS2_BASE;  // PS/2 port address

    // *(PS2_ptr) = 0xFF;              /* reset */
    // *(PS2_ptr + 1) = 0x1;           /* write to the PS/2 Control register to enable interrupts */

    *(KEY_ptr + 2) = 0x01;                                  // enable interrupts for KEY0
     54c:	e51b3008 	ldr	r3, [r11, #-8]
     550:	e2833008 	add	r3, r3, #8
     554:	e3a02001 	mov	r2, #1
     558:	e5832000 	str	r2, [r3]

    *(timerPtr) = 2000;                                     // Interrupt every 0.001s
     55c:	e51b300c 	ldr	r3, [r11, #-12]
     560:	e3a02e7d 	mov	r2, #2000	; 0x7d0
     564:	e5832000 	str	r2, [r3]
    *(timerPtr + 2) |= (100 << 8);                          // Prescale 100
     568:	e51b300c 	ldr	r3, [r11, #-12]
     56c:	e2833008 	add	r3, r3, #8
     570:	e51b200c 	ldr	r2, [r11, #-12]
     574:	e2822008 	add	r2, r2, #8
     578:	e5922000 	ldr	r2, [r2]
     57c:	e3822b19 	orr	r2, r2, #25600	; 0x6400
     580:	e5832000 	str	r2, [r3]
    *(timerPtr + 2) |= 0x07;                                // Turn on I, A, and E
     584:	e51b300c 	ldr	r3, [r11, #-12]
     588:	e2833008 	add	r3, r3, #8
     58c:	e51b200c 	ldr	r2, [r11, #-12]
     590:	e2822008 	add	r2, r2, #8
     594:	e5922000 	ldr	r2, [r2]
     598:	e3822007 	orr	r2, r2, #7
     59c:	e5832000 	str	r2, [r3]
}
     5a0:	e28bd000 	add	sp, r11, #0
     5a4:	e8bd0800 	ldmfd	sp!, {r11}
     5a8:	e12fff1e 	bx	lr

000005ac <put_jtag>:
#include "JTAG_UART.h"
#include "Constants.h"


void put_jtag( char c )
{
     5ac:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     5b0:	e28db000 	add	r11, sp, #0
     5b4:	e24dd014 	sub	sp, sp, #20
     5b8:	e1a03000 	mov	r3, r0
     5bc:	e54b300d 	strb	r3, [r11, #-13]
    volatile int * JTAG_UART_ptr    = (int *) JTAG_UART_BASE;   // JTAG UART address
     5c0:	e3a03a01 	mov	r3, #4096	; 0x1000
     5c4:	e34f3f20 	movt	r3, #65312	; 0xff20
     5c8:	e50b3008 	str	r3, [r11, #-8]

    int control;
    control = *(JTAG_UART_ptr + 1);     // read the JTAG_UART control register
     5cc:	e51b3008 	ldr	r3, [r11, #-8]
     5d0:	e5933004 	ldr	r3, [r3, #4]
     5d4:	e50b300c 	str	r3, [r11, #-12]
    if (control & 0xFFFF0000)               // if space, echo character, else ignore 
     5d8:	e51b300c 	ldr	r3, [r11, #-12]
     5dc:	e1a03823 	lsr	r3, r3, #16
     5e0:	e1a03803 	lsl	r3, r3, #16
     5e4:	e3530000 	cmp	r3, #0
     5e8:	0a000002 	beq	5f8 <put_jtag+0x4c>
        *(JTAG_UART_ptr) = c;
     5ec:	e55b200d 	ldrb	r2, [r11, #-13]
     5f0:	e51b3008 	ldr	r3, [r11, #-8]
     5f4:	e5832000 	str	r2, [r3]
}
     5f8:	e28bd000 	add	sp, r11, #0
     5fc:	e8bd0800 	ldmfd	sp!, {r11}
     600:	e12fff1e 	bx	lr

00000604 <get_jtag>:

char get_jtag( void )
{
     604:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     608:	e28db000 	add	r11, sp, #0
     60c:	e24dd00c 	sub	sp, sp, #12
    volatile int * JTAG_UART_ptr    = (int *) JTAG_UART_BASE;   // JTAG UART address
     610:	e3a03a01 	mov	r3, #4096	; 0x1000
     614:	e34f3f20 	movt	r3, #65312	; 0xff20
     618:	e50b3008 	str	r3, [r11, #-8]

    int data;
    data = *(JTAG_UART_ptr);                // read the JTAG_UART data register
     61c:	e51b3008 	ldr	r3, [r11, #-8]
     620:	e5933000 	ldr	r3, [r3]
     624:	e50b300c 	str	r3, [r11, #-12]
    if (data & 0x00008000)                  // check RVALID to see if there is new data
     628:	e51b300c 	ldr	r3, [r11, #-12]
     62c:	e2033902 	and	r3, r3, #32768	; 0x8000
     630:	e3530000 	cmp	r3, #0
     634:	0a000002 	beq	644 <get_jtag+0x40>
        return ((char) data & 0xFF);
     638:	e51b300c 	ldr	r3, [r11, #-12]
     63c:	e6ef3073 	uxtb	r3, r3
     640:	ea000000 	b	648 <get_jtag+0x44>
    else
        return ('\0');
     644:	e3a03000 	mov	r3, #0
}
     648:	e1a00003 	mov	r0, r3
     64c:	e28bd000 	add	sp, r11, #0
     650:	e8bd0800 	ldmfd	sp!, {r11}
     654:	e12fff1e 	bx	lr

00000658 <GetDigit>:

char GetDigit(unsigned char value)
{
     658:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     65c:	e28db000 	add	r11, sp, #0
     660:	e24dd01c 	sub	sp, sp, #28
     664:	e1a03000 	mov	r3, r0
     668:	e54b3015 	strb	r3, [r11, #-21]	; 0xffffffeb
    char digits[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
     66c:	e30131e8 	movw	r3, #4584	; 0x11e8
     670:	e3403000 	movt	r3, #0
     674:	e24bc014 	sub	r12, r11, #20
     678:	e5930000 	ldr	r0, [r3]
     67c:	e5931004 	ldr	r1, [r3, #4]
     680:	e5932008 	ldr	r2, [r3, #8]
     684:	e593300c 	ldr	r3, [r3, #12]
     688:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}

    return digits[value];
     68c:	e55b2015 	ldrb	r2, [r11, #-21]	; 0xffffffeb
     690:	e3e0300f 	mvn	r3, #15
     694:	e24b1004 	sub	r1, r11, #4
     698:	e0812002 	add	r2, r1, r2
     69c:	e0823003 	add	r3, r2, r3
     6a0:	e5d33000 	ldrb	r3, [r3]
}
     6a4:	e1a00003 	mov	r0, r3
     6a8:	e28bd000 	add	sp, r11, #0
     6ac:	e8bd0800 	ldmfd	sp!, {r11}
     6b0:	e12fff1e 	bx	lr

000006b4 <DigitSeparator>:

/***************************************************************************************************
Function Definitions:
***************************************************************************************************/
struct Digits DigitSeparator(int number)
{
     6b4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     6b8:	e28db000 	add	r11, sp, #0
     6bc:	e24dd014 	sub	sp, sp, #20
     6c0:	e50b0010 	str	r0, [r11, #-16]
    struct Digits numberSeparated;

    numberSeparated.thousands = number / 1000;
     6c4:	e51b2010 	ldr	r2, [r11, #-16]
     6c8:	e3043dd3 	movw	r3, #19923	; 0x4dd3
     6cc:	e3413062 	movt	r3, #4194	; 0x1062
     6d0:	e0c31293 	smull	r1, r3, r3, r2
     6d4:	e1a01343 	asr	r1, r3, #6
     6d8:	e1a03fc2 	asr	r3, r2, #31
     6dc:	e0633001 	rsb	r3, r3, r1
     6e0:	e6ef3073 	uxtb	r3, r3
     6e4:	e54b300c 	strb	r3, [r11, #-12]
    numberSeparated.hundreds  = (number % 1000) / 100;
     6e8:	e51b2010 	ldr	r2, [r11, #-16]
     6ec:	e3043dd3 	movw	r3, #19923	; 0x4dd3
     6f0:	e3413062 	movt	r3, #4194	; 0x1062
     6f4:	e0c31293 	smull	r1, r3, r3, r2
     6f8:	e1a01343 	asr	r1, r3, #6
     6fc:	e1a03fc2 	asr	r3, r2, #31
     700:	e0633001 	rsb	r3, r3, r1
     704:	e3a01ffa 	mov	r1, #1000	; 0x3e8
     708:	e0030391 	mul	r3, r1, r3
     70c:	e0633002 	rsb	r3, r3, r2
     710:	e308251f 	movw	r2, #34079	; 0x851f
     714:	e34521eb 	movt	r2, #20971	; 0x51eb
     718:	e0c21392 	smull	r1, r2, r2, r3
     71c:	e1a022c2 	asr	r2, r2, #5
     720:	e1a03fc3 	asr	r3, r3, #31
     724:	e0633002 	rsb	r3, r3, r2
     728:	e6ef3073 	uxtb	r3, r3
     72c:	e54b300b 	strb	r3, [r11, #-11]
    numberSeparated.tens      = ((number % 1000) % 100) / 10;
     730:	e51b2010 	ldr	r2, [r11, #-16]
     734:	e3043dd3 	movw	r3, #19923	; 0x4dd3
     738:	e3413062 	movt	r3, #4194	; 0x1062
     73c:	e0c31293 	smull	r1, r3, r3, r2
     740:	e1a01343 	asr	r1, r3, #6
     744:	e1a03fc2 	asr	r3, r2, #31
     748:	e0633001 	rsb	r3, r3, r1
     74c:	e3a01ffa 	mov	r1, #1000	; 0x3e8
     750:	e0030391 	mul	r3, r1, r3
     754:	e0633002 	rsb	r3, r3, r2
     758:	e308251f 	movw	r2, #34079	; 0x851f
     75c:	e34521eb 	movt	r2, #20971	; 0x51eb
     760:	e0c21392 	smull	r1, r2, r2, r3
     764:	e1a012c2 	asr	r1, r2, #5
     768:	e1a02fc3 	asr	r2, r3, #31
     76c:	e0622001 	rsb	r2, r2, r1
     770:	e3a01064 	mov	r1, #100	; 0x64
     774:	e0020291 	mul	r2, r1, r2
     778:	e0622003 	rsb	r2, r2, r3
     77c:	e3063667 	movw	r3, #26215	; 0x6667
     780:	e3463666 	movt	r3, #26214	; 0x6666
     784:	e0c31293 	smull	r1, r3, r3, r2
     788:	e1a01143 	asr	r1, r3, #2
     78c:	e1a03fc2 	asr	r3, r2, #31
     790:	e0633001 	rsb	r3, r3, r1
     794:	e6ef3073 	uxtb	r3, r3
     798:	e54b300a 	strb	r3, [r11, #-10]
    numberSeparated.ones      = (((number % 1000) % 100) % 10);
     79c:	e51b2010 	ldr	r2, [r11, #-16]
     7a0:	e3043dd3 	movw	r3, #19923	; 0x4dd3
     7a4:	e3413062 	movt	r3, #4194	; 0x1062
     7a8:	e0c31293 	smull	r1, r3, r3, r2
     7ac:	e1a01343 	asr	r1, r3, #6
     7b0:	e1a03fc2 	asr	r3, r2, #31
     7b4:	e0633001 	rsb	r3, r3, r1
     7b8:	e3a01ffa 	mov	r1, #1000	; 0x3e8
     7bc:	e0030391 	mul	r3, r1, r3
     7c0:	e0633002 	rsb	r3, r3, r2
     7c4:	e308251f 	movw	r2, #34079	; 0x851f
     7c8:	e34521eb 	movt	r2, #20971	; 0x51eb
     7cc:	e0c21392 	smull	r1, r2, r2, r3
     7d0:	e1a012c2 	asr	r1, r2, #5
     7d4:	e1a02fc3 	asr	r2, r3, #31
     7d8:	e0622001 	rsb	r2, r2, r1
     7dc:	e3a01064 	mov	r1, #100	; 0x64
     7e0:	e0020291 	mul	r2, r1, r2
     7e4:	e0622003 	rsb	r2, r2, r3
     7e8:	e3063667 	movw	r3, #26215	; 0x6667
     7ec:	e3463666 	movt	r3, #26214	; 0x6666
     7f0:	e0c31293 	smull	r1, r3, r3, r2
     7f4:	e1a01143 	asr	r1, r3, #2
     7f8:	e1a03fc2 	asr	r3, r2, #31
     7fc:	e0631001 	rsb	r1, r3, r1
     800:	e1a03001 	mov	r3, r1
     804:	e1a03103 	lsl	r3, r3, #2
     808:	e0833001 	add	r3, r3, r1
     80c:	e1a03083 	lsl	r3, r3, #1
     810:	e0631002 	rsb	r1, r3, r2
     814:	e6ef3071 	uxtb	r3, r1
     818:	e54b3009 	strb	r3, [r11, #-9]

    return numberSeparated;
     81c:	e51b300c 	ldr	r3, [r11, #-12]
     820:	e50b3008 	str	r3, [r11, #-8]
     824:	e3a03000 	mov	r3, #0
     828:	e55b2008 	ldrb	r2, [r11, #-8]
     82c:	e7c73012 	bfi	r3, r2, #0, #8
     830:	e55b2007 	ldrb	r2, [r11, #-7]
     834:	e7cf3412 	bfi	r3, r2, #8, #8
     838:	e55b2006 	ldrb	r2, [r11, #-6]
     83c:	e7d73812 	bfi	r3, r2, #16, #8
     840:	e55b2005 	ldrb	r2, [r11, #-5]
     844:	e7df3c12 	bfi	r3, r2, #24, #8
     848:	e1a00003 	mov	r0, r3
     84c:	e28bd000 	add	sp, r11, #0
     850:	e8bd0800 	ldmfd	sp!, {r11}
     854:	e12fff1e 	bx	lr

00000858 <ClearSegments>:

/***************************************************************************************************
Function Definitions:
***************************************************************************************************/
void ClearSegments(struct Displays* displays)
{
     858:	e92d4800 	push	{r11, lr}
     85c:	e28db004 	add	r11, sp, #4
     860:	e24dd008 	sub	sp, sp, #8
     864:	e50b0008 	str	r0, [r11, #-8]
    displays->hex5 = GetSegments(0);
     868:	e3a00000 	mov	r0, #0
     86c:	eb000023 	bl	900 <GetSegments>
     870:	e1a03000 	mov	r3, r0
     874:	e1a02003 	mov	r2, r3
     878:	e51b3008 	ldr	r3, [r11, #-8]
     87c:	e5c32000 	strb	r2, [r3]
    displays->hex4 = GetSegments(0);
     880:	e3a00000 	mov	r0, #0
     884:	eb00001d 	bl	900 <GetSegments>
     888:	e1a03000 	mov	r3, r0
     88c:	e1a02003 	mov	r2, r3
     890:	e51b3008 	ldr	r3, [r11, #-8]
     894:	e5c32001 	strb	r2, [r3, #1]
    displays->hex3 = GetSegments(0);
     898:	e3a00000 	mov	r0, #0
     89c:	eb000017 	bl	900 <GetSegments>
     8a0:	e1a03000 	mov	r3, r0
     8a4:	e1a02003 	mov	r2, r3
     8a8:	e51b3008 	ldr	r3, [r11, #-8]
     8ac:	e5c32002 	strb	r2, [r3, #2]
    displays->hex2 = GetSegments(0);
     8b0:	e3a00000 	mov	r0, #0
     8b4:	eb000011 	bl	900 <GetSegments>
     8b8:	e1a03000 	mov	r3, r0
     8bc:	e1a02003 	mov	r2, r3
     8c0:	e51b3008 	ldr	r3, [r11, #-8]
     8c4:	e5c32003 	strb	r2, [r3, #3]
    displays->hex1 = GetSegments(0);
     8c8:	e3a00000 	mov	r0, #0
     8cc:	eb00000b 	bl	900 <GetSegments>
     8d0:	e1a03000 	mov	r3, r0
     8d4:	e1a02003 	mov	r2, r3
     8d8:	e51b3008 	ldr	r3, [r11, #-8]
     8dc:	e5c32004 	strb	r2, [r3, #4]
    displays->hex0 = GetSegments(0);
     8e0:	e3a00000 	mov	r0, #0
     8e4:	eb000005 	bl	900 <GetSegments>
     8e8:	e1a03000 	mov	r3, r0
     8ec:	e1a02003 	mov	r2, r3
     8f0:	e51b3008 	ldr	r3, [r11, #-8]
     8f4:	e5c32005 	strb	r2, [r3, #5]
}
     8f8:	e24bd004 	sub	sp, r11, #4
     8fc:	e8bd8800 	pop	{r11, pc}

00000900 <GetSegments>:

unsigned char GetSegments(unsigned char number)
{
     900:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     904:	e28db000 	add	r11, sp, #0
     908:	e24dd014 	sub	sp, sp, #20
     90c:	e1a03000 	mov	r3, r0
     910:	e54b300d 	strb	r3, [r11, #-13]
    unsigned char segments;

    switch(number)
     914:	e55b300d 	ldrb	r3, [r11, #-13]
     918:	e3530005 	cmp	r3, #5
     91c:	0a00002e 	beq	9dc <GetSegments+0xdc>
     920:	e3530005 	cmp	r3, #5
     924:	ca00000d 	bgt	960 <GetSegments+0x60>
     928:	e3530002 	cmp	r3, #2
     92c:	0a000021 	beq	9b8 <GetSegments+0xb8>
     930:	e3530002 	cmp	r3, #2
     934:	ca000004 	bgt	94c <GetSegments+0x4c>
     938:	e3530000 	cmp	r3, #0
     93c:	0a000017 	beq	9a0 <GetSegments+0xa0>
     940:	e3530001 	cmp	r3, #1
     944:	0a000018 	beq	9ac <GetSegments+0xac>
     948:	ea000032 	b	a18 <GetSegments+0x118>
     94c:	e3530003 	cmp	r3, #3
     950:	0a00001b 	beq	9c4 <GetSegments+0xc4>
     954:	e3530004 	cmp	r3, #4
     958:	0a00001c 	beq	9d0 <GetSegments+0xd0>
     95c:	ea00002d 	b	a18 <GetSegments+0x118>
     960:	e3530008 	cmp	r3, #8
     964:	0a000025 	beq	a00 <GetSegments+0x100>
     968:	e3530008 	cmp	r3, #8
     96c:	ca000004 	bgt	984 <GetSegments+0x84>
     970:	e3530006 	cmp	r3, #6
     974:	0a00001b 	beq	9e8 <GetSegments+0xe8>
     978:	e3530007 	cmp	r3, #7
     97c:	0a00001c 	beq	9f4 <GetSegments+0xf4>
     980:	ea000024 	b	a18 <GetSegments+0x118>
     984:	e3530009 	cmp	r3, #9
     988:	0a00001f 	beq	a0c <GetSegments+0x10c>
     98c:	e35300ff 	cmp	r3, #255	; 0xff
     990:	1a000020 	bne	a18 <GetSegments+0x118>
    {
        case 255: // clear a segment
            segments = 0b00000000;
     994:	e3a03000 	mov	r3, #0
     998:	e54b3005 	strb	r3, [r11, #-5]
            break;
     99c:	ea00001d 	b	a18 <GetSegments+0x118>
        case 0:
            segments = 0b00111111;
     9a0:	e3a0303f 	mov	r3, #63	; 0x3f
     9a4:	e54b3005 	strb	r3, [r11, #-5]
            break;
     9a8:	ea00001a 	b	a18 <GetSegments+0x118>
        case 1:
            segments = 0b00000110;
     9ac:	e3a03006 	mov	r3, #6
     9b0:	e54b3005 	strb	r3, [r11, #-5]
            break;
     9b4:	ea000017 	b	a18 <GetSegments+0x118>
        case 2:
            segments = 0b01011011;
     9b8:	e3a0305b 	mov	r3, #91	; 0x5b
     9bc:	e54b3005 	strb	r3, [r11, #-5]
            break;
     9c0:	ea000014 	b	a18 <GetSegments+0x118>
        case 3:
            segments = 0b01001111;
     9c4:	e3a0304f 	mov	r3, #79	; 0x4f
     9c8:	e54b3005 	strb	r3, [r11, #-5]
            break;
     9cc:	ea000011 	b	a18 <GetSegments+0x118>
        case 4:
            segments = 0b01100110;
     9d0:	e3a03066 	mov	r3, #102	; 0x66
     9d4:	e54b3005 	strb	r3, [r11, #-5]
            break;
     9d8:	ea00000e 	b	a18 <GetSegments+0x118>
        case 5:
            segments = 0b01101101;
     9dc:	e3a0306d 	mov	r3, #109	; 0x6d
     9e0:	e54b3005 	strb	r3, [r11, #-5]
            break;
     9e4:	ea00000b 	b	a18 <GetSegments+0x118>
        case 6:
            segments = 0b01111101;
     9e8:	e3a0307d 	mov	r3, #125	; 0x7d
     9ec:	e54b3005 	strb	r3, [r11, #-5]
            break;
     9f0:	ea000008 	b	a18 <GetSegments+0x118>
        case 7:
            segments = 0b00000111;
     9f4:	e3a03007 	mov	r3, #7
     9f8:	e54b3005 	strb	r3, [r11, #-5]
            break;
     9fc:	ea000005 	b	a18 <GetSegments+0x118>
        case 8:
            segments = 0b01111111;
     a00:	e3a0307f 	mov	r3, #127	; 0x7f
     a04:	e54b3005 	strb	r3, [r11, #-5]
            break;
     a08:	ea000002 	b	a18 <GetSegments+0x118>
        case 9:
            segments = 0b01101111;
     a0c:	e3a0306f 	mov	r3, #111	; 0x6f
     a10:	e54b3005 	strb	r3, [r11, #-5]
            break;
     a14:	e1a00000 	nop			; (mov r0, r0)
    }
    return segments;
     a18:	e55b3005 	ldrb	r3, [r11, #-5]
}
     a1c:	e1a00003 	mov	r0, r3
     a20:	e28bd000 	add	sp, r11, #0
     a24:	e8bd0800 	ldmfd	sp!, {r11}
     a28:	e12fff1e 	bx	lr

00000a2c <PutSegments>:

void PutSegments(struct Displays* displays)
{
     a2c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     a30:	e28db000 	add	r11, sp, #0
     a34:	e24dd014 	sub	sp, sp, #20
     a38:	e50b0010 	str	r0, [r11, #-16]
    volatile int* hex5Ptr = (int*)HEX5_HEX4_BASE;
     a3c:	e3a03030 	mov	r3, #48	; 0x30
     a40:	e34f3f20 	movt	r3, #65312	; 0xff20
     a44:	e50b3008 	str	r3, [r11, #-8]
    volatile int* hex3Ptr = (int*)HEX3_HEX0_BASE;
     a48:	e3a03020 	mov	r3, #32
     a4c:	e34f3f20 	movt	r3, #65312	; 0xff20
     a50:	e50b300c 	str	r3, [r11, #-12]

    *(hex5Ptr) = ( (displays->hex5 << 8) | (displays->hex4) );
     a54:	e51b3010 	ldr	r3, [r11, #-16]
     a58:	e5d33000 	ldrb	r3, [r3]
     a5c:	e1a02403 	lsl	r2, r3, #8
     a60:	e51b3010 	ldr	r3, [r11, #-16]
     a64:	e5d33001 	ldrb	r3, [r3, #1]
     a68:	e1822003 	orr	r2, r2, r3
     a6c:	e51b3008 	ldr	r3, [r11, #-8]
     a70:	e5832000 	str	r2, [r3]
    *(hex3Ptr) = ( (displays->hex3 << 24) | (displays->hex2 << 16) | (displays->hex1 << 8) | (displays->hex0) );
     a74:	e51b3010 	ldr	r3, [r11, #-16]
     a78:	e5d33002 	ldrb	r3, [r3, #2]
     a7c:	e1a02c03 	lsl	r2, r3, #24
     a80:	e51b3010 	ldr	r3, [r11, #-16]
     a84:	e5d33003 	ldrb	r3, [r3, #3]
     a88:	e1a03803 	lsl	r3, r3, #16
     a8c:	e1822003 	orr	r2, r2, r3
     a90:	e51b3010 	ldr	r3, [r11, #-16]
     a94:	e5d33004 	ldrb	r3, [r3, #4]
     a98:	e1a03403 	lsl	r3, r3, #8
     a9c:	e1822003 	orr	r2, r2, r3
     aa0:	e51b3010 	ldr	r3, [r11, #-16]
     aa4:	e5d33005 	ldrb	r3, [r3, #5]
     aa8:	e1822003 	orr	r2, r2, r3
     aac:	e51b300c 	ldr	r3, [r11, #-12]
     ab0:	e5832000 	str	r2, [r3]
}
     ab4:	e28bd000 	add	sp, r11, #0
     ab8:	e8bd0800 	ldmfd	sp!, {r11}
     abc:	e12fff1e 	bx	lr

00000ac0 <TimerISR>:

/***************************************************************************************************
Function Definitions:
***************************************************************************************************/
void TimerISR(void)
{
     ac0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     ac4:	e28db000 	add	r11, sp, #0
    TIMER_FLAG = 1;
     ac8:	e30136ad 	movw	r3, #5805	; 0x16ad
     acc:	e3403000 	movt	r3, #0
     ad0:	e3a02001 	mov	r2, #1
     ad4:	e5c32000 	strb	r2, [r3]
     ad8:	e28bd000 	add	sp, r11, #0
     adc:	e8bd0800 	ldmfd	sp!, {r11}
     ae0:	e12fff1e 	bx	lr

00000ae4 <main>:

/***************************************************************************************************
Program Start:
***************************************************************************************************/
int main(void)
{
     ae4:	e92d4800 	push	{r11, lr}
     ae8:	e28db004 	add	r11, sp, #4
     aec:	e24dd028 	sub	sp, sp, #40	; 0x28
    /************************************************
    Interrupts:
    ************************************************/
    disable_A9_interrupts ();   // disable interrupts in the A9 processor
     af0:	ebfffe1d 	bl	36c <disable_A9_interrupts>
    set_A9_IRQ_stack ();            // initialize the stack pointer for IRQ mode
     af4:	ebfffe26 	bl	394 <set_A9_IRQ_stack>
    config_GIC ();                  // configure the general interrupt controller
     af8:	ebfffe41 	bl	404 <config_GIC>
    ConfigINTs();             // configure pushbutton KEYs to generate interrupts
     afc:	ebfffe89 	bl	528 <ConfigINTs>
    enable_A9_interrupts ();    // enable interrupts in the A9 processor
     b00:	ebfffe35 	bl	3dc <enable_A9_interrupts>

    /************************************************
    Local Variables:
    ************************************************/
    volatile int* ADCptr = (int*)ADC_BASE;
     b04:	e3a03901 	mov	r3, #16384	; 0x4000
     b08:	e34f3f20 	movt	r3, #65312	; 0xff20
     b0c:	e50b3010 	str	r3, [r11, #-16]
    volatile int* channelTwo = (int*)0xFF204008; // ADC_BASE + 2
     b10:	e3043008 	movw	r3, #16392	; 0x4008
     b14:	e34f3f20 	movt	r3, #65312	; 0xff20
     b18:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec

    struct Displays displays;
    displays.hex4 = GetSegments(255);
     b1c:	e3a000ff 	mov	r0, #255	; 0xff
     b20:	ebffff76 	bl	900 <GetSegments>
     b24:	e1a03000 	mov	r3, r0
     b28:	e54b301b 	strb	r3, [r11, #-27]	; 0xffffffe5
    displays.hex5 = GetSegments(255);
     b2c:	e3a000ff 	mov	r0, #255	; 0xff
     b30:	ebffff72 	bl	900 <GetSegments>
     b34:	e1a03000 	mov	r3, r0
     b38:	e54b301c 	strb	r3, [r11, #-28]	; 0xffffffe4

    struct Digits analogValueSeparated;

    int analogCounter = 0; 
     b3c:	e3a03000 	mov	r3, #0
     b40:	e50b3008 	str	r3, [r11, #-8]
    int analogValue   = 0;
     b44:	e3a03000 	mov	r3, #0
     b48:	e50b300c 	str	r3, [r11, #-12]


    /************************************************
    Setup:
    ************************************************/
    *(ADCptr + 1) |= (1);    // Set ADC to auto mode
     b4c:	e51b3010 	ldr	r3, [r11, #-16]
     b50:	e2833004 	add	r3, r3, #4
     b54:	e51b2010 	ldr	r2, [r11, #-16]
     b58:	e2822004 	add	r2, r2, #4
     b5c:	e5922000 	ldr	r2, [r2]
     b60:	e3822001 	orr	r2, r2, #1
     b64:	e5832000 	str	r2, [r3]
     b68:	ea000000 	b	b70 <main+0x8c>
            put_jtag('\n');


            BUTTON_FLAG = 0;
        }
    }
     b6c:	e1a00000 	nop			; (mov r0, r0)
    ************************************************/
    *(ADCptr + 1) |= (1);    // Set ADC to auto mode

    while(1)
    {
        if(TIMER_FLAG)
     b70:	e30136ad 	movw	r3, #5805	; 0x16ad
     b74:	e3403000 	movt	r3, #0
     b78:	e5d33000 	ldrb	r3, [r3]
     b7c:	e3530000 	cmp	r3, #0
     b80:	0a00006c 	beq	d38 <main+0x254>
        {
            analogCounter++;
     b84:	e51b3008 	ldr	r3, [r11, #-8]
     b88:	e2833001 	add	r3, r3, #1
     b8c:	e50b3008 	str	r3, [r11, #-8]
            analogValue = analogValue + ( (*channelTwo) & 0xFFF);
     b90:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     b94:	e5933000 	ldr	r3, [r3]
     b98:	e1a03a03 	lsl	r3, r3, #20
     b9c:	e1a03a23 	lsr	r3, r3, #20
     ba0:	e51b200c 	ldr	r2, [r11, #-12]
     ba4:	e0823003 	add	r3, r2, r3
     ba8:	e50b300c 	str	r3, [r11, #-12]

            if(analogCounter >= 1000)
     bac:	e51b2008 	ldr	r2, [r11, #-8]
     bb0:	e30033e7 	movw	r3, #999	; 0x3e7
     bb4:	e1520003 	cmp	r2, r3
     bb8:	da000057 	ble	d1c <main+0x238>
            {
                analogValue = analogValue / 1000;
     bbc:	e51b200c 	ldr	r2, [r11, #-12]
     bc0:	e3043dd3 	movw	r3, #19923	; 0x4dd3
     bc4:	e3413062 	movt	r3, #4194	; 0x1062
     bc8:	e0c31293 	smull	r1, r3, r3, r2
     bcc:	e1a01343 	asr	r1, r3, #6
     bd0:	e1a03fc2 	asr	r3, r2, #31
     bd4:	e0633001 	rsb	r3, r3, r1
     bd8:	e50b300c 	str	r3, [r11, #-12]
                analogValueSeparated = DigitSeparator(analogValue);
     bdc:	e51b000c 	ldr	r0, [r11, #-12]
     be0:	ebfffeb3 	bl	6b4 <DigitSeparator>
     be4:	e54b002c 	strb	r0, [r11, #-44]	; 0xffffffd4
     be8:	e7e73450 	ubfx	r3, r0, #8, #8
     bec:	e54b302b 	strb	r3, [r11, #-43]	; 0xffffffd5
     bf0:	e7e73850 	ubfx	r3, r0, #16, #8
     bf4:	e54b302a 	strb	r3, [r11, #-42]	; 0xffffffd6
     bf8:	e7e73c50 	ubfx	r3, r0, #24, #8
     bfc:	e54b3029 	strb	r3, [r11, #-41]	; 0xffffffd7
     c00:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
     c04:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0

                if(analogValueSeparated.hundreds == 0)
     c08:	e55b301f 	ldrb	r3, [r11, #-31]	; 0xffffffe1
     c0c:	e3530000 	cmp	r3, #0
     c10:	1a000012 	bne	c60 <main+0x17c>
                {
                    displays.hex3 = GetSegments(255);
     c14:	e3a000ff 	mov	r0, #255	; 0xff
     c18:	ebffff38 	bl	900 <GetSegments>
     c1c:	e1a03000 	mov	r3, r0
     c20:	e54b301a 	strb	r3, [r11, #-26]	; 0xffffffe6
                    displays.hex2 = GetSegments(255);
     c24:	e3a000ff 	mov	r0, #255	; 0xff
     c28:	ebffff34 	bl	900 <GetSegments>
     c2c:	e1a03000 	mov	r3, r0
     c30:	e54b3019 	strb	r3, [r11, #-25]	; 0xffffffe7
                    displays.hex1 = GetSegments(analogValueSeparated.tens);
     c34:	e55b301e 	ldrb	r3, [r11, #-30]	; 0xffffffe2
     c38:	e1a00003 	mov	r0, r3
     c3c:	ebffff2f 	bl	900 <GetSegments>
     c40:	e1a03000 	mov	r3, r0
     c44:	e54b3018 	strb	r3, [r11, #-24]	; 0xffffffe8
                    displays.hex0 = GetSegments(analogValueSeparated.ones);
     c48:	e55b301d 	ldrb	r3, [r11, #-29]	; 0xffffffe3
     c4c:	e1a00003 	mov	r0, r3
     c50:	ebffff2a 	bl	900 <GetSegments>
     c54:	e1a03000 	mov	r3, r0
     c58:	e54b3017 	strb	r3, [r11, #-23]	; 0xffffffe9
     c5c:	ea00002a 	b	d0c <main+0x228>
                }
                else if(analogValueSeparated.thousands == 0)
     c60:	e55b3020 	ldrb	r3, [r11, #-32]	; 0xffffffe0
     c64:	e3530000 	cmp	r3, #0
     c68:	1a000013 	bne	cbc <main+0x1d8>
                {
                    displays.hex3 = GetSegments(255);
     c6c:	e3a000ff 	mov	r0, #255	; 0xff
     c70:	ebffff22 	bl	900 <GetSegments>
     c74:	e1a03000 	mov	r3, r0
     c78:	e54b301a 	strb	r3, [r11, #-26]	; 0xffffffe6
                    displays.hex2 = GetSegments(analogValueSeparated.hundreds);
     c7c:	e55b301f 	ldrb	r3, [r11, #-31]	; 0xffffffe1
     c80:	e1a00003 	mov	r0, r3
     c84:	ebffff1d 	bl	900 <GetSegments>
     c88:	e1a03000 	mov	r3, r0
     c8c:	e54b3019 	strb	r3, [r11, #-25]	; 0xffffffe7
                    displays.hex1 = GetSegments(analogValueSeparated.tens);
     c90:	e55b301e 	ldrb	r3, [r11, #-30]	; 0xffffffe2
     c94:	e1a00003 	mov	r0, r3
     c98:	ebffff18 	bl	900 <GetSegments>
     c9c:	e1a03000 	mov	r3, r0
     ca0:	e54b3018 	strb	r3, [r11, #-24]	; 0xffffffe8
                    displays.hex0 = GetSegments(analogValueSeparated.ones);
     ca4:	e55b301d 	ldrb	r3, [r11, #-29]	; 0xffffffe3
     ca8:	e1a00003 	mov	r0, r3
     cac:	ebffff13 	bl	900 <GetSegments>
     cb0:	e1a03000 	mov	r3, r0
     cb4:	e54b3017 	strb	r3, [r11, #-23]	; 0xffffffe9
     cb8:	ea000013 	b	d0c <main+0x228>
                }
                else
                {
                    displays.hex3 = GetSegments(analogValueSeparated.thousands);
     cbc:	e55b3020 	ldrb	r3, [r11, #-32]	; 0xffffffe0
     cc0:	e1a00003 	mov	r0, r3
     cc4:	ebffff0d 	bl	900 <GetSegments>
     cc8:	e1a03000 	mov	r3, r0
     ccc:	e54b301a 	strb	r3, [r11, #-26]	; 0xffffffe6
                    displays.hex2 = GetSegments(analogValueSeparated.hundreds);
     cd0:	e55b301f 	ldrb	r3, [r11, #-31]	; 0xffffffe1
     cd4:	e1a00003 	mov	r0, r3
     cd8:	ebffff08 	bl	900 <GetSegments>
     cdc:	e1a03000 	mov	r3, r0
     ce0:	e54b3019 	strb	r3, [r11, #-25]	; 0xffffffe7
                    displays.hex1 = GetSegments(analogValueSeparated.tens);
     ce4:	e55b301e 	ldrb	r3, [r11, #-30]	; 0xffffffe2
     ce8:	e1a00003 	mov	r0, r3
     cec:	ebffff03 	bl	900 <GetSegments>
     cf0:	e1a03000 	mov	r3, r0
     cf4:	e54b3018 	strb	r3, [r11, #-24]	; 0xffffffe8
                    displays.hex0 = GetSegments(analogValueSeparated.ones);
     cf8:	e55b301d 	ldrb	r3, [r11, #-29]	; 0xffffffe3
     cfc:	e1a00003 	mov	r0, r3
     d00:	ebfffefe 	bl	900 <GetSegments>
     d04:	e1a03000 	mov	r3, r0
     d08:	e54b3017 	strb	r3, [r11, #-23]	; 0xffffffe9
                }
                
                
                analogValue = 0;
     d0c:	e3a03000 	mov	r3, #0
     d10:	e50b300c 	str	r3, [r11, #-12]
                analogCounter = 0;
     d14:	e3a03000 	mov	r3, #0
     d18:	e50b3008 	str	r3, [r11, #-8]
            }
            PutSegments(&displays);
     d1c:	e24b301c 	sub	r3, r11, #28
     d20:	e1a00003 	mov	r0, r3
     d24:	ebffff40 	bl	a2c <PutSegments>
            TIMER_FLAG = 0;
     d28:	e30136ad 	movw	r3, #5805	; 0x16ad
     d2c:	e3403000 	movt	r3, #0
     d30:	e3a02000 	mov	r2, #0
     d34:	e5c32000 	strb	r2, [r3]
        }
        
        if(BUTTON_FLAG)
     d38:	e30136ac 	movw	r3, #5804	; 0x16ac
     d3c:	e3403000 	movt	r3, #0
     d40:	e5d33000 	ldrb	r3, [r3]
     d44:	e3530000 	cmp	r3, #0
     d48:	0affff87 	beq	b6c <main+0x88>
        {

            put_jtag(GetDigit(analogValueSeparated.thousands));
     d4c:	e55b3020 	ldrb	r3, [r11, #-32]	; 0xffffffe0
     d50:	e1a00003 	mov	r0, r3
     d54:	ebfffe3f 	bl	658 <GetDigit>
     d58:	e1a03000 	mov	r3, r0
     d5c:	e1a00003 	mov	r0, r3
     d60:	ebfffe11 	bl	5ac <put_jtag>
            put_jtag(GetDigit(analogValueSeparated.hundreds));
     d64:	e55b301f 	ldrb	r3, [r11, #-31]	; 0xffffffe1
     d68:	e1a00003 	mov	r0, r3
     d6c:	ebfffe39 	bl	658 <GetDigit>
     d70:	e1a03000 	mov	r3, r0
     d74:	e1a00003 	mov	r0, r3
     d78:	ebfffe0b 	bl	5ac <put_jtag>
            put_jtag(GetDigit(analogValueSeparated.tens));
     d7c:	e55b301e 	ldrb	r3, [r11, #-30]	; 0xffffffe2
     d80:	e1a00003 	mov	r0, r3
     d84:	ebfffe33 	bl	658 <GetDigit>
     d88:	e1a03000 	mov	r3, r0
     d8c:	e1a00003 	mov	r0, r3
     d90:	ebfffe05 	bl	5ac <put_jtag>
            put_jtag(GetDigit(analogValueSeparated.ones));
     d94:	e55b301d 	ldrb	r3, [r11, #-29]	; 0xffffffe3
     d98:	e1a00003 	mov	r0, r3
     d9c:	ebfffe2d 	bl	658 <GetDigit>
     da0:	e1a03000 	mov	r3, r0
     da4:	e1a00003 	mov	r0, r3
     da8:	ebfffdff 	bl	5ac <put_jtag>
            put_jtag('\n');
     dac:	e3a0000a 	mov	r0, #10
     db0:	ebfffdfd 	bl	5ac <put_jtag>


            BUTTON_FLAG = 0;
     db4:	e30136ac 	movw	r3, #5804	; 0x16ac
     db8:	e3403000 	movt	r3, #0
     dbc:	e3a02000 	mov	r2, #0
     dc0:	e5c32000 	strb	r2, [r3]
        }
    }
     dc4:	eaffff68 	b	b6c <main+0x88>

00000dc8 <atexit>:
     dc8:	e1a01000 	mov	r1, r0
     dcc:	e3a00000 	mov	r0, #0
     dd0:	e92d4008 	push	{r3, lr}
     dd4:	e1a02000 	mov	r2, r0
     dd8:	e1a03000 	mov	r3, r0
     ddc:	eb00000e 	bl	e1c <__register_exitproc>
     de0:	e8bd4008 	pop	{r3, lr}
     de4:	e12fff1e 	bx	lr

00000de8 <exit>:
     de8:	e92d4008 	push	{r3, lr}
     dec:	e3a01000 	mov	r1, #0
     df0:	e1a04000 	mov	r4, r0
     df4:	eb000045 	bl	f10 <__call_exitprocs>
     df8:	e59f3018 	ldr	r3, [pc, #24]	; e18 <exit+0x30>
     dfc:	e5930000 	ldr	r0, [r3]
     e00:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
     e04:	e3530000 	cmp	r3, #0
     e08:	11a0e00f 	movne	lr, pc
     e0c:	112fff13 	bxne	r3
     e10:	e1a00004 	mov	r0, r4
     e14:	eb0000c9 	bl	1140 <_exit>
     e18:	000011f8 	.word	0x000011f8

00000e1c <__register_exitproc>:
     e1c:	e59fc0e4 	ldr	r12, [pc, #228]	; f08 <__register_exitproc+0xec>
     e20:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     e24:	e59c4000 	ldr	r4, [r12]
     e28:	e594c148 	ldr	r12, [r4, #328]	; 0x148
     e2c:	e35c0000 	cmp	r12, #0
     e30:	0284cf53 	addeq	r12, r4, #332	; 0x14c
     e34:	e59c5004 	ldr	r5, [r12, #4]
     e38:	0584c148 	streq	r12, [r4, #328]	; 0x148
     e3c:	e355001f 	cmp	r5, #31
     e40:	e24dd010 	sub	sp, sp, #16
     e44:	e1a06000 	mov	r6, r0
     e48:	da000015 	ble	ea4 <__register_exitproc+0x88>
     e4c:	e59f00b8 	ldr	r0, [pc, #184]	; f0c <__register_exitproc+0xf0>
     e50:	e3500000 	cmp	r0, #0
     e54:	1a000001 	bne	e60 <__register_exitproc+0x44>
     e58:	e3e00000 	mvn	r0, #0
     e5c:	ea000018 	b	ec4 <__register_exitproc+0xa8>
     e60:	e3a00e19 	mov	r0, #400	; 0x190
     e64:	e58d100c 	str	r1, [sp, #12]
     e68:	e58d2008 	str	r2, [sp, #8]
     e6c:	e58d3004 	str	r3, [sp, #4]
     e70:	e320f000 	nop	{0}
     e74:	e250c000 	subs	r12, r0, #0
     e78:	e59d100c 	ldr	r1, [sp, #12]
     e7c:	e59d2008 	ldr	r2, [sp, #8]
     e80:	e59d3004 	ldr	r3, [sp, #4]
     e84:	0afffff3 	beq	e58 <__register_exitproc+0x3c>
     e88:	e5945148 	ldr	r5, [r4, #328]	; 0x148
     e8c:	e3a00000 	mov	r0, #0
     e90:	e58c0004 	str	r0, [r12, #4]
     e94:	e58c5000 	str	r5, [r12]
     e98:	e584c148 	str	r12, [r4, #328]	; 0x148
     e9c:	e58c0188 	str	r0, [r12, #392]	; 0x188
     ea0:	e58c018c 	str	r0, [r12, #396]	; 0x18c
     ea4:	e3560000 	cmp	r6, #0
     ea8:	e59c4004 	ldr	r4, [r12, #4]
     eac:	1a000007 	bne	ed0 <__register_exitproc+0xb4>
     eb0:	e2843002 	add	r3, r4, #2
     eb4:	e2844001 	add	r4, r4, #1
     eb8:	e78c1103 	str	r1, [r12, r3, lsl #2]
     ebc:	e58c4004 	str	r4, [r12, #4]
     ec0:	e3a00000 	mov	r0, #0
     ec4:	e28dd010 	add	sp, sp, #16
     ec8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
     ecc:	e12fff1e 	bx	lr
     ed0:	e3a00001 	mov	r0, #1
     ed4:	e1a00410 	lsl	r0, r0, r4
     ed8:	e08c8104 	add	r8, r12, r4, lsl #2
     edc:	e3560002 	cmp	r6, #2
     ee0:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
     ee4:	e5883108 	str	r3, [r8, #264]	; 0x108
     ee8:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
     eec:	e1877000 	orr	r7, r7, r0
     ef0:	01830000 	orreq	r0, r3, r0
     ef4:	e1a05008 	mov	r5, r8
     ef8:	e5882088 	str	r2, [r8, #136]	; 0x88
     efc:	e58c7188 	str	r7, [r12, #392]	; 0x188
     f00:	058c018c 	streq	r0, [r12, #396]	; 0x18c
     f04:	eaffffe9 	b	eb0 <__register_exitproc+0x94>
     f08:	000011f8 	.word	0x000011f8
     f0c:	00000000 	.word	0x00000000

00000f10 <__call_exitprocs>:
     f10:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     f14:	e59f3168 	ldr	r3, [pc, #360]	; 1084 <__call_exitprocs+0x174>
     f18:	e5933000 	ldr	r3, [r3]
     f1c:	e24dd014 	sub	sp, sp, #20
     f20:	e58d3004 	str	r3, [sp, #4]
     f24:	e2833f52 	add	r3, r3, #328	; 0x148
     f28:	e58d0008 	str	r0, [sp, #8]
     f2c:	e58d300c 	str	r3, [sp, #12]
     f30:	e1a07001 	mov	r7, r1
     f34:	e3a08001 	mov	r8, #1
     f38:	e59d3004 	ldr	r3, [sp, #4]
     f3c:	e5936148 	ldr	r6, [r3, #328]	; 0x148
     f40:	e3560000 	cmp	r6, #0
     f44:	e59db00c 	ldr	r11, [sp, #12]
     f48:	0a000033 	beq	101c <__call_exitprocs+0x10c>
     f4c:	e5965004 	ldr	r5, [r6, #4]
     f50:	e2554001 	subs	r4, r5, #1
     f54:	5286a088 	addpl	r10, r6, #136	; 0x88
     f58:	5285501f 	addpl	r5, r5, #31
     f5c:	508a5105 	addpl	r5, r10, r5, lsl #2
     f60:	5a000007 	bpl	f84 <__call_exitprocs+0x74>
     f64:	ea000029 	b	1010 <__call_exitprocs+0x100>
     f68:	e5953000 	ldr	r3, [r5]
     f6c:	e1530007 	cmp	r3, r7
     f70:	0a000005 	beq	f8c <__call_exitprocs+0x7c>
     f74:	e2444001 	sub	r4, r4, #1
     f78:	e3740001 	cmn	r4, #1
     f7c:	e2455004 	sub	r5, r5, #4
     f80:	0a000022 	beq	1010 <__call_exitprocs+0x100>
     f84:	e3570000 	cmp	r7, #0
     f88:	1afffff6 	bne	f68 <__call_exitprocs+0x58>
     f8c:	e5963004 	ldr	r3, [r6, #4]
     f90:	e06a2005 	rsb	r2, r10, r5
     f94:	e2433001 	sub	r3, r3, #1
     f98:	e0862002 	add	r2, r6, r2
     f9c:	e1530004 	cmp	r3, r4
     fa0:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
     fa4:	13a01000 	movne	r1, #0
     fa8:	05864004 	streq	r4, [r6, #4]
     fac:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
     fb0:	e3530000 	cmp	r3, #0
     fb4:	0affffee 	beq	f74 <__call_exitprocs+0x64>
     fb8:	e1a02418 	lsl	r2, r8, r4
     fbc:	e5961188 	ldr	r1, [r6, #392]	; 0x188
     fc0:	e1120001 	tst	r2, r1
     fc4:	e5969004 	ldr	r9, [r6, #4]
     fc8:	0a000016 	beq	1028 <__call_exitprocs+0x118>
     fcc:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
     fd0:	e1120001 	tst	r2, r1
     fd4:	1a000016 	bne	1034 <__call_exitprocs+0x124>
     fd8:	e59d0008 	ldr	r0, [sp, #8]
     fdc:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
     fe0:	e1a0e00f 	mov	lr, pc
     fe4:	e12fff13 	bx	r3
     fe8:	e5963004 	ldr	r3, [r6, #4]
     fec:	e1530009 	cmp	r3, r9
     ff0:	1affffd0 	bne	f38 <__call_exitprocs+0x28>
     ff4:	e59b3000 	ldr	r3, [r11]
     ff8:	e1530006 	cmp	r3, r6
     ffc:	1affffcd 	bne	f38 <__call_exitprocs+0x28>
    1000:	e2444001 	sub	r4, r4, #1
    1004:	e3740001 	cmn	r4, #1
    1008:	e2455004 	sub	r5, r5, #4
    100c:	1affffdc 	bne	f84 <__call_exitprocs+0x74>
    1010:	e59f1070 	ldr	r1, [pc, #112]	; 1088 <__call_exitprocs+0x178>
    1014:	e3510000 	cmp	r1, #0
    1018:	1a000009 	bne	1044 <__call_exitprocs+0x134>
    101c:	e28dd014 	add	sp, sp, #20
    1020:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1024:	e12fff1e 	bx	lr
    1028:	e1a0e00f 	mov	lr, pc
    102c:	e12fff13 	bx	r3
    1030:	eaffffec 	b	fe8 <__call_exitprocs+0xd8>
    1034:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    1038:	e1a0e00f 	mov	lr, pc
    103c:	e12fff13 	bx	r3
    1040:	eaffffe8 	b	fe8 <__call_exitprocs+0xd8>
    1044:	e5963004 	ldr	r3, [r6, #4]
    1048:	e3530000 	cmp	r3, #0
    104c:	e5963000 	ldr	r3, [r6]
    1050:	1a000008 	bne	1078 <__call_exitprocs+0x168>
    1054:	e3530000 	cmp	r3, #0
    1058:	0a000006 	beq	1078 <__call_exitprocs+0x168>
    105c:	e1a00006 	mov	r0, r6
    1060:	e58b3000 	str	r3, [r11]
    1064:	e320f000 	nop	{0}
    1068:	e59b6000 	ldr	r6, [r11]
    106c:	e3560000 	cmp	r6, #0
    1070:	1affffb5 	bne	f4c <__call_exitprocs+0x3c>
    1074:	eaffffe8 	b	101c <__call_exitprocs+0x10c>
    1078:	e1a0b006 	mov	r11, r6
    107c:	e1a06003 	mov	r6, r3
    1080:	eafffff9 	b	106c <__call_exitprocs+0x15c>
    1084:	000011f8 	.word	0x000011f8
    1088:	00000000 	.word	0x00000000

0000108c <register_fini>:
    108c:	e92d4008 	push	{r3, lr}
    1090:	e59f3010 	ldr	r3, [pc, #16]	; 10a8 <register_fini+0x1c>
    1094:	e3530000 	cmp	r3, #0
    1098:	159f000c 	ldrne	r0, [pc, #12]	; 10ac <register_fini+0x20>
    109c:	1bffff49 	blne	dc8 <atexit>
    10a0:	e8bd4008 	pop	{r3, lr}
    10a4:	e12fff1e 	bx	lr
    10a8:	00001220 	.word	0x00001220
    10ac:	000010b0 	.word	0x000010b0

000010b0 <__libc_fini_array>:
    10b0:	e92d4038 	push	{r3, r4, r5, lr}
    10b4:	e59f5030 	ldr	r5, [pc, #48]	; 10ec <__libc_fini_array+0x3c>
    10b8:	e59f4030 	ldr	r4, [pc, #48]	; 10f0 <__libc_fini_array+0x40>
    10bc:	e0654004 	rsb	r4, r5, r4
    10c0:	e1b04144 	asrs	r4, r4, #2
    10c4:	10855104 	addne	r5, r5, r4, lsl #2
    10c8:	0a000004 	beq	10e0 <__libc_fini_array+0x30>
    10cc:	e5353004 	ldr	r3, [r5, #-4]!
    10d0:	e1a0e00f 	mov	lr, pc
    10d4:	e12fff13 	bx	r3
    10d8:	e2544001 	subs	r4, r4, #1
    10dc:	1afffffa 	bne	10cc <__libc_fini_array+0x1c>
    10e0:	eb00004e 	bl	1220 <__libc_fini>
    10e4:	e8bd4038 	pop	{r3, r4, r5, lr}
    10e8:	e12fff1e 	bx	lr
    10ec:	00001238 	.word	0x00001238
    10f0:	0000123c 	.word	0x0000123c

000010f4 <__cs3_premain>:
    10f4:	e92d4008 	push	{r3, lr}
    10f8:	eb000017 	bl	115c <__libc_init_array>
    10fc:	e59f3030 	ldr	r3, [pc, #48]	; 1134 <__cs3_premain+0x40>
    1100:	e3530000 	cmp	r3, #0
    1104:	15930000 	ldrne	r0, [r3]
    1108:	01a00003 	moveq	r0, r3
    110c:	e59f3024 	ldr	r3, [pc, #36]	; 1138 <__cs3_premain+0x44>
    1110:	e3530000 	cmp	r3, #0
    1114:	15931000 	ldrne	r1, [r3]
    1118:	01a01003 	moveq	r1, r3
    111c:	e3a02000 	mov	r2, #0
    1120:	ebfffe6f 	bl	ae4 <main>
    1124:	e59f3010 	ldr	r3, [pc, #16]	; 113c <__cs3_premain+0x48>
    1128:	e3530000 	cmp	r3, #0
    112c:	1bffff2d 	blne	de8 <exit>
    1130:	eafffffe 	b	1130 <__cs3_premain+0x3c>
	...
    113c:	00000de8 	.word	0x00000de8

00001140 <_exit>:
    1140:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1144:	e3a00018 	mov	r0, #24
    1148:	e59f1004 	ldr	r1, [pc, #4]	; 1154 <_exit+0x14>
    114c:	ef123456 	svc	0x00123456
    1150:	eafffffe 	b	1150 <_exit+0x10>
    1154:	00020026 	.word	0x00020026

00001158 <__cs3_isr_interrupt>:
    1158:	eafffffe 	b	1158 <__cs3_isr_interrupt>

0000115c <__libc_init_array>:
    115c:	e92d4070 	push	{r4, r5, r6, lr}
    1160:	e59f506c 	ldr	r5, [pc, #108]	; 11d4 <__libc_init_array+0x78>
    1164:	e59f606c 	ldr	r6, [pc, #108]	; 11d8 <__libc_init_array+0x7c>
    1168:	e0656006 	rsb	r6, r5, r6
    116c:	e1b06146 	asrs	r6, r6, #2
    1170:	12455004 	subne	r5, r5, #4
    1174:	13a04000 	movne	r4, #0
    1178:	0a000005 	beq	1194 <__libc_init_array+0x38>
    117c:	e5b53004 	ldr	r3, [r5, #4]!
    1180:	e2844001 	add	r4, r4, #1
    1184:	e1a0e00f 	mov	lr, pc
    1188:	e12fff13 	bx	r3
    118c:	e1560004 	cmp	r6, r4
    1190:	1afffff9 	bne	117c <__libc_init_array+0x20>
    1194:	e59f5040 	ldr	r5, [pc, #64]	; 11dc <__libc_init_array+0x80>
    1198:	e59f6040 	ldr	r6, [pc, #64]	; 11e0 <__libc_init_array+0x84>
    119c:	e0656006 	rsb	r6, r5, r6
    11a0:	eb000016 	bl	1200 <_init>
    11a4:	e1b06146 	asrs	r6, r6, #2
    11a8:	12455004 	subne	r5, r5, #4
    11ac:	13a04000 	movne	r4, #0
    11b0:	0a000005 	beq	11cc <__libc_init_array+0x70>
    11b4:	e5b53004 	ldr	r3, [r5, #4]!
    11b8:	e2844001 	add	r4, r4, #1
    11bc:	e1a0e00f 	mov	lr, pc
    11c0:	e12fff13 	bx	r3
    11c4:	e1560004 	cmp	r6, r4
    11c8:	1afffff9 	bne	11b4 <__libc_init_array+0x58>
    11cc:	e8bd4070 	pop	{r4, r5, r6, lr}
    11d0:	e12fff1e 	bx	lr
    11d4:	00001218 	.word	0x00001218
    11d8:	00001218 	.word	0x00001218
    11dc:	00001218 	.word	0x00001218
    11e0:	00001220 	.word	0x00001220

Disassembly of section .rodata:

000011e8 <_global_impure_ptr-0x10>:
    11e8:	33323130 	.word	0x33323130
    11ec:	37363534 	.word	0x37363534
    11f0:	42413938 	.word	0x42413938
    11f4:	46454443 	.word	0x46454443

000011f8 <_global_impure_ptr>:
    11f8:	00001260 00000043                       `...C...

00001200 <_init>:
    1200:	e1a0c00d 	mov	r12, sp
    1204:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    1208:	e24cb004 	sub	r11, r12, #4
    120c:	e24bd028 	sub	sp, r11, #40	; 0x28
    1210:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    1214:	e12fff1e 	bx	lr

00001218 <__init_array_start>:
    1218:	0000108c 	.word	0x0000108c

0000121c <__frame_dummy_init_array_entry>:
    121c:	00000208                                ....

00001220 <__libc_fini>:
    1220:	e1a0c00d 	mov	r12, sp
    1224:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    1228:	e24cb004 	sub	r11, r12, #4
    122c:	e24bd028 	sub	sp, r11, #40	; 0x28
    1230:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    1234:	e12fff1e 	bx	lr

00001238 <__fini_array_start>:
    1238:	000001c4 	.word	0x000001c4

0000123c <__cs3_regions>:
	...
    1248:	00001690 	.word	0x00001690
    124c:	00000020 	.word	0x00000020
