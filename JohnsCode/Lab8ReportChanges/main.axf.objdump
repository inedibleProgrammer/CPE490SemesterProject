
//gc-labfile01/LabMyDocs/jebugay/My Documents/Spring2018/CPE490/Lab8/Lab8New/main.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
       0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      20:	f4 03 00 00 00 04 00 00 0c 04 00 00 18 04 00 00     ................
      30:	24 04 00 00 b0 1a 00 00 68 03 00 00 30 04 00 00     $.......h...0...

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb00065c 	bl	1a4c <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00001ba8 	.word	0x00001ba8

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00001ff0 	.word	0x00001ff0

00000124 <__cs3_heap_start_ptr>:
     124:	00002030 	.word	0x00002030

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00001ff8 	.word	0x00001ff8
     170:	00001ffb 	.word	0x00001ffb
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	00001ff8 	.word	0x00001ff8
     1bc:	00001ff8 	.word	0x00001ff8
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00001ff8 	.word	0x00001ff8
     200:	00000000 	.word	0x00000000
     204:	00001b3c 	.word	0x00001b3c

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00001b3c 	.word	0x00001b3c
     250:	00001ffc 	.word	0x00001ffc
     254:	00001ba8 	.word	0x00001ba8
     258:	00000000 	.word	0x00000000

0000025c <main>:

/***************************************************************************************************
Program Start:
***************************************************************************************************/
int main(void)
{
     25c:	e92d4800 	push	{r11, lr}
     260:	e28db004 	add	r11, sp, #4
     264:	e24dd010 	sub	sp, sp, #16
    /************************************************
    Interrupts:
    ************************************************/
    disable_A9_interrupts ();       // disable interrupts in the A9 processor
     268:	eb000073 	bl	43c <disable_A9_interrupts>
    set_A9_IRQ_stack ();            // initialize the stack pointer for IRQ mode
     26c:	eb00007c 	bl	464 <set_A9_IRQ_stack>
    config_GIC ();                  // configure the general interrupt controller
     270:	eb000097 	bl	4d4 <config_GIC>
    ConfigINTs();                   // configure pushbutton KEYs to generate interrupts
     274:	eb0000e2 	bl	604 <ConfigINTs>
    enable_A9_interrupts ();        // enable interrupts in the A9 processor
     278:	eb00008b 	bl	4ac <enable_A9_interrupts>


    /************************************************
    Local Variables:
    ************************************************/
    unsigned char direction = 0;
     27c:	e3a03000 	mov	r3, #0
     280:	e54b3005 	strb	r3, [r11, #-5]
    int period = 1000; // 1000 us
     284:	e3a03ffa 	mov	r3, #1000	; 0x3e8
     288:	e50b300c 	str	r3, [r11, #-12]
    double switches = 0.0;
     28c:	e3a02000 	mov	r2, #0
     290:	e3a03000 	mov	r3, #0
     294:	e14b21f4 	strd	r2, [r11, #-20]	; 0xffffffec


    /************************************************
    Setup:
    ************************************************/
    *(GPIOPtr + 1) |= (1 << 0); // Set D0 as output
     298:	e3013bb0 	movw	r3, #7088	; 0x1bb0
     29c:	e3403000 	movt	r3, #0
     2a0:	e5933000 	ldr	r3, [r3]
     2a4:	e2832004 	add	r2, r3, #4
     2a8:	e3013bb0 	movw	r3, #7088	; 0x1bb0
     2ac:	e3403000 	movt	r3, #0
     2b0:	e5933000 	ldr	r3, [r3]
     2b4:	e2833004 	add	r3, r3, #4
     2b8:	e5933000 	ldr	r3, [r3]
     2bc:	e3833001 	orr	r3, r3, #1
     2c0:	e5823000 	str	r3, [r2]
     2c4:	ea000000 	b	2cc <main+0x70>



            BUTTON_FLAG = 0;
        }
    }
     2c8:	e1a00000 	nop			; (mov r0, r0)


        /************************************************
        Private Timer:
        ************************************************/
        if(TIMER_FLAG)
     2cc:	e3023028 	movw	r3, #8232	; 0x2028
     2d0:	e3403000 	movt	r3, #0
     2d4:	e5d33000 	ldrb	r3, [r3]
     2d8:	e3530000 	cmp	r3, #0
     2dc:	0a000003 	beq	2f0 <main+0x94>
        {


            TIMER_FLAG = 0;
     2e0:	e3023028 	movw	r3, #8232	; 0x2028
     2e4:	e3403000 	movt	r3, #0
     2e8:	e3a02000 	mov	r2, #0
     2ec:	e5c32000 	strb	r2, [r3]
        }

        /************************************************
        Button:
        ************************************************/
        if(BUTTON_FLAG)
     2f0:	e3023014 	movw	r3, #8212	; 0x2014
     2f4:	e3403000 	movt	r3, #0
     2f8:	e5d33000 	ldrb	r3, [r3]
     2fc:	e3530000 	cmp	r3, #0
     300:	0afffff0 	beq	2c8 <main+0x6c>
        {



            BUTTON_FLAG = 0;
     304:	e3023014 	movw	r3, #8212	; 0x2014
     308:	e3403000 	movt	r3, #0
     30c:	e3a02000 	mov	r2, #0
     310:	e5c32000 	strb	r2, [r3]
        }
    }
     314:	eaffffeb 	b	2c8 <main+0x6c>

00000318 <ButtonISR>:
/***************************************************************************************************
Function Definitions:
***************************************************************************************************/

void ButtonISR(void)
{
     318:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     31c:	e28db000 	add	r11, sp, #0
     320:	e24dd00c 	sub	sp, sp, #12
    volatile int * KEY_ptr = (int *) 0xFF200050;  // pushbutton KEY base address
     324:	e3a03050 	mov	r3, #80	; 0x50
     328:	e34f3f20 	movt	r3, #65312	; 0xff20
     32c:	e50b3008 	str	r3, [r11, #-8]
    int press;

    // Global Variable:
    BUTTON_FLAG = 1;
     330:	e3023014 	movw	r3, #8212	; 0x2014
     334:	e3403000 	movt	r3, #0
     338:	e3a02001 	mov	r2, #1
     33c:	e5c32000 	strb	r2, [r3]

    press = *(KEY_ptr + 3); // read the pushbutton interrupt register
     340:	e51b3008 	ldr	r3, [r11, #-8]
     344:	e593300c 	ldr	r3, [r3, #12]
     348:	e50b300c 	str	r3, [r11, #-12]
    *(KEY_ptr + 3) = press; // clear the interrupt
     34c:	e51b3008 	ldr	r3, [r11, #-8]
     350:	e283300c 	add	r3, r3, #12
     354:	e51b200c 	ldr	r2, [r11, #-12]
     358:	e5832000 	str	r2, [r3]
     35c:	e28bd000 	add	sp, r11, #0
     360:	e8bd0800 	ldmfd	sp!, {r11}
     364:	e12fff1e 	bx	lr

00000368 <__cs3_isr_irq>:
Global Variables:
***************************************************************************************************/

// Define the IRQ exception handler
void __attribute__ ((interrupt)) __cs3_isr_irq (void)
{
     368:	e24ee004 	sub	lr, lr, #4
     36c:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
     370:	e28db018 	add	r11, sp, #24
     374:	e24dd00c 	sub	sp, sp, #12
    // Read the ICCIAR from the CPU interface in the GIC
    int address;
    int interrupt_ID;
    
    address = MPCORE_GIC_CPUIF + ICCIAR;
     378:	e30c310c 	movw	r3, #49420	; 0xc10c
     37c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     380:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
    interrupt_ID = *(int *)address;
     384:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     388:	e5933000 	ldr	r3, [r3]
     38c:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
   
    if (interrupt_ID == KEYS_IRQ)       // check if interrupt is from the KEYs
     390:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
     394:	e3530049 	cmp	r3, #73	; 0x49
     398:	1a000001 	bne	3a4 <__cs3_isr_irq+0x3c>
        ButtonISR();
     39c:	ebffffdd 	bl	318 <ButtonISR>
     3a0:	ea00000a 	b	3d0 <__cs3_isr_irq+0x68>
    else if(interrupt_ID == MPCORE_PRIV_TIMER_IRQ)
     3a4:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
     3a8:	e353001d 	cmp	r3, #29
     3ac:	1a000001 	bne	3b8 <__cs3_isr_irq+0x50>
        PrivTimerISR();
     3b0:	eb0001db 	bl	b24 <PrivTimerISR>
     3b4:	ea000005 	b	3d0 <__cs3_isr_irq+0x68>
    // if(interrupt_ID == PS2_IRQ)
        // PS2ISR();
    else if(interrupt_ID == HPS_TIMER0_IRQ)
     3b8:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
     3bc:	e35300c7 	cmp	r3, #199	; 0xc7
     3c0:	1a000001 	bne	3cc <__cs3_isr_irq+0x64>
        HPSTimerISR();
     3c4:	eb0001df 	bl	b48 <HPSTimerISR>
     3c8:	ea000000 	b	3d0 <__cs3_isr_irq+0x68>
    else
        while (1);                          // if unexpected, then stay here
     3cc:	eafffffe 	b	3cc <__cs3_isr_irq+0x64>

    // Write to the End of Interrupt Register (ICCEOIR)
    address = MPCORE_GIC_CPUIF + ICCEOIR;
     3d0:	e30c3110 	movw	r3, #49424	; 0xc110
     3d4:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     3d8:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
    *(int *)address = interrupt_ID;
     3dc:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     3e0:	e51b2024 	ldr	r2, [r11, #-36]	; 0xffffffdc
     3e4:	e5832000 	str	r2, [r3]

    return;
     3e8:	e1a00000 	nop			; (mov r0, r0)
} 
     3ec:	e24bd018 	sub	sp, r11, #24
     3f0:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

000003f4 <__cs3_reset>:

// Define the remaining exception handlers
void __attribute__ ((interrupt)) __cs3_reset (void)
{
     3f4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     3f8:	e28db000 	add	r11, sp, #0
    while(1);
     3fc:	eafffffe 	b	3fc <__cs3_reset+0x8>

00000400 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void)
{
     400:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     404:	e28db000 	add	r11, sp, #0
    while(1);
     408:	eafffffe 	b	408 <__cs3_isr_undef+0x8>

0000040c <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void)
{
     40c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     410:	e28db000 	add	r11, sp, #0
    while(1);
     414:	eafffffe 	b	414 <__cs3_isr_swi+0x8>

00000418 <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void)
{
     418:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     41c:	e28db000 	add	r11, sp, #0
    while(1);
     420:	eafffffe 	b	420 <__cs3_isr_pabort+0x8>

00000424 <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void)
{
     424:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     428:	e28db000 	add	r11, sp, #0
    while(1);
     42c:	eafffffe 	b	42c <__cs3_isr_dabort+0x8>

00000430 <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void)
{
     430:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     434:	e28db000 	add	r11, sp, #0
    while(1);
     438:	eafffffe 	b	438 <__cs3_isr_fiq+0x8>

0000043c <disable_A9_interrupts>:
}

void disable_A9_interrupts(void)
{
     43c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     440:	e28db000 	add	r11, sp, #0
     444:	e24dd00c 	sub	sp, sp, #12
    int status = 0b11010011;
     448:	e3a030d3 	mov	r3, #211	; 0xd3
     44c:	e50b3008 	str	r3, [r11, #-8]
    asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     450:	e51b3008 	ldr	r3, [r11, #-8]
     454:	e129f003 	msr	CPSR_fc, r3
}
     458:	e28bd000 	add	sp, r11, #0
     45c:	e8bd0800 	ldmfd	sp!, {r11}
     460:	e12fff1e 	bx	lr

00000464 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack(void)
{
     464:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     468:	e28db000 	add	r11, sp, #0
     46c:	e24dd00c 	sub	sp, sp, #12
    int stack, mode;
    stack = A9_ONCHIP_END - 7;      // top of A9 onchip memory, aligned to 8 bytes
     470:	e3e03007 	mvn	r3, #7
     474:	e50b3008 	str	r3, [r11, #-8]
    /* change processor to IRQ mode with interrupts disabled */
    mode = INT_DISABLE | IRQ_MODE;
     478:	e3a030d2 	mov	r3, #210	; 0xd2
     47c:	e50b300c 	str	r3, [r11, #-12]
    asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     480:	e51b300c 	ldr	r3, [r11, #-12]
     484:	e129f003 	msr	CPSR_fc, r3
    /* set banked stack pointer */
    asm("mov sp, %[ps]" : : [ps] "r" (stack));
     488:	e51b3008 	ldr	r3, [r11, #-8]
     48c:	e1a0d003 	mov	sp, r3

    /* go back to SVC mode before executing subroutine return! */
    mode = INT_DISABLE | SVC_MODE;
     490:	e3a030d3 	mov	r3, #211	; 0xd3
     494:	e50b300c 	str	r3, [r11, #-12]
    asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     498:	e51b300c 	ldr	r3, [r11, #-12]
     49c:	e129f003 	msr	CPSR_fc, r3
}
     4a0:	e28bd000 	add	sp, r11, #0
     4a4:	e8bd0800 	ldmfd	sp!, {r11}
     4a8:	e12fff1e 	bx	lr

000004ac <enable_A9_interrupts>:

void enable_A9_interrupts(void)
{
     4ac:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     4b0:	e28db000 	add	r11, sp, #0
     4b4:	e24dd00c 	sub	sp, sp, #12
    int status = SVC_MODE | INT_ENABLE;
     4b8:	e3a03053 	mov	r3, #83	; 0x53
     4bc:	e50b3008 	str	r3, [r11, #-8]
    asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     4c0:	e51b3008 	ldr	r3, [r11, #-8]
     4c4:	e129f003 	msr	CPSR_fc, r3
}
     4c8:	e28bd000 	add	sp, r11, #0
     4cc:	e8bd0800 	ldmfd	sp!, {r11}
     4d0:	e12fff1e 	bx	lr

000004d4 <config_GIC>:

void config_GIC(void) // STEP 3 IN SECTION 3.1 OF USING THE ARM GENERIC INTERRUPT CONTROLLER
{
     4d4:	e92d4800 	push	{r11, lr}
     4d8:	e28db004 	add	r11, sp, #4
     4dc:	e24dd008 	sub	sp, sp, #8
    int address;
    config_interrupt (KEYS_IRQ, CPU0);  // configure the FPGA KEYs interrupt
     4e0:	e3a00049 	mov	r0, #73	; 0x49
     4e4:	e3a01001 	mov	r1, #1
     4e8:	eb000019 	bl	554 <config_interrupt>

    // Custom:
    config_interrupt(MPCORE_PRIV_TIMER_IRQ, CPU0); // Hopefully, this configures the timer interrupts.
     4ec:	e3a0001d 	mov	r0, #29
     4f0:	e3a01001 	mov	r1, #1
     4f4:	eb000016 	bl	554 <config_interrupt>
    // config_interrupt (PS2_IRQ, CPU0);               // PS2
    
    config_interrupt(HPS_TIMER0_IRQ, CPU0);
     4f8:	e3a000c7 	mov	r0, #199	; 0xc7
     4fc:	e3a01001 	mov	r1, #1
     500:	eb000013 	bl	554 <config_interrupt>

    // Set Interrupt Priority Mask Register (ICCPMR). Enable interrupts of all priorities 
    address = MPCORE_GIC_CPUIF + ICCPMR;
     504:	e30c3104 	movw	r3, #49412	; 0xc104
     508:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     50c:	e50b3008 	str	r3, [r11, #-8]
    *(int *) address = 0xFFFF;       
     510:	e51b3008 	ldr	r3, [r11, #-8]
     514:	e30f2fff 	movw	r2, #65535	; 0xffff
     518:	e5832000 	str	r2, [r3]

    // Set CPU Interface Control Register (ICCICR). Enable signaling of interrupts
    address = MPCORE_GIC_CPUIF + ICCICR;
     51c:	e3a03cc1 	mov	r3, #49408	; 0xc100
     520:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     524:	e50b3008 	str	r3, [r11, #-8]
    *(int *) address = 1;       
     528:	e51b3008 	ldr	r3, [r11, #-8]
     52c:	e3a02001 	mov	r2, #1
     530:	e5832000 	str	r2, [r3]

    // Configure the Distributor Control Register (ICDDCR) to send pending interrupts to CPUs 
    address = MPCORE_GIC_DIST + ICDDCR;
     534:	e3a03a0d 	mov	r3, #53248	; 0xd000
     538:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     53c:	e50b3008 	str	r3, [r11, #-8]
    *(int *) address = 1;          
     540:	e51b3008 	ldr	r3, [r11, #-8]
     544:	e3a02001 	mov	r2, #1
     548:	e5832000 	str	r2, [r3]
}
     54c:	e24bd004 	sub	sp, r11, #4
     550:	e8bd8800 	pop	{r11, pc}

00000554 <config_interrupt>:

void config_interrupt (int N, int CPU_target)
{
     554:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     558:	e28db000 	add	r11, sp, #0
     55c:	e24dd01c 	sub	sp, sp, #28
     560:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
     564:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
    int reg_offset, index, value, address;
    
    /* Configure the Interrupt Set-Enable Registers (ICDISERn). 
     * reg_offset = (integer_div(N / 32) * 4
     * value = 1 << (N mod 32) */
    reg_offset = (N >> 3) & 0xFFFFFFFC; 
     568:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     56c:	e1a031c3 	asr	r3, r3, #3
     570:	e3c33003 	bic	r3, r3, #3
     574:	e50b3008 	str	r3, [r11, #-8]
    index = N & 0x1F;
     578:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     57c:	e203301f 	and	r3, r3, #31
     580:	e50b300c 	str	r3, [r11, #-12]
    value = 0x1 << index;
     584:	e3a02001 	mov	r2, #1
     588:	e51b300c 	ldr	r3, [r11, #-12]
     58c:	e1a03312 	lsl	r3, r2, r3
     590:	e50b3010 	str	r3, [r11, #-16]
    address = MPCORE_GIC_DIST + ICDISER + reg_offset;
     594:	e51b3008 	ldr	r3, [r11, #-8]
     598:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
     59c:	e2433c03 	sub	r3, r3, #768	; 0x300
     5a0:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    /* Now that we know the register address and value, set the appropriate bit */
   *(int *)address |= value;
     5a4:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     5a8:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     5ac:	e5921000 	ldr	r1, [r2]
     5b0:	e51b2010 	ldr	r2, [r11, #-16]
     5b4:	e1812002 	orr	r2, r1, r2
     5b8:	e5832000 	str	r2, [r3]

    /* Configure the Interrupt Processor Targets Register (ICDIPTRn)
     * reg_offset = integer_div(N / 4) * 4
     * index = N mod 4 */
    reg_offset = (N & 0xFFFFFFFC);
     5bc:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     5c0:	e3c33003 	bic	r3, r3, #3
     5c4:	e50b3008 	str	r3, [r11, #-8]
    index = N & 0x3;
     5c8:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     5cc:	e2033003 	and	r3, r3, #3
     5d0:	e50b300c 	str	r3, [r11, #-12]
    address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
     5d4:	e51b2008 	ldr	r2, [r11, #-8]
     5d8:	e51b300c 	ldr	r3, [r11, #-12]
     5dc:	e0823003 	add	r3, r2, r3
     5e0:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
     5e4:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    /* Now that we know the register address and value, write to (only) the appropriate byte */
    *(char *)address = (char) CPU_target;
     5e8:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     5ec:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     5f0:	e6ef2072 	uxtb	r2, r2
     5f4:	e5c32000 	strb	r2, [r3]
}
     5f8:	e28bd000 	add	sp, r11, #0
     5fc:	e8bd0800 	ldmfd	sp!, {r11}
     600:	e12fff1e 	bx	lr

00000604 <ConfigINTs>:

void ConfigINTs()
{
     604:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     608:	e28db000 	add	r11, sp, #0
     60c:	e24dd014 	sub	sp, sp, #20
    /************************************************
    Local Variables:
    ************************************************/
    volatile int * KEY_ptr = (int *) KEY_BASE;              // pushbutton KEY base address
     610:	e3a03050 	mov	r3, #80	; 0x50
     614:	e34f3f20 	movt	r3, #65312	; 0xff20
     618:	e50b3008 	str	r3, [r11, #-8]
    volatile int* timerPtr = (int*) MPCORE_PRIV_TIMER;      // timer base address
     61c:	e3a03cc6 	mov	r3, #50688	; 0xc600
     620:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     624:	e50b300c 	str	r3, [r11, #-12]
    volatile int* HPSTimerPtr = (int*)HPS_TIMER0_BASE;
     628:	e3a03902 	mov	r3, #32768	; 0x8000
     62c:	e34f3fc0 	movt	r3, #65472	; 0xffc0
     630:	e50b3010 	str	r3, [r11, #-16]
    // volatile int * PS2_ptr = (int *) PS2_BASE;  // PS/2 port address

    // *(PS2_ptr) = 0xFF;              /* reset */
    // *(PS2_ptr + 1) = 0x1;           /* write to the PS/2 Control register to enable interrupts */

    *(KEY_ptr + 2) = 0x01;                                  // enable interrupts for KEY0
     634:	e51b3008 	ldr	r3, [r11, #-8]
     638:	e2833008 	add	r3, r3, #8
     63c:	e3a02001 	mov	r2, #1
     640:	e5832000 	str	r2, [r3]

    /************************************************
    Private Timer:
    ************************************************/
    *(timerPtr) = 2000;                                     // Interrupt every 0.001s
     644:	e51b300c 	ldr	r3, [r11, #-12]
     648:	e3a02e7d 	mov	r2, #2000	; 0x7d0
     64c:	e5832000 	str	r2, [r3]
    *(timerPtr + 2) |= (100 << 8);                          // Prescale 100
     650:	e51b300c 	ldr	r3, [r11, #-12]
     654:	e2833008 	add	r3, r3, #8
     658:	e51b200c 	ldr	r2, [r11, #-12]
     65c:	e2822008 	add	r2, r2, #8
     660:	e5922000 	ldr	r2, [r2]
     664:	e3822b19 	orr	r2, r2, #25600	; 0x6400
     668:	e5832000 	str	r2, [r3]
    *(timerPtr + 2) |= 0x06;                                // Turn on I, A, and NOT E
     66c:	e51b300c 	ldr	r3, [r11, #-12]
     670:	e2833008 	add	r3, r3, #8
     674:	e51b200c 	ldr	r2, [r11, #-12]
     678:	e2822008 	add	r2, r2, #8
     67c:	e5922000 	ldr	r2, [r2]
     680:	e3822006 	orr	r2, r2, #6
     684:	e5832000 	str	r2, [r3]


    /************************************************
    HPS Timer:
    ************************************************/
    *(HPSTimerPtr + 2) &= ~(1 << 0); // E = 0
     688:	e51b3010 	ldr	r3, [r11, #-16]
     68c:	e2833008 	add	r3, r3, #8
     690:	e51b2010 	ldr	r2, [r11, #-16]
     694:	e2822008 	add	r2, r2, #8
     698:	e5922000 	ldr	r2, [r2]
     69c:	e3c22001 	bic	r2, r2, #1
     6a0:	e5832000 	str	r2, [r3]
    *(HPSTimerPtr) = 1000000; // load value
     6a4:	e51b2010 	ldr	r2, [r11, #-16]
     6a8:	e3043240 	movw	r3, #16960	; 0x4240
     6ac:	e340300f 	movt	r3, #15
     6b0:	e5823000 	str	r3, [r2]
    *(HPSTimerPtr + 2) |= (1 << 1); // M = 1
     6b4:	e51b3010 	ldr	r3, [r11, #-16]
     6b8:	e2833008 	add	r3, r3, #8
     6bc:	e51b2010 	ldr	r2, [r11, #-16]
     6c0:	e2822008 	add	r2, r2, #8
     6c4:	e5922000 	ldr	r2, [r2]
     6c8:	e3822002 	orr	r2, r2, #2
     6cc:	e5832000 	str	r2, [r3]
    *(HPSTimerPtr + 2) |= (1 << 0); // E = 1
     6d0:	e51b3010 	ldr	r3, [r11, #-16]
     6d4:	e2833008 	add	r3, r3, #8
     6d8:	e51b2010 	ldr	r2, [r11, #-16]
     6dc:	e2822008 	add	r2, r2, #8
     6e0:	e5922000 	ldr	r2, [r2]
     6e4:	e3822001 	orr	r2, r2, #1
     6e8:	e5832000 	str	r2, [r3]
    *(HPSTimerPtr + 2) &= ~(1 << 3); // I = 0
     6ec:	e51b3010 	ldr	r3, [r11, #-16]
     6f0:	e2833008 	add	r3, r3, #8
     6f4:	e51b2010 	ldr	r2, [r11, #-16]
     6f8:	e2822008 	add	r2, r2, #8
     6fc:	e5922000 	ldr	r2, [r2]
     700:	e3c22008 	bic	r2, r2, #8
     704:	e5832000 	str	r2, [r3]

}
     708:	e28bd000 	add	sp, r11, #0
     70c:	e8bd0800 	ldmfd	sp!, {r11}
     710:	e12fff1e 	bx	lr

00000714 <put_jtag>:
#include "JTAG_UART.h"
#include "Constants.h"


void put_jtag( char c )
{
     714:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     718:	e28db000 	add	r11, sp, #0
     71c:	e24dd014 	sub	sp, sp, #20
     720:	e1a03000 	mov	r3, r0
     724:	e54b300d 	strb	r3, [r11, #-13]
    volatile int * JTAG_UART_ptr    = (int *) JTAG_UART_BASE;   // JTAG UART address
     728:	e3a03a01 	mov	r3, #4096	; 0x1000
     72c:	e34f3f20 	movt	r3, #65312	; 0xff20
     730:	e50b3008 	str	r3, [r11, #-8]

    int control;
    control = *(JTAG_UART_ptr + 1);     // read the JTAG_UART control register
     734:	e51b3008 	ldr	r3, [r11, #-8]
     738:	e5933004 	ldr	r3, [r3, #4]
     73c:	e50b300c 	str	r3, [r11, #-12]
    if (control & 0xFFFF0000)               // if space, echo character, else ignore 
     740:	e51b300c 	ldr	r3, [r11, #-12]
     744:	e1a03823 	lsr	r3, r3, #16
     748:	e1a03803 	lsl	r3, r3, #16
     74c:	e3530000 	cmp	r3, #0
     750:	0a000002 	beq	760 <put_jtag+0x4c>
        *(JTAG_UART_ptr) = c;
     754:	e55b200d 	ldrb	r2, [r11, #-13]
     758:	e51b3008 	ldr	r3, [r11, #-8]
     75c:	e5832000 	str	r2, [r3]
}
     760:	e28bd000 	add	sp, r11, #0
     764:	e8bd0800 	ldmfd	sp!, {r11}
     768:	e12fff1e 	bx	lr

0000076c <get_jtag>:

char get_jtag( void )
{
     76c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     770:	e28db000 	add	r11, sp, #0
     774:	e24dd00c 	sub	sp, sp, #12
    volatile int * JTAG_UART_ptr    = (int *) JTAG_UART_BASE;   // JTAG UART address
     778:	e3a03a01 	mov	r3, #4096	; 0x1000
     77c:	e34f3f20 	movt	r3, #65312	; 0xff20
     780:	e50b3008 	str	r3, [r11, #-8]

    int data;
    data = *(JTAG_UART_ptr);                // read the JTAG_UART data register
     784:	e51b3008 	ldr	r3, [r11, #-8]
     788:	e5933000 	ldr	r3, [r3]
     78c:	e50b300c 	str	r3, [r11, #-12]
    if (data & 0x00008000)                  // check RVALID to see if there is new data
     790:	e51b300c 	ldr	r3, [r11, #-12]
     794:	e2033902 	and	r3, r3, #32768	; 0x8000
     798:	e3530000 	cmp	r3, #0
     79c:	0a000002 	beq	7ac <get_jtag+0x40>
        return ((char) data & 0xFF);
     7a0:	e51b300c 	ldr	r3, [r11, #-12]
     7a4:	e6ef3073 	uxtb	r3, r3
     7a8:	ea000000 	b	7b0 <get_jtag+0x44>
    else
        return ('\0');
     7ac:	e3a03000 	mov	r3, #0
}
     7b0:	e1a00003 	mov	r0, r3
     7b4:	e28bd000 	add	sp, r11, #0
     7b8:	e8bd0800 	ldmfd	sp!, {r11}
     7bc:	e12fff1e 	bx	lr

000007c0 <GetDigit>:

char GetDigit(unsigned char value)
{
     7c0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     7c4:	e28db000 	add	r11, sp, #0
     7c8:	e24dd01c 	sub	sp, sp, #28
     7cc:	e1a03000 	mov	r3, r0
     7d0:	e54b3015 	strb	r3, [r11, #-21]	; 0xffffffeb
    char digits[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
     7d4:	e3013b40 	movw	r3, #6976	; 0x1b40
     7d8:	e3403000 	movt	r3, #0
     7dc:	e24bc014 	sub	r12, r11, #20
     7e0:	e5930000 	ldr	r0, [r3]
     7e4:	e5931004 	ldr	r1, [r3, #4]
     7e8:	e5932008 	ldr	r2, [r3, #8]
     7ec:	e593300c 	ldr	r3, [r3, #12]
     7f0:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}

    return digits[value];
     7f4:	e55b2015 	ldrb	r2, [r11, #-21]	; 0xffffffeb
     7f8:	e3e0300f 	mvn	r3, #15
     7fc:	e24b1004 	sub	r1, r11, #4
     800:	e0812002 	add	r2, r1, r2
     804:	e0823003 	add	r3, r2, r3
     808:	e5d33000 	ldrb	r3, [r3]
}
     80c:	e1a00003 	mov	r0, r3
     810:	e28bd000 	add	sp, r11, #0
     814:	e8bd0800 	ldmfd	sp!, {r11}
     818:	e12fff1e 	bx	lr

0000081c <DigitSeparator>:

/***************************************************************************************************
Function Definitions:
***************************************************************************************************/
struct Digits DigitSeparator(int number)
{
     81c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     820:	e28db000 	add	r11, sp, #0
     824:	e24dd014 	sub	sp, sp, #20
     828:	e50b0010 	str	r0, [r11, #-16]
    struct Digits numberSeparated;

    numberSeparated.thousands = number / 1000;
     82c:	e51b2010 	ldr	r2, [r11, #-16]
     830:	e3043dd3 	movw	r3, #19923	; 0x4dd3
     834:	e3413062 	movt	r3, #4194	; 0x1062
     838:	e0c31293 	smull	r1, r3, r3, r2
     83c:	e1a01343 	asr	r1, r3, #6
     840:	e1a03fc2 	asr	r3, r2, #31
     844:	e0633001 	rsb	r3, r3, r1
     848:	e6ef3073 	uxtb	r3, r3
     84c:	e54b300c 	strb	r3, [r11, #-12]
    numberSeparated.hundreds  = (number % 1000) / 100;
     850:	e51b2010 	ldr	r2, [r11, #-16]
     854:	e3043dd3 	movw	r3, #19923	; 0x4dd3
     858:	e3413062 	movt	r3, #4194	; 0x1062
     85c:	e0c31293 	smull	r1, r3, r3, r2
     860:	e1a01343 	asr	r1, r3, #6
     864:	e1a03fc2 	asr	r3, r2, #31
     868:	e0633001 	rsb	r3, r3, r1
     86c:	e3a01ffa 	mov	r1, #1000	; 0x3e8
     870:	e0030391 	mul	r3, r1, r3
     874:	e0633002 	rsb	r3, r3, r2
     878:	e308251f 	movw	r2, #34079	; 0x851f
     87c:	e34521eb 	movt	r2, #20971	; 0x51eb
     880:	e0c21392 	smull	r1, r2, r2, r3
     884:	e1a022c2 	asr	r2, r2, #5
     888:	e1a03fc3 	asr	r3, r3, #31
     88c:	e0633002 	rsb	r3, r3, r2
     890:	e6ef3073 	uxtb	r3, r3
     894:	e54b300b 	strb	r3, [r11, #-11]
    numberSeparated.tens      = ((number % 1000) % 100) / 10;
     898:	e51b2010 	ldr	r2, [r11, #-16]
     89c:	e3043dd3 	movw	r3, #19923	; 0x4dd3
     8a0:	e3413062 	movt	r3, #4194	; 0x1062
     8a4:	e0c31293 	smull	r1, r3, r3, r2
     8a8:	e1a01343 	asr	r1, r3, #6
     8ac:	e1a03fc2 	asr	r3, r2, #31
     8b0:	e0633001 	rsb	r3, r3, r1
     8b4:	e3a01ffa 	mov	r1, #1000	; 0x3e8
     8b8:	e0030391 	mul	r3, r1, r3
     8bc:	e0633002 	rsb	r3, r3, r2
     8c0:	e308251f 	movw	r2, #34079	; 0x851f
     8c4:	e34521eb 	movt	r2, #20971	; 0x51eb
     8c8:	e0c21392 	smull	r1, r2, r2, r3
     8cc:	e1a012c2 	asr	r1, r2, #5
     8d0:	e1a02fc3 	asr	r2, r3, #31
     8d4:	e0622001 	rsb	r2, r2, r1
     8d8:	e3a01064 	mov	r1, #100	; 0x64
     8dc:	e0020291 	mul	r2, r1, r2
     8e0:	e0622003 	rsb	r2, r2, r3
     8e4:	e3063667 	movw	r3, #26215	; 0x6667
     8e8:	e3463666 	movt	r3, #26214	; 0x6666
     8ec:	e0c31293 	smull	r1, r3, r3, r2
     8f0:	e1a01143 	asr	r1, r3, #2
     8f4:	e1a03fc2 	asr	r3, r2, #31
     8f8:	e0633001 	rsb	r3, r3, r1
     8fc:	e6ef3073 	uxtb	r3, r3
     900:	e54b300a 	strb	r3, [r11, #-10]
    numberSeparated.ones      = (((number % 1000) % 100) % 10);
     904:	e51b2010 	ldr	r2, [r11, #-16]
     908:	e3043dd3 	movw	r3, #19923	; 0x4dd3
     90c:	e3413062 	movt	r3, #4194	; 0x1062
     910:	e0c31293 	smull	r1, r3, r3, r2
     914:	e1a01343 	asr	r1, r3, #6
     918:	e1a03fc2 	asr	r3, r2, #31
     91c:	e0633001 	rsb	r3, r3, r1
     920:	e3a01ffa 	mov	r1, #1000	; 0x3e8
     924:	e0030391 	mul	r3, r1, r3
     928:	e0633002 	rsb	r3, r3, r2
     92c:	e308251f 	movw	r2, #34079	; 0x851f
     930:	e34521eb 	movt	r2, #20971	; 0x51eb
     934:	e0c21392 	smull	r1, r2, r2, r3
     938:	e1a012c2 	asr	r1, r2, #5
     93c:	e1a02fc3 	asr	r2, r3, #31
     940:	e0622001 	rsb	r2, r2, r1
     944:	e3a01064 	mov	r1, #100	; 0x64
     948:	e0020291 	mul	r2, r1, r2
     94c:	e0622003 	rsb	r2, r2, r3
     950:	e3063667 	movw	r3, #26215	; 0x6667
     954:	e3463666 	movt	r3, #26214	; 0x6666
     958:	e0c31293 	smull	r1, r3, r3, r2
     95c:	e1a01143 	asr	r1, r3, #2
     960:	e1a03fc2 	asr	r3, r2, #31
     964:	e0631001 	rsb	r1, r3, r1
     968:	e1a03001 	mov	r3, r1
     96c:	e1a03103 	lsl	r3, r3, #2
     970:	e0833001 	add	r3, r3, r1
     974:	e1a03083 	lsl	r3, r3, #1
     978:	e0631002 	rsb	r1, r3, r2
     97c:	e6ef3071 	uxtb	r3, r1
     980:	e54b3009 	strb	r3, [r11, #-9]

    return numberSeparated;
     984:	e51b300c 	ldr	r3, [r11, #-12]
     988:	e50b3008 	str	r3, [r11, #-8]
     98c:	e3a03000 	mov	r3, #0
     990:	e55b2008 	ldrb	r2, [r11, #-8]
     994:	e7c73012 	bfi	r3, r2, #0, #8
     998:	e55b2007 	ldrb	r2, [r11, #-7]
     99c:	e7cf3412 	bfi	r3, r2, #8, #8
     9a0:	e55b2006 	ldrb	r2, [r11, #-6]
     9a4:	e7d73812 	bfi	r3, r2, #16, #8
     9a8:	e55b2005 	ldrb	r2, [r11, #-5]
     9ac:	e7df3c12 	bfi	r3, r2, #24, #8
     9b0:	e1a00003 	mov	r0, r3
     9b4:	e28bd000 	add	sp, r11, #0
     9b8:	e8bd0800 	ldmfd	sp!, {r11}
     9bc:	e12fff1e 	bx	lr

000009c0 <SetPWM>:
/***************************************************************************************************
Function Definitions:
***************************************************************************************************/

void SetPWM(unsigned int period, double percent)
{
     9c0:	e92d4810 	push	{r4, r11, lr}
     9c4:	e28db008 	add	r11, sp, #8
     9c8:	e24dd01c 	sub	sp, sp, #28
     9cc:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
     9d0:	e14b22f4 	strd	r2, [r11, #-36]	; 0xffffffdc
    period = period * 100;
     9d4:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     9d8:	e3a02064 	mov	r2, #100	; 0x64
     9dc:	e0030392 	mul	r3, r2, r3
     9e0:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
    double math = period * percent;
     9e4:	e51b0018 	ldr	r0, [r11, #-24]	; 0xffffffe8
     9e8:	eb00017d 	bl	fe4 <__aeabi_ui2d>
     9ec:	e1a02000 	mov	r2, r0
     9f0:	e1a03001 	mov	r3, r1
     9f4:	e1a00002 	mov	r0, r2
     9f8:	e1a01003 	mov	r1, r3
     9fc:	e14b22d4 	ldrd	r2, [r11, #-36]	; 0xffffffdc
     a00:	eb0001b7 	bl	10e4 <__aeabi_dmul>
     a04:	e1a02000 	mov	r2, r0
     a08:	e1a03001 	mov	r3, r1
     a0c:	e14b21f4 	strd	r2, [r11, #-20]	; 0xffffffec

    /************************************************
    HPS Timer:
    ************************************************/
    *(HPSTimerPtr + 2) &= ~(1 << 0); // E = 0
     a10:	e3013bb8 	movw	r3, #7096	; 0x1bb8
     a14:	e3403000 	movt	r3, #0
     a18:	e5933000 	ldr	r3, [r3]
     a1c:	e2832008 	add	r2, r3, #8
     a20:	e3013bb8 	movw	r3, #7096	; 0x1bb8
     a24:	e3403000 	movt	r3, #0
     a28:	e5933000 	ldr	r3, [r3]
     a2c:	e2833008 	add	r3, r3, #8
     a30:	e5933000 	ldr	r3, [r3]
     a34:	e3c33001 	bic	r3, r3, #1
     a38:	e5823000 	str	r3, [r2]
    *(HPSTimerPtr) = (int)math; // load value
     a3c:	e3013bb8 	movw	r3, #7096	; 0x1bb8
     a40:	e3403000 	movt	r3, #0
     a44:	e5934000 	ldr	r4, [r3]
     a48:	e14b01d4 	ldrd	r0, [r11, #-20]	; 0xffffffec
     a4c:	eb00031c 	bl	16c4 <__aeabi_d2iz>
     a50:	e1a03000 	mov	r3, r0
     a54:	e5843000 	str	r3, [r4]
    *(HPSTimerPtr + 2) |= (1 << 1); // M = 1
     a58:	e3013bb8 	movw	r3, #7096	; 0x1bb8
     a5c:	e3403000 	movt	r3, #0
     a60:	e5933000 	ldr	r3, [r3]
     a64:	e2832008 	add	r2, r3, #8
     a68:	e3013bb8 	movw	r3, #7096	; 0x1bb8
     a6c:	e3403000 	movt	r3, #0
     a70:	e5933000 	ldr	r3, [r3]
     a74:	e2833008 	add	r3, r3, #8
     a78:	e5933000 	ldr	r3, [r3]
     a7c:	e3833002 	orr	r3, r3, #2
     a80:	e5823000 	str	r3, [r2]
    *(HPSTimerPtr + 2) |= (1 << 0); // E = 1
     a84:	e3013bb8 	movw	r3, #7096	; 0x1bb8
     a88:	e3403000 	movt	r3, #0
     a8c:	e5933000 	ldr	r3, [r3]
     a90:	e2832008 	add	r2, r3, #8
     a94:	e3013bb8 	movw	r3, #7096	; 0x1bb8
     a98:	e3403000 	movt	r3, #0
     a9c:	e5933000 	ldr	r3, [r3]
     aa0:	e2833008 	add	r3, r3, #8
     aa4:	e5933000 	ldr	r3, [r3]
     aa8:	e3833001 	orr	r3, r3, #1
     aac:	e5823000 	str	r3, [r2]

     ab0:	e24bd008 	sub	sp, r11, #8
     ab4:	e8bd8810 	pop	{r4, r11, pc}

00000ab8 <SwitchesPercent>:
/***************************************************************************************************
Function Definitions:
***************************************************************************************************/

double SwitchesPercent()
{
     ab8:	e92d4800 	push	{r11, lr}
     abc:	e28db004 	add	r11, sp, #4
     ac0:	e24dd008 	sub	sp, sp, #8
    double switchPercent = ( ( *(SwitchesPtr) & 0x3FF) / 1023.0 );
     ac4:	e3013bb4 	movw	r3, #7092	; 0x1bb4
     ac8:	e3403000 	movt	r3, #0
     acc:	e5933000 	ldr	r3, [r3]
     ad0:	e5933000 	ldr	r3, [r3]
     ad4:	e1a03b03 	lsl	r3, r3, #22
     ad8:	e1a03b23 	lsr	r3, r3, #22
     adc:	e1a00003 	mov	r0, r3
     ae0:	eb000148 	bl	1008 <__aeabi_i2d>
     ae4:	e1a02000 	mov	r2, r0
     ae8:	e1a03001 	mov	r3, r1
     aec:	e1a00002 	mov	r0, r2
     af0:	e1a01003 	mov	r1, r3
     af4:	e3a02000 	mov	r2, #0
     af8:	e3a03b3e 	mov	r3, #63488	; 0xf800
     afc:	e344308f 	movt	r3, #16527	; 0x408f
     b00:	eb00021b 	bl	1374 <__aeabi_ddiv>
     b04:	e1a02000 	mov	r2, r0
     b08:	e1a03001 	mov	r3, r1
     b0c:	e14b20fc 	strd	r2, [r11, #-12]
    return switchPercent;
     b10:	e14b20dc 	ldrd	r2, [r11, #-12]
     b14:	e1a00002 	mov	r0, r2
     b18:	e1a01003 	mov	r1, r3
     b1c:	e24bd004 	sub	sp, r11, #4
     b20:	e8bd8800 	pop	{r11, pc}

00000b24 <PrivTimerISR>:

/***************************************************************************************************
Function Definitions:
***************************************************************************************************/
void PrivTimerISR(void)
{
     b24:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     b28:	e28db000 	add	r11, sp, #0
    TIMER_FLAG = 1;
     b2c:	e3023028 	movw	r3, #8232	; 0x2028
     b30:	e3403000 	movt	r3, #0
     b34:	e3a02001 	mov	r2, #1
     b38:	e5c32000 	strb	r2, [r3]
}
     b3c:	e28bd000 	add	sp, r11, #0
     b40:	e8bd0800 	ldmfd	sp!, {r11}
     b44:	e12fff1e 	bx	lr

00000b48 <HPSTimerISR>:

void HPSTimerISR(void)
{
     b48:	e92d4800 	push	{r11, lr}
     b4c:	e28db004 	add	r11, sp, #4
     b50:	e24dd008 	sub	sp, sp, #8
    double switches = ( ( *(SwitchesPtr) & 0x3FF) / 1023.0 );
     b54:	e3013bb4 	movw	r3, #7092	; 0x1bb4
     b58:	e3403000 	movt	r3, #0
     b5c:	e5933000 	ldr	r3, [r3]
     b60:	e5933000 	ldr	r3, [r3]
     b64:	e1a03b03 	lsl	r3, r3, #22
     b68:	e1a03b23 	lsr	r3, r3, #22
     b6c:	e1a00003 	mov	r0, r3
     b70:	eb000124 	bl	1008 <__aeabi_i2d>
     b74:	e1a02000 	mov	r2, r0
     b78:	e1a03001 	mov	r3, r1
     b7c:	e1a00002 	mov	r0, r2
     b80:	e1a01003 	mov	r1, r3
     b84:	e3a02000 	mov	r2, #0
     b88:	e3a03b3e 	mov	r3, #63488	; 0xf800
     b8c:	e344308f 	movt	r3, #16527	; 0x408f
     b90:	eb0001f7 	bl	1374 <__aeabi_ddiv>
     b94:	e1a02000 	mov	r2, r0
     b98:	e1a03001 	mov	r3, r1
     b9c:	e14b20fc 	strd	r2, [r11, #-12]
    static direction = 0;

    if(switches == 0)
     ba0:	e14b00dc 	ldrd	r0, [r11, #-12]
     ba4:	e3a02000 	mov	r2, #0
     ba8:	e3a03000 	mov	r3, #0
     bac:	eb0002a6 	bl	164c <__aeabi_dcmpeq>
     bb0:	e1a03000 	mov	r3, r0
     bb4:	e3530000 	cmp	r3, #0
     bb8:	0a000005 	beq	bd4 <HPSTimerISR+0x8c>
    {
        // *(GPIOPtr) &= ~(1 << 0);
        *(GPIOPtr) = 0;
     bbc:	e3013bb0 	movw	r3, #7088	; 0x1bb0
     bc0:	e3403000 	movt	r3, #0
     bc4:	e5933000 	ldr	r3, [r3]
     bc8:	e3a02000 	mov	r2, #0
     bcc:	e5832000 	str	r2, [r3]
     bd0:	ea000031 	b	c9c <HPSTimerISR+0x154>
    }
    else if(switches == 1.0)
     bd4:	e14b00dc 	ldrd	r0, [r11, #-12]
     bd8:	e3a02000 	mov	r2, #0
     bdc:	e3a03000 	mov	r3, #0
     be0:	e3433ff0 	movt	r3, #16368	; 0x3ff0
     be4:	eb000298 	bl	164c <__aeabi_dcmpeq>
     be8:	e1a03000 	mov	r3, r0
     bec:	e3530000 	cmp	r3, #0
     bf0:	0a000005 	beq	c0c <HPSTimerISR+0xc4>
    {
        // *(GPIOPtr) |= (1 << 0);
        *(GPIOPtr) = 1;
     bf4:	e3013bb0 	movw	r3, #7088	; 0x1bb0
     bf8:	e3403000 	movt	r3, #0
     bfc:	e5933000 	ldr	r3, [r3]
     c00:	e3a02001 	mov	r2, #1
     c04:	e5832000 	str	r2, [r3]
     c08:	ea000023 	b	c9c <HPSTimerISR+0x154>
    }
    else
    {
        if(direction == 1)
     c0c:	e302302c 	movw	r3, #8236	; 0x202c
     c10:	e3403000 	movt	r3, #0
     c14:	e5933000 	ldr	r3, [r3]
     c18:	e3530001 	cmp	r3, #1
     c1c:	1a00000c 	bne	c54 <HPSTimerISR+0x10c>
        {
            // *(GPIOPtr) &= ~(1 << 0); // D0 = low
            *(GPIOPtr) = 1;
     c20:	e3013bb0 	movw	r3, #7088	; 0x1bb0
     c24:	e3403000 	movt	r3, #0
     c28:	e5933000 	ldr	r3, [r3]
     c2c:	e3a02001 	mov	r2, #1
     c30:	e5832000 	str	r2, [r3]
            SetPWM(1000, switches);
     c34:	e3a00ffa 	mov	r0, #1000	; 0x3e8
     c38:	e14b20dc 	ldrd	r2, [r11, #-12]
     c3c:	ebffff5f 	bl	9c0 <SetPWM>

            direction = 0;
     c40:	e302302c 	movw	r3, #8236	; 0x202c
     c44:	e3403000 	movt	r3, #0
     c48:	e3a02000 	mov	r2, #0
     c4c:	e5832000 	str	r2, [r3]
     c50:	ea000011 	b	c9c <HPSTimerISR+0x154>
        }
        else // direction == 0
        {
            // *(GPIOPtr) |= (1 << 0); // D0 = high
            *(GPIOPtr) = 0;
     c54:	e3013bb0 	movw	r3, #7088	; 0x1bb0
     c58:	e3403000 	movt	r3, #0
     c5c:	e5933000 	ldr	r3, [r3]
     c60:	e3a02000 	mov	r2, #0
     c64:	e5832000 	str	r2, [r3]
            SetPWM( 1000, (1.0 - switches) );
     c68:	e3a00000 	mov	r0, #0
     c6c:	e3a01000 	mov	r1, #0
     c70:	e3431ff0 	movt	r1, #16368	; 0x3ff0
     c74:	e14b20dc 	ldrd	r2, [r11, #-12]
     c78:	eb000014 	bl	cd0 <__aeabi_dsub>
     c7c:	e1a02000 	mov	r2, r0
     c80:	e1a03001 	mov	r3, r1
     c84:	e3a00ffa 	mov	r0, #1000	; 0x3e8
     c88:	ebffff4c 	bl	9c0 <SetPWM>

            direction = 1;
     c8c:	e302302c 	movw	r3, #8236	; 0x202c
     c90:	e3403000 	movt	r3, #0
     c94:	e3a02001 	mov	r2, #1
     c98:	e5832000 	str	r2, [r3]
        }
    }

    END = *(HPSTimerPtr + 3);
     c9c:	e3013bb8 	movw	r3, #7096	; 0x1bb8
     ca0:	e3403000 	movt	r3, #0
     ca4:	e5933000 	ldr	r3, [r3]
     ca8:	e283300c 	add	r3, r3, #12
     cac:	e5933000 	ldr	r3, [r3]
     cb0:	e6ef2073 	uxtb	r2, r3
     cb4:	e302302a 	movw	r3, #8234	; 0x202a
     cb8:	e3403000 	movt	r3, #0
     cbc:	e5c32000 	strb	r2, [r3]
}
     cc0:	e24bd004 	sub	sp, r11, #4
     cc4:	e8bd8800 	pop	{r11, pc}

00000cc8 <__aeabi_drsub>:
     cc8:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
     ccc:	ea000000 	b	cd4 <__adddf3>

00000cd0 <__aeabi_dsub>:
     cd0:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

00000cd4 <__adddf3>:
     cd4:	e92d4030 	push	{r4, r5, lr}
     cd8:	e1a04081 	lsl	r4, r1, #1
     cdc:	e1a05083 	lsl	r5, r3, #1
     ce0:	e1340005 	teq	r4, r5
     ce4:	01300002 	teqeq	r0, r2
     ce8:	1194c000 	orrsne	r12, r4, r0
     cec:	1195c002 	orrsne	r12, r5, r2
     cf0:	11f0cac4 	mvnsne	r12, r4, asr #21
     cf4:	11f0cac5 	mvnsne	r12, r5, asr #21
     cf8:	0a00008c 	beq	f30 <__adddf3+0x25c>
     cfc:	e1a04aa4 	lsr	r4, r4, #21
     d00:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
     d04:	b2655000 	rsblt	r5, r5, #0
     d08:	da000006 	ble	d28 <__adddf3+0x54>
     d0c:	e0844005 	add	r4, r4, r5
     d10:	e0202002 	eor	r2, r0, r2
     d14:	e0213003 	eor	r3, r1, r3
     d18:	e0220000 	eor	r0, r2, r0
     d1c:	e0231001 	eor	r1, r3, r1
     d20:	e0202002 	eor	r2, r0, r2
     d24:	e0213003 	eor	r3, r1, r3
     d28:	e3550036 	cmp	r5, #54	; 0x36
     d2c:	88bd4030 	pophi	{r4, r5, lr}
     d30:	812fff1e 	bxhi	lr
     d34:	e3110102 	tst	r1, #-2147483648	; 0x80000000
     d38:	e1a01601 	lsl	r1, r1, #12
     d3c:	e3a0c601 	mov	r12, #1048576	; 0x100000
     d40:	e18c1621 	orr	r1, r12, r1, lsr #12
     d44:	0a000001 	beq	d50 <__adddf3+0x7c>
     d48:	e2700000 	rsbs	r0, r0, #0
     d4c:	e2e11000 	rsc	r1, r1, #0
     d50:	e3130102 	tst	r3, #-2147483648	; 0x80000000
     d54:	e1a03603 	lsl	r3, r3, #12
     d58:	e18c3623 	orr	r3, r12, r3, lsr #12
     d5c:	0a000001 	beq	d68 <__adddf3+0x94>
     d60:	e2722000 	rsbs	r2, r2, #0
     d64:	e2e33000 	rsc	r3, r3, #0
     d68:	e1340005 	teq	r4, r5
     d6c:	0a000069 	beq	f18 <__adddf3+0x244>
     d70:	e2444001 	sub	r4, r4, #1
     d74:	e275e020 	rsbs	lr, r5, #32
     d78:	ba000005 	blt	d94 <__adddf3+0xc0>
     d7c:	e1a0ce12 	lsl	r12, r2, lr
     d80:	e0900532 	adds	r0, r0, r2, lsr r5
     d84:	e2a11000 	adc	r1, r1, #0
     d88:	e0900e13 	adds	r0, r0, r3, lsl lr
     d8c:	e0b11553 	adcs	r1, r1, r3, asr r5
     d90:	ea000006 	b	db0 <__adddf3+0xdc>
     d94:	e2455020 	sub	r5, r5, #32
     d98:	e28ee020 	add	lr, lr, #32
     d9c:	e3520001 	cmp	r2, #1
     da0:	e1a0ce13 	lsl	r12, r3, lr
     da4:	238cc002 	orrcs	r12, r12, #2
     da8:	e0900553 	adds	r0, r0, r3, asr r5
     dac:	e0b11fc3 	adcs	r1, r1, r3, asr #31
     db0:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
     db4:	5a000002 	bpl	dc4 <__adddf3+0xf0>
     db8:	e27cc000 	rsbs	r12, r12, #0
     dbc:	e2f00000 	rscs	r0, r0, #0
     dc0:	e2e11000 	rsc	r1, r1, #0
     dc4:	e3510601 	cmp	r1, #1048576	; 0x100000
     dc8:	3a00000f 	bcc	e0c <__adddf3+0x138>
     dcc:	e3510602 	cmp	r1, #2097152	; 0x200000
     dd0:	3a000006 	bcc	df0 <__adddf3+0x11c>
     dd4:	e1b010a1 	lsrs	r1, r1, #1
     dd8:	e1b00060 	rrxs	r0, r0
     ddc:	e1a0c06c 	rrx	r12, r12
     de0:	e2844001 	add	r4, r4, #1
     de4:	e1a02a84 	lsl	r2, r4, #21
     de8:	e3720501 	cmn	r2, #4194304	; 0x400000
     dec:	2a00006b 	bcs	fa0 <__adddf3+0x2cc>
     df0:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
     df4:	01b0c0a0 	lsrseq	r12, r0, #1
     df8:	e2b00000 	adcs	r0, r0, #0
     dfc:	e0a11a04 	adc	r1, r1, r4, lsl #20
     e00:	e1811005 	orr	r1, r1, r5
     e04:	e8bd4030 	pop	{r4, r5, lr}
     e08:	e12fff1e 	bx	lr
     e0c:	e1b0c08c 	lsls	r12, r12, #1
     e10:	e0b00000 	adcs	r0, r0, r0
     e14:	e0a11001 	adc	r1, r1, r1
     e18:	e3110601 	tst	r1, #1048576	; 0x100000
     e1c:	e2444001 	sub	r4, r4, #1
     e20:	1afffff2 	bne	df0 <__adddf3+0x11c>
     e24:	e3310000 	teq	r1, #0
     e28:	13a03014 	movne	r3, #20
     e2c:	03a03034 	moveq	r3, #52	; 0x34
     e30:	01a01000 	moveq	r1, r0
     e34:	03a00000 	moveq	r0, #0
     e38:	e1a02001 	mov	r2, r1
     e3c:	e3520801 	cmp	r2, #65536	; 0x10000
     e40:	21a02822 	lsrcs	r2, r2, #16
     e44:	22433010 	subcs	r3, r3, #16
     e48:	e3520c01 	cmp	r2, #256	; 0x100
     e4c:	21a02422 	lsrcs	r2, r2, #8
     e50:	22433008 	subcs	r3, r3, #8
     e54:	e3520010 	cmp	r2, #16
     e58:	21a02222 	lsrcs	r2, r2, #4
     e5c:	22433004 	subcs	r3, r3, #4
     e60:	e3520004 	cmp	r2, #4
     e64:	22433002 	subcs	r3, r3, #2
     e68:	304330a2 	subcc	r3, r3, r2, lsr #1
     e6c:	e04331a2 	sub	r3, r3, r2, lsr #3
     e70:	e2532020 	subs	r2, r3, #32
     e74:	aa000007 	bge	e98 <__adddf3+0x1c4>
     e78:	e292200c 	adds	r2, r2, #12
     e7c:	da000004 	ble	e94 <__adddf3+0x1c0>
     e80:	e282c014 	add	r12, r2, #20
     e84:	e262200c 	rsb	r2, r2, #12
     e88:	e1a00c11 	lsl	r0, r1, r12
     e8c:	e1a01231 	lsr	r1, r1, r2
     e90:	ea000004 	b	ea8 <__adddf3+0x1d4>
     e94:	e2822014 	add	r2, r2, #20
     e98:	d262c020 	rsble	r12, r2, #32
     e9c:	e1a01211 	lsl	r1, r1, r2
     ea0:	d1811c30 	orrle	r1, r1, r0, lsr r12
     ea4:	d1a00210 	lslle	r0, r0, r2
     ea8:	e0544003 	subs	r4, r4, r3
     eac:	a0811a04 	addge	r1, r1, r4, lsl #20
     eb0:	a1811005 	orrge	r1, r1, r5
     eb4:	a8bd4030 	popge	{r4, r5, lr}
     eb8:	a12fff1e 	bxge	lr
     ebc:	e1e04004 	mvn	r4, r4
     ec0:	e254401f 	subs	r4, r4, #31
     ec4:	aa00000f 	bge	f08 <__adddf3+0x234>
     ec8:	e294400c 	adds	r4, r4, #12
     ecc:	ca000006 	bgt	eec <__adddf3+0x218>
     ed0:	e2844014 	add	r4, r4, #20
     ed4:	e2642020 	rsb	r2, r4, #32
     ed8:	e1a00430 	lsr	r0, r0, r4
     edc:	e1800211 	orr	r0, r0, r1, lsl r2
     ee0:	e1851431 	orr	r1, r5, r1, lsr r4
     ee4:	e8bd4030 	pop	{r4, r5, lr}
     ee8:	e12fff1e 	bx	lr
     eec:	e264400c 	rsb	r4, r4, #12
     ef0:	e2642020 	rsb	r2, r4, #32
     ef4:	e1a00230 	lsr	r0, r0, r2
     ef8:	e1800411 	orr	r0, r0, r1, lsl r4
     efc:	e1a01005 	mov	r1, r5
     f00:	e8bd4030 	pop	{r4, r5, lr}
     f04:	e12fff1e 	bx	lr
     f08:	e1a00431 	lsr	r0, r1, r4
     f0c:	e1a01005 	mov	r1, r5
     f10:	e8bd4030 	pop	{r4, r5, lr}
     f14:	e12fff1e 	bx	lr
     f18:	e3340000 	teq	r4, #0
     f1c:	e2233601 	eor	r3, r3, #1048576	; 0x100000
     f20:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
     f24:	02844001 	addeq	r4, r4, #1
     f28:	12455001 	subne	r5, r5, #1
     f2c:	eaffff8f 	b	d70 <__adddf3+0x9c>
     f30:	e1f0cac4 	mvns	r12, r4, asr #21
     f34:	11f0cac5 	mvnsne	r12, r5, asr #21
     f38:	0a00001d 	beq	fb4 <__adddf3+0x2e0>
     f3c:	e1340005 	teq	r4, r5
     f40:	01300002 	teqeq	r0, r2
     f44:	0a000004 	beq	f5c <__adddf3+0x288>
     f48:	e194c000 	orrs	r12, r4, r0
     f4c:	01a01003 	moveq	r1, r3
     f50:	01a00002 	moveq	r0, r2
     f54:	e8bd4030 	pop	{r4, r5, lr}
     f58:	e12fff1e 	bx	lr
     f5c:	e1310003 	teq	r1, r3
     f60:	13a01000 	movne	r1, #0
     f64:	13a00000 	movne	r0, #0
     f68:	18bd4030 	popne	{r4, r5, lr}
     f6c:	112fff1e 	bxne	lr
     f70:	e1b0caa4 	lsrs	r12, r4, #21
     f74:	1a000004 	bne	f8c <__adddf3+0x2b8>
     f78:	e1b00080 	lsls	r0, r0, #1
     f7c:	e0b11001 	adcs	r1, r1, r1
     f80:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
     f84:	e8bd4030 	pop	{r4, r5, lr}
     f88:	e12fff1e 	bx	lr
     f8c:	e2944501 	adds	r4, r4, #4194304	; 0x400000
     f90:	32811601 	addcc	r1, r1, #1048576	; 0x100000
     f94:	38bd4030 	popcc	{r4, r5, lr}
     f98:	312fff1e 	bxcc	lr
     f9c:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
     fa0:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
     fa4:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
     fa8:	e3a00000 	mov	r0, #0
     fac:	e8bd4030 	pop	{r4, r5, lr}
     fb0:	e12fff1e 	bx	lr
     fb4:	e1f0cac4 	mvns	r12, r4, asr #21
     fb8:	11a01003 	movne	r1, r3
     fbc:	11a00002 	movne	r0, r2
     fc0:	01f0cac5 	mvnseq	r12, r5, asr #21
     fc4:	11a03001 	movne	r3, r1
     fc8:	11a02000 	movne	r2, r0
     fcc:	e1904601 	orrs	r4, r0, r1, lsl #12
     fd0:	01925603 	orrseq	r5, r2, r3, lsl #12
     fd4:	01310003 	teqeq	r1, r3
     fd8:	13811702 	orrne	r1, r1, #524288	; 0x80000
     fdc:	e8bd4030 	pop	{r4, r5, lr}
     fe0:	e12fff1e 	bx	lr

00000fe4 <__aeabi_ui2d>:
     fe4:	e3300000 	teq	r0, #0
     fe8:	03a01000 	moveq	r1, #0
     fec:	012fff1e 	bxeq	lr
     ff0:	e92d4030 	push	{r4, r5, lr}
     ff4:	e3a04b01 	mov	r4, #1024	; 0x400
     ff8:	e2844032 	add	r4, r4, #50	; 0x32
     ffc:	e3a05000 	mov	r5, #0
    1000:	e3a01000 	mov	r1, #0
    1004:	eaffff86 	b	e24 <__adddf3+0x150>

00001008 <__aeabi_i2d>:
    1008:	e3300000 	teq	r0, #0
    100c:	03a01000 	moveq	r1, #0
    1010:	012fff1e 	bxeq	lr
    1014:	e92d4030 	push	{r4, r5, lr}
    1018:	e3a04b01 	mov	r4, #1024	; 0x400
    101c:	e2844032 	add	r4, r4, #50	; 0x32
    1020:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    1024:	42600000 	rsbmi	r0, r0, #0
    1028:	e3a01000 	mov	r1, #0
    102c:	eaffff7c 	b	e24 <__adddf3+0x150>

00001030 <__aeabi_f2d>:
    1030:	e1b02080 	lsls	r2, r0, #1
    1034:	e1a011c2 	asr	r1, r2, #3
    1038:	e1a01061 	rrx	r1, r1
    103c:	e1a00e02 	lsl	r0, r2, #28
    1040:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    1044:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    1048:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    104c:	112fff1e 	bxne	lr
    1050:	e3320000 	teq	r2, #0
    1054:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    1058:	012fff1e 	bxeq	lr
    105c:	e92d4030 	push	{r4, r5, lr}
    1060:	e3a04d0e 	mov	r4, #896	; 0x380
    1064:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1068:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    106c:	eaffff6c 	b	e24 <__adddf3+0x150>

00001070 <__aeabi_ul2d>:
    1070:	e1902001 	orrs	r2, r0, r1
    1074:	012fff1e 	bxeq	lr
    1078:	e92d4030 	push	{r4, r5, lr}
    107c:	e3a05000 	mov	r5, #0
    1080:	ea000006 	b	10a0 <__aeabi_l2d+0x1c>

00001084 <__aeabi_l2d>:
    1084:	e1902001 	orrs	r2, r0, r1
    1088:	012fff1e 	bxeq	lr
    108c:	e92d4030 	push	{r4, r5, lr}
    1090:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    1094:	5a000001 	bpl	10a0 <__aeabi_l2d+0x1c>
    1098:	e2700000 	rsbs	r0, r0, #0
    109c:	e2e11000 	rsc	r1, r1, #0
    10a0:	e3a04b01 	mov	r4, #1024	; 0x400
    10a4:	e2844032 	add	r4, r4, #50	; 0x32
    10a8:	e1b0cb21 	lsrs	r12, r1, #22
    10ac:	0affff44 	beq	dc4 <__adddf3+0xf0>
    10b0:	e3a02003 	mov	r2, #3
    10b4:	e1b0c1ac 	lsrs	r12, r12, #3
    10b8:	12822003 	addne	r2, r2, #3
    10bc:	e1b0c1ac 	lsrs	r12, r12, #3
    10c0:	12822003 	addne	r2, r2, #3
    10c4:	e08221ac 	add	r2, r2, r12, lsr #3
    10c8:	e2623020 	rsb	r3, r2, #32
    10cc:	e1a0c310 	lsl	r12, r0, r3
    10d0:	e1a00230 	lsr	r0, r0, r2
    10d4:	e1800311 	orr	r0, r0, r1, lsl r3
    10d8:	e1a01231 	lsr	r1, r1, r2
    10dc:	e0844002 	add	r4, r4, r2
    10e0:	eaffff37 	b	dc4 <__adddf3+0xf0>

000010e4 <__aeabi_dmul>:
    10e4:	e92d4070 	push	{r4, r5, r6, lr}
    10e8:	e3a0c0ff 	mov	r12, #255	; 0xff
    10ec:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    10f0:	e01c4a21 	ands	r4, r12, r1, lsr #20
    10f4:	101c5a23 	andsne	r5, r12, r3, lsr #20
    10f8:	1134000c 	teqne	r4, r12
    10fc:	1135000c 	teqne	r5, r12
    1100:	0b000075 	bleq	12dc <__aeabi_dmul+0x1f8>
    1104:	e0844005 	add	r4, r4, r5
    1108:	e0216003 	eor	r6, r1, r3
    110c:	e1c11a8c 	bic	r1, r1, r12, lsl #21
    1110:	e1c33a8c 	bic	r3, r3, r12, lsl #21
    1114:	e1905601 	orrs	r5, r0, r1, lsl #12
    1118:	11925603 	orrsne	r5, r2, r3, lsl #12
    111c:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    1120:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    1124:	0a00001d 	beq	11a0 <__aeabi_dmul+0xbc>
    1128:	e08ec290 	umull	r12, lr, r0, r2
    112c:	e3a05000 	mov	r5, #0
    1130:	e0a5e291 	umlal	lr, r5, r1, r2
    1134:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    1138:	e0a5e390 	umlal	lr, r5, r0, r3
    113c:	e3a06000 	mov	r6, #0
    1140:	e0a65391 	umlal	r5, r6, r1, r3
    1144:	e33c0000 	teq	r12, #0
    1148:	138ee001 	orrne	lr, lr, #1
    114c:	e24440ff 	sub	r4, r4, #255	; 0xff
    1150:	e3560c02 	cmp	r6, #512	; 0x200
    1154:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    1158:	2a000002 	bcs	1168 <__aeabi_dmul+0x84>
    115c:	e1b0e08e 	lsls	lr, lr, #1
    1160:	e0b55005 	adcs	r5, r5, r5
    1164:	e0a66006 	adc	r6, r6, r6
    1168:	e1821586 	orr	r1, r2, r6, lsl #11
    116c:	e1811aa5 	orr	r1, r1, r5, lsr #21
    1170:	e1a00585 	lsl	r0, r5, #11
    1174:	e1800aae 	orr	r0, r0, lr, lsr #21
    1178:	e1a0e58e 	lsl	lr, lr, #11
    117c:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    1180:	835c0c07 	cmphi	r12, #1792	; 0x700
    1184:	8a000011 	bhi	11d0 <__aeabi_dmul+0xec>
    1188:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    118c:	01b0e0a0 	lsrseq	lr, r0, #1
    1190:	e2b00000 	adcs	r0, r0, #0
    1194:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1198:	e8bd4070 	pop	{r4, r5, r6, lr}
    119c:	e12fff1e 	bx	lr
    11a0:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    11a4:	e1861001 	orr	r1, r6, r1
    11a8:	e1800002 	orr	r0, r0, r2
    11ac:	e0211003 	eor	r1, r1, r3
    11b0:	e05440ac 	subs	r4, r4, r12, lsr #1
    11b4:	c074500c 	rsbsgt	r5, r4, r12
    11b8:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    11bc:	c8bd4070 	popgt	{r4, r5, r6, lr}
    11c0:	c12fff1e 	bxgt	lr
    11c4:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    11c8:	e3a0e000 	mov	lr, #0
    11cc:	e2544001 	subs	r4, r4, #1
    11d0:	ca00005d 	bgt	134c <__aeabi_dmul+0x268>
    11d4:	e3740036 	cmn	r4, #54	; 0x36
    11d8:	d3a00000 	movle	r0, #0
    11dc:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    11e0:	d8bd4070 	pople	{r4, r5, r6, lr}
    11e4:	d12fff1e 	bxle	lr
    11e8:	e2644000 	rsb	r4, r4, #0
    11ec:	e2544020 	subs	r4, r4, #32
    11f0:	aa00001a 	bge	1260 <__aeabi_dmul+0x17c>
    11f4:	e294400c 	adds	r4, r4, #12
    11f8:	ca00000c 	bgt	1230 <__aeabi_dmul+0x14c>
    11fc:	e2844014 	add	r4, r4, #20
    1200:	e2645020 	rsb	r5, r4, #32
    1204:	e1a03510 	lsl	r3, r0, r5
    1208:	e1a00430 	lsr	r0, r0, r4
    120c:	e1800511 	orr	r0, r0, r1, lsl r5
    1210:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    1214:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    1218:	e0900fa3 	adds	r0, r0, r3, lsr #31
    121c:	e0a21431 	adc	r1, r2, r1, lsr r4
    1220:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1224:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1228:	e8bd4070 	pop	{r4, r5, r6, lr}
    122c:	e12fff1e 	bx	lr
    1230:	e264400c 	rsb	r4, r4, #12
    1234:	e2645020 	rsb	r5, r4, #32
    1238:	e1a03410 	lsl	r3, r0, r4
    123c:	e1a00530 	lsr	r0, r0, r5
    1240:	e1800411 	orr	r0, r0, r1, lsl r4
    1244:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1248:	e0900fa3 	adds	r0, r0, r3, lsr #31
    124c:	e2a11000 	adc	r1, r1, #0
    1250:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1254:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1258:	e8bd4070 	pop	{r4, r5, r6, lr}
    125c:	e12fff1e 	bx	lr
    1260:	e2645020 	rsb	r5, r4, #32
    1264:	e18ee510 	orr	lr, lr, r0, lsl r5
    1268:	e1a03430 	lsr	r3, r0, r4
    126c:	e1833511 	orr	r3, r3, r1, lsl r5
    1270:	e1a00431 	lsr	r0, r1, r4
    1274:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1278:	e1c00431 	bic	r0, r0, r1, lsr r4
    127c:	e0800fa3 	add	r0, r0, r3, lsr #31
    1280:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1284:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1288:	e8bd4070 	pop	{r4, r5, r6, lr}
    128c:	e12fff1e 	bx	lr
    1290:	e3340000 	teq	r4, #0
    1294:	1a000008 	bne	12bc <__aeabi_dmul+0x1d8>
    1298:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    129c:	e1b00080 	lsls	r0, r0, #1
    12a0:	e0a11001 	adc	r1, r1, r1
    12a4:	e3110601 	tst	r1, #1048576	; 0x100000
    12a8:	02444001 	subeq	r4, r4, #1
    12ac:	0afffffa 	beq	129c <__aeabi_dmul+0x1b8>
    12b0:	e1811006 	orr	r1, r1, r6
    12b4:	e3350000 	teq	r5, #0
    12b8:	112fff1e 	bxne	lr
    12bc:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    12c0:	e1b02082 	lsls	r2, r2, #1
    12c4:	e0a33003 	adc	r3, r3, r3
    12c8:	e3130601 	tst	r3, #1048576	; 0x100000
    12cc:	02455001 	subeq	r5, r5, #1
    12d0:	0afffffa 	beq	12c0 <__aeabi_dmul+0x1dc>
    12d4:	e1833006 	orr	r3, r3, r6
    12d8:	e12fff1e 	bx	lr
    12dc:	e134000c 	teq	r4, r12
    12e0:	e00c5a23 	and	r5, r12, r3, lsr #20
    12e4:	1135000c 	teqne	r5, r12
    12e8:	0a000007 	beq	130c <__aeabi_dmul+0x228>
    12ec:	e1906081 	orrs	r6, r0, r1, lsl #1
    12f0:	11926083 	orrsne	r6, r2, r3, lsl #1
    12f4:	1affffe5 	bne	1290 <__aeabi_dmul+0x1ac>
    12f8:	e0211003 	eor	r1, r1, r3
    12fc:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1300:	e3a00000 	mov	r0, #0
    1304:	e8bd4070 	pop	{r4, r5, r6, lr}
    1308:	e12fff1e 	bx	lr
    130c:	e1906081 	orrs	r6, r0, r1, lsl #1
    1310:	01a00002 	moveq	r0, r2
    1314:	01a01003 	moveq	r1, r3
    1318:	11926083 	orrsne	r6, r2, r3, lsl #1
    131c:	0a000010 	beq	1364 <__aeabi_dmul+0x280>
    1320:	e134000c 	teq	r4, r12
    1324:	1a000001 	bne	1330 <__aeabi_dmul+0x24c>
    1328:	e1906601 	orrs	r6, r0, r1, lsl #12
    132c:	1a00000c 	bne	1364 <__aeabi_dmul+0x280>
    1330:	e135000c 	teq	r5, r12
    1334:	1a000003 	bne	1348 <__aeabi_dmul+0x264>
    1338:	e1926603 	orrs	r6, r2, r3, lsl #12
    133c:	11a00002 	movne	r0, r2
    1340:	11a01003 	movne	r1, r3
    1344:	1a000006 	bne	1364 <__aeabi_dmul+0x280>
    1348:	e0211003 	eor	r1, r1, r3
    134c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1350:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    1354:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    1358:	e3a00000 	mov	r0, #0
    135c:	e8bd4070 	pop	{r4, r5, r6, lr}
    1360:	e12fff1e 	bx	lr
    1364:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    1368:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    136c:	e8bd4070 	pop	{r4, r5, r6, lr}
    1370:	e12fff1e 	bx	lr

00001374 <__aeabi_ddiv>:
    1374:	e92d4070 	push	{r4, r5, r6, lr}
    1378:	e3a0c0ff 	mov	r12, #255	; 0xff
    137c:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    1380:	e01c4a21 	ands	r4, r12, r1, lsr #20
    1384:	101c5a23 	andsne	r5, r12, r3, lsr #20
    1388:	1134000c 	teqne	r4, r12
    138c:	1135000c 	teqne	r5, r12
    1390:	0b00005e 	bleq	1510 <__aeabi_ddiv+0x19c>
    1394:	e0444005 	sub	r4, r4, r5
    1398:	e021e003 	eor	lr, r1, r3
    139c:	e1925603 	orrs	r5, r2, r3, lsl #12
    13a0:	e1a01601 	lsl	r1, r1, #12
    13a4:	0a00004c 	beq	14dc <__aeabi_ddiv+0x168>
    13a8:	e1a03603 	lsl	r3, r3, #12
    13ac:	e3a05201 	mov	r5, #268435456	; 0x10000000
    13b0:	e1853223 	orr	r3, r5, r3, lsr #4
    13b4:	e1833c22 	orr	r3, r3, r2, lsr #24
    13b8:	e1a02402 	lsl	r2, r2, #8
    13bc:	e1855221 	orr	r5, r5, r1, lsr #4
    13c0:	e1855c20 	orr	r5, r5, r0, lsr #24
    13c4:	e1a06400 	lsl	r6, r0, #8
    13c8:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    13cc:	e1550003 	cmp	r5, r3
    13d0:	01560002 	cmpeq	r6, r2
    13d4:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    13d8:	e2844c03 	add	r4, r4, #768	; 0x300
    13dc:	2a000001 	bcs	13e8 <__aeabi_ddiv+0x74>
    13e0:	e1b030a3 	lsrs	r3, r3, #1
    13e4:	e1a02062 	rrx	r2, r2
    13e8:	e0566002 	subs	r6, r6, r2
    13ec:	e0c55003 	sbc	r5, r5, r3
    13f0:	e1b030a3 	lsrs	r3, r3, #1
    13f4:	e1a02062 	rrx	r2, r2
    13f8:	e3a00601 	mov	r0, #1048576	; 0x100000
    13fc:	e3a0c702 	mov	r12, #524288	; 0x80000
    1400:	e056e002 	subs	lr, r6, r2
    1404:	e0d5e003 	sbcs	lr, r5, r3
    1408:	20466002 	subcs	r6, r6, r2
    140c:	21a0500e 	movcs	r5, lr
    1410:	2180000c 	orrcs	r0, r0, r12
    1414:	e1b030a3 	lsrs	r3, r3, #1
    1418:	e1a02062 	rrx	r2, r2
    141c:	e056e002 	subs	lr, r6, r2
    1420:	e0d5e003 	sbcs	lr, r5, r3
    1424:	20466002 	subcs	r6, r6, r2
    1428:	21a0500e 	movcs	r5, lr
    142c:	218000ac 	orrcs	r0, r0, r12, lsr #1
    1430:	e1b030a3 	lsrs	r3, r3, #1
    1434:	e1a02062 	rrx	r2, r2
    1438:	e056e002 	subs	lr, r6, r2
    143c:	e0d5e003 	sbcs	lr, r5, r3
    1440:	20466002 	subcs	r6, r6, r2
    1444:	21a0500e 	movcs	r5, lr
    1448:	2180012c 	orrcs	r0, r0, r12, lsr #2
    144c:	e1b030a3 	lsrs	r3, r3, #1
    1450:	e1a02062 	rrx	r2, r2
    1454:	e056e002 	subs	lr, r6, r2
    1458:	e0d5e003 	sbcs	lr, r5, r3
    145c:	20466002 	subcs	r6, r6, r2
    1460:	21a0500e 	movcs	r5, lr
    1464:	218001ac 	orrcs	r0, r0, r12, lsr #3
    1468:	e195e006 	orrs	lr, r5, r6
    146c:	0a00000d 	beq	14a8 <__aeabi_ddiv+0x134>
    1470:	e1a05205 	lsl	r5, r5, #4
    1474:	e1855e26 	orr	r5, r5, r6, lsr #28
    1478:	e1a06206 	lsl	r6, r6, #4
    147c:	e1a03183 	lsl	r3, r3, #3
    1480:	e1833ea2 	orr	r3, r3, r2, lsr #29
    1484:	e1a02182 	lsl	r2, r2, #3
    1488:	e1b0c22c 	lsrs	r12, r12, #4
    148c:	1affffdb 	bne	1400 <__aeabi_ddiv+0x8c>
    1490:	e3110601 	tst	r1, #1048576	; 0x100000
    1494:	1a000006 	bne	14b4 <__aeabi_ddiv+0x140>
    1498:	e1811000 	orr	r1, r1, r0
    149c:	e3a00000 	mov	r0, #0
    14a0:	e3a0c102 	mov	r12, #-2147483648	; 0x80000000
    14a4:	eaffffd5 	b	1400 <__aeabi_ddiv+0x8c>
    14a8:	e3110601 	tst	r1, #1048576	; 0x100000
    14ac:	01811000 	orreq	r1, r1, r0
    14b0:	03a00000 	moveq	r0, #0
    14b4:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    14b8:	835c0c07 	cmphi	r12, #1792	; 0x700
    14bc:	8affff43 	bhi	11d0 <__aeabi_dmul+0xec>
    14c0:	e055c003 	subs	r12, r5, r3
    14c4:	0056c002 	subseq	r12, r6, r2
    14c8:	01b0c0a0 	lsrseq	r12, r0, #1
    14cc:	e2b00000 	adcs	r0, r0, #0
    14d0:	e0a11a04 	adc	r1, r1, r4, lsl #20
    14d4:	e8bd4070 	pop	{r4, r5, r6, lr}
    14d8:	e12fff1e 	bx	lr
    14dc:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    14e0:	e18e1621 	orr	r1, lr, r1, lsr #12
    14e4:	e09440ac 	adds	r4, r4, r12, lsr #1
    14e8:	c074500c 	rsbsgt	r5, r4, r12
    14ec:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    14f0:	c8bd4070 	popgt	{r4, r5, r6, lr}
    14f4:	c12fff1e 	bxgt	lr
    14f8:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    14fc:	e3a0e000 	mov	lr, #0
    1500:	e2544001 	subs	r4, r4, #1
    1504:	eaffff31 	b	11d0 <__aeabi_dmul+0xec>
    1508:	e185e006 	orr	lr, r5, r6
    150c:	eaffff2f 	b	11d0 <__aeabi_dmul+0xec>
    1510:	e00c5a23 	and	r5, r12, r3, lsr #20
    1514:	e134000c 	teq	r4, r12
    1518:	0135000c 	teqeq	r5, r12
    151c:	0affff90 	beq	1364 <__aeabi_dmul+0x280>
    1520:	e134000c 	teq	r4, r12
    1524:	1a000006 	bne	1544 <__aeabi_ddiv+0x1d0>
    1528:	e1904601 	orrs	r4, r0, r1, lsl #12
    152c:	1affff8c 	bne	1364 <__aeabi_dmul+0x280>
    1530:	e135000c 	teq	r5, r12
    1534:	1affff83 	bne	1348 <__aeabi_dmul+0x264>
    1538:	e1a00002 	mov	r0, r2
    153c:	e1a01003 	mov	r1, r3
    1540:	eaffff87 	b	1364 <__aeabi_dmul+0x280>
    1544:	e135000c 	teq	r5, r12
    1548:	1a000004 	bne	1560 <__aeabi_ddiv+0x1ec>
    154c:	e1925603 	orrs	r5, r2, r3, lsl #12
    1550:	0affff68 	beq	12f8 <__aeabi_dmul+0x214>
    1554:	e1a00002 	mov	r0, r2
    1558:	e1a01003 	mov	r1, r3
    155c:	eaffff80 	b	1364 <__aeabi_dmul+0x280>
    1560:	e1906081 	orrs	r6, r0, r1, lsl #1
    1564:	11926083 	orrsne	r6, r2, r3, lsl #1
    1568:	1affff48 	bne	1290 <__aeabi_dmul+0x1ac>
    156c:	e1904081 	orrs	r4, r0, r1, lsl #1
    1570:	1affff74 	bne	1348 <__aeabi_dmul+0x264>
    1574:	e1925083 	orrs	r5, r2, r3, lsl #1
    1578:	1affff5e 	bne	12f8 <__aeabi_dmul+0x214>
    157c:	eaffff78 	b	1364 <__aeabi_dmul+0x280>

00001580 <__gedf2>:
    1580:	e3e0c000 	mvn	r12, #0
    1584:	ea000002 	b	1594 <__cmpdf2+0x4>

00001588 <__ledf2>:
    1588:	e3a0c001 	mov	r12, #1
    158c:	ea000000 	b	1594 <__cmpdf2+0x4>

00001590 <__cmpdf2>:
    1590:	e3a0c001 	mov	r12, #1
    1594:	e52dc004 	push	{r12}		; (str r12, [sp, #-4]!)
    1598:	e1a0c081 	lsl	r12, r1, #1
    159c:	e1f0cacc 	mvns	r12, r12, asr #21
    15a0:	e1a0c083 	lsl	r12, r3, #1
    15a4:	11f0cacc 	mvnsne	r12, r12, asr #21
    15a8:	0a00000e 	beq	15e8 <__cmpdf2+0x58>
    15ac:	e28dd004 	add	sp, sp, #4
    15b0:	e190c081 	orrs	r12, r0, r1, lsl #1
    15b4:	0192c083 	orrseq	r12, r2, r3, lsl #1
    15b8:	11310003 	teqne	r1, r3
    15bc:	01300002 	teqeq	r0, r2
    15c0:	03a00000 	moveq	r0, #0
    15c4:	012fff1e 	bxeq	lr
    15c8:	e3700000 	cmn	r0, #0
    15cc:	e1310003 	teq	r1, r3
    15d0:	51510003 	cmppl	r1, r3
    15d4:	01500002 	cmpeq	r0, r2
    15d8:	21a00fc3 	asrcs	r0, r3, #31
    15dc:	31e00fc3 	mvncc	r0, r3, asr #31
    15e0:	e3800001 	orr	r0, r0, #1
    15e4:	e12fff1e 	bx	lr
    15e8:	e1a0c081 	lsl	r12, r1, #1
    15ec:	e1f0cacc 	mvns	r12, r12, asr #21
    15f0:	1a000001 	bne	15fc <__cmpdf2+0x6c>
    15f4:	e190c601 	orrs	r12, r0, r1, lsl #12
    15f8:	1a000004 	bne	1610 <__cmpdf2+0x80>
    15fc:	e1a0c083 	lsl	r12, r3, #1
    1600:	e1f0cacc 	mvns	r12, r12, asr #21
    1604:	1affffe8 	bne	15ac <__cmpdf2+0x1c>
    1608:	e192c603 	orrs	r12, r2, r3, lsl #12
    160c:	0affffe6 	beq	15ac <__cmpdf2+0x1c>
    1610:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    1614:	e12fff1e 	bx	lr

00001618 <__aeabi_cdrcmple>:
    1618:	e1a0c000 	mov	r12, r0
    161c:	e1a00002 	mov	r0, r2
    1620:	e1a0200c 	mov	r2, r12
    1624:	e1a0c001 	mov	r12, r1
    1628:	e1a01003 	mov	r1, r3
    162c:	e1a0300c 	mov	r3, r12
    1630:	eaffffff 	b	1634 <__aeabi_cdcmpeq>

00001634 <__aeabi_cdcmpeq>:
    1634:	e92d4001 	push	{r0, lr}
    1638:	ebffffd4 	bl	1590 <__cmpdf2>
    163c:	e3500000 	cmp	r0, #0
    1640:	43700000 	cmnmi	r0, #0
    1644:	e8bd4001 	pop	{r0, lr}
    1648:	e12fff1e 	bx	lr

0000164c <__aeabi_dcmpeq>:
    164c:	e52de008 	str	lr, [sp, #-8]!
    1650:	ebfffff7 	bl	1634 <__aeabi_cdcmpeq>
    1654:	03a00001 	moveq	r0, #1
    1658:	13a00000 	movne	r0, #0
    165c:	e49de008 	ldr	lr, [sp], #8
    1660:	e12fff1e 	bx	lr

00001664 <__aeabi_dcmplt>:
    1664:	e52de008 	str	lr, [sp, #-8]!
    1668:	ebfffff1 	bl	1634 <__aeabi_cdcmpeq>
    166c:	33a00001 	movcc	r0, #1
    1670:	23a00000 	movcs	r0, #0
    1674:	e49de008 	ldr	lr, [sp], #8
    1678:	e12fff1e 	bx	lr

0000167c <__aeabi_dcmple>:
    167c:	e52de008 	str	lr, [sp, #-8]!
    1680:	ebffffeb 	bl	1634 <__aeabi_cdcmpeq>
    1684:	93a00001 	movls	r0, #1
    1688:	83a00000 	movhi	r0, #0
    168c:	e49de008 	ldr	lr, [sp], #8
    1690:	e12fff1e 	bx	lr

00001694 <__aeabi_dcmpge>:
    1694:	e52de008 	str	lr, [sp, #-8]!
    1698:	ebffffde 	bl	1618 <__aeabi_cdrcmple>
    169c:	93a00001 	movls	r0, #1
    16a0:	83a00000 	movhi	r0, #0
    16a4:	e49de008 	ldr	lr, [sp], #8
    16a8:	e12fff1e 	bx	lr

000016ac <__aeabi_dcmpgt>:
    16ac:	e52de008 	str	lr, [sp, #-8]!
    16b0:	ebffffd8 	bl	1618 <__aeabi_cdrcmple>
    16b4:	33a00001 	movcc	r0, #1
    16b8:	23a00000 	movcs	r0, #0
    16bc:	e49de008 	ldr	lr, [sp], #8
    16c0:	e12fff1e 	bx	lr

000016c4 <__aeabi_d2iz>:
    16c4:	e1a02081 	lsl	r2, r1, #1
    16c8:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    16cc:	2a00000c 	bcs	1704 <__aeabi_d2iz+0x40>
    16d0:	5a000009 	bpl	16fc <__aeabi_d2iz+0x38>
    16d4:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    16d8:	e0532ac2 	subs	r2, r3, r2, asr #21
    16dc:	9a00000a 	bls	170c <__aeabi_d2iz+0x48>
    16e0:	e1a03581 	lsl	r3, r1, #11
    16e4:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    16e8:	e1833aa0 	orr	r3, r3, r0, lsr #21
    16ec:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    16f0:	e1a00233 	lsr	r0, r3, r2
    16f4:	12600000 	rsbne	r0, r0, #0
    16f8:	e12fff1e 	bx	lr
    16fc:	e3a00000 	mov	r0, #0
    1700:	e12fff1e 	bx	lr
    1704:	e1900601 	orrs	r0, r0, r1, lsl #12
    1708:	1a000002 	bne	1718 <__aeabi_d2iz+0x54>
    170c:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    1710:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    1714:	e12fff1e 	bx	lr
    1718:	e3a00000 	mov	r0, #0
    171c:	e12fff1e 	bx	lr

00001720 <atexit>:
    1720:	e1a01000 	mov	r1, r0
    1724:	e3a00000 	mov	r0, #0
    1728:	e92d4008 	push	{r3, lr}
    172c:	e1a02000 	mov	r2, r0
    1730:	e1a03000 	mov	r3, r0
    1734:	eb00000e 	bl	1774 <__register_exitproc>
    1738:	e8bd4008 	pop	{r3, lr}
    173c:	e12fff1e 	bx	lr

00001740 <exit>:
    1740:	e92d4008 	push	{r3, lr}
    1744:	e3a01000 	mov	r1, #0
    1748:	e1a04000 	mov	r4, r0
    174c:	eb000045 	bl	1868 <__call_exitprocs>
    1750:	e59f3018 	ldr	r3, [pc, #24]	; 1770 <exit+0x30>
    1754:	e5930000 	ldr	r0, [r3]
    1758:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    175c:	e3530000 	cmp	r3, #0
    1760:	11a0e00f 	movne	lr, pc
    1764:	112fff13 	bxne	r3
    1768:	e1a00004 	mov	r0, r4
    176c:	eb0000c9 	bl	1a98 <_exit>
    1770:	00001b50 	.word	0x00001b50

00001774 <__register_exitproc>:
    1774:	e59fc0e4 	ldr	r12, [pc, #228]	; 1860 <__register_exitproc+0xec>
    1778:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    177c:	e59c4000 	ldr	r4, [r12]
    1780:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    1784:	e35c0000 	cmp	r12, #0
    1788:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    178c:	e59c5004 	ldr	r5, [r12, #4]
    1790:	0584c148 	streq	r12, [r4, #328]	; 0x148
    1794:	e355001f 	cmp	r5, #31
    1798:	e24dd010 	sub	sp, sp, #16
    179c:	e1a06000 	mov	r6, r0
    17a0:	da000015 	ble	17fc <__register_exitproc+0x88>
    17a4:	e59f00b8 	ldr	r0, [pc, #184]	; 1864 <__register_exitproc+0xf0>
    17a8:	e3500000 	cmp	r0, #0
    17ac:	1a000001 	bne	17b8 <__register_exitproc+0x44>
    17b0:	e3e00000 	mvn	r0, #0
    17b4:	ea000018 	b	181c <__register_exitproc+0xa8>
    17b8:	e3a00e19 	mov	r0, #400	; 0x190
    17bc:	e58d100c 	str	r1, [sp, #12]
    17c0:	e58d2008 	str	r2, [sp, #8]
    17c4:	e58d3004 	str	r3, [sp, #4]
    17c8:	e320f000 	nop	{0}
    17cc:	e250c000 	subs	r12, r0, #0
    17d0:	e59d100c 	ldr	r1, [sp, #12]
    17d4:	e59d2008 	ldr	r2, [sp, #8]
    17d8:	e59d3004 	ldr	r3, [sp, #4]
    17dc:	0afffff3 	beq	17b0 <__register_exitproc+0x3c>
    17e0:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    17e4:	e3a00000 	mov	r0, #0
    17e8:	e58c0004 	str	r0, [r12, #4]
    17ec:	e58c5000 	str	r5, [r12]
    17f0:	e584c148 	str	r12, [r4, #328]	; 0x148
    17f4:	e58c0188 	str	r0, [r12, #392]	; 0x188
    17f8:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    17fc:	e3560000 	cmp	r6, #0
    1800:	e59c4004 	ldr	r4, [r12, #4]
    1804:	1a000007 	bne	1828 <__register_exitproc+0xb4>
    1808:	e2843002 	add	r3, r4, #2
    180c:	e2844001 	add	r4, r4, #1
    1810:	e78c1103 	str	r1, [r12, r3, lsl #2]
    1814:	e58c4004 	str	r4, [r12, #4]
    1818:	e3a00000 	mov	r0, #0
    181c:	e28dd010 	add	sp, sp, #16
    1820:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    1824:	e12fff1e 	bx	lr
    1828:	e3a00001 	mov	r0, #1
    182c:	e1a00410 	lsl	r0, r0, r4
    1830:	e08c8104 	add	r8, r12, r4, lsl #2
    1834:	e3560002 	cmp	r6, #2
    1838:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    183c:	e5883108 	str	r3, [r8, #264]	; 0x108
    1840:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    1844:	e1877000 	orr	r7, r7, r0
    1848:	01830000 	orreq	r0, r3, r0
    184c:	e1a05008 	mov	r5, r8
    1850:	e5882088 	str	r2, [r8, #136]	; 0x88
    1854:	e58c7188 	str	r7, [r12, #392]	; 0x188
    1858:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    185c:	eaffffe9 	b	1808 <__register_exitproc+0x94>
    1860:	00001b50 	.word	0x00001b50
    1864:	00000000 	.word	0x00000000

00001868 <__call_exitprocs>:
    1868:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    186c:	e59f3168 	ldr	r3, [pc, #360]	; 19dc <__call_exitprocs+0x174>
    1870:	e5933000 	ldr	r3, [r3]
    1874:	e24dd014 	sub	sp, sp, #20
    1878:	e58d3004 	str	r3, [sp, #4]
    187c:	e2833f52 	add	r3, r3, #328	; 0x148
    1880:	e58d0008 	str	r0, [sp, #8]
    1884:	e58d300c 	str	r3, [sp, #12]
    1888:	e1a07001 	mov	r7, r1
    188c:	e3a08001 	mov	r8, #1
    1890:	e59d3004 	ldr	r3, [sp, #4]
    1894:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    1898:	e3560000 	cmp	r6, #0
    189c:	e59db00c 	ldr	r11, [sp, #12]
    18a0:	0a000033 	beq	1974 <__call_exitprocs+0x10c>
    18a4:	e5965004 	ldr	r5, [r6, #4]
    18a8:	e2554001 	subs	r4, r5, #1
    18ac:	5286a088 	addpl	r10, r6, #136	; 0x88
    18b0:	5285501f 	addpl	r5, r5, #31
    18b4:	508a5105 	addpl	r5, r10, r5, lsl #2
    18b8:	5a000007 	bpl	18dc <__call_exitprocs+0x74>
    18bc:	ea000029 	b	1968 <__call_exitprocs+0x100>
    18c0:	e5953000 	ldr	r3, [r5]
    18c4:	e1530007 	cmp	r3, r7
    18c8:	0a000005 	beq	18e4 <__call_exitprocs+0x7c>
    18cc:	e2444001 	sub	r4, r4, #1
    18d0:	e3740001 	cmn	r4, #1
    18d4:	e2455004 	sub	r5, r5, #4
    18d8:	0a000022 	beq	1968 <__call_exitprocs+0x100>
    18dc:	e3570000 	cmp	r7, #0
    18e0:	1afffff6 	bne	18c0 <__call_exitprocs+0x58>
    18e4:	e5963004 	ldr	r3, [r6, #4]
    18e8:	e06a2005 	rsb	r2, r10, r5
    18ec:	e2433001 	sub	r3, r3, #1
    18f0:	e0862002 	add	r2, r6, r2
    18f4:	e1530004 	cmp	r3, r4
    18f8:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    18fc:	13a01000 	movne	r1, #0
    1900:	05864004 	streq	r4, [r6, #4]
    1904:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    1908:	e3530000 	cmp	r3, #0
    190c:	0affffee 	beq	18cc <__call_exitprocs+0x64>
    1910:	e1a02418 	lsl	r2, r8, r4
    1914:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    1918:	e1120001 	tst	r2, r1
    191c:	e5969004 	ldr	r9, [r6, #4]
    1920:	0a000016 	beq	1980 <__call_exitprocs+0x118>
    1924:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    1928:	e1120001 	tst	r2, r1
    192c:	1a000016 	bne	198c <__call_exitprocs+0x124>
    1930:	e59d0008 	ldr	r0, [sp, #8]
    1934:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    1938:	e1a0e00f 	mov	lr, pc
    193c:	e12fff13 	bx	r3
    1940:	e5963004 	ldr	r3, [r6, #4]
    1944:	e1530009 	cmp	r3, r9
    1948:	1affffd0 	bne	1890 <__call_exitprocs+0x28>
    194c:	e59b3000 	ldr	r3, [r11]
    1950:	e1530006 	cmp	r3, r6
    1954:	1affffcd 	bne	1890 <__call_exitprocs+0x28>
    1958:	e2444001 	sub	r4, r4, #1
    195c:	e3740001 	cmn	r4, #1
    1960:	e2455004 	sub	r5, r5, #4
    1964:	1affffdc 	bne	18dc <__call_exitprocs+0x74>
    1968:	e59f1070 	ldr	r1, [pc, #112]	; 19e0 <__call_exitprocs+0x178>
    196c:	e3510000 	cmp	r1, #0
    1970:	1a000009 	bne	199c <__call_exitprocs+0x134>
    1974:	e28dd014 	add	sp, sp, #20
    1978:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    197c:	e12fff1e 	bx	lr
    1980:	e1a0e00f 	mov	lr, pc
    1984:	e12fff13 	bx	r3
    1988:	eaffffec 	b	1940 <__call_exitprocs+0xd8>
    198c:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    1990:	e1a0e00f 	mov	lr, pc
    1994:	e12fff13 	bx	r3
    1998:	eaffffe8 	b	1940 <__call_exitprocs+0xd8>
    199c:	e5963004 	ldr	r3, [r6, #4]
    19a0:	e3530000 	cmp	r3, #0
    19a4:	e5963000 	ldr	r3, [r6]
    19a8:	1a000008 	bne	19d0 <__call_exitprocs+0x168>
    19ac:	e3530000 	cmp	r3, #0
    19b0:	0a000006 	beq	19d0 <__call_exitprocs+0x168>
    19b4:	e1a00006 	mov	r0, r6
    19b8:	e58b3000 	str	r3, [r11]
    19bc:	e320f000 	nop	{0}
    19c0:	e59b6000 	ldr	r6, [r11]
    19c4:	e3560000 	cmp	r6, #0
    19c8:	1affffb5 	bne	18a4 <__call_exitprocs+0x3c>
    19cc:	eaffffe8 	b	1974 <__call_exitprocs+0x10c>
    19d0:	e1a0b006 	mov	r11, r6
    19d4:	e1a06003 	mov	r6, r3
    19d8:	eafffff9 	b	19c4 <__call_exitprocs+0x15c>
    19dc:	00001b50 	.word	0x00001b50
    19e0:	00000000 	.word	0x00000000

000019e4 <register_fini>:
    19e4:	e92d4008 	push	{r3, lr}
    19e8:	e59f3010 	ldr	r3, [pc, #16]	; 1a00 <register_fini+0x1c>
    19ec:	e3530000 	cmp	r3, #0
    19f0:	159f000c 	ldrne	r0, [pc, #12]	; 1a04 <register_fini+0x20>
    19f4:	1bffff49 	blne	1720 <atexit>
    19f8:	e8bd4008 	pop	{r3, lr}
    19fc:	e12fff1e 	bx	lr
    1a00:	00001b78 	.word	0x00001b78
    1a04:	00001a08 	.word	0x00001a08

00001a08 <__libc_fini_array>:
    1a08:	e92d4038 	push	{r3, r4, r5, lr}
    1a0c:	e59f5030 	ldr	r5, [pc, #48]	; 1a44 <__libc_fini_array+0x3c>
    1a10:	e59f4030 	ldr	r4, [pc, #48]	; 1a48 <__libc_fini_array+0x40>
    1a14:	e0654004 	rsb	r4, r5, r4
    1a18:	e1b04144 	asrs	r4, r4, #2
    1a1c:	10855104 	addne	r5, r5, r4, lsl #2
    1a20:	0a000004 	beq	1a38 <__libc_fini_array+0x30>
    1a24:	e5353004 	ldr	r3, [r5, #-4]!
    1a28:	e1a0e00f 	mov	lr, pc
    1a2c:	e12fff13 	bx	r3
    1a30:	e2544001 	subs	r4, r4, #1
    1a34:	1afffffa 	bne	1a24 <__libc_fini_array+0x1c>
    1a38:	eb00004e 	bl	1b78 <__libc_fini>
    1a3c:	e8bd4038 	pop	{r3, r4, r5, lr}
    1a40:	e12fff1e 	bx	lr
    1a44:	00001b90 	.word	0x00001b90
    1a48:	00001b94 	.word	0x00001b94

00001a4c <__cs3_premain>:
    1a4c:	e92d4008 	push	{r3, lr}
    1a50:	eb000017 	bl	1ab4 <__libc_init_array>
    1a54:	e59f3030 	ldr	r3, [pc, #48]	; 1a8c <__cs3_premain+0x40>
    1a58:	e3530000 	cmp	r3, #0
    1a5c:	15930000 	ldrne	r0, [r3]
    1a60:	01a00003 	moveq	r0, r3
    1a64:	e59f3024 	ldr	r3, [pc, #36]	; 1a90 <__cs3_premain+0x44>
    1a68:	e3530000 	cmp	r3, #0
    1a6c:	15931000 	ldrne	r1, [r3]
    1a70:	01a01003 	moveq	r1, r3
    1a74:	e3a02000 	mov	r2, #0
    1a78:	ebfff9f7 	bl	25c <main>
    1a7c:	e59f3010 	ldr	r3, [pc, #16]	; 1a94 <__cs3_premain+0x48>
    1a80:	e3530000 	cmp	r3, #0
    1a84:	1bffff2d 	blne	1740 <exit>
    1a88:	eafffffe 	b	1a88 <__cs3_premain+0x3c>
	...
    1a94:	00001740 	.word	0x00001740

00001a98 <_exit>:
    1a98:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1a9c:	e3a00018 	mov	r0, #24
    1aa0:	e59f1004 	ldr	r1, [pc, #4]	; 1aac <_exit+0x14>
    1aa4:	ef123456 	svc	0x00123456
    1aa8:	eafffffe 	b	1aa8 <_exit+0x10>
    1aac:	00020026 	.word	0x00020026

00001ab0 <__cs3_isr_interrupt>:
    1ab0:	eafffffe 	b	1ab0 <__cs3_isr_interrupt>

00001ab4 <__libc_init_array>:
    1ab4:	e92d4070 	push	{r4, r5, r6, lr}
    1ab8:	e59f506c 	ldr	r5, [pc, #108]	; 1b2c <__libc_init_array+0x78>
    1abc:	e59f606c 	ldr	r6, [pc, #108]	; 1b30 <__libc_init_array+0x7c>
    1ac0:	e0656006 	rsb	r6, r5, r6
    1ac4:	e1b06146 	asrs	r6, r6, #2
    1ac8:	12455004 	subne	r5, r5, #4
    1acc:	13a04000 	movne	r4, #0
    1ad0:	0a000005 	beq	1aec <__libc_init_array+0x38>
    1ad4:	e5b53004 	ldr	r3, [r5, #4]!
    1ad8:	e2844001 	add	r4, r4, #1
    1adc:	e1a0e00f 	mov	lr, pc
    1ae0:	e12fff13 	bx	r3
    1ae4:	e1560004 	cmp	r6, r4
    1ae8:	1afffff9 	bne	1ad4 <__libc_init_array+0x20>
    1aec:	e59f5040 	ldr	r5, [pc, #64]	; 1b34 <__libc_init_array+0x80>
    1af0:	e59f6040 	ldr	r6, [pc, #64]	; 1b38 <__libc_init_array+0x84>
    1af4:	e0656006 	rsb	r6, r5, r6
    1af8:	eb000016 	bl	1b58 <_init>
    1afc:	e1b06146 	asrs	r6, r6, #2
    1b00:	12455004 	subne	r5, r5, #4
    1b04:	13a04000 	movne	r4, #0
    1b08:	0a000005 	beq	1b24 <__libc_init_array+0x70>
    1b0c:	e5b53004 	ldr	r3, [r5, #4]!
    1b10:	e2844001 	add	r4, r4, #1
    1b14:	e1a0e00f 	mov	lr, pc
    1b18:	e12fff13 	bx	r3
    1b1c:	e1560004 	cmp	r6, r4
    1b20:	1afffff9 	bne	1b0c <__libc_init_array+0x58>
    1b24:	e8bd4070 	pop	{r4, r5, r6, lr}
    1b28:	e12fff1e 	bx	lr
    1b2c:	00001b70 	.word	0x00001b70
    1b30:	00001b70 	.word	0x00001b70
    1b34:	00001b70 	.word	0x00001b70
    1b38:	00001b78 	.word	0x00001b78

Disassembly of section .rodata:

00001b40 <_global_impure_ptr-0x10>:
    1b40:	33323130 	.word	0x33323130
    1b44:	37363534 	.word	0x37363534
    1b48:	42413938 	.word	0x42413938
    1b4c:	46454443 	.word	0x46454443

00001b50 <_global_impure_ptr>:
    1b50:	00001bc8 00000043                       ....C...

00001b58 <_init>:
    1b58:	e1a0c00d 	mov	r12, sp
    1b5c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    1b60:	e24cb004 	sub	r11, r12, #4
    1b64:	e24bd028 	sub	sp, r11, #40	; 0x28
    1b68:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    1b6c:	e12fff1e 	bx	lr

00001b70 <__init_array_start>:
    1b70:	000019e4 	.word	0x000019e4

00001b74 <__frame_dummy_init_array_entry>:
    1b74:	00000208                                ....

00001b78 <__libc_fini>:
    1b78:	e1a0c00d 	mov	r12, sp
    1b7c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    1b80:	e24cb004 	sub	r11, r12, #4
    1b84:	e24bd028 	sub	sp, r11, #40	; 0x28
    1b88:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    1b8c:	e12fff1e 	bx	lr

00001b90 <__fini_array_start>:
    1b90:	000001c4 	.word	0x000001c4

00001b94 <__cs3_regions>:
	...
    1ba0:	00001ff8 	.word	0x00001ff8
    1ba4:	00000038 	.word	0x00000038
