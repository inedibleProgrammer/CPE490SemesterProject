
C:/Users/Andrew Davies/Desktop/ADC/main.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
       0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      20:	d4 14 00 00 e0 14 00 00 ec 14 00 00 f8 14 00 00     ................
      30:	04 15 00 00 28 37 00 00 48 14 00 00 10 15 00 00     ....(7..H.......

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_region_zero_size_ram+0x8>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_region_zero_size_ram+0x4>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_region_zero_size_ram+0xc>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb000d7a 	bl	36c4 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00003910 	.word	0x00003910

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00003d48 	.word	0x00003d48

00000124 <__cs3_heap_start_ptr>:
     124:	00003e20 	.word	0x00003e20

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00003d50 	.word	0x00003d50
     170:	00003d53 	.word	0x00003d53
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	00003d50 	.word	0x00003d50
     1bc:	00003d50 	.word	0x00003d50
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00003d50 	.word	0x00003d50
     200:	00000000 	.word	0x00000000
     204:	000037b4 	.word	0x000037b4

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	000037b4 	.word	0x000037b4
     250:	00003d54 	.word	0x00003d54
     254:	00003910 	.word	0x00003910
     258:	00000000 	.word	0x00000000

0000025c <main>:
char enterPress;		//used in keypad.c

//**Program Code**//

int main(void)
{
     25c:	e92d4800 	push	{r11, lr}
     260:	e28db004 	add	r11, sp, #4
     264:	e24dd008 	sub	sp, sp, #8
	//**Initialize Interrupts**//
	disable_A9_interrupts();
     268:	eb0004ab 	bl	151c <disable_A9_interrupts>
	set_A9_IRQ_stack();
     26c:	eb0004b4 	bl	1544 <set_A9_IRQ_stack>
	config_GIC();
     270:	eb0004cf 	bl	15b4 <config_GIC>
	configInterupt();
     274:	eb00051d 	bl	16f0 <configInterupt>
	enable_A9_interrupts();
     278:	eb0004c3 	bl	158c <enable_A9_interrupts>

	//**Initialize GUI**//
	GUI_Setup();
     27c:	eb0000da 	bl	5ec <GUI_Setup>

    //GPIO
    volatile int* GPIOPtr = (int*)0xFF200060;
     280:	e3a03060 	mov	r3, #96	; 0x60
     284:	e34f3f20 	movt	r3, #65312	; 0xff20
     288:	e50b3008 	str	r3, [r11, #-8]
    *(GPIOPtr + 1) |= (1 << 0); // Set D0 as output
     28c:	e51b3008 	ldr	r3, [r11, #-8]
     290:	e2833004 	add	r3, r3, #4
     294:	e51b2008 	ldr	r2, [r11, #-8]
     298:	e2822004 	add	r2, r2, #4
     29c:	e5922000 	ldr	r2, [r2]
     2a0:	e3822001 	orr	r2, r2, #1
     2a4:	e5832000 	str	r2, [r3]
     2a8:	ea000000 	b	2b0 <main+0x54>
        if(adcInterrupt == 1)
        {
            adcInterrupt = 0; // disable flag
            ADC_Get();
        }
	}
     2ac:	e1a00000 	nop			; (mov r0, r0)
	while(1)
	{
        /*******************************************************************************************
        KEYBOARD:
        *******************************************************************************************/
		if(ps2Interrupt == 1)
     2b0:	e3033d6c 	movw	r3, #15724	; 0x3d6c
     2b4:	e3403000 	movt	r3, #0
     2b8:	e5933000 	ldr	r3, [r3]
     2bc:	e3530001 	cmp	r3, #1
     2c0:	1a00000e 	bne	300 <main+0xa4>
		{
			ps2Interrupt = 0;
     2c4:	e3033d6c 	movw	r3, #15724	; 0x3d6c
     2c8:	e3403000 	movt	r3, #0
     2cc:	e3a02000 	mov	r2, #0
     2d0:	e5832000 	str	r2, [r3]
          	PS2_Read();
     2d4:	eb0003d5 	bl	1230 <PS2_Read>

          	if(goodKey == 1)
     2d8:	e3033d7c 	movw	r3, #15740	; 0x3d7c
     2dc:	e3403000 	movt	r3, #0
     2e0:	e5933000 	ldr	r3, [r3]
     2e4:	e3530001 	cmp	r3, #1
     2e8:	1a000004 	bne	300 <main+0xa4>
            {
              	Key();
     2ec:	eb0001eb 	bl	aa0 <Key>
                goodKey = 0;
     2f0:	e3033d7c 	movw	r3, #15740	; 0x3d7c
     2f4:	e3403000 	movt	r3, #0
     2f8:	e3a02000 	mov	r2, #0
     2fc:	e5832000 	str	r2, [r3]
		}

        /*******************************************************************************************
        MONITOR:
        *******************************************************************************************/
		if(monitorInterrupt == 1)
     300:	e3033d74 	movw	r3, #15732	; 0x3d74
     304:	e3403000 	movt	r3, #0
     308:	e5933000 	ldr	r3, [r3]
     30c:	e3530001 	cmp	r3, #1
     310:	1a000003 	bne	324 <main+0xc8>
		{
			monitorInterrupt = 0;
     314:	e3033d74 	movw	r3, #15732	; 0x3d74
     318:	e3403000 	movt	r3, #0
     31c:	e3a02000 	mov	r2, #0
     320:	e5832000 	str	r2, [r3]
		}

        /*******************************************************************************************
        ENCODER:
        *******************************************************************************************/
		if(encoderInterrupt == 1)
     324:	e3033d70 	movw	r3, #15728	; 0x3d70
     328:	e3403000 	movt	r3, #0
     32c:	e5933000 	ldr	r3, [r3]
     330:	e3530001 	cmp	r3, #1
     334:	1a000003 	bne	348 <main+0xec>
		{
			encoderInterrupt = 0;
     338:	e3033d70 	movw	r3, #15728	; 0x3d70
     33c:	e3403000 	movt	r3, #0
     340:	e3a02000 	mov	r2, #0
     344:	e5832000 	str	r2, [r3]
		}

        /*******************************************************************************************
        ADC:
        *******************************************************************************************/
        if(adcInterrupt == 1)
     348:	e3033d78 	movw	r3, #15736	; 0x3d78
     34c:	e3403000 	movt	r3, #0
     350:	e5933000 	ldr	r3, [r3]
     354:	e3530001 	cmp	r3, #1
     358:	1affffd3 	bne	2ac <main+0x50>
        {
            adcInterrupt = 0; // disable flag
     35c:	e3033d78 	movw	r3, #15736	; 0x3d78
     360:	e3403000 	movt	r3, #0
     364:	e3a02000 	mov	r2, #0
     368:	e5832000 	str	r2, [r3]
            ADC_Get();
     36c:	eb000561 	bl	18f8 <ADC_Get>
        }
	}
     370:	eaffffcd 	b	2ac <main+0x50>

00000374 <HPSTimer0ISR>:

static unsigned char END = 0; // Used to read the End-Of-Interrupt register to reset timer values

//**Interrupt Service Routines**//
void HPSTimer0ISR()   //half second period
{
     374:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     378:	e28db000 	add	r11, sp, #0
     37c:	e24dd00c 	sub	sp, sp, #12
    volatile int* HPSTimer0Ptr = (int*) HPS_TIMER0_BASE;
     380:	e3a03902 	mov	r3, #32768	; 0x8000
     384:	e34f3fc0 	movt	r3, #65472	; 0xffc0
     388:	e50b3008 	str	r3, [r11, #-8]
    static char flag; //toggle flag
  
    ps2Interrupt = 1;
     38c:	e3033d6c 	movw	r3, #15724	; 0x3d6c
     390:	e3403000 	movt	r3, #0
     394:	e3a02001 	mov	r2, #1
     398:	e5832000 	str	r2, [r3]
    flag ++;
     39c:	e3033d8c 	movw	r3, #15756	; 0x3d8c
     3a0:	e3403000 	movt	r3, #0
     3a4:	e5d33000 	ldrb	r3, [r3]
     3a8:	e2833001 	add	r3, r3, #1
     3ac:	e6ef2073 	uxtb	r2, r3
     3b0:	e3033d8c 	movw	r3, #15756	; 0x3d8c
     3b4:	e3403000 	movt	r3, #0
     3b8:	e5c32000 	strb	r2, [r3]
    if(flag == 1)
     3bc:	e3033d8c 	movw	r3, #15756	; 0x3d8c
     3c0:	e3403000 	movt	r3, #0
     3c4:	e5d33000 	ldrb	r3, [r3]
     3c8:	e3530001 	cmp	r3, #1
     3cc:	1a000003 	bne	3e0 <HPSTimer0ISR+0x6c>
    {
        encoderInterrupt = 1;
     3d0:	e3033d70 	movw	r3, #15728	; 0x3d70
     3d4:	e3403000 	movt	r3, #0
     3d8:	e3a02001 	mov	r2, #1
     3dc:	e5832000 	str	r2, [r3]
    }
    if(flag == 2)
     3e0:	e3033d8c 	movw	r3, #15756	; 0x3d8c
     3e4:	e3403000 	movt	r3, #0
     3e8:	e5d33000 	ldrb	r3, [r3]
     3ec:	e3530002 	cmp	r3, #2
     3f0:	1a000007 	bne	414 <HPSTimer0ISR+0xa0>
    {
        monitorInterrupt = 1;
     3f4:	e3033d74 	movw	r3, #15732	; 0x3d74
     3f8:	e3403000 	movt	r3, #0
     3fc:	e3a02001 	mov	r2, #1
     400:	e5832000 	str	r2, [r3]
        flag = 0;
     404:	e3033d8c 	movw	r3, #15756	; 0x3d8c
     408:	e3403000 	movt	r3, #0
     40c:	e3a02000 	mov	r2, #0
     410:	e5c32000 	strb	r2, [r3]
    }
  
    END = *(HPSTimer0Ptr + 3);  //resets HPSTimer0
     414:	e51b3008 	ldr	r3, [r11, #-8]
     418:	e283300c 	add	r3, r3, #12
     41c:	e5933000 	ldr	r3, [r3]
     420:	e6ef2073 	uxtb	r2, r3
     424:	e3033d84 	movw	r3, #15748	; 0x3d84
     428:	e3403000 	movt	r3, #0
     42c:	e5c32000 	strb	r2, [r3]
}
     430:	e28bd000 	add	sp, r11, #0
     434:	e8bd0800 	ldmfd	sp!, {r11}
     438:	e12fff1e 	bx	lr

0000043c <HPSTimer1ISR>:

void HPSTimer1ISR()
{
     43c:	e92d4800 	push	{r11, lr}
     440:	e28db004 	add	r11, sp, #4
     444:	e24dd008 	sub	sp, sp, #8
    volatile int* HPSTimer1Ptr = (int*) HPS_TIMER1_BASE;
     448:	e3a03a09 	mov	r3, #36864	; 0x9000
     44c:	e34f3fc0 	movt	r3, #65472	; 0xffc0
     450:	e50b3008 	str	r3, [r11, #-8]
    volatile int* GPIOPtr = (int*)JP1_BASE;
     454:	e3a03060 	mov	r3, #96	; 0x60
     458:	e34f3f20 	movt	r3, #65312	; 0xff20
     45c:	e50b300c 	str	r3, [r11, #-12]

    static int pwmToggle = 0;

    if(percent == 0)
     460:	e3033d94 	movw	r3, #15764	; 0x3d94
     464:	e3403000 	movt	r3, #0
     468:	e5933000 	ldr	r3, [r3]
     46c:	e1a00003 	mov	r0, r3
     470:	e3a01000 	mov	r1, #0
     474:	eb000b5c 	bl	31ec <__aeabi_fcmpeq>
     478:	e1a03000 	mov	r3, r0
     47c:	e3530000 	cmp	r3, #0
     480:	0a000003 	beq	494 <HPSTimer1ISR+0x58>
    {
        *(GPIOPtr) = 0;
     484:	e51b300c 	ldr	r3, [r11, #-12]
     488:	e3a02000 	mov	r2, #0
     48c:	e5832000 	str	r2, [r3]
     490:	ea000038 	b	578 <HPSTimer1ISR+0x13c>
        // *(GPIOPtr) &= 0xFFFFFFFD; // 1101
    }
    else if(percent == 1.0)
     494:	e3033d94 	movw	r3, #15764	; 0x3d94
     498:	e3403000 	movt	r3, #0
     49c:	e5933000 	ldr	r3, [r3]
     4a0:	e1a00003 	mov	r0, r3
     4a4:	e3a015fe 	mov	r1, #1065353216	; 0x3f800000
     4a8:	eb000b4f 	bl	31ec <__aeabi_fcmpeq>
     4ac:	e1a03000 	mov	r3, r0
     4b0:	e3530000 	cmp	r3, #0
     4b4:	0a000003 	beq	4c8 <HPSTimer1ISR+0x8c>
    {
        *(GPIOPtr) = 1;
     4b8:	e51b300c 	ldr	r3, [r11, #-12]
     4bc:	e3a02001 	mov	r2, #1
     4c0:	e5832000 	str	r2, [r3]
     4c4:	ea00002b 	b	578 <HPSTimer1ISR+0x13c>
        // *(GPIOPtr) |= 0x2; // 0010
    }
    else
    {
        if(pwmToggle == 1)
     4c8:	e3033d88 	movw	r3, #15752	; 0x3d88
     4cc:	e3403000 	movt	r3, #0
     4d0:	e5933000 	ldr	r3, [r3]
     4d4:	e3530001 	cmp	r3, #1
     4d8:	1a000010 	bne	520 <HPSTimer1ISR+0xe4>
        {
            *(GPIOPtr) = 1; // D0 = low
     4dc:	e51b300c 	ldr	r3, [r11, #-12]
     4e0:	e3a02001 	mov	r2, #1
     4e4:	e5832000 	str	r2, [r3]
            // *(GPIOPtr) |= 0x2;
            SetPWM(1000, percent);
     4e8:	e3033d94 	movw	r3, #15764	; 0x3d94
     4ec:	e3403000 	movt	r3, #0
     4f0:	e5933000 	ldr	r3, [r3]
     4f4:	e1a00003 	mov	r0, r3
     4f8:	eb000840 	bl	2600 <__aeabi_f2d>
     4fc:	e1a02000 	mov	r2, r0
     500:	e1a03001 	mov	r3, r1
     504:	e3a00ffa 	mov	r0, #1000	; 0x3e8
     508:	eb0002bb 	bl	ffc <SetPWM>

            pwmToggle = 0;
     50c:	e3033d88 	movw	r3, #15752	; 0x3d88
     510:	e3403000 	movt	r3, #0
     514:	e3a02000 	mov	r2, #0
     518:	e5832000 	str	r2, [r3]
     51c:	ea000015 	b	578 <HPSTimer1ISR+0x13c>
        }
        else // pwmToggle == 0
        {
            *(GPIOPtr) = 0; // D0 = high
     520:	e51b300c 	ldr	r3, [r11, #-12]
     524:	e3a02000 	mov	r2, #0
     528:	e5832000 	str	r2, [r3]
            // *(GPIOPtr) &= 0xFFFFFFFD;
            SetPWM( 1000, (1.0 - percent) );
     52c:	e3033d94 	movw	r3, #15764	; 0x3d94
     530:	e3403000 	movt	r3, #0
     534:	e5933000 	ldr	r3, [r3]
     538:	e1a00003 	mov	r0, r3
     53c:	eb00082f 	bl	2600 <__aeabi_f2d>
     540:	e1a02000 	mov	r2, r0
     544:	e1a03001 	mov	r3, r1
     548:	e3a00000 	mov	r0, #0
     54c:	e3a01000 	mov	r1, #0
     550:	e3431ff0 	movt	r1, #16368	; 0x3ff0
     554:	eb000751 	bl	22a0 <__aeabi_dsub>
     558:	e1a02000 	mov	r2, r0
     55c:	e1a03001 	mov	r3, r1
     560:	e3a00ffa 	mov	r0, #1000	; 0x3e8
     564:	eb0002a4 	bl	ffc <SetPWM>

            pwmToggle = 1;
     568:	e3033d88 	movw	r3, #15752	; 0x3d88
     56c:	e3403000 	movt	r3, #0
     570:	e3a02001 	mov	r2, #1
     574:	e5832000 	str	r2, [r3]
        }
    }

    END = *(HPSTimer1Ptr + 3);
     578:	e51b3008 	ldr	r3, [r11, #-8]
     57c:	e283300c 	add	r3, r3, #12
     580:	e5933000 	ldr	r3, [r3]
     584:	e6ef2073 	uxtb	r2, r3
     588:	e3033d84 	movw	r3, #15748	; 0x3d84
     58c:	e3403000 	movt	r3, #0
     590:	e5c32000 	strb	r2, [r3]
}
     594:	e24bd004 	sub	sp, r11, #4
     598:	e8bd8800 	pop	{r11, pc}

0000059c <HPSTimer2ISR>:

void HPSTimer2ISR()
{
     59c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     5a0:	e28db000 	add	r11, sp, #0
     5a4:	e24dd00c 	sub	sp, sp, #12
    volatile int* HPSTimer2Ptr = (int*) HPS_TIMER2_BASE;
     5a8:	e3a03000 	mov	r3, #0
     5ac:	e34f3fd0 	movt	r3, #65488	; 0xffd0
     5b0:	e50b3008 	str	r3, [r11, #-8]
    
    adcInterrupt = 1;
     5b4:	e3033d78 	movw	r3, #15736	; 0x3d78
     5b8:	e3403000 	movt	r3, #0
     5bc:	e3a02001 	mov	r2, #1
     5c0:	e5832000 	str	r2, [r3]

    END = *(HPSTimer2Ptr + 3);
     5c4:	e51b3008 	ldr	r3, [r11, #-8]
     5c8:	e283300c 	add	r3, r3, #12
     5cc:	e5933000 	ldr	r3, [r3]
     5d0:	e6ef2073 	uxtb	r2, r3
     5d4:	e3033d84 	movw	r3, #15748	; 0x3d84
     5d8:	e3403000 	movt	r3, #0
     5dc:	e5c32000 	strb	r2, [r3]
}
     5e0:	e28bd000 	add	sp, r11, #0
     5e4:	e8bd0800 	ldmfd	sp!, {r11}
     5e8:	e12fff1e 	bx	lr

000005ec <GUI_Setup>:
#define Eggplant		0x310A
#define Burgandy		0x7804

//**Function Code**//
void GUI_Setup(void)
{
     5ec:	e92d4800 	push	{r11, lr}
     5f0:	e28db004 	add	r11, sp, #4
     5f4:	e24dd0a8 	sub	sp, sp, #168	; 0xa8
	VGA_box(0, 0, 319, 239, MutedNavy);				//background
     5f8:	e305328e 	movw	r3, #21134	; 0x528e
     5fc:	e58d3000 	str	r3, [sp]
     600:	e3a00000 	mov	r0, #0
     604:	e3a01000 	mov	r1, #0
     608:	e300213f 	movw	r2, #319	; 0x13f
     60c:	e3a030ef 	mov	r3, #239	; 0xef
     610:	eb0002bc 	bl	1108 <VGA_box>
	VGA_box(59, 149, 261, 166, MetallicGold);		//bar's border
     614:	e30d3567 	movw	r3, #54631	; 0xd567
     618:	e34f3fff 	movt	r3, #65535	; 0xffff
     61c:	e58d3000 	str	r3, [sp]
     620:	e3a0003b 	mov	r0, #59	; 0x3b
     624:	e3a01095 	mov	r1, #149	; 0x95
     628:	e3002105 	movw	r2, #261	; 0x105
     62c:	e3a030a6 	mov	r3, #166	; 0xa6
     630:	eb0002b4 	bl	1108 <VGA_box>
	VGA_box(60, 150, 260, 165, Burgandy);			//bar's background
     634:	e3073804 	movw	r3, #30724	; 0x7804
     638:	e58d3000 	str	r3, [sp]
     63c:	e3a0003c 	mov	r0, #60	; 0x3c
     640:	e3a01096 	mov	r1, #150	; 0x96
     644:	e3a02f41 	mov	r2, #260	; 0x104
     648:	e3a030a5 	mov	r3, #165	; 0xa5
     64c:	eb0002ad 	bl	1108 <VGA_box>

	char input[40] = "RPM Input:";
     650:	e30327b8 	movw	r2, #14264	; 0x37b8
     654:	e3402000 	movt	r2, #0
     658:	e24b302c 	sub	r3, r11, #44	; 0x2c
     65c:	e8920007 	ldm	r2, {r0, r1, r2}
     660:	e8a30003 	stmia	r3!, {r0, r1}
     664:	e1c320b0 	strh	r2, [r3]
     668:	e2833002 	add	r3, r3, #2
     66c:	e1a02822 	lsr	r2, r2, #16
     670:	e5c32000 	strb	r2, [r3]
     674:	e24b2021 	sub	r2, r11, #33	; 0x21
     678:	e3a0301d 	mov	r3, #29
     67c:	e1a00002 	mov	r0, r2
     680:	e3a01000 	mov	r1, #0
     684:	e1a02003 	mov	r2, r3
     688:	eb000b0a 	bl	32b8 <memset>
	VGA_text(10, 10, input);
     68c:	e24b302c 	sub	r3, r11, #44	; 0x2c
     690:	e3a0000a 	mov	r0, #10
     694:	e3a0100a 	mov	r1, #10
     698:	e1a02003 	mov	r2, r3
     69c:	eb0002c2 	bl	11ac <VGA_text>
	char set[40] = "Set RPM:";
     6a0:	e30327e0 	movw	r2, #14304	; 0x37e0
     6a4:	e3402000 	movt	r2, #0
     6a8:	e24b3054 	sub	r3, r11, #84	; 0x54
     6ac:	e8920007 	ldm	r2, {r0, r1, r2}
     6b0:	e8a30003 	stmia	r3!, {r0, r1}
     6b4:	e5c32000 	strb	r2, [r3]
     6b8:	e24b204b 	sub	r2, r11, #75	; 0x4b
     6bc:	e3a0301f 	mov	r3, #31
     6c0:	e1a00002 	mov	r0, r2
     6c4:	e3a01000 	mov	r1, #0
     6c8:	e1a02003 	mov	r2, r3
     6cc:	eb000af9 	bl	32b8 <memset>
	VGA_text(12, 13, set);
     6d0:	e24b3054 	sub	r3, r11, #84	; 0x54
     6d4:	e3a0000c 	mov	r0, #12
     6d8:	e3a0100d 	mov	r1, #13
     6dc:	e1a02003 	mov	r2, r3
     6e0:	eb0002b1 	bl	11ac <VGA_text>
	char actual[40] = "Actual RPM:";
     6e4:	e3033808 	movw	r3, #14344	; 0x3808
     6e8:	e3403000 	movt	r3, #0
     6ec:	e24bc07c 	sub	r12, r11, #124	; 0x7c
     6f0:	e8930007 	ldm	r3, {r0, r1, r2}
     6f4:	e88c0007 	stm	r12, {r0, r1, r2}
     6f8:	e24b3070 	sub	r3, r11, #112	; 0x70
     6fc:	e3a02000 	mov	r2, #0
     700:	e5832000 	str	r2, [r3]
     704:	e2833004 	add	r3, r3, #4
     708:	e3a02000 	mov	r2, #0
     70c:	e5832000 	str	r2, [r3]
     710:	e2833004 	add	r3, r3, #4
     714:	e3a02000 	mov	r2, #0
     718:	e5832000 	str	r2, [r3]
     71c:	e2833004 	add	r3, r3, #4
     720:	e3a02000 	mov	r2, #0
     724:	e5832000 	str	r2, [r3]
     728:	e2833004 	add	r3, r3, #4
     72c:	e3a02000 	mov	r2, #0
     730:	e5832000 	str	r2, [r3]
     734:	e2833004 	add	r3, r3, #4
     738:	e3a02000 	mov	r2, #0
     73c:	e5832000 	str	r2, [r3]
     740:	e2833004 	add	r3, r3, #4
     744:	e3a02000 	mov	r2, #0
     748:	e5832000 	str	r2, [r3]
     74c:	e2833004 	add	r3, r3, #4
	VGA_text(9, 16, actual);
     750:	e24b307c 	sub	r3, r11, #124	; 0x7c
     754:	e3a00009 	mov	r0, #9
     758:	e3a01010 	mov	r1, #16
     75c:	e1a02003 	mov	r2, r3
     760:	eb000291 	bl	11ac <VGA_text>
	char current[40] = "Current:";
     764:	e3032830 	movw	r2, #14384	; 0x3830
     768:	e3402000 	movt	r2, #0
     76c:	e24b30a4 	sub	r3, r11, #164	; 0xa4
     770:	e8920007 	ldm	r2, {r0, r1, r2}
     774:	e8a30003 	stmia	r3!, {r0, r1}
     778:	e5c32000 	strb	r2, [r3]
     77c:	e24b209b 	sub	r2, r11, #155	; 0x9b
     780:	e3a0301f 	mov	r3, #31
     784:	e1a00002 	mov	r0, r2
     788:	e3a01000 	mov	r1, #0
     78c:	e1a02003 	mov	r2, r3
     790:	eb000ac8 	bl	32b8 <memset>
	VGA_text(12, 19, current);
     794:	e24b30a4 	sub	r3, r11, #164	; 0xa4
     798:	e3a0000c 	mov	r0, #12
     79c:	e3a01013 	mov	r1, #19
     7a0:	e1a02003 	mov	r2, r3
     7a4:	eb000280 	bl	11ac <VGA_text>
}
     7a8:	e24bd004 	sub	sp, r11, #4
     7ac:	e8bd8800 	pop	{r11, pc}

000007b0 <InputRPM_Write>:

void InputRPM_Write(char* value)
{
     7b0:	e92d4800 	push	{r11, lr}
     7b4:	e28db004 	add	r11, sp, #4
     7b8:	e24dd030 	sub	sp, sp, #48	; 0x30
     7bc:	e50b0030 	str	r0, [r11, #-48]	; 0xffffffd0
	VGA_text(21, 10, value);
     7c0:	e3a00015 	mov	r0, #21
     7c4:	e3a0100a 	mov	r1, #10
     7c8:	e51b2030 	ldr	r2, [r11, #-48]	; 0xffffffd0
     7cc:	eb000276 	bl	11ac <VGA_text>
	char rpm[40] = "RPM";
     7d0:	e3053052 	movw	r3, #20562	; 0x5052
     7d4:	e340304d 	movt	r3, #77	; 0x4d
     7d8:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
     7dc:	e24b3028 	sub	r3, r11, #40	; 0x28
     7e0:	e3a02000 	mov	r2, #0
     7e4:	e5832000 	str	r2, [r3]
     7e8:	e2833004 	add	r3, r3, #4
     7ec:	e3a02000 	mov	r2, #0
     7f0:	e5832000 	str	r2, [r3]
     7f4:	e2833004 	add	r3, r3, #4
     7f8:	e3a02000 	mov	r2, #0
     7fc:	e5832000 	str	r2, [r3]
     800:	e2833004 	add	r3, r3, #4
     804:	e3a02000 	mov	r2, #0
     808:	e5832000 	str	r2, [r3]
     80c:	e2833004 	add	r3, r3, #4
     810:	e3a02000 	mov	r2, #0
     814:	e5832000 	str	r2, [r3]
     818:	e2833004 	add	r3, r3, #4
     81c:	e3a02000 	mov	r2, #0
     820:	e5832000 	str	r2, [r3]
     824:	e2833004 	add	r3, r3, #4
     828:	e3a02000 	mov	r2, #0
     82c:	e5832000 	str	r2, [r3]
     830:	e2833004 	add	r3, r3, #4
     834:	e3a02000 	mov	r2, #0
     838:	e5832000 	str	r2, [r3]
     83c:	e2833004 	add	r3, r3, #4
     840:	e3a02000 	mov	r2, #0
     844:	e5832000 	str	r2, [r3]
     848:	e2833004 	add	r3, r3, #4
	VGA_text(25, 10, rpm);
     84c:	e24b302c 	sub	r3, r11, #44	; 0x2c
     850:	e3a00019 	mov	r0, #25
     854:	e3a0100a 	mov	r1, #10
     858:	e1a02003 	mov	r2, r3
     85c:	eb000252 	bl	11ac <VGA_text>
}
     860:	e24bd004 	sub	sp, r11, #4
     864:	e8bd8800 	pop	{r11, pc}

00000868 <InputRPM_Clear>:

void InputRPM_Clear()
{
     868:	e92d4800 	push	{r11, lr}
     86c:	e28db004 	add	r11, sp, #4
     870:	e24dd028 	sub	sp, sp, #40	; 0x28
	char clear[40] = "       ";
     874:	e3033858 	movw	r3, #14424	; 0x3858
     878:	e3403000 	movt	r3, #0
     87c:	e24b202c 	sub	r2, r11, #44	; 0x2c
     880:	e8930003 	ldm	r3, {r0, r1}
     884:	e8820003 	stm	r2, {r0, r1}
     888:	e24b3024 	sub	r3, r11, #36	; 0x24
     88c:	e3a02000 	mov	r2, #0
     890:	e5832000 	str	r2, [r3]
     894:	e2833004 	add	r3, r3, #4
     898:	e3a02000 	mov	r2, #0
     89c:	e5832000 	str	r2, [r3]
     8a0:	e2833004 	add	r3, r3, #4
     8a4:	e3a02000 	mov	r2, #0
     8a8:	e5832000 	str	r2, [r3]
     8ac:	e2833004 	add	r3, r3, #4
     8b0:	e3a02000 	mov	r2, #0
     8b4:	e5832000 	str	r2, [r3]
     8b8:	e2833004 	add	r3, r3, #4
     8bc:	e3a02000 	mov	r2, #0
     8c0:	e5832000 	str	r2, [r3]
     8c4:	e2833004 	add	r3, r3, #4
     8c8:	e3a02000 	mov	r2, #0
     8cc:	e5832000 	str	r2, [r3]
     8d0:	e2833004 	add	r3, r3, #4
     8d4:	e3a02000 	mov	r2, #0
     8d8:	e5832000 	str	r2, [r3]
     8dc:	e2833004 	add	r3, r3, #4
     8e0:	e3a02000 	mov	r2, #0
     8e4:	e5832000 	str	r2, [r3]
     8e8:	e2833004 	add	r3, r3, #4
	VGA_text(21, 10, clear);
     8ec:	e24b302c 	sub	r3, r11, #44	; 0x2c
     8f0:	e3a00015 	mov	r0, #21
     8f4:	e3a0100a 	mov	r1, #10
     8f8:	e1a02003 	mov	r2, r3
     8fc:	eb00022a 	bl	11ac <VGA_text>
}
     900:	e24bd004 	sub	sp, r11, #4
     904:	e8bd8800 	pop	{r11, pc}

00000908 <SetRPM_Write>:

void SetRPM_Write(char* value)
{
     908:	e92d4800 	push	{r11, lr}
     90c:	e28db004 	add	r11, sp, #4
     910:	e24dd030 	sub	sp, sp, #48	; 0x30
     914:	e50b0030 	str	r0, [r11, #-48]	; 0xffffffd0
	VGA_text(21, 13, value);
     918:	e3a00015 	mov	r0, #21
     91c:	e3a0100d 	mov	r1, #13
     920:	e51b2030 	ldr	r2, [r11, #-48]	; 0xffffffd0
     924:	eb000220 	bl	11ac <VGA_text>
	char rpm[40] = "RPM";
     928:	e3053052 	movw	r3, #20562	; 0x5052
     92c:	e340304d 	movt	r3, #77	; 0x4d
     930:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
     934:	e24b3028 	sub	r3, r11, #40	; 0x28
     938:	e3a02000 	mov	r2, #0
     93c:	e5832000 	str	r2, [r3]
     940:	e2833004 	add	r3, r3, #4
     944:	e3a02000 	mov	r2, #0
     948:	e5832000 	str	r2, [r3]
     94c:	e2833004 	add	r3, r3, #4
     950:	e3a02000 	mov	r2, #0
     954:	e5832000 	str	r2, [r3]
     958:	e2833004 	add	r3, r3, #4
     95c:	e3a02000 	mov	r2, #0
     960:	e5832000 	str	r2, [r3]
     964:	e2833004 	add	r3, r3, #4
     968:	e3a02000 	mov	r2, #0
     96c:	e5832000 	str	r2, [r3]
     970:	e2833004 	add	r3, r3, #4
     974:	e3a02000 	mov	r2, #0
     978:	e5832000 	str	r2, [r3]
     97c:	e2833004 	add	r3, r3, #4
     980:	e3a02000 	mov	r2, #0
     984:	e5832000 	str	r2, [r3]
     988:	e2833004 	add	r3, r3, #4
     98c:	e3a02000 	mov	r2, #0
     990:	e5832000 	str	r2, [r3]
     994:	e2833004 	add	r3, r3, #4
     998:	e3a02000 	mov	r2, #0
     99c:	e5832000 	str	r2, [r3]
     9a0:	e2833004 	add	r3, r3, #4
	VGA_text(25, 13, rpm);
     9a4:	e24b302c 	sub	r3, r11, #44	; 0x2c
     9a8:	e3a00019 	mov	r0, #25
     9ac:	e3a0100d 	mov	r1, #13
     9b0:	e1a02003 	mov	r2, r3
     9b4:	eb0001fc 	bl	11ac <VGA_text>
}
     9b8:	e24bd004 	sub	sp, r11, #4
     9bc:	e8bd8800 	pop	{r11, pc}

000009c0 <ActualRPM_Write>:

void ActualRPM_Write(char* value)
{
     9c0:	e92d4800 	push	{r11, lr}
     9c4:	e28db004 	add	r11, sp, #4
     9c8:	e24dd030 	sub	sp, sp, #48	; 0x30
     9cc:	e50b0030 	str	r0, [r11, #-48]	; 0xffffffd0
	VGA_text(21, 16, value);
     9d0:	e3a00015 	mov	r0, #21
     9d4:	e3a01010 	mov	r1, #16
     9d8:	e51b2030 	ldr	r2, [r11, #-48]	; 0xffffffd0
     9dc:	eb0001f2 	bl	11ac <VGA_text>
	char rpm[40] = "RPM";
     9e0:	e3053052 	movw	r3, #20562	; 0x5052
     9e4:	e340304d 	movt	r3, #77	; 0x4d
     9e8:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
     9ec:	e24b3028 	sub	r3, r11, #40	; 0x28
     9f0:	e3a02000 	mov	r2, #0
     9f4:	e5832000 	str	r2, [r3]
     9f8:	e2833004 	add	r3, r3, #4
     9fc:	e3a02000 	mov	r2, #0
     a00:	e5832000 	str	r2, [r3]
     a04:	e2833004 	add	r3, r3, #4
     a08:	e3a02000 	mov	r2, #0
     a0c:	e5832000 	str	r2, [r3]
     a10:	e2833004 	add	r3, r3, #4
     a14:	e3a02000 	mov	r2, #0
     a18:	e5832000 	str	r2, [r3]
     a1c:	e2833004 	add	r3, r3, #4
     a20:	e3a02000 	mov	r2, #0
     a24:	e5832000 	str	r2, [r3]
     a28:	e2833004 	add	r3, r3, #4
     a2c:	e3a02000 	mov	r2, #0
     a30:	e5832000 	str	r2, [r3]
     a34:	e2833004 	add	r3, r3, #4
     a38:	e3a02000 	mov	r2, #0
     a3c:	e5832000 	str	r2, [r3]
     a40:	e2833004 	add	r3, r3, #4
     a44:	e3a02000 	mov	r2, #0
     a48:	e5832000 	str	r2, [r3]
     a4c:	e2833004 	add	r3, r3, #4
     a50:	e3a02000 	mov	r2, #0
     a54:	e5832000 	str	r2, [r3]
     a58:	e2833004 	add	r3, r3, #4
	VGA_text(25, 16, rpm);
     a5c:	e24b302c 	sub	r3, r11, #44	; 0x2c
     a60:	e3a00019 	mov	r0, #25
     a64:	e3a01010 	mov	r1, #16
     a68:	e1a02003 	mov	r2, r3
     a6c:	eb0001ce 	bl	11ac <VGA_text>
}
     a70:	e24bd004 	sub	sp, r11, #4
     a74:	e8bd8800 	pop	{r11, pc}

00000a78 <Current_Write>:

void Current_Write(char* value)
{
     a78:	e92d4800 	push	{r11, lr}
     a7c:	e28db004 	add	r11, sp, #4
     a80:	e24dd008 	sub	sp, sp, #8
     a84:	e50b0008 	str	r0, [r11, #-8]
	VGA_text(21, 19, value);
     a88:	e3a00015 	mov	r0, #21
     a8c:	e3a01013 	mov	r1, #19
     a90:	e51b2008 	ldr	r2, [r11, #-8]
     a94:	eb0001c4 	bl	11ac <VGA_text>
}
     a98:	e24bd004 	sub	sp, r11, #4
     a9c:	e8bd8800 	pop	{r11, pc}

00000aa0 <Key>:
extern char enterPress;

//**Function Code**//

void Key(void)
{
     aa0:	e92d4800 	push	{r11, lr}
     aa4:	e28db004 	add	r11, sp, #4
     aa8:	e24dd008 	sub	sp, sp, #8
	char key = GetKey(keyData);
     aac:	e3033d90 	movw	r3, #15760	; 0x3d90
     ab0:	e3403000 	movt	r3, #0
     ab4:	e5933000 	ldr	r3, [r3]
     ab8:	e1a00003 	mov	r0, r3
     abc:	eb00008c 	bl	cf4 <GetKey>
     ac0:	e1a03000 	mov	r3, r0
     ac4:	e54b3005 	strb	r3, [r11, #-5]

	if(key == 0xD)		//invalid key
     ac8:	e55b3005 	ldrb	r3, [r11, #-5]
     acc:	e353000d 	cmp	r3, #13
     ad0:	0a000082 	beq	ce0 <Key+0x240>
		return;

	if( (key != 0xA) && (key != 0xB) && (key != 0xC) )	//is integer
     ad4:	e55b3005 	ldrb	r3, [r11, #-5]
     ad8:	e353000a 	cmp	r3, #10
     adc:	0a00003f 	beq	be0 <Key+0x140>
     ae0:	e55b3005 	ldrb	r3, [r11, #-5]
     ae4:	e353000b 	cmp	r3, #11
     ae8:	0a00003c 	beq	be0 <Key+0x140>
     aec:	e55b3005 	ldrb	r3, [r11, #-5]
     af0:	e353000c 	cmp	r3, #12
     af4:	0a000039 	beq	be0 <Key+0x140>
	{
		inprpm.iHundred = inprpm.iTen;
     af8:	e3033dc0 	movw	r3, #15808	; 0x3dc0
     afc:	e3403000 	movt	r3, #0
     b00:	e5932004 	ldr	r2, [r3, #4]
     b04:	e3033dc0 	movw	r3, #15808	; 0x3dc0
     b08:	e3403000 	movt	r3, #0
     b0c:	e5832000 	str	r2, [r3]
		inprpm.iTen = inprpm.iOne;
     b10:	e3033dc0 	movw	r3, #15808	; 0x3dc0
     b14:	e3403000 	movt	r3, #0
     b18:	e5932008 	ldr	r2, [r3, #8]
     b1c:	e3033dc0 	movw	r3, #15808	; 0x3dc0
     b20:	e3403000 	movt	r3, #0
     b24:	e5832004 	str	r2, [r3, #4]
		inprpm.iOne = key;
     b28:	e55b2005 	ldrb	r2, [r11, #-5]
     b2c:	e3033dc0 	movw	r3, #15808	; 0x3dc0
     b30:	e3403000 	movt	r3, #0
     b34:	e5832008 	str	r2, [r3, #8]
		Total_inprpm();
     b38:	eb000506 	bl	1f58 <Total_inprpm>

		inprpm.cHundred = inprpm.cTen;
     b3c:	e3033dc0 	movw	r3, #15808	; 0x3dc0
     b40:	e3403000 	movt	r3, #0
     b44:	e5d32011 	ldrb	r2, [r3, #17]
     b48:	e3033dc0 	movw	r3, #15808	; 0x3dc0
     b4c:	e3403000 	movt	r3, #0
     b50:	e5c32010 	strb	r2, [r3, #16]
		inprpm.cTen = inprpm.cOne;
     b54:	e3033dc0 	movw	r3, #15808	; 0x3dc0
     b58:	e3403000 	movt	r3, #0
     b5c:	e5d32012 	ldrb	r2, [r3, #18]
     b60:	e3033dc0 	movw	r3, #15808	; 0x3dc0
     b64:	e3403000 	movt	r3, #0
     b68:	e5c32011 	strb	r2, [r3, #17]
		inprpm.cOne = GetCharacter(key);
     b6c:	e55b3005 	ldrb	r3, [r11, #-5]
     b70:	e1a00003 	mov	r0, r3
     b74:	eb0004af 	bl	1e38 <GetCharacter>
     b78:	e1a03000 	mov	r3, r0
     b7c:	e1a02003 	mov	r2, r3
     b80:	e3033dc0 	movw	r3, #15808	; 0x3dc0
     b84:	e3403000 	movt	r3, #0
     b88:	e5c32012 	strb	r2, [r3, #18]

		inprpm.cTotal[0] = inprpm.cHundred;
     b8c:	e3033dc0 	movw	r3, #15808	; 0x3dc0
     b90:	e3403000 	movt	r3, #0
     b94:	e5d32010 	ldrb	r2, [r3, #16]
     b98:	e3033dc0 	movw	r3, #15808	; 0x3dc0
     b9c:	e3403000 	movt	r3, #0
     ba0:	e5c32013 	strb	r2, [r3, #19]
		inprpm.cTotal[1] = inprpm.cTen;
     ba4:	e3033dc0 	movw	r3, #15808	; 0x3dc0
     ba8:	e3403000 	movt	r3, #0
     bac:	e5d32011 	ldrb	r2, [r3, #17]
     bb0:	e3033dc0 	movw	r3, #15808	; 0x3dc0
     bb4:	e3403000 	movt	r3, #0
     bb8:	e5c32014 	strb	r2, [r3, #20]
		inprpm.cTotal[2] = inprpm.cOne;
     bbc:	e3033dc0 	movw	r3, #15808	; 0x3dc0
     bc0:	e3403000 	movt	r3, #0
     bc4:	e5d32012 	ldrb	r2, [r3, #18]
     bc8:	e3033dc0 	movw	r3, #15808	; 0x3dc0
     bcc:	e3403000 	movt	r3, #0
     bd0:	e5c32015 	strb	r2, [r3, #21]

		InputRPM_Write(inprpm.cTotal);
     bd4:	e59f0110 	ldr	r0, [pc, #272]	; cec <Key+0x24c>
     bd8:	ebfffef4 	bl	7b0 <InputRPM_Write>
		return;
     bdc:	ea000040 	b	ce4 <Key+0x244>
	}

	if(key == 0xA)			//enter pressed
     be0:	e55b3005 	ldrb	r3, [r11, #-5]
     be4:	e353000a 	cmp	r3, #10
     be8:	1a00003d 	bne	ce4 <Key+0x244>
	{
		if(inprpm.cTotal[2] != ' ')
     bec:	e3033dc0 	movw	r3, #15808	; 0x3dc0
     bf0:	e3403000 	movt	r3, #0
     bf4:	e5d33015 	ldrb	r3, [r3, #21]
     bf8:	e3530020 	cmp	r3, #32
     bfc:	0a000038 	beq	ce4 <Key+0x244>
		{
			enterPress = 1;
     c00:	e3033d80 	movw	r3, #15744	; 0x3d80
     c04:	e3403000 	movt	r3, #0
     c08:	e3a02001 	mov	r2, #1
     c0c:	e5c32000 	strb	r2, [r3]
			setrpm = inprpm;
     c10:	e3032dd8 	movw	r2, #15832	; 0x3dd8
     c14:	e3402000 	movt	r2, #0
     c18:	e3033dc0 	movw	r3, #15808	; 0x3dc0
     c1c:	e3403000 	movt	r3, #0
     c20:	e1a0c002 	mov	r12, r2
     c24:	e1a0e003 	mov	lr, r3
     c28:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
     c2c:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
     c30:	e89e0003 	ldm	lr, {r0, r1}
     c34:	e88c0003 	stm	r12, {r0, r1}
			InputRPM_Clear();
     c38:	ebffff0a 	bl	868 <InputRPM_Clear>
			Clear_inprpm();
     c3c:	eb000498 	bl	1ea4 <Clear_inprpm>

			if(setrpm.iTotal > 233)
     c40:	e3033dd8 	movw	r3, #15832	; 0x3dd8
     c44:	e3403000 	movt	r3, #0
     c48:	e593300c 	ldr	r3, [r3, #12]
     c4c:	e35300e9 	cmp	r3, #233	; 0xe9
     c50:	da00000f 	ble	c94 <Key+0x1f4>
			{
				setrpm.iTotal = 233;
     c54:	e3033dd8 	movw	r3, #15832	; 0x3dd8
     c58:	e3403000 	movt	r3, #0
     c5c:	e3a020e9 	mov	r2, #233	; 0xe9
     c60:	e583200c 	str	r2, [r3, #12]
				setrpm.cTotal[0] = '2';
     c64:	e3033dd8 	movw	r3, #15832	; 0x3dd8
     c68:	e3403000 	movt	r3, #0
     c6c:	e3a02032 	mov	r2, #50	; 0x32
     c70:	e5c32013 	strb	r2, [r3, #19]
				setrpm.cTotal[1] = '3';
     c74:	e3033dd8 	movw	r3, #15832	; 0x3dd8
     c78:	e3403000 	movt	r3, #0
     c7c:	e3a02033 	mov	r2, #51	; 0x33
     c80:	e5c32014 	strb	r2, [r3, #20]
				setrpm.cTotal[2] = '3';
     c84:	e3033dd8 	movw	r3, #15832	; 0x3dd8
     c88:	e3403000 	movt	r3, #0
     c8c:	e3a02033 	mov	r2, #51	; 0x33
     c90:	e5c32015 	strb	r2, [r3, #21]
			}
			SetRPM_Write(setrpm.cTotal);
     c94:	e59f0054 	ldr	r0, [pc, #84]	; cf0 <Key+0x250>
     c98:	ebffff1a 	bl	908 <SetRPM_Write>
			percent = setrpm.iTotal / (float) 233;
     c9c:	e3033dd8 	movw	r3, #15832	; 0x3dd8
     ca0:	e3403000 	movt	r3, #0
     ca4:	e593300c 	ldr	r3, [r3, #12]
     ca8:	e1a00003 	mov	r0, r3
     cac:	eb000832 	bl	2d7c <__aeabi_i2f>
     cb0:	e1a03000 	mov	r3, r0
     cb4:	e1a00003 	mov	r0, r3
     cb8:	e3a01000 	mov	r1, #0
     cbc:	e3441369 	movt	r1, #17257	; 0x4369
     cc0:	eb0008ca 	bl	2ff0 <__aeabi_fdiv>
     cc4:	e1a03000 	mov	r3, r0
     cc8:	e1a02003 	mov	r2, r3
     ccc:	e3033d94 	movw	r3, #15764	; 0x3d94
     cd0:	e3403000 	movt	r3, #0
     cd4:	e5832000 	str	r2, [r3]
			return;
     cd8:	e1a00000 	nop			; (mov r0, r0)
     cdc:	ea000000 	b	ce4 <Key+0x244>
void Key(void)
{
	char key = GetKey(keyData);

	if(key == 0xD)		//invalid key
		return;
     ce0:	e1a00000 	nop			; (mov r0, r0)
	{
		*GPIOPtr &= 0xFFFFFFF7;
		*GPIOPtr |= 0x4;
	}
	*/
}
     ce4:	e24bd004 	sub	sp, r11, #4
     ce8:	e8bd8800 	pop	{r11, pc}
     cec:	00003dd3 	.word	0x00003dd3
     cf0:	00003deb 	.word	0x00003deb

00000cf4 <GetKey>:

char GetKey(int keyData)
{
     cf4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     cf8:	e28db000 	add	r11, sp, #0
     cfc:	e24dd014 	sub	sp, sp, #20
     d00:	e50b0010 	str	r0, [r11, #-16]
	char key;

	switch(keyData)
     d04:	e51b3010 	ldr	r3, [r11, #-16]
     d08:	e243305a 	sub	r3, r3, #90	; 0x5a
     d0c:	e3530086 	cmp	r3, #134	; 0x86
     d10:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
     d14:	ea0000b0 	b	fdc <GetKey+0x2e8>
     d18:	00000f34 	.word	0x00000f34
     d1c:	00000fdc 	.word	0x00000fdc
     d20:	00000fdc 	.word	0x00000fdc
     d24:	00000fdc 	.word	0x00000fdc
     d28:	00000fdc 	.word	0x00000fdc
     d2c:	00000fdc 	.word	0x00000fdc
     d30:	00000fdc 	.word	0x00000fdc
     d34:	00000fdc 	.word	0x00000fdc
     d38:	00000fdc 	.word	0x00000fdc
     d3c:	00000fdc 	.word	0x00000fdc
     d40:	00000fdc 	.word	0x00000fdc
     d44:	00000fdc 	.word	0x00000fdc
     d48:	00000fdc 	.word	0x00000fdc
     d4c:	00000fdc 	.word	0x00000fdc
     d50:	00000fdc 	.word	0x00000fdc
     d54:	00000f58 	.word	0x00000f58
     d58:	00000fdc 	.word	0x00000fdc
     d5c:	00000f7c 	.word	0x00000f7c
     d60:	00000fa0 	.word	0x00000fa0
     d64:	00000fdc 	.word	0x00000fdc
     d68:	00000fdc 	.word	0x00000fdc
     d6c:	00000fdc 	.word	0x00000fdc
     d70:	00000f4c 	.word	0x00000f4c
     d74:	00000fdc 	.word	0x00000fdc
     d78:	00000f64 	.word	0x00000f64
     d7c:	00000f88 	.word	0x00000f88
     d80:	00000f94 	.word	0x00000f94
     d84:	00000fac 	.word	0x00000fac
     d88:	00000fdc 	.word	0x00000fdc
     d8c:	00000fdc 	.word	0x00000fdc
     d90:	00000fdc 	.word	0x00000fdc
     d94:	00000fc4 	.word	0x00000fc4
     d98:	00000f70 	.word	0x00000f70
     d9c:	00000fd0 	.word	0x00000fd0
     da0:	00000fdc 	.word	0x00000fdc
     da4:	00000fb8 	.word	0x00000fb8
     da8:	00000fdc 	.word	0x00000fdc
     dac:	00000fdc 	.word	0x00000fdc
     db0:	00000fdc 	.word	0x00000fdc
     db4:	00000fdc 	.word	0x00000fdc
     db8:	00000fdc 	.word	0x00000fdc
     dbc:	00000fdc 	.word	0x00000fdc
     dc0:	00000fdc 	.word	0x00000fdc
     dc4:	00000fdc 	.word	0x00000fdc
     dc8:	00000fdc 	.word	0x00000fdc
     dcc:	00000fdc 	.word	0x00000fdc
     dd0:	00000fdc 	.word	0x00000fdc
     dd4:	00000fdc 	.word	0x00000fdc
     dd8:	00000fdc 	.word	0x00000fdc
     ddc:	00000fdc 	.word	0x00000fdc
     de0:	00000fdc 	.word	0x00000fdc
     de4:	00000fdc 	.word	0x00000fdc
     de8:	00000fdc 	.word	0x00000fdc
     dec:	00000fdc 	.word	0x00000fdc
     df0:	00000fdc 	.word	0x00000fdc
     df4:	00000fdc 	.word	0x00000fdc
     df8:	00000fdc 	.word	0x00000fdc
     dfc:	00000fdc 	.word	0x00000fdc
     e00:	00000fdc 	.word	0x00000fdc
     e04:	00000fdc 	.word	0x00000fdc
     e08:	00000fdc 	.word	0x00000fdc
     e0c:	00000fdc 	.word	0x00000fdc
     e10:	00000fdc 	.word	0x00000fdc
     e14:	00000fdc 	.word	0x00000fdc
     e18:	00000fdc 	.word	0x00000fdc
     e1c:	00000fdc 	.word	0x00000fdc
     e20:	00000fdc 	.word	0x00000fdc
     e24:	00000fdc 	.word	0x00000fdc
     e28:	00000fdc 	.word	0x00000fdc
     e2c:	00000fdc 	.word	0x00000fdc
     e30:	00000fdc 	.word	0x00000fdc
     e34:	00000fdc 	.word	0x00000fdc
     e38:	00000fdc 	.word	0x00000fdc
     e3c:	00000fdc 	.word	0x00000fdc
     e40:	00000fdc 	.word	0x00000fdc
     e44:	00000fdc 	.word	0x00000fdc
     e48:	00000fdc 	.word	0x00000fdc
     e4c:	00000fdc 	.word	0x00000fdc
     e50:	00000fdc 	.word	0x00000fdc
     e54:	00000fdc 	.word	0x00000fdc
     e58:	00000fdc 	.word	0x00000fdc
     e5c:	00000fdc 	.word	0x00000fdc
     e60:	00000fdc 	.word	0x00000fdc
     e64:	00000fdc 	.word	0x00000fdc
     e68:	00000fdc 	.word	0x00000fdc
     e6c:	00000fdc 	.word	0x00000fdc
     e70:	00000fdc 	.word	0x00000fdc
     e74:	00000fdc 	.word	0x00000fdc
     e78:	00000fdc 	.word	0x00000fdc
     e7c:	00000fdc 	.word	0x00000fdc
     e80:	00000fdc 	.word	0x00000fdc
     e84:	00000fdc 	.word	0x00000fdc
     e88:	00000fdc 	.word	0x00000fdc
     e8c:	00000fdc 	.word	0x00000fdc
     e90:	00000fdc 	.word	0x00000fdc
     e94:	00000fdc 	.word	0x00000fdc
     e98:	00000fdc 	.word	0x00000fdc
     e9c:	00000fdc 	.word	0x00000fdc
     ea0:	00000fdc 	.word	0x00000fdc
     ea4:	00000fdc 	.word	0x00000fdc
     ea8:	00000fdc 	.word	0x00000fdc
     eac:	00000fdc 	.word	0x00000fdc
     eb0:	00000fdc 	.word	0x00000fdc
     eb4:	00000fdc 	.word	0x00000fdc
     eb8:	00000fdc 	.word	0x00000fdc
     ebc:	00000fdc 	.word	0x00000fdc
     ec0:	00000fdc 	.word	0x00000fdc
     ec4:	00000fdc 	.word	0x00000fdc
     ec8:	00000fdc 	.word	0x00000fdc
     ecc:	00000fdc 	.word	0x00000fdc
     ed0:	00000fdc 	.word	0x00000fdc
     ed4:	00000fdc 	.word	0x00000fdc
     ed8:	00000fdc 	.word	0x00000fdc
     edc:	00000fdc 	.word	0x00000fdc
     ee0:	00000fdc 	.word	0x00000fdc
     ee4:	00000fdc 	.word	0x00000fdc
     ee8:	00000fdc 	.word	0x00000fdc
     eec:	00000fdc 	.word	0x00000fdc
     ef0:	00000fdc 	.word	0x00000fdc
     ef4:	00000fdc 	.word	0x00000fdc
     ef8:	00000fdc 	.word	0x00000fdc
     efc:	00000fdc 	.word	0x00000fdc
     f00:	00000fdc 	.word	0x00000fdc
     f04:	00000fdc 	.word	0x00000fdc
     f08:	00000fdc 	.word	0x00000fdc
     f0c:	00000fdc 	.word	0x00000fdc
     f10:	00000fdc 	.word	0x00000fdc
     f14:	00000fdc 	.word	0x00000fdc
     f18:	00000fdc 	.word	0x00000fdc
     f1c:	00000fdc 	.word	0x00000fdc
     f20:	00000fdc 	.word	0x00000fdc
     f24:	00000fdc 	.word	0x00000fdc
     f28:	00000fdc 	.word	0x00000fdc
     f2c:	00000fdc 	.word	0x00000fdc
     f30:	00000f40 	.word	0x00000f40
	{
		case 0x5A:		//enter
			key = 0xA;
     f34:	e3a0300a 	mov	r3, #10
     f38:	e54b3005 	strb	r3, [r11, #-5]
			break;
     f3c:	ea000029 	b	fe8 <GetKey+0x2f4>
		case 0xE0:		//enter
			key = 0xA;
     f40:	e3a0300a 	mov	r3, #10
     f44:	e54b3005 	strb	r3, [r11, #-5]
			break;
     f48:	ea000026 	b	fe8 <GetKey+0x2f4>
		case 0x70:		//0
			key = 0;
     f4c:	e3a03000 	mov	r3, #0
     f50:	e54b3005 	strb	r3, [r11, #-5]
			break;
     f54:	ea000023 	b	fe8 <GetKey+0x2f4>
		case 0x69:		//1
			key = 1;
     f58:	e3a03001 	mov	r3, #1
     f5c:	e54b3005 	strb	r3, [r11, #-5]
			break;
     f60:	ea000020 	b	fe8 <GetKey+0x2f4>
		case 0x72:		//2
			key = 2;
     f64:	e3a03002 	mov	r3, #2
     f68:	e54b3005 	strb	r3, [r11, #-5]
			break;
     f6c:	ea00001d 	b	fe8 <GetKey+0x2f4>
		case 0x7A:		//3
			key = 3;
     f70:	e3a03003 	mov	r3, #3
     f74:	e54b3005 	strb	r3, [r11, #-5]
			break;
     f78:	ea00001a 	b	fe8 <GetKey+0x2f4>
		case 0x6B:		//4
			key = 4;
     f7c:	e3a03004 	mov	r3, #4
     f80:	e54b3005 	strb	r3, [r11, #-5]
			break;
     f84:	ea000017 	b	fe8 <GetKey+0x2f4>
		case 0x73:		//5
			key = 5;
     f88:	e3a03005 	mov	r3, #5
     f8c:	e54b3005 	strb	r3, [r11, #-5]
			break;
     f90:	ea000014 	b	fe8 <GetKey+0x2f4>
		case 0x74:		//6
			key = 6;
     f94:	e3a03006 	mov	r3, #6
     f98:	e54b3005 	strb	r3, [r11, #-5]
			break;
     f9c:	ea000011 	b	fe8 <GetKey+0x2f4>
		case 0x6C:		//7
			key = 7;
     fa0:	e3a03007 	mov	r3, #7
     fa4:	e54b3005 	strb	r3, [r11, #-5]
			break;
     fa8:	ea00000e 	b	fe8 <GetKey+0x2f4>
		case 0x75:		//8
			key = 8;
     fac:	e3a03008 	mov	r3, #8
     fb0:	e54b3005 	strb	r3, [r11, #-5]
			break;
     fb4:	ea00000b 	b	fe8 <GetKey+0x2f4>
		case 0x7D:		//9
			key = 9;
     fb8:	e3a03009 	mov	r3, #9
     fbc:	e54b3005 	strb	r3, [r11, #-5]
			break;
     fc0:	ea000008 	b	fe8 <GetKey+0x2f4>
		case 0x79:		//+
			key = 0xB;
     fc4:	e3a0300b 	mov	r3, #11
     fc8:	e54b3005 	strb	r3, [r11, #-5]
			break;
     fcc:	ea000005 	b	fe8 <GetKey+0x2f4>
		case 0x7B:		//-
			key = 0xC;
     fd0:	e3a0300c 	mov	r3, #12
     fd4:	e54b3005 	strb	r3, [r11, #-5]
			break;
     fd8:	ea000002 	b	fe8 <GetKey+0x2f4>
		default:		//invalid
			key = 0xD;
     fdc:	e3a0300d 	mov	r3, #13
     fe0:	e54b3005 	strb	r3, [r11, #-5]
			break;
     fe4:	e1a00000 	nop			; (mov r0, r0)
	}
	return key;
     fe8:	e55b3005 	ldrb	r3, [r11, #-5]
}
     fec:	e1a00003 	mov	r0, r3
     ff0:	e28bd000 	add	sp, r11, #0
     ff4:	e8bd0800 	ldmfd	sp!, {r11}
     ff8:	e12fff1e 	bx	lr

00000ffc <SetPWM>:
/***************************************************************************************************
Function Definitions:
***************************************************************************************************/

void SetPWM(unsigned int period, double percent)
{
     ffc:	e92d4800 	push	{r11, lr}
    1000:	e28db004 	add	r11, sp, #4
    1004:	e24dd020 	sub	sp, sp, #32
    1008:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
    100c:	e14b22f4 	strd	r2, [r11, #-36]	; 0xffffffdc
    volatile int* HPSTimer1Ptr = (int*) HPS_TIMER1_BASE;
    1010:	e3a03a09 	mov	r3, #36864	; 0x9000
    1014:	e34f3fc0 	movt	r3, #65472	; 0xffc0
    1018:	e50b3008 	str	r3, [r11, #-8]
    period = period * 100;
    101c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1020:	e3a02064 	mov	r2, #100	; 0x64
    1024:	e0030392 	mul	r3, r2, r3
    1028:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
    double math = period * percent;
    102c:	e51b0018 	ldr	r0, [r11, #-24]	; 0xffffffe8
    1030:	eb00055f 	bl	25b4 <__aeabi_ui2d>
    1034:	e1a02000 	mov	r2, r0
    1038:	e1a03001 	mov	r3, r1
    103c:	e1a00002 	mov	r0, r2
    1040:	e1a01003 	mov	r1, r3
    1044:	e14b22d4 	ldrd	r2, [r11, #-36]	; 0xffffffdc
    1048:	eb000599 	bl	26b4 <__aeabi_dmul>
    104c:	e1a02000 	mov	r2, r0
    1050:	e1a03001 	mov	r3, r1
    1054:	e14b21f4 	strd	r2, [r11, #-20]	; 0xffffffec

    /************************************************
    HPS Timer:
    ************************************************/
    *(HPSTimer1Ptr + 2) &= ~(1 << 0); // E = 0
    1058:	e51b3008 	ldr	r3, [r11, #-8]
    105c:	e2833008 	add	r3, r3, #8
    1060:	e51b2008 	ldr	r2, [r11, #-8]
    1064:	e2822008 	add	r2, r2, #8
    1068:	e5922000 	ldr	r2, [r2]
    106c:	e3c22001 	bic	r2, r2, #1
    1070:	e5832000 	str	r2, [r3]
    *(HPSTimer1Ptr) = (int)math; // load value
    1074:	e14b01d4 	ldrd	r0, [r11, #-20]	; 0xffffffec
    1078:	eb0006b4 	bl	2b50 <__aeabi_d2iz>
    107c:	e1a02000 	mov	r2, r0
    1080:	e51b3008 	ldr	r3, [r11, #-8]
    1084:	e5832000 	str	r2, [r3]
    *(HPSTimer1Ptr + 2) |= (1 << 1); // M = 1
    1088:	e51b3008 	ldr	r3, [r11, #-8]
    108c:	e2833008 	add	r3, r3, #8
    1090:	e51b2008 	ldr	r2, [r11, #-8]
    1094:	e2822008 	add	r2, r2, #8
    1098:	e5922000 	ldr	r2, [r2]
    109c:	e3822002 	orr	r2, r2, #2
    10a0:	e5832000 	str	r2, [r3]
    *(HPSTimer1Ptr + 2) |= (1 << 0); // E = 1
    10a4:	e51b3008 	ldr	r3, [r11, #-8]
    10a8:	e2833008 	add	r3, r3, #8
    10ac:	e51b2008 	ldr	r2, [r11, #-8]
    10b0:	e2822008 	add	r2, r2, #8
    10b4:	e5922000 	ldr	r2, [r2]
    10b8:	e3822001 	orr	r2, r2, #1
    10bc:	e5832000 	str	r2, [r3]
}
    10c0:	e24bd004 	sub	sp, r11, #4
    10c4:	e8bd8800 	pop	{r11, pc}

000010c8 <PWM_Setup>:

void PWM_Setup(void)
{
    10c8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    10cc:	e28db000 	add	r11, sp, #0
    10d0:	e24dd00c 	sub	sp, sp, #12
    volatile int* GPIOPtr = (int*)JP1_BASE;
    10d4:	e3a03060 	mov	r3, #96	; 0x60
    10d8:	e34f3f20 	movt	r3, #65312	; 0xff20
    10dc:	e50b3008 	str	r3, [r11, #-8]
    *(GPIOPtr + 1) |= (1 << 1); // D1 output
    10e0:	e51b3008 	ldr	r3, [r11, #-8]
    10e4:	e2833004 	add	r3, r3, #4
    10e8:	e51b2008 	ldr	r2, [r11, #-8]
    10ec:	e2822004 	add	r2, r2, #4
    10f0:	e5922000 	ldr	r2, [r2]
    10f4:	e3822002 	orr	r2, r2, #2
    10f8:	e5832000 	str	r2, [r3]
    10fc:	e28bd000 	add	sp, r11, #0
    1100:	e8bd0800 	ldmfd	sp!, {r11}
    1104:	e12fff1e 	bx	lr

00001108 <VGA_box>:
//**Includes**//
#include "vga.h"
#include "address_map.h"
//**Function Code**//
void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
    1108:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    110c:	e28db000 	add	r11, sp, #0
    1110:	e24dd024 	sub	sp, sp, #36	; 0x24
    1114:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
    1118:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
    111c:	e50b2020 	str	r2, [r11, #-32]	; 0xffffffe0
    1120:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
	int pixel_ptr, row, col;

	for (row = y1; row <= y2; row++)		
    1124:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    1128:	e50b3008 	str	r3, [r11, #-8]
    112c:	ea000017 	b	1190 <VGA_box+0x88>
	{
		for (col = x1; col <= x2; ++col)
    1130:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1134:	e50b300c 	str	r3, [r11, #-12]
    1138:	ea00000d 	b	1174 <VGA_box+0x6c>
		{
			pixel_ptr = FPGA_ONCHIP_BASE + (row << 10) + (col << 1);
    113c:	e51b3008 	ldr	r3, [r11, #-8]
    1140:	e1a03503 	lsl	r3, r3, #10
    1144:	e1a02003 	mov	r2, r3
    1148:	e51b300c 	ldr	r3, [r11, #-12]
    114c:	e1a03083 	lsl	r3, r3, #1
    1150:	e0823003 	add	r3, r2, r3
    1154:	e2833332 	add	r3, r3, #-939524096	; 0xc8000000
    1158:	e50b3010 	str	r3, [r11, #-16]
			*(short *)pixel_ptr = pixel_color;		// set pixel color
    115c:	e51b3010 	ldr	r3, [r11, #-16]
    1160:	e1db20b4 	ldrh	r2, [r11, #4]
    1164:	e1c320b0 	strh	r2, [r3]
{
	int pixel_ptr, row, col;

	for (row = y1; row <= y2; row++)		
	{
		for (col = x1; col <= x2; ++col)
    1168:	e51b300c 	ldr	r3, [r11, #-12]
    116c:	e2833001 	add	r3, r3, #1
    1170:	e50b300c 	str	r3, [r11, #-12]
    1174:	e51b200c 	ldr	r2, [r11, #-12]
    1178:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    117c:	e1520003 	cmp	r2, r3
    1180:	daffffed 	ble	113c <VGA_box+0x34>
//**Function Code**//
void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
	int pixel_ptr, row, col;

	for (row = y1; row <= y2; row++)		
    1184:	e51b3008 	ldr	r3, [r11, #-8]
    1188:	e2833001 	add	r3, r3, #1
    118c:	e50b3008 	str	r3, [r11, #-8]
    1190:	e51b2008 	ldr	r2, [r11, #-8]
    1194:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    1198:	e1520003 	cmp	r2, r3
    119c:	daffffe3 	ble	1130 <VGA_box+0x28>
		{
			pixel_ptr = FPGA_ONCHIP_BASE + (row << 10) + (col << 1);
			*(short *)pixel_ptr = pixel_color;		// set pixel color
		}
	}
} 
    11a0:	e28bd000 	add	sp, r11, #0
    11a4:	e8bd0800 	ldmfd	sp!, {r11}
    11a8:	e12fff1e 	bx	lr

000011ac <VGA_text>:

void VGA_text(int x, int y, char* text_ptr)
{
    11ac:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    11b0:	e28db000 	add	r11, sp, #0
    11b4:	e24dd01c 	sub	sp, sp, #28
    11b8:	e50b0010 	str	r0, [r11, #-16]
    11bc:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
    11c0:	e50b2018 	str	r2, [r11, #-24]	; 0xffffffe8
	int offset;
  	volatile char* character_buffer = (char *) FPGA_CHAR_BASE;	// VGA character buffer
    11c4:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    11c8:	e50b300c 	str	r3, [r11, #-12]

	offset = (y << 7) + x;
    11cc:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    11d0:	e1a02383 	lsl	r2, r3, #7
    11d4:	e51b3010 	ldr	r3, [r11, #-16]
    11d8:	e0823003 	add	r3, r2, r3
    11dc:	e50b3008 	str	r3, [r11, #-8]
	while ( *(text_ptr) )
    11e0:	ea00000b 	b	1214 <VGA_text+0x68>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
    11e4:	e51b3008 	ldr	r3, [r11, #-8]
    11e8:	e51b200c 	ldr	r2, [r11, #-12]
    11ec:	e0823003 	add	r3, r2, r3
    11f0:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    11f4:	e5d22000 	ldrb	r2, [r2]
    11f8:	e5c32000 	strb	r2, [r3]
		++text_ptr;
    11fc:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1200:	e2833001 	add	r3, r3, #1
    1204:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
		++offset;
    1208:	e51b3008 	ldr	r3, [r11, #-8]
    120c:	e2833001 	add	r3, r3, #1
    1210:	e50b3008 	str	r3, [r11, #-8]
{
	int offset;
  	volatile char* character_buffer = (char *) FPGA_CHAR_BASE;	// VGA character buffer

	offset = (y << 7) + x;
	while ( *(text_ptr) )
    1214:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1218:	e5d33000 	ldrb	r3, [r3]
    121c:	e3530000 	cmp	r3, #0
    1220:	1affffef 	bne	11e4 <VGA_text+0x38>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
		++text_ptr;
		++offset;
	}
}
    1224:	e28bd000 	add	sp, r11, #0
    1228:	e8bd0800 	ldmfd	sp!, {r11}
    122c:	e12fff1e 	bx	lr

00001230 <PS2_Read>:
extern int keyData;     //declared in keypad.c
extern int goodKey;     //declared in main.c

//**Function Code**//
void PS2_Read(void)
{
    1230:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1234:	e28db000 	add	r11, sp, #0
    1238:	e24dd01c 	sub	sp, sp, #28
    volatile int* PS2_ptr = (int*) PS2_BASE;
    123c:	e3a03c01 	mov	r3, #256	; 0x100
    1240:	e34f3f20 	movt	r3, #65312	; 0xff20
    1244:	e50b300c 	str	r3, [r11, #-12]
    int ps2data;
    static char flag = 0;   //holds if release accured
    char waiting = 1;
    1248:	e3a03001 	mov	r3, #1
    124c:	e54b3005 	strb	r3, [r11, #-5]
    int trash = 0;          //holds current PS2 read
    1250:	e3a03000 	mov	r3, #0
    1254:	e50b3010 	str	r3, [r11, #-16]
    int ravail;             //holds if unread data
    int rvalid;

    while(waiting == 1)                              //if unread data
    1258:	ea000030 	b	1320 <PS2_Read+0xf0>
    {
        ps2data = *(PS2_ptr);
    125c:	e51b300c 	ldr	r3, [r11, #-12]
    1260:	e5933000 	ldr	r3, [r3]
    1264:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
        ravail = (ps2data & 0xFFFF0000) >> 16;
    1268:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    126c:	e1a03823 	lsr	r3, r3, #16
    1270:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
        rvalid = (ps2data & 0x8000) >> 15;
    1274:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    1278:	e2033902 	and	r3, r3, #32768	; 0x8000
    127c:	e1a037c3 	asr	r3, r3, #15
    1280:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4

        if(ravail == 0)
    1284:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1288:	e3530000 	cmp	r3, #0
    128c:	0a000027 	beq	1330 <PS2_Read+0x100>
            return;

        if(rvalid == 1)
    1290:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    1294:	e3530001 	cmp	r3, #1
    1298:	1a000020 	bne	1320 <PS2_Read+0xf0>
        {
            trash = ps2data & 0xFF;             //read data
    129c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    12a0:	e6ef3073 	uxtb	r3, r3
    12a4:	e50b3010 	str	r3, [r11, #-16]
            if(flag == 1)                      //if flag set
    12a8:	e3033da8 	movw	r3, #15784	; 0x3da8
    12ac:	e3403000 	movt	r3, #0
    12b0:	e5d33000 	ldrb	r3, [r3]
    12b4:	e3530001 	cmp	r3, #1
    12b8:	1a00000d 	bne	12f4 <PS2_Read+0xc4>
            {
                keyData = trash;                  //keep data
    12bc:	e3033d90 	movw	r3, #15760	; 0x3d90
    12c0:	e3403000 	movt	r3, #0
    12c4:	e51b2010 	ldr	r2, [r11, #-16]
    12c8:	e5832000 	str	r2, [r3]
                flag = 0;                         //clear local flag
    12cc:	e3033da8 	movw	r3, #15784	; 0x3da8
    12d0:	e3403000 	movt	r3, #0
    12d4:	e3a02000 	mov	r2, #0
    12d8:	e5c32000 	strb	r2, [r3]
                goodKey = 1;                      //set global flag
    12dc:	e3033d7c 	movw	r3, #15740	; 0x3d7c
    12e0:	e3403000 	movt	r3, #0
    12e4:	e3a02001 	mov	r2, #1
    12e8:	e5832000 	str	r2, [r3]
                waiting = 0;                      //clear loop control
    12ec:	e3a03000 	mov	r3, #0
    12f0:	e54b3005 	strb	r3, [r11, #-5]
            }
            if(trash == 0xF0)                   //if date is break code
    12f4:	e51b3010 	ldr	r3, [r11, #-16]
    12f8:	e35300f0 	cmp	r3, #240	; 0xf0
    12fc:	1a000007 	bne	1320 <PS2_Read+0xf0>
            {
                flag = 1;                         //set local flag
    1300:	e3033da8 	movw	r3, #15784	; 0x3da8
    1304:	e3403000 	movt	r3, #0
    1308:	e3a02001 	mov	r2, #1
    130c:	e5c32000 	strb	r2, [r3]
                keyData = 0;                      //clear data
    1310:	e3033d90 	movw	r3, #15760	; 0x3d90
    1314:	e3403000 	movt	r3, #0
    1318:	e3a02000 	mov	r2, #0
    131c:	e5832000 	str	r2, [r3]
    char waiting = 1;
    int trash = 0;          //holds current PS2 read
    int ravail;             //holds if unread data
    int rvalid;

    while(waiting == 1)                              //if unread data
    1320:	e55b3005 	ldrb	r3, [r11, #-5]
    1324:	e3530001 	cmp	r3, #1
    1328:	0affffcb 	beq	125c <PS2_Read+0x2c>
    132c:	ea000000 	b	1334 <PS2_Read+0x104>
        ps2data = *(PS2_ptr);
        ravail = (ps2data & 0xFFFF0000) >> 16;
        rvalid = (ps2data & 0x8000) >> 15;

        if(ravail == 0)
            return;
    1330:	e1a00000 	nop			; (mov r0, r0)
                flag = 1;                         //set local flag
                keyData = 0;                      //clear data
            }
        }
    }
}
    1334:	e28bd000 	add	sp, r11, #0
    1338:	e8bd0800 	ldmfd	sp!, {r11}
    133c:	e12fff1e 	bx	lr

00001340 <put_jtag>:
#include "JTAG_UART.h"
#include "address_map.h"


void put_jtag( char c )
{
    1340:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1344:	e28db000 	add	r11, sp, #0
    1348:	e24dd014 	sub	sp, sp, #20
    134c:	e1a03000 	mov	r3, r0
    1350:	e54b300d 	strb	r3, [r11, #-13]
    volatile int * JTAG_UART_ptr    = (int *) JTAG_UART_BASE;   // JTAG UART address
    1354:	e3a03a01 	mov	r3, #4096	; 0x1000
    1358:	e34f3f20 	movt	r3, #65312	; 0xff20
    135c:	e50b3008 	str	r3, [r11, #-8]

    int control;
    control = *(JTAG_UART_ptr + 1);     // read the JTAG_UART control register
    1360:	e51b3008 	ldr	r3, [r11, #-8]
    1364:	e5933004 	ldr	r3, [r3, #4]
    1368:	e50b300c 	str	r3, [r11, #-12]
    if (control & 0xFFFF0000)               // if space, echo character, else ignore 
    136c:	e51b300c 	ldr	r3, [r11, #-12]
    1370:	e1a03823 	lsr	r3, r3, #16
    1374:	e1a03803 	lsl	r3, r3, #16
    1378:	e3530000 	cmp	r3, #0
    137c:	0a000002 	beq	138c <put_jtag+0x4c>
        *(JTAG_UART_ptr) = c;
    1380:	e55b200d 	ldrb	r2, [r11, #-13]
    1384:	e51b3008 	ldr	r3, [r11, #-8]
    1388:	e5832000 	str	r2, [r3]
}
    138c:	e28bd000 	add	sp, r11, #0
    1390:	e8bd0800 	ldmfd	sp!, {r11}
    1394:	e12fff1e 	bx	lr

00001398 <get_jtag>:

char get_jtag( void )
{
    1398:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    139c:	e28db000 	add	r11, sp, #0
    13a0:	e24dd00c 	sub	sp, sp, #12
    volatile int * JTAG_UART_ptr    = (int *) JTAG_UART_BASE;   // JTAG UART address
    13a4:	e3a03a01 	mov	r3, #4096	; 0x1000
    13a8:	e34f3f20 	movt	r3, #65312	; 0xff20
    13ac:	e50b3008 	str	r3, [r11, #-8]

    int data;
    data = *(JTAG_UART_ptr);                // read the JTAG_UART data register
    13b0:	e51b3008 	ldr	r3, [r11, #-8]
    13b4:	e5933000 	ldr	r3, [r3]
    13b8:	e50b300c 	str	r3, [r11, #-12]
    if (data & 0x00008000)                  // check RVALID to see if there is new data
    13bc:	e51b300c 	ldr	r3, [r11, #-12]
    13c0:	e2033902 	and	r3, r3, #32768	; 0x8000
    13c4:	e3530000 	cmp	r3, #0
    13c8:	0a000002 	beq	13d8 <get_jtag+0x40>
        return ((char) data & 0xFF);
    13cc:	e51b300c 	ldr	r3, [r11, #-12]
    13d0:	e6ef3073 	uxtb	r3, r3
    13d4:	ea000000 	b	13dc <get_jtag+0x44>
    else
        return ('\0');
    13d8:	e3a03000 	mov	r3, #0
}
    13dc:	e1a00003 	mov	r0, r3
    13e0:	e28bd000 	add	sp, r11, #0
    13e4:	e8bd0800 	ldmfd	sp!, {r11}
    13e8:	e12fff1e 	bx	lr

000013ec <GetDigit>:

char GetDigit(unsigned char value)
{
    13ec:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    13f0:	e28db000 	add	r11, sp, #0
    13f4:	e24dd01c 	sub	sp, sp, #28
    13f8:	e1a03000 	mov	r3, r0
    13fc:	e54b3015 	strb	r3, [r11, #-21]	; 0xffffffeb
    char digits[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
    1400:	e3033880 	movw	r3, #14464	; 0x3880
    1404:	e3403000 	movt	r3, #0
    1408:	e24bc014 	sub	r12, r11, #20
    140c:	e5930000 	ldr	r0, [r3]
    1410:	e5931004 	ldr	r1, [r3, #4]
    1414:	e5932008 	ldr	r2, [r3, #8]
    1418:	e593300c 	ldr	r3, [r3, #12]
    141c:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}

    return digits[value];
    1420:	e55b2015 	ldrb	r2, [r11, #-21]	; 0xffffffeb
    1424:	e3e0300f 	mvn	r3, #15
    1428:	e24b1004 	sub	r1, r11, #4
    142c:	e0812002 	add	r2, r1, r2
    1430:	e0823003 	add	r3, r2, r3
    1434:	e5d33000 	ldrb	r3, [r3]
}
    1438:	e1a00003 	mov	r0, r3
    143c:	e28bd000 	add	sp, r11, #0
    1440:	e8bd0800 	ldmfd	sp!, {r11}
    1444:	e12fff1e 	bx	lr

00001448 <__cs3_isr_irq>:
#include "interrupt_id.h"
#include "address_map.h"

// Define the IRQ exception handler
void __attribute__ ((interrupt)) __cs3_isr_irq (void)
{
    1448:	e24ee004 	sub	lr, lr, #4
    144c:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
    1450:	e28db018 	add	r11, sp, #24
    1454:	e24dd00c 	sub	sp, sp, #12
    // Read the ICCIAR from the CPU interface in the GIC
    int address;
    int interrupt_ID;
    
    address = MPCORE_GIC_CPUIF + ICCIAR;
    1458:	e30c310c 	movw	r3, #49420	; 0xc10c
    145c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1460:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
    interrupt_ID = *(int *)address;
    1464:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    1468:	e5933000 	ldr	r3, [r3]
    146c:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
*/

    //if(interrupt_ID == MPCORE_PRIV_TIMER_IRQ)
       // TimerISR();

    if(interrupt_ID == HPS_TIMER0_IRQ)
    1470:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    1474:	e35300c7 	cmp	r3, #199	; 0xc7
    1478:	1a000001 	bne	1484 <__cs3_isr_irq+0x3c>
        HPSTimer0ISR();  
    147c:	ebfffbbc 	bl	374 <HPSTimer0ISR>
    1480:	ea00000a 	b	14b0 <__cs3_isr_irq+0x68>
    else if(interrupt_ID == HPS_TIMER1_IRQ)
    1484:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    1488:	e35300c8 	cmp	r3, #200	; 0xc8
    148c:	1a000001 	bne	1498 <__cs3_isr_irq+0x50>
        HPSTimer1ISR();
    1490:	ebfffbe9 	bl	43c <HPSTimer1ISR>
    1494:	ea000005 	b	14b0 <__cs3_isr_irq+0x68>
    else if(interrupt_ID == HPS_TIMER2_IRQ)
    1498:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    149c:	e35300c9 	cmp	r3, #201	; 0xc9
    14a0:	1a000001 	bne	14ac <__cs3_isr_irq+0x64>
        HPSTimer2ISR();
    14a4:	ebfffc3c 	bl	59c <HPSTimer2ISR>
    14a8:	ea000000 	b	14b0 <__cs3_isr_irq+0x68>
    else
        while (1);                          // if unexpected, then stay here
    14ac:	eafffffe 	b	14ac <__cs3_isr_irq+0x64>

    // Write to the End of Interrupt Register (ICCEOIR)
    address = MPCORE_GIC_CPUIF + ICCEOIR;
    14b0:	e30c3110 	movw	r3, #49424	; 0xc110
    14b4:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    14b8:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
    *(int *)address = interrupt_ID;
    14bc:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    14c0:	e51b2024 	ldr	r2, [r11, #-36]	; 0xffffffdc
    14c4:	e5832000 	str	r2, [r3]

    return;
    14c8:	e1a00000 	nop			; (mov r0, r0)
} 
    14cc:	e24bd018 	sub	sp, r11, #24
    14d0:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

000014d4 <__cs3_reset>:

// Define the remaining exception handlers
void __attribute__ ((interrupt)) __cs3_reset (void)
{
    14d4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    14d8:	e28db000 	add	r11, sp, #0
    while(1);
    14dc:	eafffffe 	b	14dc <__cs3_reset+0x8>

000014e0 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void)
{
    14e0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    14e4:	e28db000 	add	r11, sp, #0
    while(1);
    14e8:	eafffffe 	b	14e8 <__cs3_isr_undef+0x8>

000014ec <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void)
{
    14ec:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    14f0:	e28db000 	add	r11, sp, #0
    while(1);
    14f4:	eafffffe 	b	14f4 <__cs3_isr_swi+0x8>

000014f8 <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void)
{
    14f8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    14fc:	e28db000 	add	r11, sp, #0
    while(1);
    1500:	eafffffe 	b	1500 <__cs3_isr_pabort+0x8>

00001504 <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void)
{
    1504:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1508:	e28db000 	add	r11, sp, #0
    while(1);
    150c:	eafffffe 	b	150c <__cs3_isr_dabort+0x8>

00001510 <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void)
{
    1510:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1514:	e28db000 	add	r11, sp, #0
    while(1);
    1518:	eafffffe 	b	1518 <__cs3_isr_fiq+0x8>

0000151c <disable_A9_interrupts>:
}

void disable_A9_interrupts(void)
{
    151c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1520:	e28db000 	add	r11, sp, #0
    1524:	e24dd00c 	sub	sp, sp, #12
    int status = 0b11010011;
    1528:	e3a030d3 	mov	r3, #211	; 0xd3
    152c:	e50b3008 	str	r3, [r11, #-8]
    asm("msr cpsr, %[ps]" : : [ps]"r"(status));
    1530:	e51b3008 	ldr	r3, [r11, #-8]
    1534:	e129f003 	msr	CPSR_fc, r3
}
    1538:	e28bd000 	add	sp, r11, #0
    153c:	e8bd0800 	ldmfd	sp!, {r11}
    1540:	e12fff1e 	bx	lr

00001544 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack(void)
{
    1544:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1548:	e28db000 	add	r11, sp, #0
    154c:	e24dd00c 	sub	sp, sp, #12
    int stack, mode;
    stack = A9_ONCHIP_END - 7;      // top of A9 onchip memory, aligned to 8 bytes
    1550:	e3e03007 	mvn	r3, #7
    1554:	e50b3008 	str	r3, [r11, #-8]
    /* change processor to IRQ mode with interrupts disabled */
    mode = INT_DISABLE | IRQ_MODE;
    1558:	e3a030d2 	mov	r3, #210	; 0xd2
    155c:	e50b300c 	str	r3, [r11, #-12]
    asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
    1560:	e51b300c 	ldr	r3, [r11, #-12]
    1564:	e129f003 	msr	CPSR_fc, r3
    /* set banked stack pointer */
    asm("mov sp, %[ps]" : : [ps] "r" (stack));
    1568:	e51b3008 	ldr	r3, [r11, #-8]
    156c:	e1a0d003 	mov	sp, r3

    /* go back to SVC mode before executing subroutine return! */
    mode = INT_DISABLE | SVC_MODE;
    1570:	e3a030d3 	mov	r3, #211	; 0xd3
    1574:	e50b300c 	str	r3, [r11, #-12]
    asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
    1578:	e51b300c 	ldr	r3, [r11, #-12]
    157c:	e129f003 	msr	CPSR_fc, r3
}
    1580:	e28bd000 	add	sp, r11, #0
    1584:	e8bd0800 	ldmfd	sp!, {r11}
    1588:	e12fff1e 	bx	lr

0000158c <enable_A9_interrupts>:

void enable_A9_interrupts(void)
{
    158c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1590:	e28db000 	add	r11, sp, #0
    1594:	e24dd00c 	sub	sp, sp, #12
    int status = SVC_MODE | INT_ENABLE;
    1598:	e3a03053 	mov	r3, #83	; 0x53
    159c:	e50b3008 	str	r3, [r11, #-8]
    asm("msr cpsr, %[ps]" : : [ps]"r"(status));
    15a0:	e51b3008 	ldr	r3, [r11, #-8]
    15a4:	e129f003 	msr	CPSR_fc, r3
}
    15a8:	e28bd000 	add	sp, r11, #0
    15ac:	e8bd0800 	ldmfd	sp!, {r11}
    15b0:	e12fff1e 	bx	lr

000015b4 <config_GIC>:

void config_GIC(void) // STEP 3 IN SECTION 3.1 OF USING THE ARM GENERIC INTERRUPT CONTROLLER
{
    15b4:	e92d4800 	push	{r11, lr}
    15b8:	e28db004 	add	r11, sp, #4
    15bc:	e24dd008 	sub	sp, sp, #8
    int address;
    // config_interrupt (KEYS_IRQ, CPU0);
    // config_interrupt(MPCORE_PRIV_TIMER_IRQ, CPU0);
    config_interrupt (PS2_IRQ, CPU0);
    15c0:	e3a0004f 	mov	r0, #79	; 0x4f
    15c4:	e3a01001 	mov	r1, #1
    15c8:	eb00001c 	bl	1640 <config_interrupt>
    config_interrupt (HPS_TIMER0_IRQ, CPU0);
    15cc:	e3a000c7 	mov	r0, #199	; 0xc7
    15d0:	e3a01001 	mov	r1, #1
    15d4:	eb000019 	bl	1640 <config_interrupt>
    config_interrupt (HPS_TIMER1_IRQ, CPU0);
    15d8:	e3a000c8 	mov	r0, #200	; 0xc8
    15dc:	e3a01001 	mov	r1, #1
    15e0:	eb000016 	bl	1640 <config_interrupt>
    config_interrupt (HPS_TIMER2_IRQ, CPU0);
    15e4:	e3a000c9 	mov	r0, #201	; 0xc9
    15e8:	e3a01001 	mov	r1, #1
    15ec:	eb000013 	bl	1640 <config_interrupt>

    // Set Interrupt Priority Mask Register (ICCPMR). Enable interrupts of all priorities 
    address = MPCORE_GIC_CPUIF + ICCPMR;
    15f0:	e30c3104 	movw	r3, #49412	; 0xc104
    15f4:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    15f8:	e50b3008 	str	r3, [r11, #-8]
    *(int *) address = 0xFFFF;       
    15fc:	e51b3008 	ldr	r3, [r11, #-8]
    1600:	e30f2fff 	movw	r2, #65535	; 0xffff
    1604:	e5832000 	str	r2, [r3]

    // Set CPU Interface Control Register (ICCICR). Enable signaling of interrupts
    address = MPCORE_GIC_CPUIF + ICCICR;
    1608:	e3a03cc1 	mov	r3, #49408	; 0xc100
    160c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1610:	e50b3008 	str	r3, [r11, #-8]
    *(int *) address = 1;       
    1614:	e51b3008 	ldr	r3, [r11, #-8]
    1618:	e3a02001 	mov	r2, #1
    161c:	e5832000 	str	r2, [r3]

    // Configure the Distributor Control Register (ICDDCR) to send pending interrupts to CPUs 
    address = MPCORE_GIC_DIST + ICDDCR;
    1620:	e3a03a0d 	mov	r3, #53248	; 0xd000
    1624:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1628:	e50b3008 	str	r3, [r11, #-8]
    *(int *) address = 1;          
    162c:	e51b3008 	ldr	r3, [r11, #-8]
    1630:	e3a02001 	mov	r2, #1
    1634:	e5832000 	str	r2, [r3]
}
    1638:	e24bd004 	sub	sp, r11, #4
    163c:	e8bd8800 	pop	{r11, pc}

00001640 <config_interrupt>:

void config_interrupt (int N, int CPU_target)
{
    1640:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1644:	e28db000 	add	r11, sp, #0
    1648:	e24dd01c 	sub	sp, sp, #28
    164c:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
    1650:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
    int reg_offset, index, value, address;
    
    /* Configure the Interrupt Set-Enable Registers (ICDISERn). 
     * reg_offset = (integer_div(N / 32) * 4
     * value = 1 << (N mod 32) */
    reg_offset = (N >> 3) & 0xFFFFFFFC; 
    1654:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1658:	e1a031c3 	asr	r3, r3, #3
    165c:	e3c33003 	bic	r3, r3, #3
    1660:	e50b3008 	str	r3, [r11, #-8]
    index = N & 0x1F;
    1664:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1668:	e203301f 	and	r3, r3, #31
    166c:	e50b300c 	str	r3, [r11, #-12]
    value = 0x1 << index;
    1670:	e3a02001 	mov	r2, #1
    1674:	e51b300c 	ldr	r3, [r11, #-12]
    1678:	e1a03312 	lsl	r3, r2, r3
    167c:	e50b3010 	str	r3, [r11, #-16]
    address = MPCORE_GIC_DIST + ICDISER + reg_offset;
    1680:	e51b3008 	ldr	r3, [r11, #-8]
    1684:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
    1688:	e2433c03 	sub	r3, r3, #768	; 0x300
    168c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    /* Now that we know the register address and value, set the appropriate bit */
   *(int *)address |= value;
    1690:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    1694:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    1698:	e5921000 	ldr	r1, [r2]
    169c:	e51b2010 	ldr	r2, [r11, #-16]
    16a0:	e1812002 	orr	r2, r1, r2
    16a4:	e5832000 	str	r2, [r3]

    /* Configure the Interrupt Processor Targets Register (ICDIPTRn)
     * reg_offset = integer_div(N / 4) * 4
     * index = N mod 4 */
    reg_offset = (N & 0xFFFFFFFC);
    16a8:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    16ac:	e3c33003 	bic	r3, r3, #3
    16b0:	e50b3008 	str	r3, [r11, #-8]
    index = N & 0x3;
    16b4:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    16b8:	e2033003 	and	r3, r3, #3
    16bc:	e50b300c 	str	r3, [r11, #-12]
    address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
    16c0:	e51b2008 	ldr	r2, [r11, #-8]
    16c4:	e51b300c 	ldr	r3, [r11, #-12]
    16c8:	e0823003 	add	r3, r2, r3
    16cc:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
    16d0:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    /* Now that we know the register address and value, write to (only) the appropriate byte */
    *(char *)address = (char) CPU_target;
    16d4:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    16d8:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    16dc:	e6ef2072 	uxtb	r2, r2
    16e0:	e5c32000 	strb	r2, [r3]
}
    16e4:	e28bd000 	add	sp, r11, #0
    16e8:	e8bd0800 	ldmfd	sp!, {r11}
    16ec:	e12fff1e 	bx	lr

000016f0 <configInterupt>:

void configInterupt()
{
    16f0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    16f4:	e28db000 	add	r11, sp, #0
    16f8:	e24dd014 	sub	sp, sp, #20
    volatile int* timerPtr = (int*) MPCORE_PRIV_TIMER;      // timer base address
    16fc:	e3a03cc6 	mov	r3, #50688	; 0xc600
    1700:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1704:	e50b3008 	str	r3, [r11, #-8]

    volatile int* HPSTimer0Ptr = (int*) HPS_TIMER0_BASE;
    1708:	e3a03902 	mov	r3, #32768	; 0x8000
    170c:	e34f3fc0 	movt	r3, #65472	; 0xffc0
    1710:	e50b300c 	str	r3, [r11, #-12]

    volatile int* HPSTimer1Ptr = (int*) HPS_TIMER1_BASE;
    1714:	e3a03a09 	mov	r3, #36864	; 0x9000
    1718:	e34f3fc0 	movt	r3, #65472	; 0xffc0
    171c:	e50b3010 	str	r3, [r11, #-16]

    volatile int* HPSTimer2Ptr = (int*) HPS_TIMER2_BASE;
    1720:	e3a03000 	mov	r3, #0
    1724:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    1728:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec

    // Private Timer
    *(timerPtr) = 2000;             // Interrupt every 0.001s
    172c:	e51b3008 	ldr	r3, [r11, #-8]
    1730:	e3a02e7d 	mov	r2, #2000	; 0x7d0
    1734:	e5832000 	str	r2, [r3]
    *(timerPtr + 2) |= (100 << 8);  // Prescale 100
    1738:	e51b3008 	ldr	r3, [r11, #-8]
    173c:	e2833008 	add	r3, r3, #8
    1740:	e51b2008 	ldr	r2, [r11, #-8]
    1744:	e2822008 	add	r2, r2, #8
    1748:	e5922000 	ldr	r2, [r2]
    174c:	e3822b19 	orr	r2, r2, #25600	; 0x6400
    1750:	e5832000 	str	r2, [r3]
    *(timerPtr + 2) |= 0x07;        // Turn on I, A, and E
    1754:	e51b3008 	ldr	r3, [r11, #-8]
    1758:	e2833008 	add	r3, r3, #8
    175c:	e51b2008 	ldr	r2, [r11, #-8]
    1760:	e2822008 	add	r2, r2, #8
    1764:	e5922000 	ldr	r2, [r2]
    1768:	e3822007 	orr	r2, r2, #7
    176c:	e5832000 	str	r2, [r3]

    // HPS0
    *(HPSTimer0Ptr + 2) &= ~(1 << 0);    // E = 0
    1770:	e51b300c 	ldr	r3, [r11, #-12]
    1774:	e2833008 	add	r3, r3, #8
    1778:	e51b200c 	ldr	r2, [r11, #-12]
    177c:	e2822008 	add	r2, r2, #8
    1780:	e5922000 	ldr	r2, [r2]
    1784:	e3c22001 	bic	r2, r2, #1
    1788:	e5832000 	str	r2, [r3]
    *(HPSTimer0Ptr) = 25000000;         // load value
    178c:	e51b200c 	ldr	r2, [r11, #-12]
    1790:	e3073840 	movw	r3, #30784	; 0x7840
    1794:	e340317d 	movt	r3, #381	; 0x17d
    1798:	e5823000 	str	r3, [r2]
    *(HPSTimer0Ptr + 2) |= (1 << 1);     // M = 1
    179c:	e51b300c 	ldr	r3, [r11, #-12]
    17a0:	e2833008 	add	r3, r3, #8
    17a4:	e51b200c 	ldr	r2, [r11, #-12]
    17a8:	e2822008 	add	r2, r2, #8
    17ac:	e5922000 	ldr	r2, [r2]
    17b0:	e3822002 	orr	r2, r2, #2
    17b4:	e5832000 	str	r2, [r3]
    *(HPSTimer0Ptr + 2) |= (1 << 0);     // E = 1
    17b8:	e51b300c 	ldr	r3, [r11, #-12]
    17bc:	e2833008 	add	r3, r3, #8
    17c0:	e51b200c 	ldr	r2, [r11, #-12]
    17c4:	e2822008 	add	r2, r2, #8
    17c8:	e5922000 	ldr	r2, [r2]
    17cc:	e3822001 	orr	r2, r2, #1
    17d0:	e5832000 	str	r2, [r3]
    *(HPSTimer0Ptr + 2) &= ~(1 << 2);    // I = 0 Active low
    17d4:	e51b300c 	ldr	r3, [r11, #-12]
    17d8:	e2833008 	add	r3, r3, #8
    17dc:	e51b200c 	ldr	r2, [r11, #-12]
    17e0:	e2822008 	add	r2, r2, #8
    17e4:	e5922000 	ldr	r2, [r2]
    17e8:	e3c22004 	bic	r2, r2, #4
    17ec:	e5832000 	str	r2, [r3]

    // HPS1
    *(HPSTimer1Ptr + 2) &= ~(1 << 0); // E = 0
    17f0:	e51b3010 	ldr	r3, [r11, #-16]
    17f4:	e2833008 	add	r3, r3, #8
    17f8:	e51b2010 	ldr	r2, [r11, #-16]
    17fc:	e2822008 	add	r2, r2, #8
    1800:	e5922000 	ldr	r2, [r2]
    1804:	e3c22001 	bic	r2, r2, #1
    1808:	e5832000 	str	r2, [r3]
    *(HPSTimer1Ptr) = 1000000; // load value
    180c:	e51b2010 	ldr	r2, [r11, #-16]
    1810:	e3043240 	movw	r3, #16960	; 0x4240
    1814:	e340300f 	movt	r3, #15
    1818:	e5823000 	str	r3, [r2]
    *(HPSTimer1Ptr + 2) |= (1 << 1); // M = 1
    181c:	e51b3010 	ldr	r3, [r11, #-16]
    1820:	e2833008 	add	r3, r3, #8
    1824:	e51b2010 	ldr	r2, [r11, #-16]
    1828:	e2822008 	add	r2, r2, #8
    182c:	e5922000 	ldr	r2, [r2]
    1830:	e3822002 	orr	r2, r2, #2
    1834:	e5832000 	str	r2, [r3]
    *(HPSTimer1Ptr + 2) |= (1 << 0); // E = 1
    1838:	e51b3010 	ldr	r3, [r11, #-16]
    183c:	e2833008 	add	r3, r3, #8
    1840:	e51b2010 	ldr	r2, [r11, #-16]
    1844:	e2822008 	add	r2, r2, #8
    1848:	e5922000 	ldr	r2, [r2]
    184c:	e3822001 	orr	r2, r2, #1
    1850:	e5832000 	str	r2, [r3]
    *(HPSTimer1Ptr + 2) &= ~(1 << 2); // I = 0
    1854:	e51b3010 	ldr	r3, [r11, #-16]
    1858:	e2833008 	add	r3, r3, #8
    185c:	e51b2010 	ldr	r2, [r11, #-16]
    1860:	e2822008 	add	r2, r2, #8
    1864:	e5922000 	ldr	r2, [r2]
    1868:	e3c22004 	bic	r2, r2, #4
    186c:	e5832000 	str	r2, [r3]

    // HPS2 used for ADC
    *(HPSTimer2Ptr + 2) &= ~(1 << 0); // E = 0
    1870:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    1874:	e2833008 	add	r3, r3, #8
    1878:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    187c:	e2822008 	add	r2, r2, #8
    1880:	e5922000 	ldr	r2, [r2]
    1884:	e3c22001 	bic	r2, r2, #1
    1888:	e5832000 	str	r2, [r3]
    *(HPSTimer2Ptr) = 25000; // load value
    188c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    1890:	e30621a8 	movw	r2, #25000	; 0x61a8
    1894:	e5832000 	str	r2, [r3]
    *(HPSTimer2Ptr + 2) |= (1 << 1); // M = 1
    1898:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    189c:	e2833008 	add	r3, r3, #8
    18a0:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    18a4:	e2822008 	add	r2, r2, #8
    18a8:	e5922000 	ldr	r2, [r2]
    18ac:	e3822002 	orr	r2, r2, #2
    18b0:	e5832000 	str	r2, [r3]
    *(HPSTimer2Ptr + 2) |= (1 << 0); // E = 1
    18b4:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    18b8:	e2833008 	add	r3, r3, #8
    18bc:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    18c0:	e2822008 	add	r2, r2, #8
    18c4:	e5922000 	ldr	r2, [r2]
    18c8:	e3822001 	orr	r2, r2, #1
    18cc:	e5832000 	str	r2, [r3]
    *(HPSTimer2Ptr + 2) &= ~(1 << 2); // I = 0
    18d0:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    18d4:	e2833008 	add	r3, r3, #8
    18d8:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    18dc:	e2822008 	add	r2, r2, #8
    18e0:	e5922000 	ldr	r2, [r2]
    18e4:	e3c22004 	bic	r2, r2, #4
    18e8:	e5832000 	str	r2, [r3]

//  *(KEY_ptr + 2) = 0x01;       // enable interrupts for KEY0
}
    18ec:	e28bd000 	add	sp, r11, #0
    18f0:	e8bd0800 	ldmfd	sp!, {r11}
    18f4:	e12fff1e 	bx	lr

000018f8 <ADC_Get>:
#include "Numbers.h"
#include "JTAG_UART.h"

//**Funtion Code**//
void ADC_Get(void)
{
    18f8:	e92d4800 	push	{r11, lr}
    18fc:	e28db004 	add	r11, sp, #4
    1900:	e24dd018 	sub	sp, sp, #24
	volatile int* ADCptr = (int*)ADC_BASE;
    1904:	e3a03901 	mov	r3, #16384	; 0x4000
    1908:	e34f3f20 	movt	r3, #65312	; 0xff20
    190c:	e50b3008 	str	r3, [r11, #-8]
    volatile int* channelTwo = (int*)0xFF204008; // ADC_BASE + 2
    1910:	e3043008 	movw	r3, #16392	; 0x4008
    1914:	e34f3f20 	movt	r3, #65312	; 0xff20
    1918:	e50b300c 	str	r3, [r11, #-12]
    *(ADCptr + 1) |= (1);                        // Set ADC to auto mode
    191c:	e51b3008 	ldr	r3, [r11, #-8]
    1920:	e2833004 	add	r3, r3, #4
    1924:	e51b2008 	ldr	r2, [r11, #-8]
    1928:	e2822004 	add	r2, r2, #4
    192c:	e5922000 	ldr	r2, [r2]
    1930:	e3822001 	orr	r2, r2, #1
    1934:	e5832000 	str	r2, [r3]

    static int analogCounter;
    static unsigned long analogValue;
    static double currentValue;

	analogCounter++;
    1938:	e3033db0 	movw	r3, #15792	; 0x3db0
    193c:	e3403000 	movt	r3, #0
    1940:	e5933000 	ldr	r3, [r3]
    1944:	e2832001 	add	r2, r3, #1
    1948:	e3033db0 	movw	r3, #15792	; 0x3db0
    194c:	e3403000 	movt	r3, #0
    1950:	e5832000 	str	r2, [r3]
    analogValue = analogValue + ( (*channelTwo) & 0xFFF); // sample the adc
    1954:	e51b300c 	ldr	r3, [r11, #-12]
    1958:	e5933000 	ldr	r3, [r3]
    195c:	e1a03a03 	lsl	r3, r3, #20
    1960:	e1a03a23 	lsr	r3, r3, #20
    1964:	e3032db4 	movw	r2, #15796	; 0x3db4
    1968:	e3402000 	movt	r2, #0
    196c:	e5922000 	ldr	r2, [r2]
    1970:	e0832002 	add	r2, r3, r2
    1974:	e3033db4 	movw	r3, #15796	; 0x3db4
    1978:	e3403000 	movt	r3, #0
    197c:	e5832000 	str	r2, [r3]

    if(analogCounter == 1000)
    1980:	e3033db0 	movw	r3, #15792	; 0x3db0
    1984:	e3403000 	movt	r3, #0
    1988:	e5933000 	ldr	r3, [r3]
    198c:	e3530ffa 	cmp	r3, #1000	; 0x3e8
    1990:	1a000095 	bne	1bec <ADC_Get+0x2f4>
    {
        analogValue = analogValue / 1000; // average it
    1994:	e3033db4 	movw	r3, #15796	; 0x3db4
    1998:	e3403000 	movt	r3, #0
    199c:	e5932000 	ldr	r2, [r3]
    19a0:	e3043dd3 	movw	r3, #19923	; 0x4dd3
    19a4:	e3413062 	movt	r3, #4194	; 0x1062
    19a8:	e0831293 	umull	r1, r3, r3, r2
    19ac:	e1a02323 	lsr	r2, r3, #6
    19b0:	e3033db4 	movw	r3, #15796	; 0x3db4
    19b4:	e3403000 	movt	r3, #0
    19b8:	e5832000 	str	r2, [r3]
        currentValue = ( (analogValue)  / 7.3 );
    19bc:	e3033db4 	movw	r3, #15796	; 0x3db4
    19c0:	e3403000 	movt	r3, #0
    19c4:	e5933000 	ldr	r3, [r3]
    19c8:	e1a00003 	mov	r0, r3
    19cc:	eb0002f8 	bl	25b4 <__aeabi_ui2d>
    19d0:	e1a02000 	mov	r2, r0
    19d4:	e1a03001 	mov	r3, r1
    19d8:	e1a00002 	mov	r0, r2
    19dc:	e1a01003 	mov	r1, r3
    19e0:	e3032333 	movw	r2, #13107	; 0x3333
    19e4:	e3432333 	movt	r2, #13107	; 0x3333
    19e8:	e3033333 	movw	r3, #13107	; 0x3333
    19ec:	e344301d 	movt	r3, #16413	; 0x401d
    19f0:	eb0003d3 	bl	2944 <__aeabi_ddiv>
    19f4:	e1a02000 	mov	r2, r0
    19f8:	e1a03001 	mov	r3, r1
    19fc:	e1a00002 	mov	r0, r2
    1a00:	e1a01003 	mov	r1, r3
    1a04:	e3033db8 	movw	r3, #15800	; 0x3db8
    1a08:	e3403000 	movt	r3, #0
    1a0c:	e1c300f0 	strd	r0, [r3]
        PrintADC(currentValue);
    1a10:	e3033db8 	movw	r3, #15800	; 0x3db8
    1a14:	e3403000 	movt	r3, #0
    1a18:	e1c320d0 	ldrd	r2, [r3]
    1a1c:	e1a00002 	mov	r0, r2
    1a20:	e1a01003 	mov	r1, r3
    1a24:	eb000449 	bl	2b50 <__aeabi_d2iz>
    1a28:	e1a03000 	mov	r3, r0
    1a2c:	e1a00003 	mov	r0, r3
    1a30:	eb00006f 	bl	1bf4 <PrintADC>
		analogValue = 0;
    1a34:	e3033db4 	movw	r3, #15796	; 0x3db4
    1a38:	e3403000 	movt	r3, #0
    1a3c:	e3a02000 	mov	r2, #0
    1a40:	e5832000 	str	r2, [r3]
        analogCounter = 0;
    1a44:	e3033db0 	movw	r3, #15792	; 0x3db0
    1a48:	e3403000 	movt	r3, #0
    1a4c:	e3a02000 	mov	r2, #0
    1a50:	e5832000 	str	r2, [r3]

//**Debug**//
        struct Digits analogValueSeparated;
    	struct Digits currentValueSeparated;

        currentValueSeparated = DigitSeparator(currentValue);
    1a54:	e3033db8 	movw	r3, #15800	; 0x3db8
    1a58:	e3403000 	movt	r3, #0
    1a5c:	e1c320d0 	ldrd	r2, [r3]
    1a60:	e1a00002 	mov	r0, r2
    1a64:	e1a01003 	mov	r1, r3
    1a68:	eb000438 	bl	2b50 <__aeabi_d2iz>
    1a6c:	e1a03000 	mov	r3, r0
    1a70:	e1a00003 	mov	r0, r3
    1a74:	eb00019e 	bl	20f4 <DigitSeparator>
    1a78:	e54b001c 	strb	r0, [r11, #-28]	; 0xffffffe4
    1a7c:	e7e73450 	ubfx	r3, r0, #8, #8
    1a80:	e54b301b 	strb	r3, [r11, #-27]	; 0xffffffe5
    1a84:	e7e73850 	ubfx	r3, r0, #16, #8
    1a88:	e54b301a 	strb	r3, [r11, #-26]	; 0xffffffe6
    1a8c:	e7e73c50 	ubfx	r3, r0, #24, #8
    1a90:	e54b3019 	strb	r3, [r11, #-25]	; 0xffffffe7
    1a94:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    1a98:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
        analogValueSeparated  = DigitSeparator(analogValue);
    1a9c:	e3033db4 	movw	r3, #15796	; 0x3db4
    1aa0:	e3403000 	movt	r3, #0
    1aa4:	e5933000 	ldr	r3, [r3]
    1aa8:	e1a00003 	mov	r0, r3
    1aac:	eb000190 	bl	20f4 <DigitSeparator>
    1ab0:	e54b001c 	strb	r0, [r11, #-28]	; 0xffffffe4
    1ab4:	e7e73450 	ubfx	r3, r0, #8, #8
    1ab8:	e54b301b 	strb	r3, [r11, #-27]	; 0xffffffe5
    1abc:	e7e73850 	ubfx	r3, r0, #16, #8
    1ac0:	e54b301a 	strb	r3, [r11, #-26]	; 0xffffffe6
    1ac4:	e7e73c50 	ubfx	r3, r0, #24, #8
    1ac8:	e54b3019 	strb	r3, [r11, #-25]	; 0xffffffe7
    1acc:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    1ad0:	e50b3010 	str	r3, [r11, #-16]

        //ADC:
        put_jtag('A');
    1ad4:	e3a00041 	mov	r0, #65	; 0x41
    1ad8:	ebfffe18 	bl	1340 <put_jtag>
        put_jtag('D');
    1adc:	e3a00044 	mov	r0, #68	; 0x44
    1ae0:	ebfffe16 	bl	1340 <put_jtag>
        put_jtag('C');
    1ae4:	e3a00043 	mov	r0, #67	; 0x43
    1ae8:	ebfffe14 	bl	1340 <put_jtag>
        put_jtag(':');
    1aec:	e3a0003a 	mov	r0, #58	; 0x3a
    1af0:	ebfffe12 	bl	1340 <put_jtag>
        put_jtag(' ');
    1af4:	e3a00020 	mov	r0, #32
    1af8:	ebfffe10 	bl	1340 <put_jtag>

        put_jtag(GetDigit(analogValueSeparated.thousands));
    1afc:	e55b3010 	ldrb	r3, [r11, #-16]
    1b00:	e1a00003 	mov	r0, r3
    1b04:	ebfffe38 	bl	13ec <GetDigit>
    1b08:	e1a03000 	mov	r3, r0
    1b0c:	e1a00003 	mov	r0, r3
    1b10:	ebfffe0a 	bl	1340 <put_jtag>
        put_jtag(GetDigit(analogValueSeparated.hundreds));
    1b14:	e55b300f 	ldrb	r3, [r11, #-15]
    1b18:	e1a00003 	mov	r0, r3
    1b1c:	ebfffe32 	bl	13ec <GetDigit>
    1b20:	e1a03000 	mov	r3, r0
    1b24:	e1a00003 	mov	r0, r3
    1b28:	ebfffe04 	bl	1340 <put_jtag>
        put_jtag(GetDigit(analogValueSeparated.tens));
    1b2c:	e55b300e 	ldrb	r3, [r11, #-14]
    1b30:	e1a00003 	mov	r0, r3
    1b34:	ebfffe2c 	bl	13ec <GetDigit>
    1b38:	e1a03000 	mov	r3, r0
    1b3c:	e1a00003 	mov	r0, r3
    1b40:	ebfffdfe 	bl	1340 <put_jtag>
        put_jtag(GetDigit(analogValueSeparated.ones));
    1b44:	e55b300d 	ldrb	r3, [r11, #-13]
    1b48:	e1a00003 	mov	r0, r3
    1b4c:	ebfffe26 	bl	13ec <GetDigit>
    1b50:	e1a03000 	mov	r3, r0
    1b54:	e1a00003 	mov	r0, r3
    1b58:	ebfffdf8 	bl	1340 <put_jtag>
        put_jtag('\n');
    1b5c:	e3a0000a 	mov	r0, #10
    1b60:	ebfffdf6 	bl	1340 <put_jtag>

		//Current:
        put_jtag('I');
    1b64:	e3a00049 	mov	r0, #73	; 0x49
    1b68:	ebfffdf4 	bl	1340 <put_jtag>
        put_jtag(':');
    1b6c:	e3a0003a 	mov	r0, #58	; 0x3a
    1b70:	ebfffdf2 	bl	1340 <put_jtag>
        put_jtag(' ');
    1b74:	e3a00020 	mov	r0, #32
    1b78:	ebfffdf0 	bl	1340 <put_jtag>

        put_jtag(GetDigit(currentValueSeparated.thousands));
    1b7c:	e55b3014 	ldrb	r3, [r11, #-20]	; 0xffffffec
    1b80:	e1a00003 	mov	r0, r3
    1b84:	ebfffe18 	bl	13ec <GetDigit>
    1b88:	e1a03000 	mov	r3, r0
    1b8c:	e1a00003 	mov	r0, r3
    1b90:	ebfffdea 	bl	1340 <put_jtag>
        put_jtag(GetDigit(currentValueSeparated.hundreds));
    1b94:	e55b3013 	ldrb	r3, [r11, #-19]	; 0xffffffed
    1b98:	e1a00003 	mov	r0, r3
    1b9c:	ebfffe12 	bl	13ec <GetDigit>
    1ba0:	e1a03000 	mov	r3, r0
    1ba4:	e1a00003 	mov	r0, r3
    1ba8:	ebfffde4 	bl	1340 <put_jtag>
        put_jtag(GetDigit(currentValueSeparated.tens));
    1bac:	e55b3012 	ldrb	r3, [r11, #-18]	; 0xffffffee
    1bb0:	e1a00003 	mov	r0, r3
    1bb4:	ebfffe0c 	bl	13ec <GetDigit>
    1bb8:	e1a03000 	mov	r3, r0
    1bbc:	e1a00003 	mov	r0, r3
    1bc0:	ebfffdde 	bl	1340 <put_jtag>
        put_jtag(GetDigit(currentValueSeparated.ones));
    1bc4:	e55b3011 	ldrb	r3, [r11, #-17]	; 0xffffffef
    1bc8:	e1a00003 	mov	r0, r3
    1bcc:	ebfffe06 	bl	13ec <GetDigit>
    1bd0:	e1a03000 	mov	r3, r0
    1bd4:	e1a00003 	mov	r0, r3
    1bd8:	ebfffdd8 	bl	1340 <put_jtag>
        put_jtag('\n');
    1bdc:	e3a0000a 	mov	r0, #10
    1be0:	ebfffdd6 	bl	1340 <put_jtag>

        put_jtag('\n');
    1be4:	e3a0000a 	mov	r0, #10
    1be8:	ebfffdd4 	bl	1340 <put_jtag>
    }
}
    1bec:	e24bd004 	sub	sp, r11, #4
    1bf0:	e8bd8800 	pop	{r11, pc}

00001bf4 <PrintADC>:

void PrintADC(long value)
{
    1bf4:	e92d4810 	push	{r4, r11, lr}
    1bf8:	e28db008 	add	r11, sp, #8
    1bfc:	e24dd034 	sub	sp, sp, #52	; 0x34
    1c00:	e50b0010 	str	r0, [r11, #-16]
	current = ADC_Splitter(value);
    1c04:	e3034e08 	movw	r4, #15880	; 0x3e08
    1c08:	e3404000 	movt	r4, #0
    1c0c:	e24b302c 	sub	r3, r11, #44	; 0x2c
    1c10:	e1a00003 	mov	r0, r3
    1c14:	e51b1010 	ldr	r1, [r11, #-16]
    1c18:	eb000025 	bl	1cb4 <ADC_Splitter>
    1c1c:	e1a0c004 	mov	r12, r4
    1c20:	e24be02c 	sub	lr, r11, #44	; 0x2c
    1c24:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    1c28:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
    1c2c:	e89e0003 	ldm	lr, {r0, r1}
    1c30:	e88c0003 	stm	r12, {r0, r1}
	current = ADCCharacters(current);
    1c34:	e3034e08 	movw	r4, #15880	; 0x3e08
    1c38:	e3404000 	movt	r4, #0
    1c3c:	e24be02c 	sub	lr, r11, #44	; 0x2c
    1c40:	e3033e08 	movw	r3, #15880	; 0x3e08
    1c44:	e3403000 	movt	r3, #0
    1c48:	e1a0c00d 	mov	r12, sp
    1c4c:	e283200c 	add	r2, r3, #12
    1c50:	e8920007 	ldm	r2, {r0, r1, r2}
    1c54:	e88c0007 	stm	r12, {r0, r1, r2}
    1c58:	e893000e 	ldm	r3, {r1, r2, r3}
    1c5c:	e1a0000e 	mov	r0, lr
    1c60:	eb000052 	bl	1db0 <ADCCharacters>
    1c64:	e1a0c004 	mov	r12, r4
    1c68:	e24be02c 	sub	lr, r11, #44	; 0x2c
    1c6c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    1c70:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
    1c74:	e89e0003 	ldm	lr, {r0, r1}
    1c78:	e88c0003 	stm	r12, {r0, r1}
	if(current.cTotal[0] == '0')
    1c7c:	e3033e08 	movw	r3, #15880	; 0x3e08
    1c80:	e3403000 	movt	r3, #0
    1c84:	e5d33013 	ldrb	r3, [r3, #19]
    1c88:	e3530030 	cmp	r3, #48	; 0x30
    1c8c:	1a000003 	bne	1ca0 <PrintADC+0xac>
		current.cTotal[0] = ' ';
    1c90:	e3033e08 	movw	r3, #15880	; 0x3e08
    1c94:	e3403000 	movt	r3, #0
    1c98:	e3a02020 	mov	r2, #32
    1c9c:	e5c32013 	strb	r2, [r3, #19]
	Current_Write(current.cTotal);
    1ca0:	e59f0008 	ldr	r0, [pc, #8]	; 1cb0 <PrintADC+0xbc>
    1ca4:	ebfffb73 	bl	a78 <Current_Write>
}
    1ca8:	e24bd008 	sub	sp, r11, #8
    1cac:	e8bd8810 	pop	{r4, r11, pc}
    1cb0:	00003e1b 	.word	0x00003e1b

00001cb4 <ADC_Splitter>:

struct Monitor ADC_Splitter(long value)
{
    1cb4:	e92d0810 	push	{r4, r11}
    1cb8:	e28db004 	add	r11, sp, #4
    1cbc:	e24dd020 	sub	sp, sp, #32
    1cc0:	e50b0020 	str	r0, [r11, #-32]	; 0xffffffe0
    1cc4:	e50b1024 	str	r1, [r11, #-36]	; 0xffffffdc
    struct Monitor current;

    current.iHundred  = (value / 100);
    1cc8:	e51b2024 	ldr	r2, [r11, #-36]	; 0xffffffdc
    1ccc:	e308351f 	movw	r3, #34079	; 0x851f
    1cd0:	e34531eb 	movt	r3, #20971	; 0x51eb
    1cd4:	e0c31293 	smull	r1, r3, r3, r2
    1cd8:	e1a012c3 	asr	r1, r3, #5
    1cdc:	e1a03fc2 	asr	r3, r2, #31
    1ce0:	e0633001 	rsb	r3, r3, r1
    1ce4:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
    current.iTen      = ((value % 100) / 10);
    1ce8:	e51b2024 	ldr	r2, [r11, #-36]	; 0xffffffdc
    1cec:	e308351f 	movw	r3, #34079	; 0x851f
    1cf0:	e34531eb 	movt	r3, #20971	; 0x51eb
    1cf4:	e0c31293 	smull	r1, r3, r3, r2
    1cf8:	e1a012c3 	asr	r1, r3, #5
    1cfc:	e1a03fc2 	asr	r3, r2, #31
    1d00:	e0633001 	rsb	r3, r3, r1
    1d04:	e3a01064 	mov	r1, #100	; 0x64
    1d08:	e0030391 	mul	r3, r1, r3
    1d0c:	e0633002 	rsb	r3, r3, r2
    1d10:	e3062667 	movw	r2, #26215	; 0x6667
    1d14:	e3462666 	movt	r2, #26214	; 0x6666
    1d18:	e0c21392 	smull	r1, r2, r2, r3
    1d1c:	e1a02142 	asr	r2, r2, #2
    1d20:	e1a03fc3 	asr	r3, r3, #31
    1d24:	e0633002 	rsb	r3, r3, r2
    1d28:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
    current.iOne      = ((value % 100)% 10);
    1d2c:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    1d30:	e308251f 	movw	r2, #34079	; 0x851f
    1d34:	e34521eb 	movt	r2, #20971	; 0x51eb
    1d38:	e0c21392 	smull	r1, r2, r2, r3
    1d3c:	e1a012c2 	asr	r1, r2, #5
    1d40:	e1a02fc3 	asr	r2, r3, #31
    1d44:	e0622001 	rsb	r2, r2, r1
    1d48:	e3a01064 	mov	r1, #100	; 0x64
    1d4c:	e0020291 	mul	r2, r1, r2
    1d50:	e0622003 	rsb	r2, r2, r3
    1d54:	e3063667 	movw	r3, #26215	; 0x6667
    1d58:	e3463666 	movt	r3, #26214	; 0x6666
    1d5c:	e0c31293 	smull	r1, r3, r3, r2
    1d60:	e1a01143 	asr	r1, r3, #2
    1d64:	e1a03fc2 	asr	r3, r2, #31
    1d68:	e0631001 	rsb	r1, r3, r1
    1d6c:	e1a03001 	mov	r3, r1
    1d70:	e1a03103 	lsl	r3, r3, #2
    1d74:	e0833001 	add	r3, r3, r1
    1d78:	e1a03083 	lsl	r3, r3, #1
    1d7c:	e0631002 	rsb	r1, r3, r2
    1d80:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec

    return current;
    1d84:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    1d88:	e1a0c003 	mov	r12, r3
    1d8c:	e24b401c 	sub	r4, r11, #28
    1d90:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
    1d94:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
    1d98:	e8940003 	ldm	r4, {r0, r1}
    1d9c:	e88c0003 	stm	r12, {r0, r1}
}
    1da0:	e51b0020 	ldr	r0, [r11, #-32]	; 0xffffffe0
    1da4:	e24bd004 	sub	sp, r11, #4
    1da8:	e8bd0810 	pop	{r4, r11}
    1dac:	e12fff1e 	bx	lr

00001db0 <ADCCharacters>:

struct Monitor ADCCharacters (struct Monitor current)
{
    1db0:	e24dd010 	sub	sp, sp, #16
    1db4:	e92d4810 	push	{r4, r11, lr}
    1db8:	e28db008 	add	r11, sp, #8
    1dbc:	e24dd00c 	sub	sp, sp, #12
    1dc0:	e50b0010 	str	r0, [r11, #-16]
    1dc4:	e28b0008 	add	r0, r11, #8
    1dc8:	e880000e 	stm	r0, {r1, r2, r3}
	current.cTotal[0] = GetCharacter(current.iHundred);
    1dcc:	e59b3008 	ldr	r3, [r11, #8]
    1dd0:	e1a00003 	mov	r0, r3
    1dd4:	eb000017 	bl	1e38 <GetCharacter>
    1dd8:	e1a03000 	mov	r3, r0
    1ddc:	e5cb301b 	strb	r3, [r11, #27]
	current.cTotal[1] = GetCharacter(current.iTen);
    1de0:	e59b300c 	ldr	r3, [r11, #12]
    1de4:	e1a00003 	mov	r0, r3
    1de8:	eb000012 	bl	1e38 <GetCharacter>
    1dec:	e1a03000 	mov	r3, r0
    1df0:	e5cb301c 	strb	r3, [r11, #28]
	current.cTotal[2] = GetCharacter(current.iOne);
    1df4:	e59b3010 	ldr	r3, [r11, #16]
    1df8:	e1a00003 	mov	r0, r3
    1dfc:	eb00000d 	bl	1e38 <GetCharacter>
    1e00:	e1a03000 	mov	r3, r0
    1e04:	e5cb301d 	strb	r3, [r11, #29]
	return current;
    1e08:	e51b3010 	ldr	r3, [r11, #-16]
    1e0c:	e1a0c003 	mov	r12, r3
    1e10:	e28b4008 	add	r4, r11, #8
    1e14:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
    1e18:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
    1e1c:	e8940003 	ldm	r4, {r0, r1}
    1e20:	e88c0003 	stm	r12, {r0, r1}
    1e24:	e51b0010 	ldr	r0, [r11, #-16]
    1e28:	e24bd008 	sub	sp, r11, #8
    1e2c:	e8bd4810 	pop	{r4, r11, lr}
    1e30:	e28dd010 	add	sp, sp, #16
    1e34:	e12fff1e 	bx	lr

00001e38 <GetCharacter>:
struct Monitor actrpm;
struct Monitor current;


char GetCharacter(int key)
{
    1e38:	e92d0810 	push	{r4, r11}
    1e3c:	e28db004 	add	r11, sp, #4
    1e40:	e24dd038 	sub	sp, sp, #56	; 0x38
    1e44:	e50b0038 	str	r0, [r11, #-56]	; 0xffffffc8
	const int array[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
    1e48:	e3033890 	movw	r3, #14480	; 0x3890
    1e4c:	e3403000 	movt	r3, #0
    1e50:	e24bc030 	sub	r12, r11, #48	; 0x30
    1e54:	e1a04003 	mov	r4, r3
    1e58:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
    1e5c:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
    1e60:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
    1e64:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
    1e68:	e8940003 	ldm	r4, {r0, r1}
    1e6c:	e88c0003 	stm	r12, {r0, r1}
	char ckey = array[key];
    1e70:	e51b2038 	ldr	r2, [r11, #-56]	; 0xffffffc8
    1e74:	e3e0302b 	mvn	r3, #43	; 0x2b
    1e78:	e1a02102 	lsl	r2, r2, #2
    1e7c:	e24b1004 	sub	r1, r11, #4
    1e80:	e0812002 	add	r2, r1, r2
    1e84:	e0823003 	add	r3, r2, r3
    1e88:	e5933000 	ldr	r3, [r3]
    1e8c:	e54b3005 	strb	r3, [r11, #-5]
	return ckey;
    1e90:	e55b3005 	ldrb	r3, [r11, #-5]
}
    1e94:	e1a00003 	mov	r0, r3
    1e98:	e24bd004 	sub	sp, r11, #4
    1e9c:	e8bd0810 	pop	{r4, r11}
    1ea0:	e12fff1e 	bx	lr

00001ea4 <Clear_inprpm>:

void Clear_inprpm(void)
{
    1ea4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1ea8:	e28db000 	add	r11, sp, #0
	inprpm.iHundred = 0;
    1eac:	e3033dc0 	movw	r3, #15808	; 0x3dc0
    1eb0:	e3403000 	movt	r3, #0
    1eb4:	e3a02000 	mov	r2, #0
    1eb8:	e5832000 	str	r2, [r3]
	inprpm.iTen = 0;
    1ebc:	e3033dc0 	movw	r3, #15808	; 0x3dc0
    1ec0:	e3403000 	movt	r3, #0
    1ec4:	e3a02000 	mov	r2, #0
    1ec8:	e5832004 	str	r2, [r3, #4]
	inprpm.iOne = 0;
    1ecc:	e3033dc0 	movw	r3, #15808	; 0x3dc0
    1ed0:	e3403000 	movt	r3, #0
    1ed4:	e3a02000 	mov	r2, #0
    1ed8:	e5832008 	str	r2, [r3, #8]
	inprpm.iTotal = 0;
    1edc:	e3033dc0 	movw	r3, #15808	; 0x3dc0
    1ee0:	e3403000 	movt	r3, #0
    1ee4:	e3a02000 	mov	r2, #0
    1ee8:	e583200c 	str	r2, [r3, #12]

	inprpm.cHundred = ' ';
    1eec:	e3033dc0 	movw	r3, #15808	; 0x3dc0
    1ef0:	e3403000 	movt	r3, #0
    1ef4:	e3a02020 	mov	r2, #32
    1ef8:	e5c32010 	strb	r2, [r3, #16]
	inprpm.cTen = ' ';
    1efc:	e3033dc0 	movw	r3, #15808	; 0x3dc0
    1f00:	e3403000 	movt	r3, #0
    1f04:	e3a02020 	mov	r2, #32
    1f08:	e5c32011 	strb	r2, [r3, #17]
	inprpm.cOne = ' ';
    1f0c:	e3033dc0 	movw	r3, #15808	; 0x3dc0
    1f10:	e3403000 	movt	r3, #0
    1f14:	e3a02020 	mov	r2, #32
    1f18:	e5c32012 	strb	r2, [r3, #18]
	inprpm.cTotal[0] = ' ';
    1f1c:	e3033dc0 	movw	r3, #15808	; 0x3dc0
    1f20:	e3403000 	movt	r3, #0
    1f24:	e3a02020 	mov	r2, #32
    1f28:	e5c32013 	strb	r2, [r3, #19]
	inprpm.cTotal[1] = ' ';
    1f2c:	e3033dc0 	movw	r3, #15808	; 0x3dc0
    1f30:	e3403000 	movt	r3, #0
    1f34:	e3a02020 	mov	r2, #32
    1f38:	e5c32014 	strb	r2, [r3, #20]
	inprpm.cTotal[2] = ' ';
    1f3c:	e3033dc0 	movw	r3, #15808	; 0x3dc0
    1f40:	e3403000 	movt	r3, #0
    1f44:	e3a02020 	mov	r2, #32
    1f48:	e5c32015 	strb	r2, [r3, #21]
}
    1f4c:	e28bd000 	add	sp, r11, #0
    1f50:	e8bd0800 	ldmfd	sp!, {r11}
    1f54:	e12fff1e 	bx	lr

00001f58 <Total_inprpm>:

void Total_inprpm(void)
{
    1f58:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1f5c:	e28db000 	add	r11, sp, #0
    1f60:	e24dd00c 	sub	sp, sp, #12
	int hundred = inprpm.iHundred;
    1f64:	e3033dc0 	movw	r3, #15808	; 0x3dc0
    1f68:	e3403000 	movt	r3, #0
    1f6c:	e5933000 	ldr	r3, [r3]
    1f70:	e50b3008 	str	r3, [r11, #-8]
	int ten = inprpm.iTen;
    1f74:	e3033dc0 	movw	r3, #15808	; 0x3dc0
    1f78:	e3403000 	movt	r3, #0
    1f7c:	e5933004 	ldr	r3, [r3, #4]
    1f80:	e50b300c 	str	r3, [r11, #-12]

	hundred = inprpm.iHundred * 100;
    1f84:	e3033dc0 	movw	r3, #15808	; 0x3dc0
    1f88:	e3403000 	movt	r3, #0
    1f8c:	e5933000 	ldr	r3, [r3]
    1f90:	e3a02064 	mov	r2, #100	; 0x64
    1f94:	e0030392 	mul	r3, r2, r3
    1f98:	e50b3008 	str	r3, [r11, #-8]
	ten = inprpm.iTen * 10;
    1f9c:	e3033dc0 	movw	r3, #15808	; 0x3dc0
    1fa0:	e3403000 	movt	r3, #0
    1fa4:	e5932004 	ldr	r2, [r3, #4]
    1fa8:	e1a03002 	mov	r3, r2
    1fac:	e1a03103 	lsl	r3, r3, #2
    1fb0:	e0833002 	add	r3, r3, r2
    1fb4:	e1a03083 	lsl	r3, r3, #1
    1fb8:	e50b300c 	str	r3, [r11, #-12]
	inprpm.iTotal = hundred + ten + inprpm.iOne;
    1fbc:	e51b2008 	ldr	r2, [r11, #-8]
    1fc0:	e51b300c 	ldr	r3, [r11, #-12]
    1fc4:	e0822003 	add	r2, r2, r3
    1fc8:	e3033dc0 	movw	r3, #15808	; 0x3dc0
    1fcc:	e3403000 	movt	r3, #0
    1fd0:	e5933008 	ldr	r3, [r3, #8]
    1fd4:	e0822003 	add	r2, r2, r3
    1fd8:	e3033dc0 	movw	r3, #15808	; 0x3dc0
    1fdc:	e3403000 	movt	r3, #0
    1fe0:	e583200c 	str	r2, [r3, #12]
}
    1fe4:	e28bd000 	add	sp, r11, #0
    1fe8:	e8bd0800 	ldmfd	sp!, {r11}
    1fec:	e12fff1e 	bx	lr

00001ff0 <InitializeStructs>:

//**Function Code**//
void InitializeStructs(void)
{
    1ff0:	e92d0810 	push	{r4, r11}
    1ff4:	e28db004 	add	r11, sp, #4
	inprpm.iHundred = 0;
    1ff8:	e3033dc0 	movw	r3, #15808	; 0x3dc0
    1ffc:	e3403000 	movt	r3, #0
    2000:	e3a02000 	mov	r2, #0
    2004:	e5832000 	str	r2, [r3]
	inprpm.iTen = 0;
    2008:	e3033dc0 	movw	r3, #15808	; 0x3dc0
    200c:	e3403000 	movt	r3, #0
    2010:	e3a02000 	mov	r2, #0
    2014:	e5832004 	str	r2, [r3, #4]
	inprpm.iOne = 0;
    2018:	e3033dc0 	movw	r3, #15808	; 0x3dc0
    201c:	e3403000 	movt	r3, #0
    2020:	e3a02000 	mov	r2, #0
    2024:	e5832008 	str	r2, [r3, #8]
	inprpm.iTotal = 0;
    2028:	e3033dc0 	movw	r3, #15808	; 0x3dc0
    202c:	e3403000 	movt	r3, #0
    2030:	e3a02000 	mov	r2, #0
    2034:	e583200c 	str	r2, [r3, #12]

	inprpm.cHundred = ' ';
    2038:	e3033dc0 	movw	r3, #15808	; 0x3dc0
    203c:	e3403000 	movt	r3, #0
    2040:	e3a02020 	mov	r2, #32
    2044:	e5c32010 	strb	r2, [r3, #16]
	inprpm.cTen = ' ';
    2048:	e3033dc0 	movw	r3, #15808	; 0x3dc0
    204c:	e3403000 	movt	r3, #0
    2050:	e3a02020 	mov	r2, #32
    2054:	e5c32011 	strb	r2, [r3, #17]
	inprpm.cOne = ' ';
    2058:	e3033dc0 	movw	r3, #15808	; 0x3dc0
    205c:	e3403000 	movt	r3, #0
    2060:	e3a02020 	mov	r2, #32
    2064:	e5c32012 	strb	r2, [r3, #18]
	inprpm.cTotal[0] = ' ';
    2068:	e3033dc0 	movw	r3, #15808	; 0x3dc0
    206c:	e3403000 	movt	r3, #0
    2070:	e3a02020 	mov	r2, #32
    2074:	e5c32013 	strb	r2, [r3, #19]
	inprpm.cTotal[1] = ' ';
    2078:	e3033dc0 	movw	r3, #15808	; 0x3dc0
    207c:	e3403000 	movt	r3, #0
    2080:	e3a02020 	mov	r2, #32
    2084:	e5c32014 	strb	r2, [r3, #20]
	inprpm.cTotal[2] = ' ';
    2088:	e3033dc0 	movw	r3, #15808	; 0x3dc0
    208c:	e3403000 	movt	r3, #0
    2090:	e3a02020 	mov	r2, #32
    2094:	e5c32015 	strb	r2, [r3, #21]

	setrpm = inprpm;
    2098:	e3032dd8 	movw	r2, #15832	; 0x3dd8
    209c:	e3402000 	movt	r2, #0
    20a0:	e3033dc0 	movw	r3, #15808	; 0x3dc0
    20a4:	e3403000 	movt	r3, #0
    20a8:	e1a0c002 	mov	r12, r2
    20ac:	e1a04003 	mov	r4, r3
    20b0:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
    20b4:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
    20b8:	e8940003 	ldm	r4, {r0, r1}
    20bc:	e88c0003 	stm	r12, {r0, r1}
	actrpm = inprpm;
    20c0:	e3032df0 	movw	r2, #15856	; 0x3df0
    20c4:	e3402000 	movt	r2, #0
    20c8:	e3033dc0 	movw	r3, #15808	; 0x3dc0
    20cc:	e3403000 	movt	r3, #0
    20d0:	e1a0c002 	mov	r12, r2
    20d4:	e1a04003 	mov	r4, r3
    20d8:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
    20dc:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
    20e0:	e8940003 	ldm	r4, {r0, r1}
    20e4:	e88c0003 	stm	r12, {r0, r1}
}
    20e8:	e24bd004 	sub	sp, r11, #4
    20ec:	e8bd0810 	pop	{r4, r11}
    20f0:	e12fff1e 	bx	lr

000020f4 <DigitSeparator>:

/***************************************************************************************************
Function Definitions:
***************************************************************************************************/
struct Digits DigitSeparator(int number)
{
    20f4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    20f8:	e28db000 	add	r11, sp, #0
    20fc:	e24dd014 	sub	sp, sp, #20
    2100:	e50b0010 	str	r0, [r11, #-16]
    struct Digits numberSeparated;

    numberSeparated.thousands = number / 1000;
    2104:	e51b2010 	ldr	r2, [r11, #-16]
    2108:	e3043dd3 	movw	r3, #19923	; 0x4dd3
    210c:	e3413062 	movt	r3, #4194	; 0x1062
    2110:	e0c31293 	smull	r1, r3, r3, r2
    2114:	e1a01343 	asr	r1, r3, #6
    2118:	e1a03fc2 	asr	r3, r2, #31
    211c:	e0633001 	rsb	r3, r3, r1
    2120:	e6ef3073 	uxtb	r3, r3
    2124:	e54b300c 	strb	r3, [r11, #-12]
    numberSeparated.hundreds  = (number % 1000) / 100;
    2128:	e51b2010 	ldr	r2, [r11, #-16]
    212c:	e3043dd3 	movw	r3, #19923	; 0x4dd3
    2130:	e3413062 	movt	r3, #4194	; 0x1062
    2134:	e0c31293 	smull	r1, r3, r3, r2
    2138:	e1a01343 	asr	r1, r3, #6
    213c:	e1a03fc2 	asr	r3, r2, #31
    2140:	e0633001 	rsb	r3, r3, r1
    2144:	e3a01ffa 	mov	r1, #1000	; 0x3e8
    2148:	e0030391 	mul	r3, r1, r3
    214c:	e0633002 	rsb	r3, r3, r2
    2150:	e308251f 	movw	r2, #34079	; 0x851f
    2154:	e34521eb 	movt	r2, #20971	; 0x51eb
    2158:	e0c21392 	smull	r1, r2, r2, r3
    215c:	e1a022c2 	asr	r2, r2, #5
    2160:	e1a03fc3 	asr	r3, r3, #31
    2164:	e0633002 	rsb	r3, r3, r2
    2168:	e6ef3073 	uxtb	r3, r3
    216c:	e54b300b 	strb	r3, [r11, #-11]
    numberSeparated.tens      = ((number % 1000) % 100) / 10;
    2170:	e51b2010 	ldr	r2, [r11, #-16]
    2174:	e3043dd3 	movw	r3, #19923	; 0x4dd3
    2178:	e3413062 	movt	r3, #4194	; 0x1062
    217c:	e0c31293 	smull	r1, r3, r3, r2
    2180:	e1a01343 	asr	r1, r3, #6
    2184:	e1a03fc2 	asr	r3, r2, #31
    2188:	e0633001 	rsb	r3, r3, r1
    218c:	e3a01ffa 	mov	r1, #1000	; 0x3e8
    2190:	e0030391 	mul	r3, r1, r3
    2194:	e0633002 	rsb	r3, r3, r2
    2198:	e308251f 	movw	r2, #34079	; 0x851f
    219c:	e34521eb 	movt	r2, #20971	; 0x51eb
    21a0:	e0c21392 	smull	r1, r2, r2, r3
    21a4:	e1a012c2 	asr	r1, r2, #5
    21a8:	e1a02fc3 	asr	r2, r3, #31
    21ac:	e0622001 	rsb	r2, r2, r1
    21b0:	e3a01064 	mov	r1, #100	; 0x64
    21b4:	e0020291 	mul	r2, r1, r2
    21b8:	e0622003 	rsb	r2, r2, r3
    21bc:	e3063667 	movw	r3, #26215	; 0x6667
    21c0:	e3463666 	movt	r3, #26214	; 0x6666
    21c4:	e0c31293 	smull	r1, r3, r3, r2
    21c8:	e1a01143 	asr	r1, r3, #2
    21cc:	e1a03fc2 	asr	r3, r2, #31
    21d0:	e0633001 	rsb	r3, r3, r1
    21d4:	e6ef3073 	uxtb	r3, r3
    21d8:	e54b300a 	strb	r3, [r11, #-10]
    numberSeparated.ones      = (((number % 1000) % 100) % 10);
    21dc:	e51b2010 	ldr	r2, [r11, #-16]
    21e0:	e3043dd3 	movw	r3, #19923	; 0x4dd3
    21e4:	e3413062 	movt	r3, #4194	; 0x1062
    21e8:	e0c31293 	smull	r1, r3, r3, r2
    21ec:	e1a01343 	asr	r1, r3, #6
    21f0:	e1a03fc2 	asr	r3, r2, #31
    21f4:	e0633001 	rsb	r3, r3, r1
    21f8:	e3a01ffa 	mov	r1, #1000	; 0x3e8
    21fc:	e0030391 	mul	r3, r1, r3
    2200:	e0633002 	rsb	r3, r3, r2
    2204:	e308251f 	movw	r2, #34079	; 0x851f
    2208:	e34521eb 	movt	r2, #20971	; 0x51eb
    220c:	e0c21392 	smull	r1, r2, r2, r3
    2210:	e1a012c2 	asr	r1, r2, #5
    2214:	e1a02fc3 	asr	r2, r3, #31
    2218:	e0622001 	rsb	r2, r2, r1
    221c:	e3a01064 	mov	r1, #100	; 0x64
    2220:	e0020291 	mul	r2, r1, r2
    2224:	e0622003 	rsb	r2, r2, r3
    2228:	e3063667 	movw	r3, #26215	; 0x6667
    222c:	e3463666 	movt	r3, #26214	; 0x6666
    2230:	e0c31293 	smull	r1, r3, r3, r2
    2234:	e1a01143 	asr	r1, r3, #2
    2238:	e1a03fc2 	asr	r3, r2, #31
    223c:	e0631001 	rsb	r1, r3, r1
    2240:	e1a03001 	mov	r3, r1
    2244:	e1a03103 	lsl	r3, r3, #2
    2248:	e0833001 	add	r3, r3, r1
    224c:	e1a03083 	lsl	r3, r3, #1
    2250:	e0631002 	rsb	r1, r3, r2
    2254:	e6ef3071 	uxtb	r3, r1
    2258:	e54b3009 	strb	r3, [r11, #-9]

    return numberSeparated;
    225c:	e51b300c 	ldr	r3, [r11, #-12]
    2260:	e50b3008 	str	r3, [r11, #-8]
    2264:	e3a03000 	mov	r3, #0
    2268:	e55b2008 	ldrb	r2, [r11, #-8]
    226c:	e7c73012 	bfi	r3, r2, #0, #8
    2270:	e55b2007 	ldrb	r2, [r11, #-7]
    2274:	e7cf3412 	bfi	r3, r2, #8, #8
    2278:	e55b2006 	ldrb	r2, [r11, #-6]
    227c:	e7d73812 	bfi	r3, r2, #16, #8
    2280:	e55b2005 	ldrb	r2, [r11, #-5]
    2284:	e7df3c12 	bfi	r3, r2, #24, #8
    2288:	e1a00003 	mov	r0, r3
    228c:	e28bd000 	add	sp, r11, #0
    2290:	e8bd0800 	ldmfd	sp!, {r11}
    2294:	e12fff1e 	bx	lr

00002298 <__aeabi_drsub>:
    2298:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    229c:	ea000000 	b	22a4 <__adddf3>

000022a0 <__aeabi_dsub>:
    22a0:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

000022a4 <__adddf3>:
    22a4:	e92d4030 	push	{r4, r5, lr}
    22a8:	e1a04081 	lsl	r4, r1, #1
    22ac:	e1a05083 	lsl	r5, r3, #1
    22b0:	e1340005 	teq	r4, r5
    22b4:	01300002 	teqeq	r0, r2
    22b8:	1194c000 	orrsne	r12, r4, r0
    22bc:	1195c002 	orrsne	r12, r5, r2
    22c0:	11f0cac4 	mvnsne	r12, r4, asr #21
    22c4:	11f0cac5 	mvnsne	r12, r5, asr #21
    22c8:	0a00008c 	beq	2500 <__adddf3+0x25c>
    22cc:	e1a04aa4 	lsr	r4, r4, #21
    22d0:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    22d4:	b2655000 	rsblt	r5, r5, #0
    22d8:	da000006 	ble	22f8 <__adddf3+0x54>
    22dc:	e0844005 	add	r4, r4, r5
    22e0:	e0202002 	eor	r2, r0, r2
    22e4:	e0213003 	eor	r3, r1, r3
    22e8:	e0220000 	eor	r0, r2, r0
    22ec:	e0231001 	eor	r1, r3, r1
    22f0:	e0202002 	eor	r2, r0, r2
    22f4:	e0213003 	eor	r3, r1, r3
    22f8:	e3550036 	cmp	r5, #54	; 0x36
    22fc:	88bd4030 	pophi	{r4, r5, lr}
    2300:	812fff1e 	bxhi	lr
    2304:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    2308:	e1a01601 	lsl	r1, r1, #12
    230c:	e3a0c601 	mov	r12, #1048576	; 0x100000
    2310:	e18c1621 	orr	r1, r12, r1, lsr #12
    2314:	0a000001 	beq	2320 <__adddf3+0x7c>
    2318:	e2700000 	rsbs	r0, r0, #0
    231c:	e2e11000 	rsc	r1, r1, #0
    2320:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    2324:	e1a03603 	lsl	r3, r3, #12
    2328:	e18c3623 	orr	r3, r12, r3, lsr #12
    232c:	0a000001 	beq	2338 <__adddf3+0x94>
    2330:	e2722000 	rsbs	r2, r2, #0
    2334:	e2e33000 	rsc	r3, r3, #0
    2338:	e1340005 	teq	r4, r5
    233c:	0a000069 	beq	24e8 <__adddf3+0x244>
    2340:	e2444001 	sub	r4, r4, #1
    2344:	e275e020 	rsbs	lr, r5, #32
    2348:	ba000005 	blt	2364 <__adddf3+0xc0>
    234c:	e1a0ce12 	lsl	r12, r2, lr
    2350:	e0900532 	adds	r0, r0, r2, lsr r5
    2354:	e2a11000 	adc	r1, r1, #0
    2358:	e0900e13 	adds	r0, r0, r3, lsl lr
    235c:	e0b11553 	adcs	r1, r1, r3, asr r5
    2360:	ea000006 	b	2380 <__adddf3+0xdc>
    2364:	e2455020 	sub	r5, r5, #32
    2368:	e28ee020 	add	lr, lr, #32
    236c:	e3520001 	cmp	r2, #1
    2370:	e1a0ce13 	lsl	r12, r3, lr
    2374:	238cc002 	orrcs	r12, r12, #2
    2378:	e0900553 	adds	r0, r0, r3, asr r5
    237c:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    2380:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    2384:	5a000002 	bpl	2394 <__adddf3+0xf0>
    2388:	e27cc000 	rsbs	r12, r12, #0
    238c:	e2f00000 	rscs	r0, r0, #0
    2390:	e2e11000 	rsc	r1, r1, #0
    2394:	e3510601 	cmp	r1, #1048576	; 0x100000
    2398:	3a00000f 	bcc	23dc <__adddf3+0x138>
    239c:	e3510602 	cmp	r1, #2097152	; 0x200000
    23a0:	3a000006 	bcc	23c0 <__adddf3+0x11c>
    23a4:	e1b010a1 	lsrs	r1, r1, #1
    23a8:	e1b00060 	rrxs	r0, r0
    23ac:	e1a0c06c 	rrx	r12, r12
    23b0:	e2844001 	add	r4, r4, #1
    23b4:	e1a02a84 	lsl	r2, r4, #21
    23b8:	e3720501 	cmn	r2, #4194304	; 0x400000
    23bc:	2a00006b 	bcs	2570 <__adddf3+0x2cc>
    23c0:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    23c4:	01b0c0a0 	lsrseq	r12, r0, #1
    23c8:	e2b00000 	adcs	r0, r0, #0
    23cc:	e0a11a04 	adc	r1, r1, r4, lsl #20
    23d0:	e1811005 	orr	r1, r1, r5
    23d4:	e8bd4030 	pop	{r4, r5, lr}
    23d8:	e12fff1e 	bx	lr
    23dc:	e1b0c08c 	lsls	r12, r12, #1
    23e0:	e0b00000 	adcs	r0, r0, r0
    23e4:	e0a11001 	adc	r1, r1, r1
    23e8:	e3110601 	tst	r1, #1048576	; 0x100000
    23ec:	e2444001 	sub	r4, r4, #1
    23f0:	1afffff2 	bne	23c0 <__adddf3+0x11c>
    23f4:	e3310000 	teq	r1, #0
    23f8:	13a03014 	movne	r3, #20
    23fc:	03a03034 	moveq	r3, #52	; 0x34
    2400:	01a01000 	moveq	r1, r0
    2404:	03a00000 	moveq	r0, #0
    2408:	e1a02001 	mov	r2, r1
    240c:	e3520801 	cmp	r2, #65536	; 0x10000
    2410:	21a02822 	lsrcs	r2, r2, #16
    2414:	22433010 	subcs	r3, r3, #16
    2418:	e3520c01 	cmp	r2, #256	; 0x100
    241c:	21a02422 	lsrcs	r2, r2, #8
    2420:	22433008 	subcs	r3, r3, #8
    2424:	e3520010 	cmp	r2, #16
    2428:	21a02222 	lsrcs	r2, r2, #4
    242c:	22433004 	subcs	r3, r3, #4
    2430:	e3520004 	cmp	r2, #4
    2434:	22433002 	subcs	r3, r3, #2
    2438:	304330a2 	subcc	r3, r3, r2, lsr #1
    243c:	e04331a2 	sub	r3, r3, r2, lsr #3
    2440:	e2532020 	subs	r2, r3, #32
    2444:	aa000007 	bge	2468 <__adddf3+0x1c4>
    2448:	e292200c 	adds	r2, r2, #12
    244c:	da000004 	ble	2464 <__adddf3+0x1c0>
    2450:	e282c014 	add	r12, r2, #20
    2454:	e262200c 	rsb	r2, r2, #12
    2458:	e1a00c11 	lsl	r0, r1, r12
    245c:	e1a01231 	lsr	r1, r1, r2
    2460:	ea000004 	b	2478 <__adddf3+0x1d4>
    2464:	e2822014 	add	r2, r2, #20
    2468:	d262c020 	rsble	r12, r2, #32
    246c:	e1a01211 	lsl	r1, r1, r2
    2470:	d1811c30 	orrle	r1, r1, r0, lsr r12
    2474:	d1a00210 	lslle	r0, r0, r2
    2478:	e0544003 	subs	r4, r4, r3
    247c:	a0811a04 	addge	r1, r1, r4, lsl #20
    2480:	a1811005 	orrge	r1, r1, r5
    2484:	a8bd4030 	popge	{r4, r5, lr}
    2488:	a12fff1e 	bxge	lr
    248c:	e1e04004 	mvn	r4, r4
    2490:	e254401f 	subs	r4, r4, #31
    2494:	aa00000f 	bge	24d8 <__adddf3+0x234>
    2498:	e294400c 	adds	r4, r4, #12
    249c:	ca000006 	bgt	24bc <__adddf3+0x218>
    24a0:	e2844014 	add	r4, r4, #20
    24a4:	e2642020 	rsb	r2, r4, #32
    24a8:	e1a00430 	lsr	r0, r0, r4
    24ac:	e1800211 	orr	r0, r0, r1, lsl r2
    24b0:	e1851431 	orr	r1, r5, r1, lsr r4
    24b4:	e8bd4030 	pop	{r4, r5, lr}
    24b8:	e12fff1e 	bx	lr
    24bc:	e264400c 	rsb	r4, r4, #12
    24c0:	e2642020 	rsb	r2, r4, #32
    24c4:	e1a00230 	lsr	r0, r0, r2
    24c8:	e1800411 	orr	r0, r0, r1, lsl r4
    24cc:	e1a01005 	mov	r1, r5
    24d0:	e8bd4030 	pop	{r4, r5, lr}
    24d4:	e12fff1e 	bx	lr
    24d8:	e1a00431 	lsr	r0, r1, r4
    24dc:	e1a01005 	mov	r1, r5
    24e0:	e8bd4030 	pop	{r4, r5, lr}
    24e4:	e12fff1e 	bx	lr
    24e8:	e3340000 	teq	r4, #0
    24ec:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    24f0:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    24f4:	02844001 	addeq	r4, r4, #1
    24f8:	12455001 	subne	r5, r5, #1
    24fc:	eaffff8f 	b	2340 <__adddf3+0x9c>
    2500:	e1f0cac4 	mvns	r12, r4, asr #21
    2504:	11f0cac5 	mvnsne	r12, r5, asr #21
    2508:	0a00001d 	beq	2584 <__adddf3+0x2e0>
    250c:	e1340005 	teq	r4, r5
    2510:	01300002 	teqeq	r0, r2
    2514:	0a000004 	beq	252c <__adddf3+0x288>
    2518:	e194c000 	orrs	r12, r4, r0
    251c:	01a01003 	moveq	r1, r3
    2520:	01a00002 	moveq	r0, r2
    2524:	e8bd4030 	pop	{r4, r5, lr}
    2528:	e12fff1e 	bx	lr
    252c:	e1310003 	teq	r1, r3
    2530:	13a01000 	movne	r1, #0
    2534:	13a00000 	movne	r0, #0
    2538:	18bd4030 	popne	{r4, r5, lr}
    253c:	112fff1e 	bxne	lr
    2540:	e1b0caa4 	lsrs	r12, r4, #21
    2544:	1a000004 	bne	255c <__adddf3+0x2b8>
    2548:	e1b00080 	lsls	r0, r0, #1
    254c:	e0b11001 	adcs	r1, r1, r1
    2550:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    2554:	e8bd4030 	pop	{r4, r5, lr}
    2558:	e12fff1e 	bx	lr
    255c:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    2560:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    2564:	38bd4030 	popcc	{r4, r5, lr}
    2568:	312fff1e 	bxcc	lr
    256c:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    2570:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    2574:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    2578:	e3a00000 	mov	r0, #0
    257c:	e8bd4030 	pop	{r4, r5, lr}
    2580:	e12fff1e 	bx	lr
    2584:	e1f0cac4 	mvns	r12, r4, asr #21
    2588:	11a01003 	movne	r1, r3
    258c:	11a00002 	movne	r0, r2
    2590:	01f0cac5 	mvnseq	r12, r5, asr #21
    2594:	11a03001 	movne	r3, r1
    2598:	11a02000 	movne	r2, r0
    259c:	e1904601 	orrs	r4, r0, r1, lsl #12
    25a0:	01925603 	orrseq	r5, r2, r3, lsl #12
    25a4:	01310003 	teqeq	r1, r3
    25a8:	13811702 	orrne	r1, r1, #524288	; 0x80000
    25ac:	e8bd4030 	pop	{r4, r5, lr}
    25b0:	e12fff1e 	bx	lr

000025b4 <__aeabi_ui2d>:
    25b4:	e3300000 	teq	r0, #0
    25b8:	03a01000 	moveq	r1, #0
    25bc:	012fff1e 	bxeq	lr
    25c0:	e92d4030 	push	{r4, r5, lr}
    25c4:	e3a04b01 	mov	r4, #1024	; 0x400
    25c8:	e2844032 	add	r4, r4, #50	; 0x32
    25cc:	e3a05000 	mov	r5, #0
    25d0:	e3a01000 	mov	r1, #0
    25d4:	eaffff86 	b	23f4 <__adddf3+0x150>

000025d8 <__aeabi_i2d>:
    25d8:	e3300000 	teq	r0, #0
    25dc:	03a01000 	moveq	r1, #0
    25e0:	012fff1e 	bxeq	lr
    25e4:	e92d4030 	push	{r4, r5, lr}
    25e8:	e3a04b01 	mov	r4, #1024	; 0x400
    25ec:	e2844032 	add	r4, r4, #50	; 0x32
    25f0:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    25f4:	42600000 	rsbmi	r0, r0, #0
    25f8:	e3a01000 	mov	r1, #0
    25fc:	eaffff7c 	b	23f4 <__adddf3+0x150>

00002600 <__aeabi_f2d>:
    2600:	e1b02080 	lsls	r2, r0, #1
    2604:	e1a011c2 	asr	r1, r2, #3
    2608:	e1a01061 	rrx	r1, r1
    260c:	e1a00e02 	lsl	r0, r2, #28
    2610:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    2614:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    2618:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    261c:	112fff1e 	bxne	lr
    2620:	e3320000 	teq	r2, #0
    2624:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    2628:	012fff1e 	bxeq	lr
    262c:	e92d4030 	push	{r4, r5, lr}
    2630:	e3a04d0e 	mov	r4, #896	; 0x380
    2634:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    2638:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    263c:	eaffff6c 	b	23f4 <__adddf3+0x150>

00002640 <__aeabi_ul2d>:
    2640:	e1902001 	orrs	r2, r0, r1
    2644:	012fff1e 	bxeq	lr
    2648:	e92d4030 	push	{r4, r5, lr}
    264c:	e3a05000 	mov	r5, #0
    2650:	ea000006 	b	2670 <__aeabi_l2d+0x1c>

00002654 <__aeabi_l2d>:
    2654:	e1902001 	orrs	r2, r0, r1
    2658:	012fff1e 	bxeq	lr
    265c:	e92d4030 	push	{r4, r5, lr}
    2660:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    2664:	5a000001 	bpl	2670 <__aeabi_l2d+0x1c>
    2668:	e2700000 	rsbs	r0, r0, #0
    266c:	e2e11000 	rsc	r1, r1, #0
    2670:	e3a04b01 	mov	r4, #1024	; 0x400
    2674:	e2844032 	add	r4, r4, #50	; 0x32
    2678:	e1b0cb21 	lsrs	r12, r1, #22
    267c:	0affff44 	beq	2394 <__adddf3+0xf0>
    2680:	e3a02003 	mov	r2, #3
    2684:	e1b0c1ac 	lsrs	r12, r12, #3
    2688:	12822003 	addne	r2, r2, #3
    268c:	e1b0c1ac 	lsrs	r12, r12, #3
    2690:	12822003 	addne	r2, r2, #3
    2694:	e08221ac 	add	r2, r2, r12, lsr #3
    2698:	e2623020 	rsb	r3, r2, #32
    269c:	e1a0c310 	lsl	r12, r0, r3
    26a0:	e1a00230 	lsr	r0, r0, r2
    26a4:	e1800311 	orr	r0, r0, r1, lsl r3
    26a8:	e1a01231 	lsr	r1, r1, r2
    26ac:	e0844002 	add	r4, r4, r2
    26b0:	eaffff37 	b	2394 <__adddf3+0xf0>

000026b4 <__aeabi_dmul>:
    26b4:	e92d4070 	push	{r4, r5, r6, lr}
    26b8:	e3a0c0ff 	mov	r12, #255	; 0xff
    26bc:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    26c0:	e01c4a21 	ands	r4, r12, r1, lsr #20
    26c4:	101c5a23 	andsne	r5, r12, r3, lsr #20
    26c8:	1134000c 	teqne	r4, r12
    26cc:	1135000c 	teqne	r5, r12
    26d0:	0b000075 	bleq	28ac <__aeabi_dmul+0x1f8>
    26d4:	e0844005 	add	r4, r4, r5
    26d8:	e0216003 	eor	r6, r1, r3
    26dc:	e1c11a8c 	bic	r1, r1, r12, lsl #21
    26e0:	e1c33a8c 	bic	r3, r3, r12, lsl #21
    26e4:	e1905601 	orrs	r5, r0, r1, lsl #12
    26e8:	11925603 	orrsne	r5, r2, r3, lsl #12
    26ec:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    26f0:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    26f4:	0a00001d 	beq	2770 <__aeabi_dmul+0xbc>
    26f8:	e08ec290 	umull	r12, lr, r0, r2
    26fc:	e3a05000 	mov	r5, #0
    2700:	e0a5e291 	umlal	lr, r5, r1, r2
    2704:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    2708:	e0a5e390 	umlal	lr, r5, r0, r3
    270c:	e3a06000 	mov	r6, #0
    2710:	e0a65391 	umlal	r5, r6, r1, r3
    2714:	e33c0000 	teq	r12, #0
    2718:	138ee001 	orrne	lr, lr, #1
    271c:	e24440ff 	sub	r4, r4, #255	; 0xff
    2720:	e3560c02 	cmp	r6, #512	; 0x200
    2724:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    2728:	2a000002 	bcs	2738 <__aeabi_dmul+0x84>
    272c:	e1b0e08e 	lsls	lr, lr, #1
    2730:	e0b55005 	adcs	r5, r5, r5
    2734:	e0a66006 	adc	r6, r6, r6
    2738:	e1821586 	orr	r1, r2, r6, lsl #11
    273c:	e1811aa5 	orr	r1, r1, r5, lsr #21
    2740:	e1a00585 	lsl	r0, r5, #11
    2744:	e1800aae 	orr	r0, r0, lr, lsr #21
    2748:	e1a0e58e 	lsl	lr, lr, #11
    274c:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    2750:	835c0c07 	cmphi	r12, #1792	; 0x700
    2754:	8a000011 	bhi	27a0 <__aeabi_dmul+0xec>
    2758:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    275c:	01b0e0a0 	lsrseq	lr, r0, #1
    2760:	e2b00000 	adcs	r0, r0, #0
    2764:	e0a11a04 	adc	r1, r1, r4, lsl #20
    2768:	e8bd4070 	pop	{r4, r5, r6, lr}
    276c:	e12fff1e 	bx	lr
    2770:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    2774:	e1861001 	orr	r1, r6, r1
    2778:	e1800002 	orr	r0, r0, r2
    277c:	e0211003 	eor	r1, r1, r3
    2780:	e05440ac 	subs	r4, r4, r12, lsr #1
    2784:	c074500c 	rsbsgt	r5, r4, r12
    2788:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    278c:	c8bd4070 	popgt	{r4, r5, r6, lr}
    2790:	c12fff1e 	bxgt	lr
    2794:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    2798:	e3a0e000 	mov	lr, #0
    279c:	e2544001 	subs	r4, r4, #1
    27a0:	ca00005d 	bgt	291c <__aeabi_dmul+0x268>
    27a4:	e3740036 	cmn	r4, #54	; 0x36
    27a8:	d3a00000 	movle	r0, #0
    27ac:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    27b0:	d8bd4070 	pople	{r4, r5, r6, lr}
    27b4:	d12fff1e 	bxle	lr
    27b8:	e2644000 	rsb	r4, r4, #0
    27bc:	e2544020 	subs	r4, r4, #32
    27c0:	aa00001a 	bge	2830 <__aeabi_dmul+0x17c>
    27c4:	e294400c 	adds	r4, r4, #12
    27c8:	ca00000c 	bgt	2800 <__aeabi_dmul+0x14c>
    27cc:	e2844014 	add	r4, r4, #20
    27d0:	e2645020 	rsb	r5, r4, #32
    27d4:	e1a03510 	lsl	r3, r0, r5
    27d8:	e1a00430 	lsr	r0, r0, r4
    27dc:	e1800511 	orr	r0, r0, r1, lsl r5
    27e0:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    27e4:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    27e8:	e0900fa3 	adds	r0, r0, r3, lsr #31
    27ec:	e0a21431 	adc	r1, r2, r1, lsr r4
    27f0:	e19ee083 	orrs	lr, lr, r3, lsl #1
    27f4:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    27f8:	e8bd4070 	pop	{r4, r5, r6, lr}
    27fc:	e12fff1e 	bx	lr
    2800:	e264400c 	rsb	r4, r4, #12
    2804:	e2645020 	rsb	r5, r4, #32
    2808:	e1a03410 	lsl	r3, r0, r4
    280c:	e1a00530 	lsr	r0, r0, r5
    2810:	e1800411 	orr	r0, r0, r1, lsl r4
    2814:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    2818:	e0900fa3 	adds	r0, r0, r3, lsr #31
    281c:	e2a11000 	adc	r1, r1, #0
    2820:	e19ee083 	orrs	lr, lr, r3, lsl #1
    2824:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    2828:	e8bd4070 	pop	{r4, r5, r6, lr}
    282c:	e12fff1e 	bx	lr
    2830:	e2645020 	rsb	r5, r4, #32
    2834:	e18ee510 	orr	lr, lr, r0, lsl r5
    2838:	e1a03430 	lsr	r3, r0, r4
    283c:	e1833511 	orr	r3, r3, r1, lsl r5
    2840:	e1a00431 	lsr	r0, r1, r4
    2844:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    2848:	e1c00431 	bic	r0, r0, r1, lsr r4
    284c:	e0800fa3 	add	r0, r0, r3, lsr #31
    2850:	e19ee083 	orrs	lr, lr, r3, lsl #1
    2854:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    2858:	e8bd4070 	pop	{r4, r5, r6, lr}
    285c:	e12fff1e 	bx	lr
    2860:	e3340000 	teq	r4, #0
    2864:	1a000008 	bne	288c <__aeabi_dmul+0x1d8>
    2868:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    286c:	e1b00080 	lsls	r0, r0, #1
    2870:	e0a11001 	adc	r1, r1, r1
    2874:	e3110601 	tst	r1, #1048576	; 0x100000
    2878:	02444001 	subeq	r4, r4, #1
    287c:	0afffffa 	beq	286c <__aeabi_dmul+0x1b8>
    2880:	e1811006 	orr	r1, r1, r6
    2884:	e3350000 	teq	r5, #0
    2888:	112fff1e 	bxne	lr
    288c:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    2890:	e1b02082 	lsls	r2, r2, #1
    2894:	e0a33003 	adc	r3, r3, r3
    2898:	e3130601 	tst	r3, #1048576	; 0x100000
    289c:	02455001 	subeq	r5, r5, #1
    28a0:	0afffffa 	beq	2890 <__aeabi_dmul+0x1dc>
    28a4:	e1833006 	orr	r3, r3, r6
    28a8:	e12fff1e 	bx	lr
    28ac:	e134000c 	teq	r4, r12
    28b0:	e00c5a23 	and	r5, r12, r3, lsr #20
    28b4:	1135000c 	teqne	r5, r12
    28b8:	0a000007 	beq	28dc <__aeabi_dmul+0x228>
    28bc:	e1906081 	orrs	r6, r0, r1, lsl #1
    28c0:	11926083 	orrsne	r6, r2, r3, lsl #1
    28c4:	1affffe5 	bne	2860 <__aeabi_dmul+0x1ac>
    28c8:	e0211003 	eor	r1, r1, r3
    28cc:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    28d0:	e3a00000 	mov	r0, #0
    28d4:	e8bd4070 	pop	{r4, r5, r6, lr}
    28d8:	e12fff1e 	bx	lr
    28dc:	e1906081 	orrs	r6, r0, r1, lsl #1
    28e0:	01a00002 	moveq	r0, r2
    28e4:	01a01003 	moveq	r1, r3
    28e8:	11926083 	orrsne	r6, r2, r3, lsl #1
    28ec:	0a000010 	beq	2934 <__aeabi_dmul+0x280>
    28f0:	e134000c 	teq	r4, r12
    28f4:	1a000001 	bne	2900 <__aeabi_dmul+0x24c>
    28f8:	e1906601 	orrs	r6, r0, r1, lsl #12
    28fc:	1a00000c 	bne	2934 <__aeabi_dmul+0x280>
    2900:	e135000c 	teq	r5, r12
    2904:	1a000003 	bne	2918 <__aeabi_dmul+0x264>
    2908:	e1926603 	orrs	r6, r2, r3, lsl #12
    290c:	11a00002 	movne	r0, r2
    2910:	11a01003 	movne	r1, r3
    2914:	1a000006 	bne	2934 <__aeabi_dmul+0x280>
    2918:	e0211003 	eor	r1, r1, r3
    291c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    2920:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    2924:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    2928:	e3a00000 	mov	r0, #0
    292c:	e8bd4070 	pop	{r4, r5, r6, lr}
    2930:	e12fff1e 	bx	lr
    2934:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    2938:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    293c:	e8bd4070 	pop	{r4, r5, r6, lr}
    2940:	e12fff1e 	bx	lr

00002944 <__aeabi_ddiv>:
    2944:	e92d4070 	push	{r4, r5, r6, lr}
    2948:	e3a0c0ff 	mov	r12, #255	; 0xff
    294c:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    2950:	e01c4a21 	ands	r4, r12, r1, lsr #20
    2954:	101c5a23 	andsne	r5, r12, r3, lsr #20
    2958:	1134000c 	teqne	r4, r12
    295c:	1135000c 	teqne	r5, r12
    2960:	0b00005e 	bleq	2ae0 <__aeabi_ddiv+0x19c>
    2964:	e0444005 	sub	r4, r4, r5
    2968:	e021e003 	eor	lr, r1, r3
    296c:	e1925603 	orrs	r5, r2, r3, lsl #12
    2970:	e1a01601 	lsl	r1, r1, #12
    2974:	0a00004c 	beq	2aac <__aeabi_ddiv+0x168>
    2978:	e1a03603 	lsl	r3, r3, #12
    297c:	e3a05201 	mov	r5, #268435456	; 0x10000000
    2980:	e1853223 	orr	r3, r5, r3, lsr #4
    2984:	e1833c22 	orr	r3, r3, r2, lsr #24
    2988:	e1a02402 	lsl	r2, r2, #8
    298c:	e1855221 	orr	r5, r5, r1, lsr #4
    2990:	e1855c20 	orr	r5, r5, r0, lsr #24
    2994:	e1a06400 	lsl	r6, r0, #8
    2998:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    299c:	e1550003 	cmp	r5, r3
    29a0:	01560002 	cmpeq	r6, r2
    29a4:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    29a8:	e2844c03 	add	r4, r4, #768	; 0x300
    29ac:	2a000001 	bcs	29b8 <__aeabi_ddiv+0x74>
    29b0:	e1b030a3 	lsrs	r3, r3, #1
    29b4:	e1a02062 	rrx	r2, r2
    29b8:	e0566002 	subs	r6, r6, r2
    29bc:	e0c55003 	sbc	r5, r5, r3
    29c0:	e1b030a3 	lsrs	r3, r3, #1
    29c4:	e1a02062 	rrx	r2, r2
    29c8:	e3a00601 	mov	r0, #1048576	; 0x100000
    29cc:	e3a0c702 	mov	r12, #524288	; 0x80000
    29d0:	e056e002 	subs	lr, r6, r2
    29d4:	e0d5e003 	sbcs	lr, r5, r3
    29d8:	20466002 	subcs	r6, r6, r2
    29dc:	21a0500e 	movcs	r5, lr
    29e0:	2180000c 	orrcs	r0, r0, r12
    29e4:	e1b030a3 	lsrs	r3, r3, #1
    29e8:	e1a02062 	rrx	r2, r2
    29ec:	e056e002 	subs	lr, r6, r2
    29f0:	e0d5e003 	sbcs	lr, r5, r3
    29f4:	20466002 	subcs	r6, r6, r2
    29f8:	21a0500e 	movcs	r5, lr
    29fc:	218000ac 	orrcs	r0, r0, r12, lsr #1
    2a00:	e1b030a3 	lsrs	r3, r3, #1
    2a04:	e1a02062 	rrx	r2, r2
    2a08:	e056e002 	subs	lr, r6, r2
    2a0c:	e0d5e003 	sbcs	lr, r5, r3
    2a10:	20466002 	subcs	r6, r6, r2
    2a14:	21a0500e 	movcs	r5, lr
    2a18:	2180012c 	orrcs	r0, r0, r12, lsr #2
    2a1c:	e1b030a3 	lsrs	r3, r3, #1
    2a20:	e1a02062 	rrx	r2, r2
    2a24:	e056e002 	subs	lr, r6, r2
    2a28:	e0d5e003 	sbcs	lr, r5, r3
    2a2c:	20466002 	subcs	r6, r6, r2
    2a30:	21a0500e 	movcs	r5, lr
    2a34:	218001ac 	orrcs	r0, r0, r12, lsr #3
    2a38:	e195e006 	orrs	lr, r5, r6
    2a3c:	0a00000d 	beq	2a78 <__aeabi_ddiv+0x134>
    2a40:	e1a05205 	lsl	r5, r5, #4
    2a44:	e1855e26 	orr	r5, r5, r6, lsr #28
    2a48:	e1a06206 	lsl	r6, r6, #4
    2a4c:	e1a03183 	lsl	r3, r3, #3
    2a50:	e1833ea2 	orr	r3, r3, r2, lsr #29
    2a54:	e1a02182 	lsl	r2, r2, #3
    2a58:	e1b0c22c 	lsrs	r12, r12, #4
    2a5c:	1affffdb 	bne	29d0 <__aeabi_ddiv+0x8c>
    2a60:	e3110601 	tst	r1, #1048576	; 0x100000
    2a64:	1a000006 	bne	2a84 <__aeabi_ddiv+0x140>
    2a68:	e1811000 	orr	r1, r1, r0
    2a6c:	e3a00000 	mov	r0, #0
    2a70:	e3a0c102 	mov	r12, #-2147483648	; 0x80000000
    2a74:	eaffffd5 	b	29d0 <__aeabi_ddiv+0x8c>
    2a78:	e3110601 	tst	r1, #1048576	; 0x100000
    2a7c:	01811000 	orreq	r1, r1, r0
    2a80:	03a00000 	moveq	r0, #0
    2a84:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    2a88:	835c0c07 	cmphi	r12, #1792	; 0x700
    2a8c:	8affff43 	bhi	27a0 <__aeabi_dmul+0xec>
    2a90:	e055c003 	subs	r12, r5, r3
    2a94:	0056c002 	subseq	r12, r6, r2
    2a98:	01b0c0a0 	lsrseq	r12, r0, #1
    2a9c:	e2b00000 	adcs	r0, r0, #0
    2aa0:	e0a11a04 	adc	r1, r1, r4, lsl #20
    2aa4:	e8bd4070 	pop	{r4, r5, r6, lr}
    2aa8:	e12fff1e 	bx	lr
    2aac:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    2ab0:	e18e1621 	orr	r1, lr, r1, lsr #12
    2ab4:	e09440ac 	adds	r4, r4, r12, lsr #1
    2ab8:	c074500c 	rsbsgt	r5, r4, r12
    2abc:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    2ac0:	c8bd4070 	popgt	{r4, r5, r6, lr}
    2ac4:	c12fff1e 	bxgt	lr
    2ac8:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    2acc:	e3a0e000 	mov	lr, #0
    2ad0:	e2544001 	subs	r4, r4, #1
    2ad4:	eaffff31 	b	27a0 <__aeabi_dmul+0xec>
    2ad8:	e185e006 	orr	lr, r5, r6
    2adc:	eaffff2f 	b	27a0 <__aeabi_dmul+0xec>
    2ae0:	e00c5a23 	and	r5, r12, r3, lsr #20
    2ae4:	e134000c 	teq	r4, r12
    2ae8:	0135000c 	teqeq	r5, r12
    2aec:	0affff90 	beq	2934 <__aeabi_dmul+0x280>
    2af0:	e134000c 	teq	r4, r12
    2af4:	1a000006 	bne	2b14 <__aeabi_ddiv+0x1d0>
    2af8:	e1904601 	orrs	r4, r0, r1, lsl #12
    2afc:	1affff8c 	bne	2934 <__aeabi_dmul+0x280>
    2b00:	e135000c 	teq	r5, r12
    2b04:	1affff83 	bne	2918 <__aeabi_dmul+0x264>
    2b08:	e1a00002 	mov	r0, r2
    2b0c:	e1a01003 	mov	r1, r3
    2b10:	eaffff87 	b	2934 <__aeabi_dmul+0x280>
    2b14:	e135000c 	teq	r5, r12
    2b18:	1a000004 	bne	2b30 <__aeabi_ddiv+0x1ec>
    2b1c:	e1925603 	orrs	r5, r2, r3, lsl #12
    2b20:	0affff68 	beq	28c8 <__aeabi_dmul+0x214>
    2b24:	e1a00002 	mov	r0, r2
    2b28:	e1a01003 	mov	r1, r3
    2b2c:	eaffff80 	b	2934 <__aeabi_dmul+0x280>
    2b30:	e1906081 	orrs	r6, r0, r1, lsl #1
    2b34:	11926083 	orrsne	r6, r2, r3, lsl #1
    2b38:	1affff48 	bne	2860 <__aeabi_dmul+0x1ac>
    2b3c:	e1904081 	orrs	r4, r0, r1, lsl #1
    2b40:	1affff74 	bne	2918 <__aeabi_dmul+0x264>
    2b44:	e1925083 	orrs	r5, r2, r3, lsl #1
    2b48:	1affff5e 	bne	28c8 <__aeabi_dmul+0x214>
    2b4c:	eaffff78 	b	2934 <__aeabi_dmul+0x280>

00002b50 <__aeabi_d2iz>:
    2b50:	e1a02081 	lsl	r2, r1, #1
    2b54:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    2b58:	2a00000c 	bcs	2b90 <__aeabi_d2iz+0x40>
    2b5c:	5a000009 	bpl	2b88 <__aeabi_d2iz+0x38>
    2b60:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    2b64:	e0532ac2 	subs	r2, r3, r2, asr #21
    2b68:	9a00000a 	bls	2b98 <__aeabi_d2iz+0x48>
    2b6c:	e1a03581 	lsl	r3, r1, #11
    2b70:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    2b74:	e1833aa0 	orr	r3, r3, r0, lsr #21
    2b78:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    2b7c:	e1a00233 	lsr	r0, r3, r2
    2b80:	12600000 	rsbne	r0, r0, #0
    2b84:	e12fff1e 	bx	lr
    2b88:	e3a00000 	mov	r0, #0
    2b8c:	e12fff1e 	bx	lr
    2b90:	e1900601 	orrs	r0, r0, r1, lsl #12
    2b94:	1a000002 	bne	2ba4 <__aeabi_d2iz+0x54>
    2b98:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    2b9c:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    2ba0:	e12fff1e 	bx	lr
    2ba4:	e3a00000 	mov	r0, #0
    2ba8:	e12fff1e 	bx	lr

00002bac <__aeabi_frsub>:
    2bac:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
    2bb0:	ea000000 	b	2bb8 <__addsf3>

00002bb4 <__aeabi_fsub>:
    2bb4:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000

00002bb8 <__addsf3>:
    2bb8:	e1b02080 	lsls	r2, r0, #1
    2bbc:	11b03081 	lslsne	r3, r1, #1
    2bc0:	11320003 	teqne	r2, r3
    2bc4:	11f0cc42 	mvnsne	r12, r2, asr #24
    2bc8:	11f0cc43 	mvnsne	r12, r3, asr #24
    2bcc:	0a000047 	beq	2cf0 <__addsf3+0x138>
    2bd0:	e1a02c22 	lsr	r2, r2, #24
    2bd4:	e0723c23 	rsbs	r3, r2, r3, lsr #24
    2bd8:	c0822003 	addgt	r2, r2, r3
    2bdc:	c0201001 	eorgt	r1, r0, r1
    2be0:	c0210000 	eorgt	r0, r1, r0
    2be4:	c0201001 	eorgt	r1, r0, r1
    2be8:	b2633000 	rsblt	r3, r3, #0
    2bec:	e3530019 	cmp	r3, #25
    2bf0:	812fff1e 	bxhi	lr
    2bf4:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    2bf8:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    2bfc:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
    2c00:	12600000 	rsbne	r0, r0, #0
    2c04:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    2c08:	e3811502 	orr	r1, r1, #8388608	; 0x800000
    2c0c:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
    2c10:	12611000 	rsbne	r1, r1, #0
    2c14:	e1320003 	teq	r2, r3
    2c18:	0a00002e 	beq	2cd8 <__addsf3+0x120>
    2c1c:	e2422001 	sub	r2, r2, #1
    2c20:	e0900351 	adds	r0, r0, r1, asr r3
    2c24:	e2633020 	rsb	r3, r3, #32
    2c28:	e1a01311 	lsl	r1, r1, r3
    2c2c:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    2c30:	5a000001 	bpl	2c3c <__addsf3+0x84>
    2c34:	e2711000 	rsbs	r1, r1, #0
    2c38:	e2e00000 	rsc	r0, r0, #0
    2c3c:	e3500502 	cmp	r0, #8388608	; 0x800000
    2c40:	3a00000b 	bcc	2c74 <__addsf3+0xbc>
    2c44:	e3500401 	cmp	r0, #16777216	; 0x1000000
    2c48:	3a000004 	bcc	2c60 <__addsf3+0xa8>
    2c4c:	e1b000a0 	lsrs	r0, r0, #1
    2c50:	e1a01061 	rrx	r1, r1
    2c54:	e2822001 	add	r2, r2, #1
    2c58:	e35200fe 	cmp	r2, #254	; 0xfe
    2c5c:	2a000038 	bcs	2d44 <__addsf3+0x18c>
    2c60:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    2c64:	e0a00b82 	adc	r0, r0, r2, lsl #23
    2c68:	03c00001 	biceq	r0, r0, #1
    2c6c:	e1800003 	orr	r0, r0, r3
    2c70:	e12fff1e 	bx	lr
    2c74:	e1b01081 	lsls	r1, r1, #1
    2c78:	e0a00000 	adc	r0, r0, r0
    2c7c:	e3100502 	tst	r0, #8388608	; 0x800000
    2c80:	e2422001 	sub	r2, r2, #1
    2c84:	1afffff5 	bne	2c60 <__addsf3+0xa8>
    2c88:	e1b0c620 	lsrs	r12, r0, #12
    2c8c:	01a00600 	lsleq	r0, r0, #12
    2c90:	0242200c 	subeq	r2, r2, #12
    2c94:	e31008ff 	tst	r0, #16711680	; 0xff0000
    2c98:	01a00400 	lsleq	r0, r0, #8
    2c9c:	02422008 	subeq	r2, r2, #8
    2ca0:	e310060f 	tst	r0, #15728640	; 0xf00000
    2ca4:	01a00200 	lsleq	r0, r0, #4
    2ca8:	02422004 	subeq	r2, r2, #4
    2cac:	e3100503 	tst	r0, #12582912	; 0xc00000
    2cb0:	01a00100 	lsleq	r0, r0, #2
    2cb4:	02422002 	subeq	r2, r2, #2
    2cb8:	e3500502 	cmp	r0, #8388608	; 0x800000
    2cbc:	31a00080 	lslcc	r0, r0, #1
    2cc0:	e2d22000 	sbcs	r2, r2, #0
    2cc4:	a0800b82 	addge	r0, r0, r2, lsl #23
    2cc8:	b2622000 	rsblt	r2, r2, #0
    2ccc:	a1800003 	orrge	r0, r0, r3
    2cd0:	b1830230 	orrlt	r0, r3, r0, lsr r2
    2cd4:	e12fff1e 	bx	lr
    2cd8:	e3320000 	teq	r2, #0
    2cdc:	e2211502 	eor	r1, r1, #8388608	; 0x800000
    2ce0:	02200502 	eoreq	r0, r0, #8388608	; 0x800000
    2ce4:	02822001 	addeq	r2, r2, #1
    2ce8:	12433001 	subne	r3, r3, #1
    2cec:	eaffffca 	b	2c1c <__addsf3+0x64>
    2cf0:	e1a03081 	lsl	r3, r1, #1
    2cf4:	e1f0cc42 	mvns	r12, r2, asr #24
    2cf8:	11f0cc43 	mvnsne	r12, r3, asr #24
    2cfc:	0a000013 	beq	2d50 <__addsf3+0x198>
    2d00:	e1320003 	teq	r2, r3
    2d04:	0a000002 	beq	2d14 <__addsf3+0x15c>
    2d08:	e3320000 	teq	r2, #0
    2d0c:	01a00001 	moveq	r0, r1
    2d10:	e12fff1e 	bx	lr
    2d14:	e1300001 	teq	r0, r1
    2d18:	13a00000 	movne	r0, #0
    2d1c:	112fff1e 	bxne	lr
    2d20:	e31204ff 	tst	r2, #-16777216	; 0xff000000
    2d24:	1a000002 	bne	2d34 <__addsf3+0x17c>
    2d28:	e1b00080 	lsls	r0, r0, #1
    2d2c:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
    2d30:	e12fff1e 	bx	lr
    2d34:	e2922402 	adds	r2, r2, #33554432	; 0x2000000
    2d38:	32800502 	addcc	r0, r0, #8388608	; 0x800000
    2d3c:	312fff1e 	bxcc	lr
    2d40:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    2d44:	e383047f 	orr	r0, r3, #2130706432	; 0x7f000000
    2d48:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    2d4c:	e12fff1e 	bx	lr
    2d50:	e1f02c42 	mvns	r2, r2, asr #24
    2d54:	11a00001 	movne	r0, r1
    2d58:	01f03c43 	mvnseq	r3, r3, asr #24
    2d5c:	11a01000 	movne	r1, r0
    2d60:	e1b02480 	lsls	r2, r0, #9
    2d64:	01b03481 	lslseq	r3, r1, #9
    2d68:	01300001 	teqeq	r0, r1
    2d6c:	13800501 	orrne	r0, r0, #4194304	; 0x400000
    2d70:	e12fff1e 	bx	lr

00002d74 <__aeabi_ui2f>:
    2d74:	e3a03000 	mov	r3, #0
    2d78:	ea000001 	b	2d84 <__aeabi_i2f+0x8>

00002d7c <__aeabi_i2f>:
    2d7c:	e2103102 	ands	r3, r0, #-2147483648	; 0x80000000
    2d80:	42600000 	rsbmi	r0, r0, #0
    2d84:	e1b0c000 	movs	r12, r0
    2d88:	012fff1e 	bxeq	lr
    2d8c:	e383344b 	orr	r3, r3, #1258291200	; 0x4b000000
    2d90:	e1a01000 	mov	r1, r0
    2d94:	e3a00000 	mov	r0, #0
    2d98:	ea00000f 	b	2ddc <__aeabi_l2f+0x30>

00002d9c <__aeabi_ul2f>:
    2d9c:	e1902001 	orrs	r2, r0, r1
    2da0:	012fff1e 	bxeq	lr
    2da4:	e3a03000 	mov	r3, #0
    2da8:	ea000005 	b	2dc4 <__aeabi_l2f+0x18>

00002dac <__aeabi_l2f>:
    2dac:	e1902001 	orrs	r2, r0, r1
    2db0:	012fff1e 	bxeq	lr
    2db4:	e2113102 	ands	r3, r1, #-2147483648	; 0x80000000
    2db8:	5a000001 	bpl	2dc4 <__aeabi_l2f+0x18>
    2dbc:	e2700000 	rsbs	r0, r0, #0
    2dc0:	e2e11000 	rsc	r1, r1, #0
    2dc4:	e1b0c001 	movs	r12, r1
    2dc8:	01a0c000 	moveq	r12, r0
    2dcc:	01a01000 	moveq	r1, r0
    2dd0:	03a00000 	moveq	r0, #0
    2dd4:	e383345b 	orr	r3, r3, #1526726656	; 0x5b000000
    2dd8:	02433201 	subeq	r3, r3, #268435456	; 0x10000000
    2ddc:	e2433502 	sub	r3, r3, #8388608	; 0x800000
    2de0:	e3a02017 	mov	r2, #23
    2de4:	e35c0801 	cmp	r12, #65536	; 0x10000
    2de8:	21a0c82c 	lsrcs	r12, r12, #16
    2dec:	22422010 	subcs	r2, r2, #16
    2df0:	e35c0c01 	cmp	r12, #256	; 0x100
    2df4:	21a0c42c 	lsrcs	r12, r12, #8
    2df8:	22422008 	subcs	r2, r2, #8
    2dfc:	e35c0010 	cmp	r12, #16
    2e00:	21a0c22c 	lsrcs	r12, r12, #4
    2e04:	22422004 	subcs	r2, r2, #4
    2e08:	e35c0004 	cmp	r12, #4
    2e0c:	22422002 	subcs	r2, r2, #2
    2e10:	304220ac 	subcc	r2, r2, r12, lsr #1
    2e14:	e05221ac 	subs	r2, r2, r12, lsr #3
    2e18:	e0433b82 	sub	r3, r3, r2, lsl #23
    2e1c:	ba000006 	blt	2e3c <__aeabi_l2f+0x90>
    2e20:	e0833211 	add	r3, r3, r1, lsl r2
    2e24:	e1a0c210 	lsl	r12, r0, r2
    2e28:	e2622020 	rsb	r2, r2, #32
    2e2c:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    2e30:	e0a30230 	adc	r0, r3, r0, lsr r2
    2e34:	03c00001 	biceq	r0, r0, #1
    2e38:	e12fff1e 	bx	lr
    2e3c:	e2822020 	add	r2, r2, #32
    2e40:	e1a0c211 	lsl	r12, r1, r2
    2e44:	e2622020 	rsb	r2, r2, #32
    2e48:	e190008c 	orrs	r0, r0, r12, lsl #1
    2e4c:	e0a30231 	adc	r0, r3, r1, lsr r2
    2e50:	01c00fac 	biceq	r0, r0, r12, lsr #31
    2e54:	e12fff1e 	bx	lr

00002e58 <__aeabi_fmul>:
    2e58:	e3a0c0ff 	mov	r12, #255	; 0xff
    2e5c:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    2e60:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    2e64:	1132000c 	teqne	r2, r12
    2e68:	1133000c 	teqne	r3, r12
    2e6c:	0a00003e 	beq	2f6c <__aeabi_fmul+0x114>
    2e70:	e0822003 	add	r2, r2, r3
    2e74:	e020c001 	eor	r12, r0, r1
    2e78:	e1b00480 	lsls	r0, r0, #9
    2e7c:	11b01481 	lslsne	r1, r1, #9
    2e80:	0a000010 	beq	2ec8 <__aeabi_fmul+0x70>
    2e84:	e3a03302 	mov	r3, #134217728	; 0x8000000
    2e88:	e18302a0 	orr	r0, r3, r0, lsr #5
    2e8c:	e18312a1 	orr	r1, r3, r1, lsr #5
    2e90:	e0813190 	umull	r3, r1, r0, r1
    2e94:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    2e98:	e3510502 	cmp	r1, #8388608	; 0x800000
    2e9c:	31a01081 	lslcc	r1, r1, #1
    2ea0:	31811fa3 	orrcc	r1, r1, r3, lsr #31
    2ea4:	31a03083 	lslcc	r3, r3, #1
    2ea8:	e1800001 	orr	r0, r0, r1
    2eac:	e2c2207f 	sbc	r2, r2, #127	; 0x7f
    2eb0:	e35200fd 	cmp	r2, #253	; 0xfd
    2eb4:	8a00000f 	bhi	2ef8 <__aeabi_fmul+0xa0>
    2eb8:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    2ebc:	e0a00b82 	adc	r0, r0, r2, lsl #23
    2ec0:	03c00001 	biceq	r0, r0, #1
    2ec4:	e12fff1e 	bx	lr
    2ec8:	e3300000 	teq	r0, #0
    2ecc:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    2ed0:	01a01481 	lsleq	r1, r1, #9
    2ed4:	e18c04a0 	orr	r0, r12, r0, lsr #9
    2ed8:	e18004a1 	orr	r0, r0, r1, lsr #9
    2edc:	e252207f 	subs	r2, r2, #127	; 0x7f
    2ee0:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    2ee4:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    2ee8:	c12fff1e 	bxgt	lr
    2eec:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    2ef0:	e3a03000 	mov	r3, #0
    2ef4:	e2522001 	subs	r2, r2, #1
    2ef8:	ca000035 	bgt	2fd4 <__aeabi_fmul+0x17c>
    2efc:	e3720019 	cmn	r2, #25
    2f00:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
    2f04:	d12fff1e 	bxle	lr
    2f08:	e2622000 	rsb	r2, r2, #0
    2f0c:	e1b01080 	lsls	r1, r0, #1
    2f10:	e1a01231 	lsr	r1, r1, r2
    2f14:	e2622020 	rsb	r2, r2, #32
    2f18:	e1a0c210 	lsl	r12, r0, r2
    2f1c:	e1b00061 	rrxs	r0, r1
    2f20:	e2a00000 	adc	r0, r0, #0
    2f24:	e193308c 	orrs	r3, r3, r12, lsl #1
    2f28:	01c00fac 	biceq	r0, r0, r12, lsr #31
    2f2c:	e12fff1e 	bx	lr
    2f30:	e3320000 	teq	r2, #0
    2f34:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    2f38:	01a00080 	lsleq	r0, r0, #1
    2f3c:	03100502 	tsteq	r0, #8388608	; 0x800000
    2f40:	02422001 	subeq	r2, r2, #1
    2f44:	0afffffb 	beq	2f38 <__aeabi_fmul+0xe0>
    2f48:	e180000c 	orr	r0, r0, r12
    2f4c:	e3330000 	teq	r3, #0
    2f50:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    2f54:	01a01081 	lsleq	r1, r1, #1
    2f58:	03110502 	tsteq	r1, #8388608	; 0x800000
    2f5c:	02433001 	subeq	r3, r3, #1
    2f60:	0afffffb 	beq	2f54 <__aeabi_fmul+0xfc>
    2f64:	e181100c 	orr	r1, r1, r12
    2f68:	eaffffc0 	b	2e70 <__aeabi_fmul+0x18>
    2f6c:	e00c3ba1 	and	r3, r12, r1, lsr #23
    2f70:	e132000c 	teq	r2, r12
    2f74:	1133000c 	teqne	r3, r12
    2f78:	0a000005 	beq	2f94 <__aeabi_fmul+0x13c>
    2f7c:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    2f80:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    2f84:	1affffe9 	bne	2f30 <__aeabi_fmul+0xd8>
    2f88:	e0200001 	eor	r0, r0, r1
    2f8c:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    2f90:	e12fff1e 	bx	lr
    2f94:	e3300000 	teq	r0, #0
    2f98:	13300102 	teqne	r0, #-2147483648	; 0x80000000
    2f9c:	01a00001 	moveq	r0, r1
    2fa0:	13310000 	teqne	r1, #0
    2fa4:	13310102 	teqne	r1, #-2147483648	; 0x80000000
    2fa8:	0a00000d 	beq	2fe4 <__aeabi_fmul+0x18c>
    2fac:	e132000c 	teq	r2, r12
    2fb0:	1a000001 	bne	2fbc <__aeabi_fmul+0x164>
    2fb4:	e1b02480 	lsls	r2, r0, #9
    2fb8:	1a000009 	bne	2fe4 <__aeabi_fmul+0x18c>
    2fbc:	e133000c 	teq	r3, r12
    2fc0:	1a000002 	bne	2fd0 <__aeabi_fmul+0x178>
    2fc4:	e1b03481 	lsls	r3, r1, #9
    2fc8:	11a00001 	movne	r0, r1
    2fcc:	1a000004 	bne	2fe4 <__aeabi_fmul+0x18c>
    2fd0:	e0200001 	eor	r0, r0, r1
    2fd4:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    2fd8:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    2fdc:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    2fe0:	e12fff1e 	bx	lr
    2fe4:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    2fe8:	e3800503 	orr	r0, r0, #12582912	; 0xc00000
    2fec:	e12fff1e 	bx	lr

00002ff0 <__aeabi_fdiv>:
    2ff0:	e3a0c0ff 	mov	r12, #255	; 0xff
    2ff4:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    2ff8:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    2ffc:	1132000c 	teqne	r2, r12
    3000:	1133000c 	teqne	r3, r12
    3004:	0a00003a 	beq	30f4 <__aeabi_fdiv+0x104>
    3008:	e0422003 	sub	r2, r2, r3
    300c:	e020c001 	eor	r12, r0, r1
    3010:	e1b01481 	lsls	r1, r1, #9
    3014:	e1a00480 	lsl	r0, r0, #9
    3018:	0a00001c 	beq	3090 <__aeabi_fdiv+0xa0>
    301c:	e3a03201 	mov	r3, #268435456	; 0x10000000
    3020:	e1831221 	orr	r1, r3, r1, lsr #4
    3024:	e1833220 	orr	r3, r3, r0, lsr #4
    3028:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    302c:	e1530001 	cmp	r3, r1
    3030:	31a03083 	lslcc	r3, r3, #1
    3034:	e2a2207d 	adc	r2, r2, #125	; 0x7d
    3038:	e3a0c502 	mov	r12, #8388608	; 0x800000
    303c:	e1530001 	cmp	r3, r1
    3040:	20433001 	subcs	r3, r3, r1
    3044:	2180000c 	orrcs	r0, r0, r12
    3048:	e15300a1 	cmp	r3, r1, lsr #1
    304c:	204330a1 	subcs	r3, r3, r1, lsr #1
    3050:	218000ac 	orrcs	r0, r0, r12, lsr #1
    3054:	e1530121 	cmp	r3, r1, lsr #2
    3058:	20433121 	subcs	r3, r3, r1, lsr #2
    305c:	2180012c 	orrcs	r0, r0, r12, lsr #2
    3060:	e15301a1 	cmp	r3, r1, lsr #3
    3064:	204331a1 	subcs	r3, r3, r1, lsr #3
    3068:	218001ac 	orrcs	r0, r0, r12, lsr #3
    306c:	e1b03203 	lsls	r3, r3, #4
    3070:	11b0c22c 	lsrsne	r12, r12, #4
    3074:	1afffff0 	bne	303c <__aeabi_fdiv+0x4c>
    3078:	e35200fd 	cmp	r2, #253	; 0xfd
    307c:	8affff9d 	bhi	2ef8 <__aeabi_fmul+0xa0>
    3080:	e1530001 	cmp	r3, r1
    3084:	e0a00b82 	adc	r0, r0, r2, lsl #23
    3088:	03c00001 	biceq	r0, r0, #1
    308c:	e12fff1e 	bx	lr
    3090:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    3094:	e18c04a0 	orr	r0, r12, r0, lsr #9
    3098:	e292207f 	adds	r2, r2, #127	; 0x7f
    309c:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    30a0:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    30a4:	c12fff1e 	bxgt	lr
    30a8:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    30ac:	e3a03000 	mov	r3, #0
    30b0:	e2522001 	subs	r2, r2, #1
    30b4:	eaffff8f 	b	2ef8 <__aeabi_fmul+0xa0>
    30b8:	e3320000 	teq	r2, #0
    30bc:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    30c0:	01a00080 	lsleq	r0, r0, #1
    30c4:	03100502 	tsteq	r0, #8388608	; 0x800000
    30c8:	02422001 	subeq	r2, r2, #1
    30cc:	0afffffb 	beq	30c0 <__aeabi_fdiv+0xd0>
    30d0:	e180000c 	orr	r0, r0, r12
    30d4:	e3330000 	teq	r3, #0
    30d8:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    30dc:	01a01081 	lsleq	r1, r1, #1
    30e0:	03110502 	tsteq	r1, #8388608	; 0x800000
    30e4:	02433001 	subeq	r3, r3, #1
    30e8:	0afffffb 	beq	30dc <__aeabi_fdiv+0xec>
    30ec:	e181100c 	orr	r1, r1, r12
    30f0:	eaffffc4 	b	3008 <__aeabi_fdiv+0x18>
    30f4:	e00c3ba1 	and	r3, r12, r1, lsr #23
    30f8:	e132000c 	teq	r2, r12
    30fc:	1a000005 	bne	3118 <__aeabi_fdiv+0x128>
    3100:	e1b02480 	lsls	r2, r0, #9
    3104:	1affffb6 	bne	2fe4 <__aeabi_fmul+0x18c>
    3108:	e133000c 	teq	r3, r12
    310c:	1affffaf 	bne	2fd0 <__aeabi_fmul+0x178>
    3110:	e1a00001 	mov	r0, r1
    3114:	eaffffb2 	b	2fe4 <__aeabi_fmul+0x18c>
    3118:	e133000c 	teq	r3, r12
    311c:	1a000003 	bne	3130 <__aeabi_fdiv+0x140>
    3120:	e1b03481 	lsls	r3, r1, #9
    3124:	0affff97 	beq	2f88 <__aeabi_fmul+0x130>
    3128:	e1a00001 	mov	r0, r1
    312c:	eaffffac 	b	2fe4 <__aeabi_fmul+0x18c>
    3130:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    3134:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    3138:	1affffde 	bne	30b8 <__aeabi_fdiv+0xc8>
    313c:	e3d02102 	bics	r2, r0, #-2147483648	; 0x80000000
    3140:	1affffa2 	bne	2fd0 <__aeabi_fmul+0x178>
    3144:	e3d13102 	bics	r3, r1, #-2147483648	; 0x80000000
    3148:	1affff8e 	bne	2f88 <__aeabi_fmul+0x130>
    314c:	eaffffa4 	b	2fe4 <__aeabi_fmul+0x18c>

00003150 <__gesf2>:
    3150:	e3e0c000 	mvn	r12, #0
    3154:	ea000002 	b	3164 <__cmpsf2+0x4>

00003158 <__lesf2>:
    3158:	e3a0c001 	mov	r12, #1
    315c:	ea000000 	b	3164 <__cmpsf2+0x4>

00003160 <__cmpsf2>:
    3160:	e3a0c001 	mov	r12, #1
    3164:	e52dc004 	push	{r12}		; (str r12, [sp, #-4]!)
    3168:	e1a02080 	lsl	r2, r0, #1
    316c:	e1a03081 	lsl	r3, r1, #1
    3170:	e1f0cc42 	mvns	r12, r2, asr #24
    3174:	11f0cc43 	mvnsne	r12, r3, asr #24
    3178:	0a000007 	beq	319c <__cmpsf2+0x3c>
    317c:	e28dd004 	add	sp, sp, #4
    3180:	e192c0a3 	orrs	r12, r2, r3, lsr #1
    3184:	11300001 	teqne	r0, r1
    3188:	50520003 	subspl	r0, r2, r3
    318c:	81a00fc1 	asrhi	r0, r1, #31
    3190:	31e00fc1 	mvncc	r0, r1, asr #31
    3194:	13800001 	orrne	r0, r0, #1
    3198:	e12fff1e 	bx	lr
    319c:	e1f0cc42 	mvns	r12, r2, asr #24
    31a0:	1a000001 	bne	31ac <__cmpsf2+0x4c>
    31a4:	e1b0c480 	lsls	r12, r0, #9
    31a8:	1a000003 	bne	31bc <__cmpsf2+0x5c>
    31ac:	e1f0cc43 	mvns	r12, r3, asr #24
    31b0:	1afffff1 	bne	317c <__cmpsf2+0x1c>
    31b4:	e1b0c481 	lsls	r12, r1, #9
    31b8:	0affffef 	beq	317c <__cmpsf2+0x1c>
    31bc:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    31c0:	e12fff1e 	bx	lr

000031c4 <__aeabi_cfrcmple>:
    31c4:	e1a0c000 	mov	r12, r0
    31c8:	e1a00001 	mov	r0, r1
    31cc:	e1a0100c 	mov	r1, r12
    31d0:	eaffffff 	b	31d4 <__aeabi_cfcmpeq>

000031d4 <__aeabi_cfcmpeq>:
    31d4:	e92d400f 	push	{r0, r1, r2, r3, lr}
    31d8:	ebffffe0 	bl	3160 <__cmpsf2>
    31dc:	e3500000 	cmp	r0, #0
    31e0:	43700000 	cmnmi	r0, #0
    31e4:	e8bd400f 	pop	{r0, r1, r2, r3, lr}
    31e8:	e12fff1e 	bx	lr

000031ec <__aeabi_fcmpeq>:
    31ec:	e52de008 	str	lr, [sp, #-8]!
    31f0:	ebfffff7 	bl	31d4 <__aeabi_cfcmpeq>
    31f4:	03a00001 	moveq	r0, #1
    31f8:	13a00000 	movne	r0, #0
    31fc:	e49de008 	ldr	lr, [sp], #8
    3200:	e12fff1e 	bx	lr

00003204 <__aeabi_fcmplt>:
    3204:	e52de008 	str	lr, [sp, #-8]!
    3208:	ebfffff1 	bl	31d4 <__aeabi_cfcmpeq>
    320c:	33a00001 	movcc	r0, #1
    3210:	23a00000 	movcs	r0, #0
    3214:	e49de008 	ldr	lr, [sp], #8
    3218:	e12fff1e 	bx	lr

0000321c <__aeabi_fcmple>:
    321c:	e52de008 	str	lr, [sp, #-8]!
    3220:	ebffffeb 	bl	31d4 <__aeabi_cfcmpeq>
    3224:	93a00001 	movls	r0, #1
    3228:	83a00000 	movhi	r0, #0
    322c:	e49de008 	ldr	lr, [sp], #8
    3230:	e12fff1e 	bx	lr

00003234 <__aeabi_fcmpge>:
    3234:	e52de008 	str	lr, [sp, #-8]!
    3238:	ebffffe1 	bl	31c4 <__aeabi_cfrcmple>
    323c:	93a00001 	movls	r0, #1
    3240:	83a00000 	movhi	r0, #0
    3244:	e49de008 	ldr	lr, [sp], #8
    3248:	e12fff1e 	bx	lr

0000324c <__aeabi_fcmpgt>:
    324c:	e52de008 	str	lr, [sp, #-8]!
    3250:	ebffffdb 	bl	31c4 <__aeabi_cfrcmple>
    3254:	33a00001 	movcc	r0, #1
    3258:	23a00000 	movcs	r0, #0
    325c:	e49de008 	ldr	lr, [sp], #8
    3260:	e12fff1e 	bx	lr

00003264 <atexit>:
    3264:	e1a01000 	mov	r1, r0
    3268:	e3a00000 	mov	r0, #0
    326c:	e92d4008 	push	{r3, lr}
    3270:	e1a02000 	mov	r2, r0
    3274:	e1a03000 	mov	r3, r0
    3278:	eb00005b 	bl	33ec <__register_exitproc>
    327c:	e8bd4008 	pop	{r3, lr}
    3280:	e12fff1e 	bx	lr

00003284 <exit>:
    3284:	e92d4008 	push	{r3, lr}
    3288:	e3a01000 	mov	r1, #0
    328c:	e1a04000 	mov	r4, r0
    3290:	eb000092 	bl	34e0 <__call_exitprocs>
    3294:	e59f3018 	ldr	r3, [pc, #24]	; 32b4 <exit+0x30>
    3298:	e5930000 	ldr	r0, [r3]
    329c:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    32a0:	e3530000 	cmp	r3, #0
    32a4:	11a0e00f 	movne	lr, pc
    32a8:	112fff13 	bxne	r3
    32ac:	e1a00004 	mov	r0, r4
    32b0:	eb000116 	bl	3710 <_exit>
    32b4:	000038b8 	.word	0x000038b8

000032b8 <memset>:
    32b8:	e3520003 	cmp	r2, #3
    32bc:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    32c0:	e20110ff 	and	r1, r1, #255	; 0xff
    32c4:	8a000008 	bhi	32ec <memset+0x34>
    32c8:	e3520000 	cmp	r2, #0
    32cc:	0a000004 	beq	32e4 <memset+0x2c>
    32d0:	e1a03000 	mov	r3, r0
    32d4:	e0822000 	add	r2, r2, r0
    32d8:	e4c31001 	strb	r1, [r3], #1
    32dc:	e1530002 	cmp	r3, r2
    32e0:	1afffffc 	bne	32d8 <memset+0x20>
    32e4:	e8bd0010 	ldmfd	sp!, {r4}
    32e8:	e12fff1e 	bx	lr
    32ec:	e3100003 	tst	r0, #3
    32f0:	e0802002 	add	r2, r0, r2
    32f4:	0a000007 	beq	3318 <memset+0x60>
    32f8:	e280c001 	add	r12, r0, #1
    32fc:	e20c3003 	and	r3, r12, #3
    3300:	e3530000 	cmp	r3, #0
    3304:	e54c1001 	strb	r1, [r12, #-1]
    3308:	e1a0300c 	mov	r3, r12
    330c:	e28cc001 	add	r12, r12, #1
    3310:	1afffff9 	bne	32fc <memset+0x44>
    3314:	ea000000 	b	331c <memset+0x64>
    3318:	e1a03000 	mov	r3, r0
    331c:	e0634002 	rsb	r4, r3, r2
    3320:	e081c401 	add	r12, r1, r1, lsl #8
    3324:	e354003f 	cmp	r4, #63	; 0x3f
    3328:	e08cc80c 	add	r12, r12, r12, lsl #16
    332c:	da00001a 	ble	339c <memset+0xe4>
    3330:	e583c000 	str	r12, [r3]
    3334:	e583c004 	str	r12, [r3, #4]
    3338:	e583c008 	str	r12, [r3, #8]
    333c:	e583c00c 	str	r12, [r3, #12]
    3340:	e583c010 	str	r12, [r3, #16]
    3344:	e583c014 	str	r12, [r3, #20]
    3348:	e583c018 	str	r12, [r3, #24]
    334c:	e583c01c 	str	r12, [r3, #28]
    3350:	e583c020 	str	r12, [r3, #32]
    3354:	e583c024 	str	r12, [r3, #36]	; 0x24
    3358:	e583c028 	str	r12, [r3, #40]	; 0x28
    335c:	e583c02c 	str	r12, [r3, #44]	; 0x2c
    3360:	e583c030 	str	r12, [r3, #48]	; 0x30
    3364:	e583c034 	str	r12, [r3, #52]	; 0x34
    3368:	e583c038 	str	r12, [r3, #56]	; 0x38
    336c:	e583c03c 	str	r12, [r3, #60]	; 0x3c
    3370:	e2833040 	add	r3, r3, #64	; 0x40
    3374:	e0634002 	rsb	r4, r3, r2
    3378:	e354003f 	cmp	r4, #63	; 0x3f
    337c:	caffffeb 	bgt	3330 <memset+0x78>
    3380:	ea000005 	b	339c <memset+0xe4>
    3384:	e583c000 	str	r12, [r3]
    3388:	e583c004 	str	r12, [r3, #4]
    338c:	e583c008 	str	r12, [r3, #8]
    3390:	e583c00c 	str	r12, [r3, #12]
    3394:	e2833010 	add	r3, r3, #16
    3398:	e0634002 	rsb	r4, r3, r2
    339c:	e354000f 	cmp	r4, #15
    33a0:	cafffff7 	bgt	3384 <memset+0xcc>
    33a4:	e3540003 	cmp	r4, #3
    33a8:	da000006 	ble	33c8 <memset+0x110>
    33ac:	e2834004 	add	r4, r3, #4
    33b0:	e0643002 	rsb	r3, r4, r2
    33b4:	e3530003 	cmp	r3, #3
    33b8:	e504c004 	str	r12, [r4, #-4]
    33bc:	e1a03004 	mov	r3, r4
    33c0:	e2844004 	add	r4, r4, #4
    33c4:	cafffff9 	bgt	33b0 <memset+0xf8>
    33c8:	e1520003 	cmp	r2, r3
    33cc:	9affffc4 	bls	32e4 <memset+0x2c>
    33d0:	e2833001 	add	r3, r3, #1
    33d4:	e2822001 	add	r2, r2, #1
    33d8:	e5431001 	strb	r1, [r3, #-1]
    33dc:	e2833001 	add	r3, r3, #1
    33e0:	e1530002 	cmp	r3, r2
    33e4:	1afffffb 	bne	33d8 <memset+0x120>
    33e8:	eaffffbd 	b	32e4 <memset+0x2c>

000033ec <__register_exitproc>:
    33ec:	e59fc0e4 	ldr	r12, [pc, #228]	; 34d8 <__register_exitproc+0xec>
    33f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    33f4:	e59c4000 	ldr	r4, [r12]
    33f8:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    33fc:	e35c0000 	cmp	r12, #0
    3400:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    3404:	e59c5004 	ldr	r5, [r12, #4]
    3408:	0584c148 	streq	r12, [r4, #328]	; 0x148
    340c:	e355001f 	cmp	r5, #31
    3410:	e24dd010 	sub	sp, sp, #16
    3414:	e1a06000 	mov	r6, r0
    3418:	da000015 	ble	3474 <__register_exitproc+0x88>
    341c:	e59f00b8 	ldr	r0, [pc, #184]	; 34dc <__register_exitproc+0xf0>
    3420:	e3500000 	cmp	r0, #0
    3424:	1a000001 	bne	3430 <__register_exitproc+0x44>
    3428:	e3e00000 	mvn	r0, #0
    342c:	ea000018 	b	3494 <__register_exitproc+0xa8>
    3430:	e3a00e19 	mov	r0, #400	; 0x190
    3434:	e58d100c 	str	r1, [sp, #12]
    3438:	e58d2008 	str	r2, [sp, #8]
    343c:	e58d3004 	str	r3, [sp, #4]
    3440:	e320f000 	nop	{0}
    3444:	e250c000 	subs	r12, r0, #0
    3448:	e59d100c 	ldr	r1, [sp, #12]
    344c:	e59d2008 	ldr	r2, [sp, #8]
    3450:	e59d3004 	ldr	r3, [sp, #4]
    3454:	0afffff3 	beq	3428 <__register_exitproc+0x3c>
    3458:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    345c:	e3a00000 	mov	r0, #0
    3460:	e58c0004 	str	r0, [r12, #4]
    3464:	e58c5000 	str	r5, [r12]
    3468:	e584c148 	str	r12, [r4, #328]	; 0x148
    346c:	e58c0188 	str	r0, [r12, #392]	; 0x188
    3470:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    3474:	e3560000 	cmp	r6, #0
    3478:	e59c4004 	ldr	r4, [r12, #4]
    347c:	1a000007 	bne	34a0 <__register_exitproc+0xb4>
    3480:	e2843002 	add	r3, r4, #2
    3484:	e2844001 	add	r4, r4, #1
    3488:	e78c1103 	str	r1, [r12, r3, lsl #2]
    348c:	e58c4004 	str	r4, [r12, #4]
    3490:	e3a00000 	mov	r0, #0
    3494:	e28dd010 	add	sp, sp, #16
    3498:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    349c:	e12fff1e 	bx	lr
    34a0:	e3a00001 	mov	r0, #1
    34a4:	e1a00410 	lsl	r0, r0, r4
    34a8:	e08c8104 	add	r8, r12, r4, lsl #2
    34ac:	e3560002 	cmp	r6, #2
    34b0:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    34b4:	e5883108 	str	r3, [r8, #264]	; 0x108
    34b8:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    34bc:	e1877000 	orr	r7, r7, r0
    34c0:	01830000 	orreq	r0, r3, r0
    34c4:	e1a05008 	mov	r5, r8
    34c8:	e5882088 	str	r2, [r8, #136]	; 0x88
    34cc:	e58c7188 	str	r7, [r12, #392]	; 0x188
    34d0:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    34d4:	eaffffe9 	b	3480 <__register_exitproc+0x94>
    34d8:	000038b8 	.word	0x000038b8
    34dc:	00000000 	.word	0x00000000

000034e0 <__call_exitprocs>:
    34e0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    34e4:	e59f3168 	ldr	r3, [pc, #360]	; 3654 <__call_exitprocs+0x174>
    34e8:	e5933000 	ldr	r3, [r3]
    34ec:	e24dd014 	sub	sp, sp, #20
    34f0:	e58d3004 	str	r3, [sp, #4]
    34f4:	e2833f52 	add	r3, r3, #328	; 0x148
    34f8:	e58d0008 	str	r0, [sp, #8]
    34fc:	e58d300c 	str	r3, [sp, #12]
    3500:	e1a07001 	mov	r7, r1
    3504:	e3a08001 	mov	r8, #1
    3508:	e59d3004 	ldr	r3, [sp, #4]
    350c:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    3510:	e3560000 	cmp	r6, #0
    3514:	e59db00c 	ldr	r11, [sp, #12]
    3518:	0a000033 	beq	35ec <__call_exitprocs+0x10c>
    351c:	e5965004 	ldr	r5, [r6, #4]
    3520:	e2554001 	subs	r4, r5, #1
    3524:	5286a088 	addpl	r10, r6, #136	; 0x88
    3528:	5285501f 	addpl	r5, r5, #31
    352c:	508a5105 	addpl	r5, r10, r5, lsl #2
    3530:	5a000007 	bpl	3554 <__call_exitprocs+0x74>
    3534:	ea000029 	b	35e0 <__call_exitprocs+0x100>
    3538:	e5953000 	ldr	r3, [r5]
    353c:	e1530007 	cmp	r3, r7
    3540:	0a000005 	beq	355c <__call_exitprocs+0x7c>
    3544:	e2444001 	sub	r4, r4, #1
    3548:	e3740001 	cmn	r4, #1
    354c:	e2455004 	sub	r5, r5, #4
    3550:	0a000022 	beq	35e0 <__call_exitprocs+0x100>
    3554:	e3570000 	cmp	r7, #0
    3558:	1afffff6 	bne	3538 <__call_exitprocs+0x58>
    355c:	e5963004 	ldr	r3, [r6, #4]
    3560:	e06a2005 	rsb	r2, r10, r5
    3564:	e2433001 	sub	r3, r3, #1
    3568:	e0862002 	add	r2, r6, r2
    356c:	e1530004 	cmp	r3, r4
    3570:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    3574:	13a01000 	movne	r1, #0
    3578:	05864004 	streq	r4, [r6, #4]
    357c:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    3580:	e3530000 	cmp	r3, #0
    3584:	0affffee 	beq	3544 <__call_exitprocs+0x64>
    3588:	e1a02418 	lsl	r2, r8, r4
    358c:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    3590:	e1120001 	tst	r2, r1
    3594:	e5969004 	ldr	r9, [r6, #4]
    3598:	0a000016 	beq	35f8 <__call_exitprocs+0x118>
    359c:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    35a0:	e1120001 	tst	r2, r1
    35a4:	1a000016 	bne	3604 <__call_exitprocs+0x124>
    35a8:	e59d0008 	ldr	r0, [sp, #8]
    35ac:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    35b0:	e1a0e00f 	mov	lr, pc
    35b4:	e12fff13 	bx	r3
    35b8:	e5963004 	ldr	r3, [r6, #4]
    35bc:	e1530009 	cmp	r3, r9
    35c0:	1affffd0 	bne	3508 <__call_exitprocs+0x28>
    35c4:	e59b3000 	ldr	r3, [r11]
    35c8:	e1530006 	cmp	r3, r6
    35cc:	1affffcd 	bne	3508 <__call_exitprocs+0x28>
    35d0:	e2444001 	sub	r4, r4, #1
    35d4:	e3740001 	cmn	r4, #1
    35d8:	e2455004 	sub	r5, r5, #4
    35dc:	1affffdc 	bne	3554 <__call_exitprocs+0x74>
    35e0:	e59f1070 	ldr	r1, [pc, #112]	; 3658 <__call_exitprocs+0x178>
    35e4:	e3510000 	cmp	r1, #0
    35e8:	1a000009 	bne	3614 <__call_exitprocs+0x134>
    35ec:	e28dd014 	add	sp, sp, #20
    35f0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    35f4:	e12fff1e 	bx	lr
    35f8:	e1a0e00f 	mov	lr, pc
    35fc:	e12fff13 	bx	r3
    3600:	eaffffec 	b	35b8 <__call_exitprocs+0xd8>
    3604:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    3608:	e1a0e00f 	mov	lr, pc
    360c:	e12fff13 	bx	r3
    3610:	eaffffe8 	b	35b8 <__call_exitprocs+0xd8>
    3614:	e5963004 	ldr	r3, [r6, #4]
    3618:	e3530000 	cmp	r3, #0
    361c:	e5963000 	ldr	r3, [r6]
    3620:	1a000008 	bne	3648 <__call_exitprocs+0x168>
    3624:	e3530000 	cmp	r3, #0
    3628:	0a000006 	beq	3648 <__call_exitprocs+0x168>
    362c:	e1a00006 	mov	r0, r6
    3630:	e58b3000 	str	r3, [r11]
    3634:	e320f000 	nop	{0}
    3638:	e59b6000 	ldr	r6, [r11]
    363c:	e3560000 	cmp	r6, #0
    3640:	1affffb5 	bne	351c <__call_exitprocs+0x3c>
    3644:	eaffffe8 	b	35ec <__call_exitprocs+0x10c>
    3648:	e1a0b006 	mov	r11, r6
    364c:	e1a06003 	mov	r6, r3
    3650:	eafffff9 	b	363c <__call_exitprocs+0x15c>
    3654:	000038b8 	.word	0x000038b8
    3658:	00000000 	.word	0x00000000

0000365c <register_fini>:
    365c:	e92d4008 	push	{r3, lr}
    3660:	e59f3010 	ldr	r3, [pc, #16]	; 3678 <register_fini+0x1c>
    3664:	e3530000 	cmp	r3, #0
    3668:	159f000c 	ldrne	r0, [pc, #12]	; 367c <register_fini+0x20>
    366c:	1bfffefc 	blne	3264 <atexit>
    3670:	e8bd4008 	pop	{r3, lr}
    3674:	e12fff1e 	bx	lr
    3678:	000038e0 	.word	0x000038e0
    367c:	00003680 	.word	0x00003680

00003680 <__libc_fini_array>:
    3680:	e92d4038 	push	{r3, r4, r5, lr}
    3684:	e59f5030 	ldr	r5, [pc, #48]	; 36bc <__libc_fini_array+0x3c>
    3688:	e59f4030 	ldr	r4, [pc, #48]	; 36c0 <__libc_fini_array+0x40>
    368c:	e0654004 	rsb	r4, r5, r4
    3690:	e1b04144 	asrs	r4, r4, #2
    3694:	10855104 	addne	r5, r5, r4, lsl #2
    3698:	0a000004 	beq	36b0 <__libc_fini_array+0x30>
    369c:	e5353004 	ldr	r3, [r5, #-4]!
    36a0:	e1a0e00f 	mov	lr, pc
    36a4:	e12fff13 	bx	r3
    36a8:	e2544001 	subs	r4, r4, #1
    36ac:	1afffffa 	bne	369c <__libc_fini_array+0x1c>
    36b0:	eb00008a 	bl	38e0 <__libc_fini>
    36b4:	e8bd4038 	pop	{r3, r4, r5, lr}
    36b8:	e12fff1e 	bx	lr
    36bc:	000038f8 	.word	0x000038f8
    36c0:	000038fc 	.word	0x000038fc

000036c4 <__cs3_premain>:
    36c4:	e92d4008 	push	{r3, lr}
    36c8:	eb000017 	bl	372c <__libc_init_array>
    36cc:	e59f3030 	ldr	r3, [pc, #48]	; 3704 <__cs3_premain+0x40>
    36d0:	e3530000 	cmp	r3, #0
    36d4:	15930000 	ldrne	r0, [r3]
    36d8:	01a00003 	moveq	r0, r3
    36dc:	e59f3024 	ldr	r3, [pc, #36]	; 3708 <__cs3_premain+0x44>
    36e0:	e3530000 	cmp	r3, #0
    36e4:	15931000 	ldrne	r1, [r3]
    36e8:	01a01003 	moveq	r1, r3
    36ec:	e3a02000 	mov	r2, #0
    36f0:	ebfff2d9 	bl	25c <main>
    36f4:	e59f3010 	ldr	r3, [pc, #16]	; 370c <__cs3_premain+0x48>
    36f8:	e3530000 	cmp	r3, #0
    36fc:	1bfffee0 	blne	3284 <exit>
    3700:	eafffffe 	b	3700 <__cs3_premain+0x3c>
	...
    370c:	00003284 	.word	0x00003284

00003710 <_exit>:
    3710:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    3714:	e3a00018 	mov	r0, #24
    3718:	e59f1004 	ldr	r1, [pc, #4]	; 3724 <_exit+0x14>
    371c:	ef123456 	svc	0x00123456
    3720:	eafffffe 	b	3720 <_exit+0x10>
    3724:	00020026 	.word	0x00020026

00003728 <__cs3_isr_interrupt>:
    3728:	eafffffe 	b	3728 <__cs3_isr_interrupt>

0000372c <__libc_init_array>:
    372c:	e92d4070 	push	{r4, r5, r6, lr}
    3730:	e59f506c 	ldr	r5, [pc, #108]	; 37a4 <__libc_init_array+0x78>
    3734:	e59f606c 	ldr	r6, [pc, #108]	; 37a8 <__libc_init_array+0x7c>
    3738:	e0656006 	rsb	r6, r5, r6
    373c:	e1b06146 	asrs	r6, r6, #2
    3740:	12455004 	subne	r5, r5, #4
    3744:	13a04000 	movne	r4, #0
    3748:	0a000005 	beq	3764 <__libc_init_array+0x38>
    374c:	e5b53004 	ldr	r3, [r5, #4]!
    3750:	e2844001 	add	r4, r4, #1
    3754:	e1a0e00f 	mov	lr, pc
    3758:	e12fff13 	bx	r3
    375c:	e1560004 	cmp	r6, r4
    3760:	1afffff9 	bne	374c <__libc_init_array+0x20>
    3764:	e59f5040 	ldr	r5, [pc, #64]	; 37ac <__libc_init_array+0x80>
    3768:	e59f6040 	ldr	r6, [pc, #64]	; 37b0 <__libc_init_array+0x84>
    376c:	e0656006 	rsb	r6, r5, r6
    3770:	eb000052 	bl	38c0 <_init>
    3774:	e1b06146 	asrs	r6, r6, #2
    3778:	12455004 	subne	r5, r5, #4
    377c:	13a04000 	movne	r4, #0
    3780:	0a000005 	beq	379c <__libc_init_array+0x70>
    3784:	e5b53004 	ldr	r3, [r5, #4]!
    3788:	e2844001 	add	r4, r4, #1
    378c:	e1a0e00f 	mov	lr, pc
    3790:	e12fff13 	bx	r3
    3794:	e1560004 	cmp	r6, r4
    3798:	1afffff9 	bne	3784 <__libc_init_array+0x58>
    379c:	e8bd4070 	pop	{r4, r5, r6, lr}
    37a0:	e12fff1e 	bx	lr
    37a4:	000038d8 	.word	0x000038d8
    37a8:	000038d8 	.word	0x000038d8
    37ac:	000038d8 	.word	0x000038d8
    37b0:	000038e0 	.word	0x000038e0

Disassembly of section .rodata:

000037b8 <_global_impure_ptr-0x100>:
    37b8:	204d5052 	.word	0x204d5052
    37bc:	75706e49 	.word	0x75706e49
    37c0:	00003a74 	.word	0x00003a74
	...
    37e0:	20746553 	.word	0x20746553
    37e4:	3a4d5052 	.word	0x3a4d5052
	...
    3808:	75746341 	.word	0x75746341
    380c:	52206c61 	.word	0x52206c61
    3810:	003a4d50 	.word	0x003a4d50
	...
    3830:	72727543 	.word	0x72727543
    3834:	3a746e65 	.word	0x3a746e65
	...
    3858:	20202020 	.word	0x20202020
    385c:	00202020 	.word	0x00202020
	...
    3880:	33323130 	.word	0x33323130
    3884:	37363534 	.word	0x37363534
    3888:	42413938 	.word	0x42413938
    388c:	46454443 	.word	0x46454443
    3890:	00000030 	.word	0x00000030
    3894:	00000031 	.word	0x00000031
    3898:	00000032 	.word	0x00000032
    389c:	00000033 	.word	0x00000033
    38a0:	00000034 	.word	0x00000034
    38a4:	00000035 	.word	0x00000035
    38a8:	00000036 	.word	0x00000036
    38ac:	00000037 	.word	0x00000037
    38b0:	00000038 	.word	0x00000038
    38b4:	00000039 	.word	0x00000039

000038b8 <_global_impure_ptr>:
    38b8:	00003920 00000043                        9..C...

000038c0 <_init>:
    38c0:	e1a0c00d 	mov	r12, sp
    38c4:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    38c8:	e24cb004 	sub	r11, r12, #4
    38cc:	e24bd028 	sub	sp, r11, #40	; 0x28
    38d0:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    38d4:	e12fff1e 	bx	lr

000038d8 <__init_array_start>:
    38d8:	0000365c 	.word	0x0000365c

000038dc <__frame_dummy_init_array_entry>:
    38dc:	00000208                                ....

000038e0 <__libc_fini>:
    38e0:	e1a0c00d 	mov	r12, sp
    38e4:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    38e8:	e24cb004 	sub	r11, r12, #4
    38ec:	e24bd028 	sub	sp, r11, #40	; 0x28
    38f0:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    38f4:	e12fff1e 	bx	lr

000038f8 <__fini_array_start>:
    38f8:	000001c4 	.word	0x000001c4

000038fc <__cs3_regions>:
	...
    3908:	00003d50 	.word	0x00003d50
    390c:	000000d0 	.word	0x000000d0
