
C:/Users/Andrew Davies/Desktop/CPE490SemesterProject-PID/Project/JTAG_UART.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
       0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      20:	94 0e 00 00 a0 0e 00 00 ac 0e 00 00 b8 0e 00 00     ................
      30:	c4 0e 00 00 7c 40 00 00 e0 0d 00 00 dc 0e 00 00     ....|@..........

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_region_zero_size_ram>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_region_zero_size_ram+0x4>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb000fcf 	bl	4018 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	000042b8 	.word	0x000042b8

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	000046f0 	.word	0x000046f0

00000124 <__cs3_heap_start_ptr>:
     124:	000047d0 	.word	0x000047d0

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	000046f8 	.word	0x000046f8
     170:	000046fb 	.word	0x000046fb
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	000046f8 	.word	0x000046f8
     1bc:	000046f8 	.word	0x000046f8
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	000046f8 	.word	0x000046f8
     200:	00000000 	.word	0x00000000
     204:	00004108 	.word	0x00004108

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00004108 	.word	0x00004108
     250:	000046fc 	.word	0x000046fc
     254:	000042b8 	.word	0x000042b8
     258:	00000000 	.word	0x00000000

0000025c <put_jtag>:
#include "JTAG_UART.h"
#include "address_map.h"


void put_jtag( char c )
{
     25c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     260:	e28db000 	add	r11, sp, #0
     264:	e24dd014 	sub	sp, sp, #20
     268:	e1a03000 	mov	r3, r0
     26c:	e54b300d 	strb	r3, [r11, #-13]
    volatile int * JTAG_UART_ptr    = (int *) JTAG_UART_BASE;   // JTAG UART address
     270:	e3a03a01 	mov	r3, #4096	; 0x1000
     274:	e34f3f20 	movt	r3, #65312	; 0xff20
     278:	e50b3008 	str	r3, [r11, #-8]

    int control;
    control = *(JTAG_UART_ptr + 1);     // read the JTAG_UART control register
     27c:	e51b3008 	ldr	r3, [r11, #-8]
     280:	e5933004 	ldr	r3, [r3, #4]
     284:	e50b300c 	str	r3, [r11, #-12]
    if (control & 0xFFFF0000)               // if space, echo character, else ignore 
     288:	e51b300c 	ldr	r3, [r11, #-12]
     28c:	e1a03823 	lsr	r3, r3, #16
     290:	e1a03803 	lsl	r3, r3, #16
     294:	e3530000 	cmp	r3, #0
     298:	0a000002 	beq	2a8 <put_jtag+0x4c>
        *(JTAG_UART_ptr) = c;
     29c:	e55b200d 	ldrb	r2, [r11, #-13]
     2a0:	e51b3008 	ldr	r3, [r11, #-8]
     2a4:	e5832000 	str	r2, [r3]
}
     2a8:	e28bd000 	add	sp, r11, #0
     2ac:	e8bd0800 	ldmfd	sp!, {r11}
     2b0:	e12fff1e 	bx	lr

000002b4 <get_jtag>:

char get_jtag( void )
{
     2b4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     2b8:	e28db000 	add	r11, sp, #0
     2bc:	e24dd00c 	sub	sp, sp, #12
    volatile int * JTAG_UART_ptr    = (int *) JTAG_UART_BASE;   // JTAG UART address
     2c0:	e3a03a01 	mov	r3, #4096	; 0x1000
     2c4:	e34f3f20 	movt	r3, #65312	; 0xff20
     2c8:	e50b3008 	str	r3, [r11, #-8]

    int data;
    data = *(JTAG_UART_ptr);                // read the JTAG_UART data register
     2cc:	e51b3008 	ldr	r3, [r11, #-8]
     2d0:	e5933000 	ldr	r3, [r3]
     2d4:	e50b300c 	str	r3, [r11, #-12]
    if (data & 0x00008000)                  // check RVALID to see if there is new data
     2d8:	e51b300c 	ldr	r3, [r11, #-12]
     2dc:	e2033902 	and	r3, r3, #32768	; 0x8000
     2e0:	e3530000 	cmp	r3, #0
     2e4:	0a000002 	beq	2f4 <get_jtag+0x40>
        return ((char) data & 0xFF);
     2e8:	e51b300c 	ldr	r3, [r11, #-12]
     2ec:	e6ef3073 	uxtb	r3, r3
     2f0:	ea000000 	b	2f8 <get_jtag+0x44>
    else
        return ('\0');
     2f4:	e3a03000 	mov	r3, #0
}
     2f8:	e1a00003 	mov	r0, r3
     2fc:	e28bd000 	add	sp, r11, #0
     300:	e8bd0800 	ldmfd	sp!, {r11}
     304:	e12fff1e 	bx	lr

00000308 <GetDigit>:

char GetDigit(unsigned char value)
{
     308:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     30c:	e28db000 	add	r11, sp, #0
     310:	e24dd01c 	sub	sp, sp, #28
     314:	e1a03000 	mov	r3, r0
     318:	e54b3015 	strb	r3, [r11, #-21]	; 0xffffffeb
    char digits[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
     31c:	e3043110 	movw	r3, #16656	; 0x4110
     320:	e3403000 	movt	r3, #0
     324:	e24bc014 	sub	r12, r11, #20
     328:	e5930000 	ldr	r0, [r3]
     32c:	e5931004 	ldr	r1, [r3, #4]
     330:	e5932008 	ldr	r2, [r3, #8]
     334:	e593300c 	ldr	r3, [r3, #12]
     338:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}

    return digits[value];
     33c:	e55b2015 	ldrb	r2, [r11, #-21]	; 0xffffffeb
     340:	e3e0300f 	mvn	r3, #15
     344:	e24b1004 	sub	r1, r11, #4
     348:	e0812002 	add	r2, r1, r2
     34c:	e0823003 	add	r3, r2, r3
     350:	e5d33000 	ldrb	r3, [r3]
}
     354:	e1a00003 	mov	r0, r3
     358:	e28bd000 	add	sp, r11, #0
     35c:	e8bd0800 	ldmfd	sp!, {r11}
     360:	e12fff1e 	bx	lr

00000364 <DigitSeparator>:

/***************************************************************************************************
Function Definitions:
***************************************************************************************************/
struct Digits DigitSeparator(int number)
{
     364:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     368:	e28db000 	add	r11, sp, #0
     36c:	e24dd014 	sub	sp, sp, #20
     370:	e50b0010 	str	r0, [r11, #-16]
    struct Digits numberSeparated;

    numberSeparated.thousands = number / 1000;
     374:	e51b2010 	ldr	r2, [r11, #-16]
     378:	e3043dd3 	movw	r3, #19923	; 0x4dd3
     37c:	e3413062 	movt	r3, #4194	; 0x1062
     380:	e0c31293 	smull	r1, r3, r3, r2
     384:	e1a01343 	asr	r1, r3, #6
     388:	e1a03fc2 	asr	r3, r2, #31
     38c:	e0633001 	rsb	r3, r3, r1
     390:	e6ef3073 	uxtb	r3, r3
     394:	e54b300c 	strb	r3, [r11, #-12]
    numberSeparated.hundreds  = (number % 1000) / 100;
     398:	e51b2010 	ldr	r2, [r11, #-16]
     39c:	e3043dd3 	movw	r3, #19923	; 0x4dd3
     3a0:	e3413062 	movt	r3, #4194	; 0x1062
     3a4:	e0c31293 	smull	r1, r3, r3, r2
     3a8:	e1a01343 	asr	r1, r3, #6
     3ac:	e1a03fc2 	asr	r3, r2, #31
     3b0:	e0633001 	rsb	r3, r3, r1
     3b4:	e3a01ffa 	mov	r1, #1000	; 0x3e8
     3b8:	e0030391 	mul	r3, r1, r3
     3bc:	e0633002 	rsb	r3, r3, r2
     3c0:	e308251f 	movw	r2, #34079	; 0x851f
     3c4:	e34521eb 	movt	r2, #20971	; 0x51eb
     3c8:	e0c21392 	smull	r1, r2, r2, r3
     3cc:	e1a022c2 	asr	r2, r2, #5
     3d0:	e1a03fc3 	asr	r3, r3, #31
     3d4:	e0633002 	rsb	r3, r3, r2
     3d8:	e6ef3073 	uxtb	r3, r3
     3dc:	e54b300b 	strb	r3, [r11, #-11]
    numberSeparated.tens      = ((number % 1000) % 100) / 10;
     3e0:	e51b2010 	ldr	r2, [r11, #-16]
     3e4:	e3043dd3 	movw	r3, #19923	; 0x4dd3
     3e8:	e3413062 	movt	r3, #4194	; 0x1062
     3ec:	e0c31293 	smull	r1, r3, r3, r2
     3f0:	e1a01343 	asr	r1, r3, #6
     3f4:	e1a03fc2 	asr	r3, r2, #31
     3f8:	e0633001 	rsb	r3, r3, r1
     3fc:	e3a01ffa 	mov	r1, #1000	; 0x3e8
     400:	e0030391 	mul	r3, r1, r3
     404:	e0633002 	rsb	r3, r3, r2
     408:	e308251f 	movw	r2, #34079	; 0x851f
     40c:	e34521eb 	movt	r2, #20971	; 0x51eb
     410:	e0c21392 	smull	r1, r2, r2, r3
     414:	e1a012c2 	asr	r1, r2, #5
     418:	e1a02fc3 	asr	r2, r3, #31
     41c:	e0622001 	rsb	r2, r2, r1
     420:	e3a01064 	mov	r1, #100	; 0x64
     424:	e0020291 	mul	r2, r1, r2
     428:	e0622003 	rsb	r2, r2, r3
     42c:	e3063667 	movw	r3, #26215	; 0x6667
     430:	e3463666 	movt	r3, #26214	; 0x6666
     434:	e0c31293 	smull	r1, r3, r3, r2
     438:	e1a01143 	asr	r1, r3, #2
     43c:	e1a03fc2 	asr	r3, r2, #31
     440:	e0633001 	rsb	r3, r3, r1
     444:	e6ef3073 	uxtb	r3, r3
     448:	e54b300a 	strb	r3, [r11, #-10]
    numberSeparated.ones      = (((number % 1000) % 100) % 10);
     44c:	e51b2010 	ldr	r2, [r11, #-16]
     450:	e3043dd3 	movw	r3, #19923	; 0x4dd3
     454:	e3413062 	movt	r3, #4194	; 0x1062
     458:	e0c31293 	smull	r1, r3, r3, r2
     45c:	e1a01343 	asr	r1, r3, #6
     460:	e1a03fc2 	asr	r3, r2, #31
     464:	e0633001 	rsb	r3, r3, r1
     468:	e3a01ffa 	mov	r1, #1000	; 0x3e8
     46c:	e0030391 	mul	r3, r1, r3
     470:	e0633002 	rsb	r3, r3, r2
     474:	e308251f 	movw	r2, #34079	; 0x851f
     478:	e34521eb 	movt	r2, #20971	; 0x51eb
     47c:	e0c21392 	smull	r1, r2, r2, r3
     480:	e1a012c2 	asr	r1, r2, #5
     484:	e1a02fc3 	asr	r2, r3, #31
     488:	e0622001 	rsb	r2, r2, r1
     48c:	e3a01064 	mov	r1, #100	; 0x64
     490:	e0020291 	mul	r2, r1, r2
     494:	e0622003 	rsb	r2, r2, r3
     498:	e3063667 	movw	r3, #26215	; 0x6667
     49c:	e3463666 	movt	r3, #26214	; 0x6666
     4a0:	e0c31293 	smull	r1, r3, r3, r2
     4a4:	e1a01143 	asr	r1, r3, #2
     4a8:	e1a03fc2 	asr	r3, r2, #31
     4ac:	e0631001 	rsb	r1, r3, r1
     4b0:	e1a03001 	mov	r3, r1
     4b4:	e1a03103 	lsl	r3, r3, #2
     4b8:	e0833001 	add	r3, r3, r1
     4bc:	e1a03083 	lsl	r3, r3, #1
     4c0:	e0631002 	rsb	r1, r3, r2
     4c4:	e6ef3071 	uxtb	r3, r1
     4c8:	e54b3009 	strb	r3, [r11, #-9]

    return numberSeparated;
     4cc:	e51b300c 	ldr	r3, [r11, #-12]
     4d0:	e50b3008 	str	r3, [r11, #-8]
     4d4:	e3a03000 	mov	r3, #0
     4d8:	e55b2008 	ldrb	r2, [r11, #-8]
     4dc:	e7c73012 	bfi	r3, r2, #0, #8
     4e0:	e55b2007 	ldrb	r2, [r11, #-7]
     4e4:	e7cf3412 	bfi	r3, r2, #8, #8
     4e8:	e55b2006 	ldrb	r2, [r11, #-6]
     4ec:	e7d73812 	bfi	r3, r2, #16, #8
     4f0:	e55b2005 	ldrb	r2, [r11, #-5]
     4f4:	e7df3c12 	bfi	r3, r2, #24, #8
     4f8:	e1a00003 	mov	r0, r3
     4fc:	e28bd000 	add	sp, r11, #0
     500:	e8bd0800 	ldmfd	sp!, {r11}
     504:	e12fff1e 	bx	lr

00000508 <ADC_Get>:
#include "Numbers.h"
#include "JTAG_UART.h"

//**Funtion Code**//
void ADC_Get(void)
{
     508:	e92d4800 	push	{r11, lr}
     50c:	e28db004 	add	r11, sp, #4
     510:	e24dd008 	sub	sp, sp, #8
	volatile int* ADCptr = (int*)ADC_BASE;
     514:	e3a03901 	mov	r3, #16384	; 0x4000
     518:	e34f3f20 	movt	r3, #65312	; 0xff20
     51c:	e50b3008 	str	r3, [r11, #-8]
    volatile int* channelTwo = (int*)0xFF204008; // ADC_BASE + 2
     520:	e3043008 	movw	r3, #16392	; 0x4008
     524:	e34f3f20 	movt	r3, #65312	; 0xff20
     528:	e50b300c 	str	r3, [r11, #-12]
    *(ADCptr + 1) |= (1);                        // Set ADC to auto mode
     52c:	e51b3008 	ldr	r3, [r11, #-8]
     530:	e2833004 	add	r3, r3, #4
     534:	e51b2008 	ldr	r2, [r11, #-8]
     538:	e2822004 	add	r2, r2, #4
     53c:	e5922000 	ldr	r2, [r2]
     540:	e3822001 	orr	r2, r2, #1
     544:	e5832000 	str	r2, [r3]

    static int analogCounter;
    static unsigned long analogValue;
    static double currentValue;

	analogCounter++;
     548:	e3043718 	movw	r3, #18200	; 0x4718
     54c:	e3403000 	movt	r3, #0
     550:	e5933000 	ldr	r3, [r3]
     554:	e2832001 	add	r2, r3, #1
     558:	e3043718 	movw	r3, #18200	; 0x4718
     55c:	e3403000 	movt	r3, #0
     560:	e5832000 	str	r2, [r3]
    analogValue = analogValue + ( (*channelTwo) & 0xFFF); // sample the adc
     564:	e51b300c 	ldr	r3, [r11, #-12]
     568:	e5933000 	ldr	r3, [r3]
     56c:	e1a03a03 	lsl	r3, r3, #20
     570:	e1a03a23 	lsr	r3, r3, #20
     574:	e304271c 	movw	r2, #18204	; 0x471c
     578:	e3402000 	movt	r2, #0
     57c:	e5922000 	ldr	r2, [r2]
     580:	e0832002 	add	r2, r3, r2
     584:	e304371c 	movw	r3, #18204	; 0x471c
     588:	e3403000 	movt	r3, #0
     58c:	e5832000 	str	r2, [r3]

    if(analogCounter == 200)
     590:	e3043718 	movw	r3, #18200	; 0x4718
     594:	e3403000 	movt	r3, #0
     598:	e5933000 	ldr	r3, [r3]
     59c:	e35300c8 	cmp	r3, #200	; 0xc8
     5a0:	1a000036 	bne	680 <ADC_Get+0x178>
    {
        analogValue = analogValue / 200; // average it
     5a4:	e304371c 	movw	r3, #18204	; 0x471c
     5a8:	e3403000 	movt	r3, #0
     5ac:	e5932000 	ldr	r2, [r3]
     5b0:	e308351f 	movw	r3, #34079	; 0x851f
     5b4:	e34531eb 	movt	r3, #20971	; 0x51eb
     5b8:	e0831293 	umull	r1, r3, r3, r2
     5bc:	e1a02323 	lsr	r2, r3, #6
     5c0:	e304371c 	movw	r3, #18204	; 0x471c
     5c4:	e3403000 	movt	r3, #0
     5c8:	e5832000 	str	r2, [r3]
        analogValue = analogValue - 90;  // error correction
     5cc:	e304371c 	movw	r3, #18204	; 0x471c
     5d0:	e3403000 	movt	r3, #0
     5d4:	e5933000 	ldr	r3, [r3]
     5d8:	e243205a 	sub	r2, r3, #90	; 0x5a
     5dc:	e304371c 	movw	r3, #18204	; 0x471c
     5e0:	e3403000 	movt	r3, #0
     5e4:	e5832000 	str	r2, [r3]

        currentValue = ( (analogValue)  / 7.3 );
     5e8:	e304371c 	movw	r3, #18204	; 0x471c
     5ec:	e3403000 	movt	r3, #0
     5f0:	e5933000 	ldr	r3, [r3]
     5f4:	e1a00003 	mov	r0, r3
     5f8:	eb0009b2 	bl	2cc8 <__aeabi_ui2d>
     5fc:	e1a02000 	mov	r2, r0
     600:	e1a03001 	mov	r3, r1
     604:	e1a00002 	mov	r0, r2
     608:	e1a01003 	mov	r1, r3
     60c:	e3032333 	movw	r2, #13107	; 0x3333
     610:	e3432333 	movt	r2, #13107	; 0x3333
     614:	e3033333 	movw	r3, #13107	; 0x3333
     618:	e344301d 	movt	r3, #16413	; 0x401d
     61c:	eb000a8d 	bl	3058 <__aeabi_ddiv>
     620:	e1a02000 	mov	r2, r0
     624:	e1a03001 	mov	r3, r1
     628:	e1a00002 	mov	r0, r2
     62c:	e1a01003 	mov	r1, r3
     630:	e3043720 	movw	r3, #18208	; 0x4720
     634:	e3403000 	movt	r3, #0
     638:	e1c300f0 	strd	r0, [r3]
        PrintADC(currentValue);
     63c:	e3043720 	movw	r3, #18208	; 0x4720
     640:	e3403000 	movt	r3, #0
     644:	e1c320d0 	ldrd	r2, [r3]
     648:	e1a00002 	mov	r0, r2
     64c:	e1a01003 	mov	r1, r3
     650:	eb000b54 	bl	33a8 <__aeabi_d2iz>
     654:	e1a03000 	mov	r3, r0
     658:	e1a00003 	mov	r0, r3
     65c:	eb000009 	bl	688 <PrintADC>

        analogValue = 0;
     660:	e304371c 	movw	r3, #18204	; 0x471c
     664:	e3403000 	movt	r3, #0
     668:	e3a02000 	mov	r2, #0
     66c:	e5832000 	str	r2, [r3]
        analogCounter = 0;
     670:	e3043718 	movw	r3, #18200	; 0x4718
     674:	e3403000 	movt	r3, #0
     678:	e3a02000 	mov	r2, #0
     67c:	e5832000 	str	r2, [r3]
    }
}
     680:	e24bd004 	sub	sp, r11, #4
     684:	e8bd8800 	pop	{r11, pc}

00000688 <PrintADC>:

void PrintADC(long value)
{
     688:	e92d4810 	push	{r4, r11, lr}
     68c:	e28db008 	add	r11, sp, #8
     690:	e24dd034 	sub	sp, sp, #52	; 0x34
     694:	e50b0010 	str	r0, [r11, #-16]
	current = RPM_Splitter(value);
     698:	e30447b8 	movw	r4, #18360	; 0x47b8
     69c:	e3404000 	movt	r4, #0
     6a0:	e24b302c 	sub	r3, r11, #44	; 0x2c
     6a4:	e1a00003 	mov	r0, r3
     6a8:	e51b1010 	ldr	r1, [r11, #-16]
     6ac:	eb0007fd 	bl	26a8 <RPM_Splitter>
     6b0:	e1a0c004 	mov	r12, r4
     6b4:	e24be02c 	sub	lr, r11, #44	; 0x2c
     6b8:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
     6bc:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
     6c0:	e89e0003 	ldm	lr, {r0, r1}
     6c4:	e88c0003 	stm	r12, {r0, r1}
	current = RPM_Characters(current);
     6c8:	e30447b8 	movw	r4, #18360	; 0x47b8
     6cc:	e3404000 	movt	r4, #0
     6d0:	e24be02c 	sub	lr, r11, #44	; 0x2c
     6d4:	e30437b8 	movw	r3, #18360	; 0x47b8
     6d8:	e3403000 	movt	r3, #0
     6dc:	e1a0c00d 	mov	r12, sp
     6e0:	e283200c 	add	r2, r3, #12
     6e4:	e8920007 	ldm	r2, {r0, r1, r2}
     6e8:	e88c0007 	stm	r12, {r0, r1, r2}
     6ec:	e893000e 	ldm	r3, {r1, r2, r3}
     6f0:	e1a0000e 	mov	r0, lr
     6f4:	eb000840 	bl	27fc <RPM_Characters>
     6f8:	e1a0c004 	mov	r12, r4
     6fc:	e24be02c 	sub	lr, r11, #44	; 0x2c
     700:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
     704:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
     708:	e89e0003 	ldm	lr, {r0, r1}
     70c:	e88c0003 	stm	r12, {r0, r1}
	if(current.cTotal[0] == '0')
     710:	e30437b8 	movw	r3, #18360	; 0x47b8
     714:	e3403000 	movt	r3, #0
     718:	e5d33013 	ldrb	r3, [r3, #19]
     71c:	e3530030 	cmp	r3, #48	; 0x30
     720:	1a000003 	bne	734 <PrintADC+0xac>
		current.cTotal[0] = ' ';
     724:	e30437b8 	movw	r3, #18360	; 0x47b8
     728:	e3403000 	movt	r3, #0
     72c:	e3a02020 	mov	r2, #32
     730:	e5c32013 	strb	r2, [r3, #19]
	Current_Write(current.cTotal);
     734:	e59f0008 	ldr	r0, [pc, #8]	; 744 <PrintADC+0xbc>
     738:	eb00017b 	bl	d2c <Current_Write>
     73c:	e24bd008 	sub	sp, r11, #8
     740:	e8bd8810 	pop	{r4, r11, pc}
     744:	000047cb 	.word	0x000047cb

00000748 <GetActualRpm>:


// int encoderValue;	//used in isr.c

void GetActualRpm(void)
{
     748:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     74c:	e28db000 	add	r11, sp, #0

}
     750:	e28bd000 	add	sp, r11, #0
     754:	e8bd0800 	ldmfd	sp!, {r11}
     758:	e12fff1e 	bx	lr

0000075c <PrintActualRpm>:

void PrintActualRpm(void)
{
     75c:	e92d4810 	push	{r4, r11, lr}
     760:	e28db008 	add	r11, sp, #8
     764:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    actrpm = RPM_Splitter(actrpm.iTotal);
     768:	e30437a0 	movw	r3, #18336	; 0x47a0
     76c:	e3403000 	movt	r3, #0
     770:	e593300c 	ldr	r3, [r3, #12]
     774:	e30447a0 	movw	r4, #18336	; 0x47a0
     778:	e3404000 	movt	r4, #0
     77c:	e24b2024 	sub	r2, r11, #36	; 0x24
     780:	e1a00002 	mov	r0, r2
     784:	e1a01003 	mov	r1, r3
     788:	eb0007c6 	bl	26a8 <RPM_Splitter>
     78c:	e1a0c004 	mov	r12, r4
     790:	e24be024 	sub	lr, r11, #36	; 0x24
     794:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
     798:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
     79c:	e89e0003 	ldm	lr, {r0, r1}
     7a0:	e88c0003 	stm	r12, {r0, r1}
    actrpm = RPM_Characters(actrpm);
     7a4:	e30447a0 	movw	r4, #18336	; 0x47a0
     7a8:	e3404000 	movt	r4, #0
     7ac:	e24be024 	sub	lr, r11, #36	; 0x24
     7b0:	e30437a0 	movw	r3, #18336	; 0x47a0
     7b4:	e3403000 	movt	r3, #0
     7b8:	e1a0c00d 	mov	r12, sp
     7bc:	e283200c 	add	r2, r3, #12
     7c0:	e8920007 	ldm	r2, {r0, r1, r2}
     7c4:	e88c0007 	stm	r12, {r0, r1, r2}
     7c8:	e893000e 	ldm	r3, {r1, r2, r3}
     7cc:	e1a0000e 	mov	r0, lr
     7d0:	eb000809 	bl	27fc <RPM_Characters>
     7d4:	e1a0c004 	mov	r12, r4
     7d8:	e24be024 	sub	lr, r11, #36	; 0x24
     7dc:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
     7e0:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
     7e4:	e89e0003 	ldm	lr, {r0, r1}
     7e8:	e88c0003 	stm	r12, {r0, r1}
        put_jtag('\n');
        put_jtag('\n');
*/
    // if(actrpm.cTotal[0] == '0');
       // actrpm.cTotal[0] = ' ';
    ActualRPM_Write(actrpm.cTotal);
     7ec:	e59f0008 	ldr	r0, [pc, #8]	; 7fc <PrintActualRpm+0xa0>
     7f0:	eb000131 	bl	cbc <ActualRPM_Write>
}
     7f4:	e24bd008 	sub	sp, r11, #8
     7f8:	e8bd8810 	pop	{r4, r11, pc}
     7fc:	000047b3 	.word	0x000047b3

00000800 <GUI_Setup>:
#define Eggplant		0x310A
#define Burgandy		0x7804

//**Function Code**//
void GUI_Setup(void)
{
     800:	e92d4800 	push	{r11, lr}
     804:	e28db004 	add	r11, sp, #4
     808:	e24dd0a8 	sub	sp, sp, #168	; 0xa8
	VGA_box(0, 0, 319, 239, MutedNavy);				//background
     80c:	e305328e 	movw	r3, #21134	; 0x528e
     810:	e58d3000 	str	r3, [sp]
     814:	e3a00000 	mov	r0, #0
     818:	e3a01000 	mov	r1, #0
     81c:	e300213f 	movw	r2, #319	; 0x13f
     820:	e3a030ef 	mov	r3, #239	; 0xef
     824:	eb000816 	bl	2884 <VGA_box>
	VGA_box(59, 149, 261, 166, MetallicGold);		//bar's border
     828:	e30d3567 	movw	r3, #54631	; 0xd567
     82c:	e34f3fff 	movt	r3, #65535	; 0xffff
     830:	e58d3000 	str	r3, [sp]
     834:	e3a0003b 	mov	r0, #59	; 0x3b
     838:	e3a01095 	mov	r1, #149	; 0x95
     83c:	e3002105 	movw	r2, #261	; 0x105
     840:	e3a030a6 	mov	r3, #166	; 0xa6
     844:	eb00080e 	bl	2884 <VGA_box>
	VGA_box(60, 150, 260, 165, Burgandy);			//bar's background
     848:	e3073804 	movw	r3, #30724	; 0x7804
     84c:	e58d3000 	str	r3, [sp]
     850:	e3a0003c 	mov	r0, #60	; 0x3c
     854:	e3a01096 	mov	r1, #150	; 0x96
     858:	e3a02f41 	mov	r2, #260	; 0x104
     85c:	e3a030a5 	mov	r3, #165	; 0xa5
     860:	eb000807 	bl	2884 <VGA_box>

	char input[40] = "RPM Input:";
     864:	e3042120 	movw	r2, #16672	; 0x4120
     868:	e3402000 	movt	r2, #0
     86c:	e24b302c 	sub	r3, r11, #44	; 0x2c
     870:	e8920007 	ldm	r2, {r0, r1, r2}
     874:	e8a30003 	stmia	r3!, {r0, r1}
     878:	e1c320b0 	strh	r2, [r3]
     87c:	e2833002 	add	r3, r3, #2
     880:	e1a02822 	lsr	r2, r2, #16
     884:	e5c32000 	strb	r2, [r3]
     888:	e24b2021 	sub	r2, r11, #33	; 0x21
     88c:	e3a0301d 	mov	r3, #29
     890:	e1a00002 	mov	r0, r2
     894:	e3a01000 	mov	r1, #0
     898:	e1a02003 	mov	r2, r3
     89c:	eb000cda 	bl	3c0c <memset>
	VGA_text(10, 10, input);
     8a0:	e24b302c 	sub	r3, r11, #44	; 0x2c
     8a4:	e3a0000a 	mov	r0, #10
     8a8:	e3a0100a 	mov	r1, #10
     8ac:	e1a02003 	mov	r2, r3
     8b0:	eb00081c 	bl	2928 <VGA_text>
	char set[40] = "Set RPM:";
     8b4:	e3042148 	movw	r2, #16712	; 0x4148
     8b8:	e3402000 	movt	r2, #0
     8bc:	e24b3054 	sub	r3, r11, #84	; 0x54
     8c0:	e8920007 	ldm	r2, {r0, r1, r2}
     8c4:	e8a30003 	stmia	r3!, {r0, r1}
     8c8:	e5c32000 	strb	r2, [r3]
     8cc:	e24b204b 	sub	r2, r11, #75	; 0x4b
     8d0:	e3a0301f 	mov	r3, #31
     8d4:	e1a00002 	mov	r0, r2
     8d8:	e3a01000 	mov	r1, #0
     8dc:	e1a02003 	mov	r2, r3
     8e0:	eb000cc9 	bl	3c0c <memset>
	VGA_text(12, 13, set);
     8e4:	e24b3054 	sub	r3, r11, #84	; 0x54
     8e8:	e3a0000c 	mov	r0, #12
     8ec:	e3a0100d 	mov	r1, #13
     8f0:	e1a02003 	mov	r2, r3
     8f4:	eb00080b 	bl	2928 <VGA_text>
	char actual[40] = "Actual RPM:";
     8f8:	e3043170 	movw	r3, #16752	; 0x4170
     8fc:	e3403000 	movt	r3, #0
     900:	e24bc07c 	sub	r12, r11, #124	; 0x7c
     904:	e8930007 	ldm	r3, {r0, r1, r2}
     908:	e88c0007 	stm	r12, {r0, r1, r2}
     90c:	e24b3070 	sub	r3, r11, #112	; 0x70
     910:	e3a02000 	mov	r2, #0
     914:	e5832000 	str	r2, [r3]
     918:	e2833004 	add	r3, r3, #4
     91c:	e3a02000 	mov	r2, #0
     920:	e5832000 	str	r2, [r3]
     924:	e2833004 	add	r3, r3, #4
     928:	e3a02000 	mov	r2, #0
     92c:	e5832000 	str	r2, [r3]
     930:	e2833004 	add	r3, r3, #4
     934:	e3a02000 	mov	r2, #0
     938:	e5832000 	str	r2, [r3]
     93c:	e2833004 	add	r3, r3, #4
     940:	e3a02000 	mov	r2, #0
     944:	e5832000 	str	r2, [r3]
     948:	e2833004 	add	r3, r3, #4
     94c:	e3a02000 	mov	r2, #0
     950:	e5832000 	str	r2, [r3]
     954:	e2833004 	add	r3, r3, #4
     958:	e3a02000 	mov	r2, #0
     95c:	e5832000 	str	r2, [r3]
     960:	e2833004 	add	r3, r3, #4
	VGA_text(9, 16, actual);
     964:	e24b307c 	sub	r3, r11, #124	; 0x7c
     968:	e3a00009 	mov	r0, #9
     96c:	e3a01010 	mov	r1, #16
     970:	e1a02003 	mov	r2, r3
     974:	eb0007eb 	bl	2928 <VGA_text>
	char current[40] = "Current:";
     978:	e3042198 	movw	r2, #16792	; 0x4198
     97c:	e3402000 	movt	r2, #0
     980:	e24b30a4 	sub	r3, r11, #164	; 0xa4
     984:	e8920007 	ldm	r2, {r0, r1, r2}
     988:	e8a30003 	stmia	r3!, {r0, r1}
     98c:	e5c32000 	strb	r2, [r3]
     990:	e24b209b 	sub	r2, r11, #155	; 0x9b
     994:	e3a0301f 	mov	r3, #31
     998:	e1a00002 	mov	r0, r2
     99c:	e3a01000 	mov	r1, #0
     9a0:	e1a02003 	mov	r2, r3
     9a4:	eb000c98 	bl	3c0c <memset>
	VGA_text(12, 19, current);
     9a8:	e24b30a4 	sub	r3, r11, #164	; 0xa4
     9ac:	e3a0000c 	mov	r0, #12
     9b0:	e3a01013 	mov	r1, #19
     9b4:	e1a02003 	mov	r2, r3
     9b8:	eb0007da 	bl	2928 <VGA_text>
}
     9bc:	e24bd004 	sub	sp, r11, #4
     9c0:	e8bd8800 	pop	{r11, pc}

000009c4 <Print_Bars>:

void Print_Bars(int value)
{
     9c4:	e92d4800 	push	{r11, lr}
     9c8:	e28db004 	add	r11, sp, #4
     9cc:	e24dd020 	sub	sp, sp, #32
     9d0:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
	float percent = ((value / (float) 233));
     9d4:	e51b0018 	ldr	r0, [r11, #-24]	; 0xffffffe8
     9d8:	eb000b25 	bl	3674 <__aeabi_i2f>
     9dc:	e1a03000 	mov	r3, r0
     9e0:	e1a00003 	mov	r0, r3
     9e4:	e3a01000 	mov	r1, #0
     9e8:	e3441369 	movt	r1, #17257	; 0x4369
     9ec:	eb000bbd 	bl	38e8 <__aeabi_fdiv>
     9f0:	e1a03000 	mov	r3, r0
     9f4:	e50b3008 	str	r3, [r11, #-8]
	int size = (200 * percent);								//turn percent into number of pixels
     9f8:	e51b0008 	ldr	r0, [r11, #-8]
     9fc:	e3a01000 	mov	r1, #0
     a00:	e3441348 	movt	r1, #17224	; 0x4348
     a04:	eb000b51 	bl	3750 <__aeabi_fmul>
     a08:	e1a03000 	mov	r3, r0
     a0c:	e1a00003 	mov	r0, r3
     a10:	eb000c51 	bl	3b5c <__aeabi_f2iz>
     a14:	e1a03000 	mov	r3, r0
     a18:	e50b300c 	str	r3, [r11, #-12]
	int inverseSize = 200 - size;							//get the negative size
     a1c:	e51b300c 	ldr	r3, [r11, #-12]
     a20:	e26330c8 	rsb	r3, r3, #200	; 0xc8
     a24:	e50b3010 	str	r3, [r11, #-16]
	VGA_box(260 - inverseSize, 150, 260, 165, Aubergine);	//print negative bar
     a28:	e51b3010 	ldr	r3, [r11, #-16]
     a2c:	e2633f41 	rsb	r3, r3, #260	; 0x104
     a30:	e30621ea 	movw	r2, #25066	; 0x61ea
     a34:	e58d2000 	str	r2, [sp]
     a38:	e1a00003 	mov	r0, r3
     a3c:	e3a01096 	mov	r1, #150	; 0x96
     a40:	e3a02f41 	mov	r2, #260	; 0x104
     a44:	e3a030a5 	mov	r3, #165	; 0xa5
     a48:	eb00078d 	bl	2884 <VGA_box>
	VGA_box(60, 150, 60 + size, 165, Burgandy);				//print progress bar
     a4c:	e51b300c 	ldr	r3, [r11, #-12]
     a50:	e283303c 	add	r3, r3, #60	; 0x3c
     a54:	e3072804 	movw	r2, #30724	; 0x7804
     a58:	e58d2000 	str	r2, [sp]
     a5c:	e3a0003c 	mov	r0, #60	; 0x3c
     a60:	e3a01096 	mov	r1, #150	; 0x96
     a64:	e1a02003 	mov	r2, r3
     a68:	e3a030a5 	mov	r3, #165	; 0xa5
     a6c:	eb000784 	bl	2884 <VGA_box>
	if(percent == 0)											//if the total is zero
     a70:	e51b0008 	ldr	r0, [r11, #-8]
     a74:	e3a01000 	mov	r1, #0
     a78:	eb000c19 	bl	3ae4 <__aeabi_fcmpeq>
     a7c:	e1a03000 	mov	r3, r0
     a80:	e3530000 	cmp	r3, #0
     a84:	0a000006 	beq	aa4 <Print_Bars+0xe0>
		VGA_box(60, 150, 60, 165, Aubergine);					//clear lowest end of progress bar
     a88:	e30631ea 	movw	r3, #25066	; 0x61ea
     a8c:	e58d3000 	str	r3, [sp]
     a90:	e3a0003c 	mov	r0, #60	; 0x3c
     a94:	e3a01096 	mov	r1, #150	; 0x96
     a98:	e3a0203c 	mov	r2, #60	; 0x3c
     a9c:	e3a030a5 	mov	r3, #165	; 0xa5
     aa0:	eb000777 	bl	2884 <VGA_box>
}
     aa4:	e24bd004 	sub	sp, r11, #4
     aa8:	e8bd8800 	pop	{r11, pc}

00000aac <InputRPM_Write>:

void InputRPM_Write(char* value)
{
     aac:	e92d4800 	push	{r11, lr}
     ab0:	e28db004 	add	r11, sp, #4
     ab4:	e24dd030 	sub	sp, sp, #48	; 0x30
     ab8:	e50b0030 	str	r0, [r11, #-48]	; 0xffffffd0
	VGA_text(21, 10, value);
     abc:	e3a00015 	mov	r0, #21
     ac0:	e3a0100a 	mov	r1, #10
     ac4:	e51b2030 	ldr	r2, [r11, #-48]	; 0xffffffd0
     ac8:	eb000796 	bl	2928 <VGA_text>
	char rpm[40] = "RPM";
     acc:	e3053052 	movw	r3, #20562	; 0x5052
     ad0:	e340304d 	movt	r3, #77	; 0x4d
     ad4:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
     ad8:	e24b3028 	sub	r3, r11, #40	; 0x28
     adc:	e3a02000 	mov	r2, #0
     ae0:	e5832000 	str	r2, [r3]
     ae4:	e2833004 	add	r3, r3, #4
     ae8:	e3a02000 	mov	r2, #0
     aec:	e5832000 	str	r2, [r3]
     af0:	e2833004 	add	r3, r3, #4
     af4:	e3a02000 	mov	r2, #0
     af8:	e5832000 	str	r2, [r3]
     afc:	e2833004 	add	r3, r3, #4
     b00:	e3a02000 	mov	r2, #0
     b04:	e5832000 	str	r2, [r3]
     b08:	e2833004 	add	r3, r3, #4
     b0c:	e3a02000 	mov	r2, #0
     b10:	e5832000 	str	r2, [r3]
     b14:	e2833004 	add	r3, r3, #4
     b18:	e3a02000 	mov	r2, #0
     b1c:	e5832000 	str	r2, [r3]
     b20:	e2833004 	add	r3, r3, #4
     b24:	e3a02000 	mov	r2, #0
     b28:	e5832000 	str	r2, [r3]
     b2c:	e2833004 	add	r3, r3, #4
     b30:	e3a02000 	mov	r2, #0
     b34:	e5832000 	str	r2, [r3]
     b38:	e2833004 	add	r3, r3, #4
     b3c:	e3a02000 	mov	r2, #0
     b40:	e5832000 	str	r2, [r3]
     b44:	e2833004 	add	r3, r3, #4
	VGA_text(25, 10, rpm);
     b48:	e24b302c 	sub	r3, r11, #44	; 0x2c
     b4c:	e3a00019 	mov	r0, #25
     b50:	e3a0100a 	mov	r1, #10
     b54:	e1a02003 	mov	r2, r3
     b58:	eb000772 	bl	2928 <VGA_text>
}
     b5c:	e24bd004 	sub	sp, r11, #4
     b60:	e8bd8800 	pop	{r11, pc}

00000b64 <InputRPM_Clear>:

void InputRPM_Clear()
{
     b64:	e92d4800 	push	{r11, lr}
     b68:	e28db004 	add	r11, sp, #4
     b6c:	e24dd028 	sub	sp, sp, #40	; 0x28
	char clear[40] = "       ";
     b70:	e30431c0 	movw	r3, #16832	; 0x41c0
     b74:	e3403000 	movt	r3, #0
     b78:	e24b202c 	sub	r2, r11, #44	; 0x2c
     b7c:	e8930003 	ldm	r3, {r0, r1}
     b80:	e8820003 	stm	r2, {r0, r1}
     b84:	e24b3024 	sub	r3, r11, #36	; 0x24
     b88:	e3a02000 	mov	r2, #0
     b8c:	e5832000 	str	r2, [r3]
     b90:	e2833004 	add	r3, r3, #4
     b94:	e3a02000 	mov	r2, #0
     b98:	e5832000 	str	r2, [r3]
     b9c:	e2833004 	add	r3, r3, #4
     ba0:	e3a02000 	mov	r2, #0
     ba4:	e5832000 	str	r2, [r3]
     ba8:	e2833004 	add	r3, r3, #4
     bac:	e3a02000 	mov	r2, #0
     bb0:	e5832000 	str	r2, [r3]
     bb4:	e2833004 	add	r3, r3, #4
     bb8:	e3a02000 	mov	r2, #0
     bbc:	e5832000 	str	r2, [r3]
     bc0:	e2833004 	add	r3, r3, #4
     bc4:	e3a02000 	mov	r2, #0
     bc8:	e5832000 	str	r2, [r3]
     bcc:	e2833004 	add	r3, r3, #4
     bd0:	e3a02000 	mov	r2, #0
     bd4:	e5832000 	str	r2, [r3]
     bd8:	e2833004 	add	r3, r3, #4
     bdc:	e3a02000 	mov	r2, #0
     be0:	e5832000 	str	r2, [r3]
     be4:	e2833004 	add	r3, r3, #4
	VGA_text(21, 10, clear);
     be8:	e24b302c 	sub	r3, r11, #44	; 0x2c
     bec:	e3a00015 	mov	r0, #21
     bf0:	e3a0100a 	mov	r1, #10
     bf4:	e1a02003 	mov	r2, r3
     bf8:	eb00074a 	bl	2928 <VGA_text>
}
     bfc:	e24bd004 	sub	sp, r11, #4
     c00:	e8bd8800 	pop	{r11, pc}

00000c04 <SetRPM_Write>:

void SetRPM_Write(char* value)
{
     c04:	e92d4800 	push	{r11, lr}
     c08:	e28db004 	add	r11, sp, #4
     c0c:	e24dd030 	sub	sp, sp, #48	; 0x30
     c10:	e50b0030 	str	r0, [r11, #-48]	; 0xffffffd0
	VGA_text(21, 13, value);
     c14:	e3a00015 	mov	r0, #21
     c18:	e3a0100d 	mov	r1, #13
     c1c:	e51b2030 	ldr	r2, [r11, #-48]	; 0xffffffd0
     c20:	eb000740 	bl	2928 <VGA_text>
	char rpm[40] = "RPM";
     c24:	e3053052 	movw	r3, #20562	; 0x5052
     c28:	e340304d 	movt	r3, #77	; 0x4d
     c2c:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
     c30:	e24b3028 	sub	r3, r11, #40	; 0x28
     c34:	e3a02000 	mov	r2, #0
     c38:	e5832000 	str	r2, [r3]
     c3c:	e2833004 	add	r3, r3, #4
     c40:	e3a02000 	mov	r2, #0
     c44:	e5832000 	str	r2, [r3]
     c48:	e2833004 	add	r3, r3, #4
     c4c:	e3a02000 	mov	r2, #0
     c50:	e5832000 	str	r2, [r3]
     c54:	e2833004 	add	r3, r3, #4
     c58:	e3a02000 	mov	r2, #0
     c5c:	e5832000 	str	r2, [r3]
     c60:	e2833004 	add	r3, r3, #4
     c64:	e3a02000 	mov	r2, #0
     c68:	e5832000 	str	r2, [r3]
     c6c:	e2833004 	add	r3, r3, #4
     c70:	e3a02000 	mov	r2, #0
     c74:	e5832000 	str	r2, [r3]
     c78:	e2833004 	add	r3, r3, #4
     c7c:	e3a02000 	mov	r2, #0
     c80:	e5832000 	str	r2, [r3]
     c84:	e2833004 	add	r3, r3, #4
     c88:	e3a02000 	mov	r2, #0
     c8c:	e5832000 	str	r2, [r3]
     c90:	e2833004 	add	r3, r3, #4
     c94:	e3a02000 	mov	r2, #0
     c98:	e5832000 	str	r2, [r3]
     c9c:	e2833004 	add	r3, r3, #4
	VGA_text(25, 13, rpm);
     ca0:	e24b302c 	sub	r3, r11, #44	; 0x2c
     ca4:	e3a00019 	mov	r0, #25
     ca8:	e3a0100d 	mov	r1, #13
     cac:	e1a02003 	mov	r2, r3
     cb0:	eb00071c 	bl	2928 <VGA_text>
}
     cb4:	e24bd004 	sub	sp, r11, #4
     cb8:	e8bd8800 	pop	{r11, pc}

00000cbc <ActualRPM_Write>:

void ActualRPM_Write(char* value)
{
     cbc:	e92d4800 	push	{r11, lr}
     cc0:	e28db004 	add	r11, sp, #4
     cc4:	e24dd030 	sub	sp, sp, #48	; 0x30
     cc8:	e50b0030 	str	r0, [r11, #-48]	; 0xffffffd0
	VGA_text(21, 16, value);
     ccc:	e3a00015 	mov	r0, #21
     cd0:	e3a01010 	mov	r1, #16
     cd4:	e51b2030 	ldr	r2, [r11, #-48]	; 0xffffffd0
     cd8:	eb000712 	bl	2928 <VGA_text>
	char rpm[40] = " RPM";
     cdc:	e30421e8 	movw	r2, #16872	; 0x41e8
     ce0:	e3402000 	movt	r2, #0
     ce4:	e24b302c 	sub	r3, r11, #44	; 0x2c
     ce8:	e8920003 	ldm	r2, {r0, r1}
     cec:	e5830000 	str	r0, [r3]
     cf0:	e2833004 	add	r3, r3, #4
     cf4:	e5c31000 	strb	r1, [r3]
     cf8:	e24b2027 	sub	r2, r11, #39	; 0x27
     cfc:	e3a03023 	mov	r3, #35	; 0x23
     d00:	e1a00002 	mov	r0, r2
     d04:	e3a01000 	mov	r1, #0
     d08:	e1a02003 	mov	r2, r3
     d0c:	eb000bbe 	bl	3c0c <memset>
	VGA_text(24, 16, rpm);
     d10:	e24b302c 	sub	r3, r11, #44	; 0x2c
     d14:	e3a00018 	mov	r0, #24
     d18:	e3a01010 	mov	r1, #16
     d1c:	e1a02003 	mov	r2, r3
     d20:	eb000700 	bl	2928 <VGA_text>
}
     d24:	e24bd004 	sub	sp, r11, #4
     d28:	e8bd8800 	pop	{r11, pc}

00000d2c <Current_Write>:

void Current_Write(char* value)
{
     d2c:	e92d4800 	push	{r11, lr}
     d30:	e28db004 	add	r11, sp, #4
     d34:	e24dd030 	sub	sp, sp, #48	; 0x30
     d38:	e50b0030 	str	r0, [r11, #-48]	; 0xffffffd0
	VGA_text(21, 19, value);
     d3c:	e3a00015 	mov	r0, #21
     d40:	e3a01013 	mov	r1, #19
     d44:	e51b2030 	ldr	r2, [r11, #-48]	; 0xffffffd0
     d48:	eb0006f6 	bl	2928 <VGA_text>
	char miliAmps[40] = "mA";
     d4c:	e304316d 	movw	r3, #16749	; 0x416d
     d50:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
     d54:	e24b3028 	sub	r3, r11, #40	; 0x28
     d58:	e3a02000 	mov	r2, #0
     d5c:	e5832000 	str	r2, [r3]
     d60:	e2833004 	add	r3, r3, #4
     d64:	e3a02000 	mov	r2, #0
     d68:	e5832000 	str	r2, [r3]
     d6c:	e2833004 	add	r3, r3, #4
     d70:	e3a02000 	mov	r2, #0
     d74:	e5832000 	str	r2, [r3]
     d78:	e2833004 	add	r3, r3, #4
     d7c:	e3a02000 	mov	r2, #0
     d80:	e5832000 	str	r2, [r3]
     d84:	e2833004 	add	r3, r3, #4
     d88:	e3a02000 	mov	r2, #0
     d8c:	e5832000 	str	r2, [r3]
     d90:	e2833004 	add	r3, r3, #4
     d94:	e3a02000 	mov	r2, #0
     d98:	e5832000 	str	r2, [r3]
     d9c:	e2833004 	add	r3, r3, #4
     da0:	e3a02000 	mov	r2, #0
     da4:	e5832000 	str	r2, [r3]
     da8:	e2833004 	add	r3, r3, #4
     dac:	e3a02000 	mov	r2, #0
     db0:	e5832000 	str	r2, [r3]
     db4:	e2833004 	add	r3, r3, #4
     db8:	e3a02000 	mov	r2, #0
     dbc:	e5832000 	str	r2, [r3]
     dc0:	e2833004 	add	r3, r3, #4
	VGA_text(25, 19, miliAmps);
     dc4:	e24b302c 	sub	r3, r11, #44	; 0x2c
     dc8:	e3a00019 	mov	r0, #25
     dcc:	e3a01013 	mov	r1, #19
     dd0:	e1a02003 	mov	r2, r3
     dd4:	eb0006d3 	bl	2928 <VGA_text>
}
     dd8:	e24bd004 	sub	sp, r11, #4
     ddc:	e8bd8800 	pop	{r11, pc}

00000de0 <__cs3_isr_irq>:
#include "interrupt_id.h"
#include "address_map.h"

// Define the IRQ exception handler
void __attribute__ ((interrupt)) __cs3_isr_irq (void)
{
     de0:	e24ee004 	sub	lr, lr, #4
     de4:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
     de8:	e28db018 	add	r11, sp, #24
     dec:	e24dd00c 	sub	sp, sp, #12
    // Read the ICCIAR from the CPU interface in the GIC
    int address;
    int interrupt_ID;
    
    address = MPCORE_GIC_CPUIF + ICCIAR;
     df0:	e30c310c 	movw	r3, #49420	; 0xc10c
     df4:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     df8:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
    interrupt_ID = *(int *)address;
     dfc:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     e00:	e5933000 	ldr	r3, [r3]
     e04:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
/*
    if (interrupt_ID == KEYS_IRQ)
        ButtonsISR ();
*/

    if(interrupt_ID == MPCORE_PRIV_TIMER_IRQ)
     e08:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
     e0c:	e353001d 	cmp	r3, #29
     e10:	1a000001 	bne	e1c <__cs3_isr_irq+0x3c>
        TimerISR();
     e14:	eb000143 	bl	1328 <TimerISR>
     e18:	ea000014 	b	e70 <__cs3_isr_irq+0x90>
    else if(interrupt_ID == HPS_TIMER0_IRQ)
     e1c:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
     e20:	e35300c7 	cmp	r3, #199	; 0xc7
     e24:	1a000001 	bne	e30 <__cs3_isr_irq+0x50>
        HPSTimer0ISR();  
     e28:	eb000147 	bl	134c <HPSTimer0ISR>
     e2c:	ea00000f 	b	e70 <__cs3_isr_irq+0x90>
    else if(interrupt_ID == HPS_TIMER1_IRQ)
     e30:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
     e34:	e35300c8 	cmp	r3, #200	; 0xc8
     e38:	1a000001 	bne	e44 <__cs3_isr_irq+0x64>
        HPSTimer1ISR();
     e3c:	eb000174 	bl	1414 <HPSTimer1ISR>
     e40:	ea00000a 	b	e70 <__cs3_isr_irq+0x90>
    else if(interrupt_ID == HPS_TIMER2_IRQ)
     e44:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
     e48:	e35300c9 	cmp	r3, #201	; 0xc9
     e4c:	1a000001 	bne	e58 <__cs3_isr_irq+0x78>
        HPSTimer2ISR();
     e50:	eb0001e5 	bl	15ec <HPSTimer2ISR>
     e54:	ea000005 	b	e70 <__cs3_isr_irq+0x90>
    else if(interrupt_ID == JP1_IRQ)
     e58:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
     e5c:	e3530053 	cmp	r3, #83	; 0x53
     e60:	1a000001 	bne	e6c <__cs3_isr_irq+0x8c>
        JP1ISR();
     e64:	eb0001f4 	bl	163c <JP1ISR>
     e68:	ea000000 	b	e70 <__cs3_isr_irq+0x90>
    else
        while (1);                          // if unexpected, then stay here
     e6c:	eafffffe 	b	e6c <__cs3_isr_irq+0x8c>

    // Write to the End of Interrupt Register (ICCEOIR)
    address = MPCORE_GIC_CPUIF + ICCEOIR;
     e70:	e30c3110 	movw	r3, #49424	; 0xc110
     e74:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     e78:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
    *(int *)address = interrupt_ID;
     e7c:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     e80:	e51b2024 	ldr	r2, [r11, #-36]	; 0xffffffdc
     e84:	e5832000 	str	r2, [r3]

    return;
     e88:	e1a00000 	nop			; (mov r0, r0)
} 
     e8c:	e24bd018 	sub	sp, r11, #24
     e90:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

00000e94 <__cs3_reset>:

// Define the remaining exception handlers
void __attribute__ ((interrupt)) __cs3_reset (void)
{
     e94:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     e98:	e28db000 	add	r11, sp, #0
    while(1);
     e9c:	eafffffe 	b	e9c <__cs3_reset+0x8>

00000ea0 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void)
{
     ea0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     ea4:	e28db000 	add	r11, sp, #0
    while(1);
     ea8:	eafffffe 	b	ea8 <__cs3_isr_undef+0x8>

00000eac <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void)
{
     eac:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     eb0:	e28db000 	add	r11, sp, #0
    while(1);
     eb4:	eafffffe 	b	eb4 <__cs3_isr_swi+0x8>

00000eb8 <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void)
{
     eb8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     ebc:	e28db000 	add	r11, sp, #0
    while(1);
     ec0:	eafffffe 	b	ec0 <__cs3_isr_pabort+0x8>

00000ec4 <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void)
{
     ec4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     ec8:	e28db000 	add	r11, sp, #0
    while(1)
	{
		return;
     ecc:	e1a00000 	nop			; (mov r0, r0)
	}
}
     ed0:	e28bd000 	add	sp, r11, #0
     ed4:	e8bd0800 	ldmfd	sp!, {r11}
     ed8:	e25ef004 	subs	pc, lr, #4

00000edc <__cs3_isr_fiq>:

void __attribute__ ((interrupt)) __cs3_isr_fiq (void)
{
     edc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     ee0:	e28db000 	add	r11, sp, #0
    while(1);
     ee4:	eafffffe 	b	ee4 <__cs3_isr_fiq+0x8>

00000ee8 <disable_A9_interrupts>:
}

void disable_A9_interrupts(void)
{
     ee8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     eec:	e28db000 	add	r11, sp, #0
     ef0:	e24dd00c 	sub	sp, sp, #12
    int status = 0b11010011;
     ef4:	e3a030d3 	mov	r3, #211	; 0xd3
     ef8:	e50b3008 	str	r3, [r11, #-8]
    asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     efc:	e51b3008 	ldr	r3, [r11, #-8]
     f00:	e129f003 	msr	CPSR_fc, r3
}
     f04:	e28bd000 	add	sp, r11, #0
     f08:	e8bd0800 	ldmfd	sp!, {r11}
     f0c:	e12fff1e 	bx	lr

00000f10 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack(void)
{
     f10:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     f14:	e28db000 	add	r11, sp, #0
     f18:	e24dd00c 	sub	sp, sp, #12
    int stack, mode;
    stack = A9_ONCHIP_END - 7;      // top of A9 onchip memory, aligned to 8 bytes
     f1c:	e3e03007 	mvn	r3, #7
     f20:	e50b3008 	str	r3, [r11, #-8]
    /* change processor to IRQ mode with interrupts disabled */
    mode = INT_DISABLE | IRQ_MODE;
     f24:	e3a030d2 	mov	r3, #210	; 0xd2
     f28:	e50b300c 	str	r3, [r11, #-12]
    asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     f2c:	e51b300c 	ldr	r3, [r11, #-12]
     f30:	e129f003 	msr	CPSR_fc, r3
    /* set banked stack pointer */
    asm("mov sp, %[ps]" : : [ps] "r" (stack));
     f34:	e51b3008 	ldr	r3, [r11, #-8]
     f38:	e1a0d003 	mov	sp, r3

    /* go back to SVC mode before executing subroutine return! */
    mode = INT_DISABLE | SVC_MODE;
     f3c:	e3a030d3 	mov	r3, #211	; 0xd3
     f40:	e50b300c 	str	r3, [r11, #-12]
    asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     f44:	e51b300c 	ldr	r3, [r11, #-12]
     f48:	e129f003 	msr	CPSR_fc, r3
}
     f4c:	e28bd000 	add	sp, r11, #0
     f50:	e8bd0800 	ldmfd	sp!, {r11}
     f54:	e12fff1e 	bx	lr

00000f58 <enable_A9_interrupts>:

void enable_A9_interrupts(void)
{
     f58:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     f5c:	e28db000 	add	r11, sp, #0
     f60:	e24dd00c 	sub	sp, sp, #12
    int status = SVC_MODE | INT_ENABLE;
     f64:	e3a03053 	mov	r3, #83	; 0x53
     f68:	e50b3008 	str	r3, [r11, #-8]
    asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     f6c:	e51b3008 	ldr	r3, [r11, #-8]
     f70:	e129f003 	msr	CPSR_fc, r3
}
     f74:	e28bd000 	add	sp, r11, #0
     f78:	e8bd0800 	ldmfd	sp!, {r11}
     f7c:	e12fff1e 	bx	lr

00000f80 <config_GIC>:

void config_GIC(void) // STEP 3 IN SECTION 3.1 OF USING THE ARM GENERIC INTERRUPT CONTROLLER
{
     f80:	e92d4800 	push	{r11, lr}
     f84:	e28db004 	add	r11, sp, #4
     f88:	e24dd008 	sub	sp, sp, #8
    int address;
    // config_interrupt (KEYS_IRQ, CPU0);
    config_interrupt(MPCORE_PRIV_TIMER_IRQ, CPU0);
     f8c:	e3a0001d 	mov	r0, #29
     f90:	e3a01001 	mov	r1, #1
     f94:	eb000022 	bl	1024 <config_interrupt>
    config_interrupt (PS2_IRQ, CPU0);
     f98:	e3a0004f 	mov	r0, #79	; 0x4f
     f9c:	e3a01001 	mov	r1, #1
     fa0:	eb00001f 	bl	1024 <config_interrupt>
    config_interrupt (HPS_TIMER0_IRQ, CPU0);
     fa4:	e3a000c7 	mov	r0, #199	; 0xc7
     fa8:	e3a01001 	mov	r1, #1
     fac:	eb00001c 	bl	1024 <config_interrupt>
    config_interrupt (HPS_TIMER1_IRQ, CPU0);
     fb0:	e3a000c8 	mov	r0, #200	; 0xc8
     fb4:	e3a01001 	mov	r1, #1
     fb8:	eb000019 	bl	1024 <config_interrupt>
    config_interrupt (HPS_TIMER2_IRQ, CPU0);
     fbc:	e3a000c9 	mov	r0, #201	; 0xc9
     fc0:	e3a01001 	mov	r1, #1
     fc4:	eb000016 	bl	1024 <config_interrupt>
    config_interrupt (JP1_IRQ, CPU0);
     fc8:	e3a00053 	mov	r0, #83	; 0x53
     fcc:	e3a01001 	mov	r1, #1
     fd0:	eb000013 	bl	1024 <config_interrupt>

    // Set Interrupt Priority Mask Register (ICCPMR). Enable interrupts of all priorities 
    address = MPCORE_GIC_CPUIF + ICCPMR;
     fd4:	e30c3104 	movw	r3, #49412	; 0xc104
     fd8:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     fdc:	e50b3008 	str	r3, [r11, #-8]
    *(int *) address = 0xFFFF;       
     fe0:	e51b3008 	ldr	r3, [r11, #-8]
     fe4:	e30f2fff 	movw	r2, #65535	; 0xffff
     fe8:	e5832000 	str	r2, [r3]

    // Set CPU Interface Control Register (ICCICR). Enable signaling of interrupts
    address = MPCORE_GIC_CPUIF + ICCICR;
     fec:	e3a03cc1 	mov	r3, #49408	; 0xc100
     ff0:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     ff4:	e50b3008 	str	r3, [r11, #-8]
    *(int *) address = 1;       
     ff8:	e51b3008 	ldr	r3, [r11, #-8]
     ffc:	e3a02001 	mov	r2, #1
    1000:	e5832000 	str	r2, [r3]

    // Configure the Distributor Control Register (ICDDCR) to send pending interrupts to CPUs 
    address = MPCORE_GIC_DIST + ICDDCR;
    1004:	e3a03a0d 	mov	r3, #53248	; 0xd000
    1008:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    100c:	e50b3008 	str	r3, [r11, #-8]
    *(int *) address = 1;          
    1010:	e51b3008 	ldr	r3, [r11, #-8]
    1014:	e3a02001 	mov	r2, #1
    1018:	e5832000 	str	r2, [r3]
}
    101c:	e24bd004 	sub	sp, r11, #4
    1020:	e8bd8800 	pop	{r11, pc}

00001024 <config_interrupt>:

void config_interrupt (int N, int CPU_target)
{
    1024:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1028:	e28db000 	add	r11, sp, #0
    102c:	e24dd01c 	sub	sp, sp, #28
    1030:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
    1034:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
    int reg_offset, index, value, address;
    
    /* Configure the Interrupt Set-Enable Registers (ICDISERn). 
     * reg_offset = (integer_div(N / 32) * 4
     * value = 1 << (N mod 32) */
    reg_offset = (N >> 3) & 0xFFFFFFFC; 
    1038:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    103c:	e1a031c3 	asr	r3, r3, #3
    1040:	e3c33003 	bic	r3, r3, #3
    1044:	e50b3008 	str	r3, [r11, #-8]
    index = N & 0x1F;
    1048:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    104c:	e203301f 	and	r3, r3, #31
    1050:	e50b300c 	str	r3, [r11, #-12]
    value = 0x1 << index;
    1054:	e3a02001 	mov	r2, #1
    1058:	e51b300c 	ldr	r3, [r11, #-12]
    105c:	e1a03312 	lsl	r3, r2, r3
    1060:	e50b3010 	str	r3, [r11, #-16]
    address = MPCORE_GIC_DIST + ICDISER + reg_offset;
    1064:	e51b3008 	ldr	r3, [r11, #-8]
    1068:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
    106c:	e2433c03 	sub	r3, r3, #768	; 0x300
    1070:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    /* Now that we know the register address and value, set the appropriate bit */
   *(int *)address |= value;
    1074:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    1078:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    107c:	e5921000 	ldr	r1, [r2]
    1080:	e51b2010 	ldr	r2, [r11, #-16]
    1084:	e1812002 	orr	r2, r1, r2
    1088:	e5832000 	str	r2, [r3]

    /* Configure the Interrupt Processor Targets Register (ICDIPTRn)
     * reg_offset = integer_div(N / 4) * 4
     * index = N mod 4 */
    reg_offset = (N & 0xFFFFFFFC);
    108c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1090:	e3c33003 	bic	r3, r3, #3
    1094:	e50b3008 	str	r3, [r11, #-8]
    index = N & 0x3;
    1098:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    109c:	e2033003 	and	r3, r3, #3
    10a0:	e50b300c 	str	r3, [r11, #-12]
    address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
    10a4:	e51b2008 	ldr	r2, [r11, #-8]
    10a8:	e51b300c 	ldr	r3, [r11, #-12]
    10ac:	e0823003 	add	r3, r2, r3
    10b0:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
    10b4:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    /* Now that we know the register address and value, write to (only) the appropriate byte */
    *(char *)address = (char) CPU_target;
    10b8:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    10bc:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    10c0:	e6ef2072 	uxtb	r2, r2
    10c4:	e5c32000 	strb	r2, [r3]
}
    10c8:	e28bd000 	add	sp, r11, #0
    10cc:	e8bd0800 	ldmfd	sp!, {r11}
    10d0:	e12fff1e 	bx	lr

000010d4 <configInterupt>:

void configInterupt()
{
    10d4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    10d8:	e28db000 	add	r11, sp, #0
    10dc:	e24dd01c 	sub	sp, sp, #28
    volatile int* timerPtr = (int*) MPCORE_PRIV_TIMER;      // timer base address
    10e0:	e3a03cc6 	mov	r3, #50688	; 0xc600
    10e4:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    10e8:	e50b3008 	str	r3, [r11, #-8]

    volatile int* HPSTimer0Ptr = (int*) HPS_TIMER0_BASE;
    10ec:	e3a03902 	mov	r3, #32768	; 0x8000
    10f0:	e34f3fc0 	movt	r3, #65472	; 0xffc0
    10f4:	e50b300c 	str	r3, [r11, #-12]

    volatile int* HPSTimer1Ptr = (int*) HPS_TIMER1_BASE;
    10f8:	e3a03a09 	mov	r3, #36864	; 0x9000
    10fc:	e34f3fc0 	movt	r3, #65472	; 0xffc0
    1100:	e50b3010 	str	r3, [r11, #-16]

    volatile int* HPSTimer2Ptr = (int*) HPS_TIMER2_BASE;
    1104:	e3a03000 	mov	r3, #0
    1108:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    110c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec

    volatile int* GPIOPtr = (int*)0xFF200060;
    1110:	e3a03060 	mov	r3, #96	; 0x60
    1114:	e34f3f20 	movt	r3, #65312	; 0xff20
    1118:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8

    // Private Timer
    *(timerPtr) = 400000;           // Interrupt every 1s      2000000
    111c:	e51b2008 	ldr	r2, [r11, #-8]
    1120:	e3a03d6a 	mov	r3, #6784	; 0x1a80
    1124:	e3403006 	movt	r3, #6
    1128:	e5823000 	str	r3, [r2]
    *(timerPtr + 2) |= (100 << 8);  // Prescale 100
    112c:	e51b3008 	ldr	r3, [r11, #-8]
    1130:	e2833008 	add	r3, r3, #8
    1134:	e51b2008 	ldr	r2, [r11, #-8]
    1138:	e2822008 	add	r2, r2, #8
    113c:	e5922000 	ldr	r2, [r2]
    1140:	e3822b19 	orr	r2, r2, #25600	; 0x6400
    1144:	e5832000 	str	r2, [r3]
    *(timerPtr + 2) |= 0x07;        // Turn on I, A, and E
    1148:	e51b3008 	ldr	r3, [r11, #-8]
    114c:	e2833008 	add	r3, r3, #8
    1150:	e51b2008 	ldr	r2, [r11, #-8]
    1154:	e2822008 	add	r2, r2, #8
    1158:	e5922000 	ldr	r2, [r2]
    115c:	e3822007 	orr	r2, r2, #7
    1160:	e5832000 	str	r2, [r3]

    // HPS0
    *(HPSTimer0Ptr + 2) &= ~(1 << 0);    // E = 0
    1164:	e51b300c 	ldr	r3, [r11, #-12]
    1168:	e2833008 	add	r3, r3, #8
    116c:	e51b200c 	ldr	r2, [r11, #-12]
    1170:	e2822008 	add	r2, r2, #8
    1174:	e5922000 	ldr	r2, [r2]
    1178:	e3c22001 	bic	r2, r2, #1
    117c:	e5832000 	str	r2, [r3]
    *(HPSTimer0Ptr) = 25000000;         // load value
    1180:	e51b200c 	ldr	r2, [r11, #-12]
    1184:	e3073840 	movw	r3, #30784	; 0x7840
    1188:	e340317d 	movt	r3, #381	; 0x17d
    118c:	e5823000 	str	r3, [r2]
    *(HPSTimer0Ptr + 2) |= (1 << 1);     // M = 1
    1190:	e51b300c 	ldr	r3, [r11, #-12]
    1194:	e2833008 	add	r3, r3, #8
    1198:	e51b200c 	ldr	r2, [r11, #-12]
    119c:	e2822008 	add	r2, r2, #8
    11a0:	e5922000 	ldr	r2, [r2]
    11a4:	e3822002 	orr	r2, r2, #2
    11a8:	e5832000 	str	r2, [r3]
    *(HPSTimer0Ptr + 2) |= (1 << 0);     // E = 1
    11ac:	e51b300c 	ldr	r3, [r11, #-12]
    11b0:	e2833008 	add	r3, r3, #8
    11b4:	e51b200c 	ldr	r2, [r11, #-12]
    11b8:	e2822008 	add	r2, r2, #8
    11bc:	e5922000 	ldr	r2, [r2]
    11c0:	e3822001 	orr	r2, r2, #1
    11c4:	e5832000 	str	r2, [r3]
    *(HPSTimer0Ptr + 2) &= ~(1 << 2);    // I = 0 Active low
    11c8:	e51b300c 	ldr	r3, [r11, #-12]
    11cc:	e2833008 	add	r3, r3, #8
    11d0:	e51b200c 	ldr	r2, [r11, #-12]
    11d4:	e2822008 	add	r2, r2, #8
    11d8:	e5922000 	ldr	r2, [r2]
    11dc:	e3c22004 	bic	r2, r2, #4
    11e0:	e5832000 	str	r2, [r3]

    // HPS1
    *(HPSTimer1Ptr + 2) &= ~(1 << 0); // E = 0
    11e4:	e51b3010 	ldr	r3, [r11, #-16]
    11e8:	e2833008 	add	r3, r3, #8
    11ec:	e51b2010 	ldr	r2, [r11, #-16]
    11f0:	e2822008 	add	r2, r2, #8
    11f4:	e5922000 	ldr	r2, [r2]
    11f8:	e3c22001 	bic	r2, r2, #1
    11fc:	e5832000 	str	r2, [r3]
    *(HPSTimer1Ptr) = 1000000; // load value
    1200:	e51b2010 	ldr	r2, [r11, #-16]
    1204:	e3043240 	movw	r3, #16960	; 0x4240
    1208:	e340300f 	movt	r3, #15
    120c:	e5823000 	str	r3, [r2]
    *(HPSTimer1Ptr + 2) |= (1 << 1); // M = 1
    1210:	e51b3010 	ldr	r3, [r11, #-16]
    1214:	e2833008 	add	r3, r3, #8
    1218:	e51b2010 	ldr	r2, [r11, #-16]
    121c:	e2822008 	add	r2, r2, #8
    1220:	e5922000 	ldr	r2, [r2]
    1224:	e3822002 	orr	r2, r2, #2
    1228:	e5832000 	str	r2, [r3]
    *(HPSTimer1Ptr + 2) |= (1 << 0); // E = 1
    122c:	e51b3010 	ldr	r3, [r11, #-16]
    1230:	e2833008 	add	r3, r3, #8
    1234:	e51b2010 	ldr	r2, [r11, #-16]
    1238:	e2822008 	add	r2, r2, #8
    123c:	e5922000 	ldr	r2, [r2]
    1240:	e3822001 	orr	r2, r2, #1
    1244:	e5832000 	str	r2, [r3]
    *(HPSTimer1Ptr + 2) &= ~(1 << 2); // I = 0
    1248:	e51b3010 	ldr	r3, [r11, #-16]
    124c:	e2833008 	add	r3, r3, #8
    1250:	e51b2010 	ldr	r2, [r11, #-16]
    1254:	e2822008 	add	r2, r2, #8
    1258:	e5922000 	ldr	r2, [r2]
    125c:	e3c22004 	bic	r2, r2, #4
    1260:	e5832000 	str	r2, [r3]

    // HPS2 used for ADC
    *(HPSTimer2Ptr + 2) &= ~(1 << 0); // E = 0
    1264:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    1268:	e2833008 	add	r3, r3, #8
    126c:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    1270:	e2822008 	add	r2, r2, #8
    1274:	e5922000 	ldr	r2, [r2]
    1278:	e3c22001 	bic	r2, r2, #1
    127c:	e5832000 	str	r2, [r3]
    *(HPSTimer2Ptr) = 125000; // load value
    1280:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    1284:	e30e3848 	movw	r3, #59464	; 0xe848
    1288:	e3403001 	movt	r3, #1
    128c:	e5823000 	str	r3, [r2]
    *(HPSTimer2Ptr + 2) |= (1 << 1); // M = 1
    1290:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    1294:	e2833008 	add	r3, r3, #8
    1298:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    129c:	e2822008 	add	r2, r2, #8
    12a0:	e5922000 	ldr	r2, [r2]
    12a4:	e3822002 	orr	r2, r2, #2
    12a8:	e5832000 	str	r2, [r3]
    *(HPSTimer2Ptr + 2) |= (1 << 0); // E = 1
    12ac:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    12b0:	e2833008 	add	r3, r3, #8
    12b4:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    12b8:	e2822008 	add	r2, r2, #8
    12bc:	e5922000 	ldr	r2, [r2]
    12c0:	e3822001 	orr	r2, r2, #1
    12c4:	e5832000 	str	r2, [r3]
    *(HPSTimer2Ptr + 2) &= ~(1 << 2); // I = 0
    12c8:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    12cc:	e2833008 	add	r3, r3, #8
    12d0:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    12d4:	e2822008 	add	r2, r2, #8
    12d8:	e5922000 	ldr	r2, [r2]
    12dc:	e3c22004 	bic	r2, r2, #4
    12e0:	e5832000 	str	r2, [r3]

    // JP1 Interrupt
    *(GPIOPtr + 1) &= ~(1 << 3); // Set as input
    12e4:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    12e8:	e2833004 	add	r3, r3, #4
    12ec:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    12f0:	e2822004 	add	r2, r2, #4
    12f4:	e5922000 	ldr	r2, [r2]
    12f8:	e3c22008 	bic	r2, r2, #8
    12fc:	e5832000 	str	r2, [r3]
    *(GPIOPtr + 2) |=  (1 << 3); // Activate interrupt
    1300:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1304:	e2833008 	add	r3, r3, #8
    1308:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    130c:	e2822008 	add	r2, r2, #8
    1310:	e5922000 	ldr	r2, [r2]
    1314:	e3822008 	orr	r2, r2, #8
    1318:	e5832000 	str	r2, [r3]
}
    131c:	e28bd000 	add	sp, r11, #0
    1320:	e8bd0800 	ldmfd	sp!, {r11}
    1324:	e12fff1e 	bx	lr

00001328 <TimerISR>:

static unsigned char END = 0; // Used to read the End-Of-Interrupt register to reset timer values

//**Interrupt Service Routines**//
void TimerISR()
{
    1328:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    132c:	e28db000 	add	r11, sp, #0
    pidInterrupt = 1;
    1330:	e304374c 	movw	r3, #18252	; 0x474c
    1334:	e3403000 	movt	r3, #0
    1338:	e3a02001 	mov	r2, #1
    133c:	e5832000 	str	r2, [r3]
}
    1340:	e28bd000 	add	sp, r11, #0
    1344:	e8bd0800 	ldmfd	sp!, {r11}
    1348:	e12fff1e 	bx	lr

0000134c <HPSTimer0ISR>:

void HPSTimer0ISR()   //half second period
{
    134c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1350:	e28db000 	add	r11, sp, #0
    1354:	e24dd00c 	sub	sp, sp, #12
    volatile int* HPSTimer0Ptr = (int*) HPS_TIMER0_BASE;
    1358:	e3a03902 	mov	r3, #32768	; 0x8000
    135c:	e34f3fc0 	movt	r3, #65472	; 0xffc0
    1360:	e50b3008 	str	r3, [r11, #-8]
    static char flag; //toggle flag
  
    ps2Interrupt = 1;
    1364:	e304373c 	movw	r3, #18236	; 0x473c
    1368:	e3403000 	movt	r3, #0
    136c:	e3a02001 	mov	r2, #1
    1370:	e5832000 	str	r2, [r3]
    flag ++;
    1374:	e3043730 	movw	r3, #18224	; 0x4730
    1378:	e3403000 	movt	r3, #0
    137c:	e5d33000 	ldrb	r3, [r3]
    1380:	e2833001 	add	r3, r3, #1
    1384:	e6ef2073 	uxtb	r2, r3
    1388:	e3043730 	movw	r3, #18224	; 0x4730
    138c:	e3403000 	movt	r3, #0
    1390:	e5c32000 	strb	r2, [r3]
    if(flag == 2)
    1394:	e3043730 	movw	r3, #18224	; 0x4730
    1398:	e3403000 	movt	r3, #0
    139c:	e5d33000 	ldrb	r3, [r3]
    13a0:	e3530002 	cmp	r3, #2
    13a4:	1a000003 	bne	13b8 <HPSTimer0ISR+0x6c>
    {
        monitorInterrupt = 1;
    13a8:	e3043744 	movw	r3, #18244	; 0x4744
    13ac:	e3403000 	movt	r3, #0
    13b0:	e3a02001 	mov	r2, #1
    13b4:	e5832000 	str	r2, [r3]
    }
    if(flag == 4)
    13b8:	e3043730 	movw	r3, #18224	; 0x4730
    13bc:	e3403000 	movt	r3, #0
    13c0:	e5d33000 	ldrb	r3, [r3]
    13c4:	e3530004 	cmp	r3, #4
    13c8:	1a000007 	bne	13ec <HPSTimer0ISR+0xa0>
    {
        encoderInterrupt = 1;
    13cc:	e3043740 	movw	r3, #18240	; 0x4740
    13d0:	e3403000 	movt	r3, #0
    13d4:	e3a02001 	mov	r2, #1
    13d8:	e5832000 	str	r2, [r3]
        flag = 0;
    13dc:	e3043730 	movw	r3, #18224	; 0x4730
    13e0:	e3403000 	movt	r3, #0
    13e4:	e3a02000 	mov	r2, #0
    13e8:	e5c32000 	strb	r2, [r3]
    }
  
    END = *(HPSTimer0Ptr + 3);  //resets HPSTimer0
    13ec:	e51b3008 	ldr	r3, [r11, #-8]
    13f0:	e283300c 	add	r3, r3, #12
    13f4:	e5933000 	ldr	r3, [r3]
    13f8:	e6ef2073 	uxtb	r2, r3
    13fc:	e3043728 	movw	r3, #18216	; 0x4728
    1400:	e3403000 	movt	r3, #0
    1404:	e5c32000 	strb	r2, [r3]
}
    1408:	e28bd000 	add	sp, r11, #0
    140c:	e8bd0800 	ldmfd	sp!, {r11}
    1410:	e12fff1e 	bx	lr

00001414 <HPSTimer1ISR>:

void HPSTimer1ISR()
{
    1414:	e92d4800 	push	{r11, lr}
    1418:	e28db004 	add	r11, sp, #4
    141c:	e24dd008 	sub	sp, sp, #8
    volatile int* HPSTimer1Ptr = (int*) HPS_TIMER1_BASE;
    1420:	e3a03a09 	mov	r3, #36864	; 0x9000
    1424:	e34f3fc0 	movt	r3, #65472	; 0xffc0
    1428:	e50b3008 	str	r3, [r11, #-8]
    volatile int* GPIOPtr = (int*)JP1_BASE;
    142c:	e3a03060 	mov	r3, #96	; 0x60
    1430:	e34f3f20 	movt	r3, #65312	; 0xff20
    1434:	e50b300c 	str	r3, [r11, #-12]

    static int pwmToggle = 0;
    if(percent > 1)
    1438:	e3043738 	movw	r3, #18232	; 0x4738
    143c:	e3403000 	movt	r3, #0
    1440:	e5933000 	ldr	r3, [r3]
    1444:	e1a00003 	mov	r0, r3
    1448:	e3a015fe 	mov	r1, #1065353216	; 0x3f800000
    144c:	eb0009bc 	bl	3b44 <__aeabi_fcmpgt>
    1450:	e1a03000 	mov	r3, r0
    1454:	e3530000 	cmp	r3, #0
    1458:	0a000003 	beq	146c <HPSTimer1ISR+0x58>
        percent = 1;
    145c:	e3043738 	movw	r3, #18232	; 0x4738
    1460:	e3403000 	movt	r3, #0
    1464:	e3a025fe 	mov	r2, #1065353216	; 0x3f800000
    1468:	e5832000 	str	r2, [r3]
    if(setrpm.iTotal == 0)
    146c:	e3043788 	movw	r3, #18312	; 0x4788
    1470:	e3403000 	movt	r3, #0
    1474:	e593300c 	ldr	r3, [r3, #12]
    1478:	e3530000 	cmp	r3, #0
    147c:	1a000003 	bne	1490 <HPSTimer1ISR+0x7c>
        percent = 0;
    1480:	e3043738 	movw	r3, #18232	; 0x4738
    1484:	e3403000 	movt	r3, #0
    1488:	e3a02000 	mov	r2, #0
    148c:	e5832000 	str	r2, [r3]

    if(percent == 0)
    1490:	e3043738 	movw	r3, #18232	; 0x4738
    1494:	e3403000 	movt	r3, #0
    1498:	e5933000 	ldr	r3, [r3]
    149c:	e1a00003 	mov	r0, r3
    14a0:	e3a01000 	mov	r1, #0
    14a4:	eb00098e 	bl	3ae4 <__aeabi_fcmpeq>
    14a8:	e1a03000 	mov	r3, r0
    14ac:	e3530000 	cmp	r3, #0
    14b0:	0a000005 	beq	14cc <HPSTimer1ISR+0xb8>
    {
        *(GPIOPtr) &= ~(1 << 0);
    14b4:	e51b300c 	ldr	r3, [r11, #-12]
    14b8:	e5933000 	ldr	r3, [r3]
    14bc:	e3c32001 	bic	r2, r3, #1
    14c0:	e51b300c 	ldr	r3, [r11, #-12]
    14c4:	e5832000 	str	r2, [r3]
    14c8:	ea00003e 	b	15c8 <HPSTimer1ISR+0x1b4>
        // *(GPIOPtr) &= 0xFFFFFFFD; // 1101
    }
    else if(percent == 1.0)
    14cc:	e3043738 	movw	r3, #18232	; 0x4738
    14d0:	e3403000 	movt	r3, #0
    14d4:	e5933000 	ldr	r3, [r3]
    14d8:	e1a00003 	mov	r0, r3
    14dc:	e3a015fe 	mov	r1, #1065353216	; 0x3f800000
    14e0:	eb00097f 	bl	3ae4 <__aeabi_fcmpeq>
    14e4:	e1a03000 	mov	r3, r0
    14e8:	e3530000 	cmp	r3, #0
    14ec:	0a000005 	beq	1508 <HPSTimer1ISR+0xf4>
    {
        *(GPIOPtr) |= (1 << 0);
    14f0:	e51b300c 	ldr	r3, [r11, #-12]
    14f4:	e5933000 	ldr	r3, [r3]
    14f8:	e3832001 	orr	r2, r3, #1
    14fc:	e51b300c 	ldr	r3, [r11, #-12]
    1500:	e5832000 	str	r2, [r3]
    1504:	ea00002f 	b	15c8 <HPSTimer1ISR+0x1b4>
        // *(GPIOPtr) |= 0x2; // 0010
    }
    else
    {
        if(pwmToggle == 1)
    1508:	e304372c 	movw	r3, #18220	; 0x472c
    150c:	e3403000 	movt	r3, #0
    1510:	e5933000 	ldr	r3, [r3]
    1514:	e3530001 	cmp	r3, #1
    1518:	1a000012 	bne	1568 <HPSTimer1ISR+0x154>
        {
            *(GPIOPtr) |= (1 << 0); // D0 = low
    151c:	e51b300c 	ldr	r3, [r11, #-12]
    1520:	e5933000 	ldr	r3, [r3]
    1524:	e3832001 	orr	r2, r3, #1
    1528:	e51b300c 	ldr	r3, [r11, #-12]
    152c:	e5832000 	str	r2, [r3]
            // *(GPIOPtr) |= 0x2;
            SetPWM(1000, percent);
    1530:	e3043738 	movw	r3, #18232	; 0x4738
    1534:	e3403000 	movt	r3, #0
    1538:	e5933000 	ldr	r3, [r3]
    153c:	e1a00003 	mov	r0, r3
    1540:	eb0005f3 	bl	2d14 <__aeabi_f2d>
    1544:	e1a02000 	mov	r2, r0
    1548:	e1a03001 	mov	r3, r1
    154c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    1550:	eb000362 	bl	22e0 <SetPWM>

            pwmToggle = 0;
    1554:	e304372c 	movw	r3, #18220	; 0x472c
    1558:	e3403000 	movt	r3, #0
    155c:	e3a02000 	mov	r2, #0
    1560:	e5832000 	str	r2, [r3]
    1564:	ea000017 	b	15c8 <HPSTimer1ISR+0x1b4>
        }
        else // pwmToggle == 0
        {
            *(GPIOPtr) &= ~(1 << 0); // D0 = high
    1568:	e51b300c 	ldr	r3, [r11, #-12]
    156c:	e5933000 	ldr	r3, [r3]
    1570:	e3c32001 	bic	r2, r3, #1
    1574:	e51b300c 	ldr	r3, [r11, #-12]
    1578:	e5832000 	str	r2, [r3]
            // *(GPIOPtr) &= 0xFFFFFFFD;
            SetPWM( 1000, (1.0 - percent) );
    157c:	e3043738 	movw	r3, #18232	; 0x4738
    1580:	e3403000 	movt	r3, #0
    1584:	e5933000 	ldr	r3, [r3]
    1588:	e1a00003 	mov	r0, r3
    158c:	eb0005e0 	bl	2d14 <__aeabi_f2d>
    1590:	e1a02000 	mov	r2, r0
    1594:	e1a03001 	mov	r3, r1
    1598:	e3a00000 	mov	r0, #0
    159c:	e3a01000 	mov	r1, #0
    15a0:	e3431ff0 	movt	r1, #16368	; 0x3ff0
    15a4:	eb000502 	bl	29b4 <__aeabi_dsub>
    15a8:	e1a02000 	mov	r2, r0
    15ac:	e1a03001 	mov	r3, r1
    15b0:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    15b4:	eb000349 	bl	22e0 <SetPWM>

            pwmToggle = 1;
    15b8:	e304372c 	movw	r3, #18220	; 0x472c
    15bc:	e3403000 	movt	r3, #0
    15c0:	e3a02001 	mov	r2, #1
    15c4:	e5832000 	str	r2, [r3]
        }
    }

    END = *(HPSTimer1Ptr + 3);
    15c8:	e51b3008 	ldr	r3, [r11, #-8]
    15cc:	e283300c 	add	r3, r3, #12
    15d0:	e5933000 	ldr	r3, [r3]
    15d4:	e6ef2073 	uxtb	r2, r3
    15d8:	e3043728 	movw	r3, #18216	; 0x4728
    15dc:	e3403000 	movt	r3, #0
    15e0:	e5c32000 	strb	r2, [r3]
}
    15e4:	e24bd004 	sub	sp, r11, #4
    15e8:	e8bd8800 	pop	{r11, pc}

000015ec <HPSTimer2ISR>:

void HPSTimer2ISR()
{
    15ec:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    15f0:	e28db000 	add	r11, sp, #0
    15f4:	e24dd00c 	sub	sp, sp, #12
    volatile int* HPSTimer2Ptr = (int*) HPS_TIMER2_BASE;
    15f8:	e3a03000 	mov	r3, #0
    15fc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    1600:	e50b3008 	str	r3, [r11, #-8]
    
    adcInterrupt = 1;
    1604:	e3043748 	movw	r3, #18248	; 0x4748
    1608:	e3403000 	movt	r3, #0
    160c:	e3a02001 	mov	r2, #1
    1610:	e5832000 	str	r2, [r3]

    END = *(HPSTimer2Ptr + 3);
    1614:	e51b3008 	ldr	r3, [r11, #-8]
    1618:	e283300c 	add	r3, r3, #12
    161c:	e5933000 	ldr	r3, [r3]
    1620:	e6ef2073 	uxtb	r2, r3
    1624:	e3043728 	movw	r3, #18216	; 0x4728
    1628:	e3403000 	movt	r3, #0
    162c:	e5c32000 	strb	r2, [r3]
}
    1630:	e28bd000 	add	sp, r11, #0
    1634:	e8bd0800 	ldmfd	sp!, {r11}
    1638:	e12fff1e 	bx	lr

0000163c <JP1ISR>:

void JP1ISR()
{
    163c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1640:	e28db000 	add	r11, sp, #0
    1644:	e24dd00c 	sub	sp, sp, #12
    volatile int* GPIOPtr = (int*)JP1_BASE;
    1648:	e3a03060 	mov	r3, #96	; 0x60
    164c:	e34f3f20 	movt	r3, #65312	; 0xff20
    1650:	e50b3008 	str	r3, [r11, #-8]
    encoderValue++;
    1654:	e3043750 	movw	r3, #18256	; 0x4750
    1658:	e3403000 	movt	r3, #0
    165c:	e5933000 	ldr	r3, [r3]
    1660:	e2832001 	add	r2, r3, #1
    1664:	e3043750 	movw	r3, #18256	; 0x4750
    1668:	e3403000 	movt	r3, #0
    166c:	e5832000 	str	r2, [r3]

    *(GPIOPtr + 3) |= (1 << 3);
    1670:	e51b3008 	ldr	r3, [r11, #-8]
    1674:	e283300c 	add	r3, r3, #12
    1678:	e51b2008 	ldr	r2, [r11, #-8]
    167c:	e282200c 	add	r2, r2, #12
    1680:	e5922000 	ldr	r2, [r2]
    1684:	e3822008 	orr	r2, r2, #8
    1688:	e5832000 	str	r2, [r3]
}
    168c:	e28bd000 	add	sp, r11, #0
    1690:	e8bd0800 	ldmfd	sp!, {r11}
    1694:	e12fff1e 	bx	lr

00001698 <Key>:
extern char enterPress;

//**Function Code**//

void Key(void)
{
    1698:	e92d4800 	push	{r11, lr}
    169c:	e28db004 	add	r11, sp, #4
    16a0:	e24dd008 	sub	sp, sp, #8
	char key = GetKey(keyData);
    16a4:	e3043734 	movw	r3, #18228	; 0x4734
    16a8:	e3403000 	movt	r3, #0
    16ac:	e5933000 	ldr	r3, [r3]
    16b0:	e1a00003 	mov	r0, r3
    16b4:	eb00008c 	bl	18ec <GetKey>
    16b8:	e1a03000 	mov	r3, r0
    16bc:	e54b3005 	strb	r3, [r11, #-5]

	if(key == 0xD)		//invalid key
    16c0:	e55b3005 	ldrb	r3, [r11, #-5]
    16c4:	e353000d 	cmp	r3, #13
    16c8:	0a000082 	beq	18d8 <Key+0x240>
		return;

	if( (key != 0xA) && (key != 0xB) && (key != 0xC) )	//is integer
    16cc:	e55b3005 	ldrb	r3, [r11, #-5]
    16d0:	e353000a 	cmp	r3, #10
    16d4:	0a00003f 	beq	17d8 <Key+0x140>
    16d8:	e55b3005 	ldrb	r3, [r11, #-5]
    16dc:	e353000b 	cmp	r3, #11
    16e0:	0a00003c 	beq	17d8 <Key+0x140>
    16e4:	e55b3005 	ldrb	r3, [r11, #-5]
    16e8:	e353000c 	cmp	r3, #12
    16ec:	0a000039 	beq	17d8 <Key+0x140>
	{
		inprpm.iHundred = inprpm.iTen;
    16f0:	e3043770 	movw	r3, #18288	; 0x4770
    16f4:	e3403000 	movt	r3, #0
    16f8:	e5932004 	ldr	r2, [r3, #4]
    16fc:	e3043770 	movw	r3, #18288	; 0x4770
    1700:	e3403000 	movt	r3, #0
    1704:	e5832000 	str	r2, [r3]
		inprpm.iTen = inprpm.iOne;
    1708:	e3043770 	movw	r3, #18288	; 0x4770
    170c:	e3403000 	movt	r3, #0
    1710:	e5932008 	ldr	r2, [r3, #8]
    1714:	e3043770 	movw	r3, #18288	; 0x4770
    1718:	e3403000 	movt	r3, #0
    171c:	e5832004 	str	r2, [r3, #4]
		inprpm.iOne = key;
    1720:	e55b2005 	ldrb	r2, [r11, #-5]
    1724:	e3043770 	movw	r3, #18288	; 0x4770
    1728:	e3403000 	movt	r3, #0
    172c:	e5832008 	str	r2, [r3, #8]
		Total_inprpm();
    1730:	eb000375 	bl	250c <Total_inprpm>

		inprpm.cHundred = inprpm.cTen;
    1734:	e3043770 	movw	r3, #18288	; 0x4770
    1738:	e3403000 	movt	r3, #0
    173c:	e5d32011 	ldrb	r2, [r3, #17]
    1740:	e3043770 	movw	r3, #18288	; 0x4770
    1744:	e3403000 	movt	r3, #0
    1748:	e5c32010 	strb	r2, [r3, #16]
		inprpm.cTen = inprpm.cOne;
    174c:	e3043770 	movw	r3, #18288	; 0x4770
    1750:	e3403000 	movt	r3, #0
    1754:	e5d32012 	ldrb	r2, [r3, #18]
    1758:	e3043770 	movw	r3, #18288	; 0x4770
    175c:	e3403000 	movt	r3, #0
    1760:	e5c32011 	strb	r2, [r3, #17]
		inprpm.cOne = GetCharacter(key);
    1764:	e55b3005 	ldrb	r3, [r11, #-5]
    1768:	e1a00003 	mov	r0, r3
    176c:	eb00031e 	bl	23ec <GetCharacter>
    1770:	e1a03000 	mov	r3, r0
    1774:	e1a02003 	mov	r2, r3
    1778:	e3043770 	movw	r3, #18288	; 0x4770
    177c:	e3403000 	movt	r3, #0
    1780:	e5c32012 	strb	r2, [r3, #18]

		inprpm.cTotal[0] = inprpm.cHundred;
    1784:	e3043770 	movw	r3, #18288	; 0x4770
    1788:	e3403000 	movt	r3, #0
    178c:	e5d32010 	ldrb	r2, [r3, #16]
    1790:	e3043770 	movw	r3, #18288	; 0x4770
    1794:	e3403000 	movt	r3, #0
    1798:	e5c32013 	strb	r2, [r3, #19]
		inprpm.cTotal[1] = inprpm.cTen;
    179c:	e3043770 	movw	r3, #18288	; 0x4770
    17a0:	e3403000 	movt	r3, #0
    17a4:	e5d32011 	ldrb	r2, [r3, #17]
    17a8:	e3043770 	movw	r3, #18288	; 0x4770
    17ac:	e3403000 	movt	r3, #0
    17b0:	e5c32014 	strb	r2, [r3, #20]
		inprpm.cTotal[2] = inprpm.cOne;
    17b4:	e3043770 	movw	r3, #18288	; 0x4770
    17b8:	e3403000 	movt	r3, #0
    17bc:	e5d32012 	ldrb	r2, [r3, #18]
    17c0:	e3043770 	movw	r3, #18288	; 0x4770
    17c4:	e3403000 	movt	r3, #0
    17c8:	e5c32015 	strb	r2, [r3, #21]

		InputRPM_Write(inprpm.cTotal);
    17cc:	e59f0110 	ldr	r0, [pc, #272]	; 18e4 <Key+0x24c>
    17d0:	ebfffcb5 	bl	aac <InputRPM_Write>
		return;
    17d4:	ea000040 	b	18dc <Key+0x244>
	}

	if(key == 0xA)			//enter pressed
    17d8:	e55b3005 	ldrb	r3, [r11, #-5]
    17dc:	e353000a 	cmp	r3, #10
    17e0:	1a00003d 	bne	18dc <Key+0x244>
	{
		if(inprpm.cTotal[2] != ' ')
    17e4:	e3043770 	movw	r3, #18288	; 0x4770
    17e8:	e3403000 	movt	r3, #0
    17ec:	e5d33015 	ldrb	r3, [r3, #21]
    17f0:	e3530020 	cmp	r3, #32
    17f4:	0a000038 	beq	18dc <Key+0x244>
		{
			enterPress = 1;
    17f8:	e3043758 	movw	r3, #18264	; 0x4758
    17fc:	e3403000 	movt	r3, #0
    1800:	e3a02001 	mov	r2, #1
    1804:	e5c32000 	strb	r2, [r3]
			setrpm = inprpm;
    1808:	e3042788 	movw	r2, #18312	; 0x4788
    180c:	e3402000 	movt	r2, #0
    1810:	e3043770 	movw	r3, #18288	; 0x4770
    1814:	e3403000 	movt	r3, #0
    1818:	e1a0c002 	mov	r12, r2
    181c:	e1a0e003 	mov	lr, r3
    1820:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    1824:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
    1828:	e89e0003 	ldm	lr, {r0, r1}
    182c:	e88c0003 	stm	r12, {r0, r1}
			InputRPM_Clear();
    1830:	ebfffccb 	bl	b64 <InputRPM_Clear>
			Clear_inprpm();
    1834:	eb000307 	bl	2458 <Clear_inprpm>

			if(setrpm.iTotal > 233)
    1838:	e3043788 	movw	r3, #18312	; 0x4788
    183c:	e3403000 	movt	r3, #0
    1840:	e593300c 	ldr	r3, [r3, #12]
    1844:	e35300e9 	cmp	r3, #233	; 0xe9
    1848:	da00000f 	ble	188c <Key+0x1f4>
			{
				setrpm.iTotal = 233;
    184c:	e3043788 	movw	r3, #18312	; 0x4788
    1850:	e3403000 	movt	r3, #0
    1854:	e3a020e9 	mov	r2, #233	; 0xe9
    1858:	e583200c 	str	r2, [r3, #12]
				setrpm.cTotal[0] = '2';
    185c:	e3043788 	movw	r3, #18312	; 0x4788
    1860:	e3403000 	movt	r3, #0
    1864:	e3a02032 	mov	r2, #50	; 0x32
    1868:	e5c32013 	strb	r2, [r3, #19]
				setrpm.cTotal[1] = '3';
    186c:	e3043788 	movw	r3, #18312	; 0x4788
    1870:	e3403000 	movt	r3, #0
    1874:	e3a02033 	mov	r2, #51	; 0x33
    1878:	e5c32014 	strb	r2, [r3, #20]
				setrpm.cTotal[2] = '3';
    187c:	e3043788 	movw	r3, #18312	; 0x4788
    1880:	e3403000 	movt	r3, #0
    1884:	e3a02033 	mov	r2, #51	; 0x33
    1888:	e5c32015 	strb	r2, [r3, #21]
			}
			SetRPM_Write(setrpm.cTotal);
    188c:	e59f0054 	ldr	r0, [pc, #84]	; 18e8 <Key+0x250>
    1890:	ebfffcdb 	bl	c04 <SetRPM_Write>
			percent = setrpm.iTotal / (float) 233;
    1894:	e3043788 	movw	r3, #18312	; 0x4788
    1898:	e3403000 	movt	r3, #0
    189c:	e593300c 	ldr	r3, [r3, #12]
    18a0:	e1a00003 	mov	r0, r3
    18a4:	eb000772 	bl	3674 <__aeabi_i2f>
    18a8:	e1a03000 	mov	r3, r0
    18ac:	e1a00003 	mov	r0, r3
    18b0:	e3a01000 	mov	r1, #0
    18b4:	e3441369 	movt	r1, #17257	; 0x4369
    18b8:	eb00080a 	bl	38e8 <__aeabi_fdiv>
    18bc:	e1a03000 	mov	r3, r0
    18c0:	e1a02003 	mov	r2, r3
    18c4:	e3043738 	movw	r3, #18232	; 0x4738
    18c8:	e3403000 	movt	r3, #0
    18cc:	e5832000 	str	r2, [r3]
			return;
    18d0:	e1a00000 	nop			; (mov r0, r0)
    18d4:	ea000000 	b	18dc <Key+0x244>
void Key(void)
{
	char key = GetKey(keyData);

	if(key == 0xD)		//invalid key
		return;
    18d8:	e1a00000 	nop			; (mov r0, r0)
			SetRPM_Write(setrpm.cTotal);
			percent = setrpm.iTotal / (float) 233;
			return;
		}
	}
}
    18dc:	e24bd004 	sub	sp, r11, #4
    18e0:	e8bd8800 	pop	{r11, pc}
    18e4:	00004783 	.word	0x00004783
    18e8:	0000479b 	.word	0x0000479b

000018ec <GetKey>:

char GetKey(int keyData)
{
    18ec:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    18f0:	e28db000 	add	r11, sp, #0
    18f4:	e24dd014 	sub	sp, sp, #20
    18f8:	e50b0010 	str	r0, [r11, #-16]
	char key;

	switch(keyData)
    18fc:	e51b3010 	ldr	r3, [r11, #-16]
    1900:	e243305a 	sub	r3, r3, #90	; 0x5a
    1904:	e3530086 	cmp	r3, #134	; 0x86
    1908:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    190c:	ea0000b0 	b	1bd4 <GetKey+0x2e8>
    1910:	00001b2c 	.word	0x00001b2c
    1914:	00001bd4 	.word	0x00001bd4
    1918:	00001bd4 	.word	0x00001bd4
    191c:	00001bd4 	.word	0x00001bd4
    1920:	00001bd4 	.word	0x00001bd4
    1924:	00001bd4 	.word	0x00001bd4
    1928:	00001bd4 	.word	0x00001bd4
    192c:	00001bd4 	.word	0x00001bd4
    1930:	00001bd4 	.word	0x00001bd4
    1934:	00001bd4 	.word	0x00001bd4
    1938:	00001bd4 	.word	0x00001bd4
    193c:	00001bd4 	.word	0x00001bd4
    1940:	00001bd4 	.word	0x00001bd4
    1944:	00001bd4 	.word	0x00001bd4
    1948:	00001bd4 	.word	0x00001bd4
    194c:	00001b50 	.word	0x00001b50
    1950:	00001bd4 	.word	0x00001bd4
    1954:	00001b74 	.word	0x00001b74
    1958:	00001b98 	.word	0x00001b98
    195c:	00001bd4 	.word	0x00001bd4
    1960:	00001bd4 	.word	0x00001bd4
    1964:	00001bd4 	.word	0x00001bd4
    1968:	00001b44 	.word	0x00001b44
    196c:	00001bd4 	.word	0x00001bd4
    1970:	00001b5c 	.word	0x00001b5c
    1974:	00001b80 	.word	0x00001b80
    1978:	00001b8c 	.word	0x00001b8c
    197c:	00001ba4 	.word	0x00001ba4
    1980:	00001bd4 	.word	0x00001bd4
    1984:	00001bd4 	.word	0x00001bd4
    1988:	00001bd4 	.word	0x00001bd4
    198c:	00001bbc 	.word	0x00001bbc
    1990:	00001b68 	.word	0x00001b68
    1994:	00001bc8 	.word	0x00001bc8
    1998:	00001bd4 	.word	0x00001bd4
    199c:	00001bb0 	.word	0x00001bb0
    19a0:	00001bd4 	.word	0x00001bd4
    19a4:	00001bd4 	.word	0x00001bd4
    19a8:	00001bd4 	.word	0x00001bd4
    19ac:	00001bd4 	.word	0x00001bd4
    19b0:	00001bd4 	.word	0x00001bd4
    19b4:	00001bd4 	.word	0x00001bd4
    19b8:	00001bd4 	.word	0x00001bd4
    19bc:	00001bd4 	.word	0x00001bd4
    19c0:	00001bd4 	.word	0x00001bd4
    19c4:	00001bd4 	.word	0x00001bd4
    19c8:	00001bd4 	.word	0x00001bd4
    19cc:	00001bd4 	.word	0x00001bd4
    19d0:	00001bd4 	.word	0x00001bd4
    19d4:	00001bd4 	.word	0x00001bd4
    19d8:	00001bd4 	.word	0x00001bd4
    19dc:	00001bd4 	.word	0x00001bd4
    19e0:	00001bd4 	.word	0x00001bd4
    19e4:	00001bd4 	.word	0x00001bd4
    19e8:	00001bd4 	.word	0x00001bd4
    19ec:	00001bd4 	.word	0x00001bd4
    19f0:	00001bd4 	.word	0x00001bd4
    19f4:	00001bd4 	.word	0x00001bd4
    19f8:	00001bd4 	.word	0x00001bd4
    19fc:	00001bd4 	.word	0x00001bd4
    1a00:	00001bd4 	.word	0x00001bd4
    1a04:	00001bd4 	.word	0x00001bd4
    1a08:	00001bd4 	.word	0x00001bd4
    1a0c:	00001bd4 	.word	0x00001bd4
    1a10:	00001bd4 	.word	0x00001bd4
    1a14:	00001bd4 	.word	0x00001bd4
    1a18:	00001bd4 	.word	0x00001bd4
    1a1c:	00001bd4 	.word	0x00001bd4
    1a20:	00001bd4 	.word	0x00001bd4
    1a24:	00001bd4 	.word	0x00001bd4
    1a28:	00001bd4 	.word	0x00001bd4
    1a2c:	00001bd4 	.word	0x00001bd4
    1a30:	00001bd4 	.word	0x00001bd4
    1a34:	00001bd4 	.word	0x00001bd4
    1a38:	00001bd4 	.word	0x00001bd4
    1a3c:	00001bd4 	.word	0x00001bd4
    1a40:	00001bd4 	.word	0x00001bd4
    1a44:	00001bd4 	.word	0x00001bd4
    1a48:	00001bd4 	.word	0x00001bd4
    1a4c:	00001bd4 	.word	0x00001bd4
    1a50:	00001bd4 	.word	0x00001bd4
    1a54:	00001bd4 	.word	0x00001bd4
    1a58:	00001bd4 	.word	0x00001bd4
    1a5c:	00001bd4 	.word	0x00001bd4
    1a60:	00001bd4 	.word	0x00001bd4
    1a64:	00001bd4 	.word	0x00001bd4
    1a68:	00001bd4 	.word	0x00001bd4
    1a6c:	00001bd4 	.word	0x00001bd4
    1a70:	00001bd4 	.word	0x00001bd4
    1a74:	00001bd4 	.word	0x00001bd4
    1a78:	00001bd4 	.word	0x00001bd4
    1a7c:	00001bd4 	.word	0x00001bd4
    1a80:	00001bd4 	.word	0x00001bd4
    1a84:	00001bd4 	.word	0x00001bd4
    1a88:	00001bd4 	.word	0x00001bd4
    1a8c:	00001bd4 	.word	0x00001bd4
    1a90:	00001bd4 	.word	0x00001bd4
    1a94:	00001bd4 	.word	0x00001bd4
    1a98:	00001bd4 	.word	0x00001bd4
    1a9c:	00001bd4 	.word	0x00001bd4
    1aa0:	00001bd4 	.word	0x00001bd4
    1aa4:	00001bd4 	.word	0x00001bd4
    1aa8:	00001bd4 	.word	0x00001bd4
    1aac:	00001bd4 	.word	0x00001bd4
    1ab0:	00001bd4 	.word	0x00001bd4
    1ab4:	00001bd4 	.word	0x00001bd4
    1ab8:	00001bd4 	.word	0x00001bd4
    1abc:	00001bd4 	.word	0x00001bd4
    1ac0:	00001bd4 	.word	0x00001bd4
    1ac4:	00001bd4 	.word	0x00001bd4
    1ac8:	00001bd4 	.word	0x00001bd4
    1acc:	00001bd4 	.word	0x00001bd4
    1ad0:	00001bd4 	.word	0x00001bd4
    1ad4:	00001bd4 	.word	0x00001bd4
    1ad8:	00001bd4 	.word	0x00001bd4
    1adc:	00001bd4 	.word	0x00001bd4
    1ae0:	00001bd4 	.word	0x00001bd4
    1ae4:	00001bd4 	.word	0x00001bd4
    1ae8:	00001bd4 	.word	0x00001bd4
    1aec:	00001bd4 	.word	0x00001bd4
    1af0:	00001bd4 	.word	0x00001bd4
    1af4:	00001bd4 	.word	0x00001bd4
    1af8:	00001bd4 	.word	0x00001bd4
    1afc:	00001bd4 	.word	0x00001bd4
    1b00:	00001bd4 	.word	0x00001bd4
    1b04:	00001bd4 	.word	0x00001bd4
    1b08:	00001bd4 	.word	0x00001bd4
    1b0c:	00001bd4 	.word	0x00001bd4
    1b10:	00001bd4 	.word	0x00001bd4
    1b14:	00001bd4 	.word	0x00001bd4
    1b18:	00001bd4 	.word	0x00001bd4
    1b1c:	00001bd4 	.word	0x00001bd4
    1b20:	00001bd4 	.word	0x00001bd4
    1b24:	00001bd4 	.word	0x00001bd4
    1b28:	00001b38 	.word	0x00001b38
	{
		case 0x5A:		//enter
			key = 0xA;
    1b2c:	e3a0300a 	mov	r3, #10
    1b30:	e54b3005 	strb	r3, [r11, #-5]
			break;
    1b34:	ea000029 	b	1be0 <GetKey+0x2f4>
		case 0xE0:		//enter
			key = 0xA;
    1b38:	e3a0300a 	mov	r3, #10
    1b3c:	e54b3005 	strb	r3, [r11, #-5]
			break;
    1b40:	ea000026 	b	1be0 <GetKey+0x2f4>
		case 0x70:		//0
			key = 0;
    1b44:	e3a03000 	mov	r3, #0
    1b48:	e54b3005 	strb	r3, [r11, #-5]
			break;
    1b4c:	ea000023 	b	1be0 <GetKey+0x2f4>
		case 0x69:		//1
			key = 1;
    1b50:	e3a03001 	mov	r3, #1
    1b54:	e54b3005 	strb	r3, [r11, #-5]
			break;
    1b58:	ea000020 	b	1be0 <GetKey+0x2f4>
		case 0x72:		//2
			key = 2;
    1b5c:	e3a03002 	mov	r3, #2
    1b60:	e54b3005 	strb	r3, [r11, #-5]
			break;
    1b64:	ea00001d 	b	1be0 <GetKey+0x2f4>
		case 0x7A:		//3
			key = 3;
    1b68:	e3a03003 	mov	r3, #3
    1b6c:	e54b3005 	strb	r3, [r11, #-5]
			break;
    1b70:	ea00001a 	b	1be0 <GetKey+0x2f4>
		case 0x6B:		//4
			key = 4;
    1b74:	e3a03004 	mov	r3, #4
    1b78:	e54b3005 	strb	r3, [r11, #-5]
			break;
    1b7c:	ea000017 	b	1be0 <GetKey+0x2f4>
		case 0x73:		//5
			key = 5;
    1b80:	e3a03005 	mov	r3, #5
    1b84:	e54b3005 	strb	r3, [r11, #-5]
			break;
    1b88:	ea000014 	b	1be0 <GetKey+0x2f4>
		case 0x74:		//6
			key = 6;
    1b8c:	e3a03006 	mov	r3, #6
    1b90:	e54b3005 	strb	r3, [r11, #-5]
			break;
    1b94:	ea000011 	b	1be0 <GetKey+0x2f4>
		case 0x6C:		//7
			key = 7;
    1b98:	e3a03007 	mov	r3, #7
    1b9c:	e54b3005 	strb	r3, [r11, #-5]
			break;
    1ba0:	ea00000e 	b	1be0 <GetKey+0x2f4>
		case 0x75:		//8
			key = 8;
    1ba4:	e3a03008 	mov	r3, #8
    1ba8:	e54b3005 	strb	r3, [r11, #-5]
			break;
    1bac:	ea00000b 	b	1be0 <GetKey+0x2f4>
		case 0x7D:		//9
			key = 9;
    1bb0:	e3a03009 	mov	r3, #9
    1bb4:	e54b3005 	strb	r3, [r11, #-5]
			break;
    1bb8:	ea000008 	b	1be0 <GetKey+0x2f4>
		case 0x79:		//+
			key = 0xB;
    1bbc:	e3a0300b 	mov	r3, #11
    1bc0:	e54b3005 	strb	r3, [r11, #-5]
			break;
    1bc4:	ea000005 	b	1be0 <GetKey+0x2f4>
		case 0x7B:		//-
			key = 0xC;
    1bc8:	e3a0300c 	mov	r3, #12
    1bcc:	e54b3005 	strb	r3, [r11, #-5]
			break;
    1bd0:	ea000002 	b	1be0 <GetKey+0x2f4>
		default:		//invalid
			key = 0xD;
    1bd4:	e3a0300d 	mov	r3, #13
    1bd8:	e54b3005 	strb	r3, [r11, #-5]
			break;
    1bdc:	e1a00000 	nop			; (mov r0, r0)
	}
	return key;
    1be0:	e55b3005 	ldrb	r3, [r11, #-5]
}
    1be4:	e1a00003 	mov	r0, r3
    1be8:	e28bd000 	add	sp, r11, #0
    1bec:	e8bd0800 	ldmfd	sp!, {r11}
    1bf0:	e12fff1e 	bx	lr

00001bf4 <main>:

//**Program Code**//


int main(void)
{
    1bf4:	e92d4830 	push	{r4, r5, r11, lr}
    1bf8:	e28db00c 	add	r11, sp, #12
    1bfc:	e24dd050 	sub	sp, sp, #80	; 0x50
	//**Initialize Interrupts**//
	disable_A9_interrupts();
    1c00:	ebfffcb8 	bl	ee8 <disable_A9_interrupts>
	set_A9_IRQ_stack();
    1c04:	ebfffcc1 	bl	f10 <set_A9_IRQ_stack>
	config_GIC();
    1c08:	ebfffcdc 	bl	f80 <config_GIC>
	configInterupt();
    1c0c:	ebfffd30 	bl	10d4 <configInterupt>
	enable_A9_interrupts();
    1c10:	ebfffcd0 	bl	f58 <enable_A9_interrupts>

	//**Initialize GUI**//
	GUI_Setup();
    1c14:	ebfffaf9 	bl	800 <GUI_Setup>

	//**Initialize Structs**//
	InitializeStructs();
    1c18:	eb000261 	bl	25a4 <InitializeStructs>

    //GPIO
    volatile int* GPIOPtr = (int*)0xFF200060;
    1c1c:	e3a03060 	mov	r3, #96	; 0x60
    1c20:	e34f3f20 	movt	r3, #65312	; 0xff20
    1c24:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
    *(GPIOPtr + 1) |= (1 << 0); // Set D0 as output
    1c28:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1c2c:	e2833004 	add	r3, r3, #4
    1c30:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    1c34:	e2822004 	add	r2, r2, #4
    1c38:	e5922000 	ldr	r2, [r2]
    1c3c:	e3822001 	orr	r2, r2, #1
    1c40:	e5832000 	str	r2, [r3]

    // PID
    SPid pidObj = {0.0, (100.0 / IGAIN), (-100.0 / IGAIN), IGAIN, PGAIN};
    1c44:	e3043210 	movw	r3, #16912	; 0x4210
    1c48:	e3403000 	movt	r3, #0
    1c4c:	e24bc04c 	sub	r12, r11, #76	; 0x4c
    1c50:	e1a0e003 	mov	lr, r3
    1c54:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    1c58:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
    1c5c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    1c60:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
    1c64:	e89e0003 	ldm	lr, {r0, r1}
    1c68:	e88c0003 	stm	r12, {r0, r1}
    pidObj.pGain = 0.1;
    pidObj.iGain = 0.5;
    pidObj.iMin = (-100.0 / iGain);
    pidObj.iMax = (100.0 / iGain);
    */
    double error = 0.0;
    1c6c:	e3a02000 	mov	r2, #0
    1c70:	e3a03000 	mov	r3, #0
    1c74:	e14b22f4 	strd	r2, [r11, #-36]	; 0xffffffdc
    double percent2 = 0.0;
    1c78:	e3a02000 	mov	r2, #0
    1c7c:	e3a03000 	mov	r3, #0
    1c80:	e14b21f4 	strd	r2, [r11, #-20]	; 0xffffffec
    1c84:	ea000000 	b	1c8c <main+0x98>
        if(adcInterrupt == 1)
        {
            adcInterrupt = 0; // disable flag
            ADC_Get();
        }
	}
    1c88:	e1a00000 	nop			; (mov r0, r0)
	while(1)
	{
        /*******************************************************************************************
        PID:
        *******************************************************************************************/
        if(pidInterrupt == 1)
    1c8c:	e304374c 	movw	r3, #18252	; 0x474c
    1c90:	e3403000 	movt	r3, #0
    1c94:	e5933000 	ldr	r3, [r3]
    1c98:	e3530001 	cmp	r3, #1
    1c9c:	1a0000d7 	bne	2000 <main+0x40c>
        {
            pidInterrupt = 0;    
    1ca0:	e304374c 	movw	r3, #18252	; 0x474c
    1ca4:	e3403000 	movt	r3, #0
    1ca8:	e3a02000 	mov	r2, #0
    1cac:	e5832000 	str	r2, [r3]
            actrpm.iTotal = (((encoderValue) * 2.0/3.0 ) * 5);
    1cb0:	e3043750 	movw	r3, #18256	; 0x4750
    1cb4:	e3403000 	movt	r3, #0
    1cb8:	e5933000 	ldr	r3, [r3]
    1cbc:	e1a00003 	mov	r0, r3
    1cc0:	eb000409 	bl	2cec <__aeabi_i2d>
    1cc4:	e1a02000 	mov	r2, r0
    1cc8:	e1a03001 	mov	r3, r1
    1ccc:	e1a00002 	mov	r0, r2
    1cd0:	e1a01003 	mov	r1, r3
    1cd4:	eb000337 	bl	29b8 <__adddf3>
    1cd8:	e1a02000 	mov	r2, r0
    1cdc:	e1a03001 	mov	r3, r1
    1ce0:	e1a00002 	mov	r0, r2
    1ce4:	e1a01003 	mov	r1, r3
    1ce8:	e3a02000 	mov	r2, #0
    1cec:	e3a03000 	mov	r3, #0
    1cf0:	e3443008 	movt	r3, #16392	; 0x4008
    1cf4:	eb0004d7 	bl	3058 <__aeabi_ddiv>
    1cf8:	e1a02000 	mov	r2, r0
    1cfc:	e1a03001 	mov	r3, r1
    1d00:	e1a00002 	mov	r0, r2
    1d04:	e1a01003 	mov	r1, r3
    1d08:	e3a02000 	mov	r2, #0
    1d0c:	e3a03000 	mov	r3, #0
    1d10:	e3443014 	movt	r3, #16404	; 0x4014
    1d14:	eb00042b 	bl	2dc8 <__aeabi_dmul>
    1d18:	e1a02000 	mov	r2, r0
    1d1c:	e1a03001 	mov	r3, r1
    1d20:	e1a00002 	mov	r0, r2
    1d24:	e1a01003 	mov	r1, r3
    1d28:	eb00059e 	bl	33a8 <__aeabi_d2iz>
    1d2c:	e1a02000 	mov	r2, r0
    1d30:	e30437a0 	movw	r3, #18336	; 0x47a0
    1d34:	e3403000 	movt	r3, #0
    1d38:	e583200c 	str	r2, [r3, #12]
            PrintActualRpm();
    1d3c:	ebfffa86 	bl	75c <PrintActualRpm>
            encoderValue = 0;
    1d40:	e3043750 	movw	r3, #18256	; 0x4750
    1d44:	e3403000 	movt	r3, #0
    1d48:	e3a02000 	mov	r2, #0
    1d4c:	e5832000 	str	r2, [r3]
            
            error = ( ((double)setrpm.iTotal - (double)actrpm.iTotal) / (233.0) ) * 100.0;
    1d50:	e3043788 	movw	r3, #18312	; 0x4788
    1d54:	e3403000 	movt	r3, #0
    1d58:	e593300c 	ldr	r3, [r3, #12]
    1d5c:	e1a00003 	mov	r0, r3
    1d60:	eb0003e1 	bl	2cec <__aeabi_i2d>
    1d64:	e1a04000 	mov	r4, r0
    1d68:	e1a05001 	mov	r5, r1
    1d6c:	e30437a0 	movw	r3, #18336	; 0x47a0
    1d70:	e3403000 	movt	r3, #0
    1d74:	e593300c 	ldr	r3, [r3, #12]
    1d78:	e1a00003 	mov	r0, r3
    1d7c:	eb0003da 	bl	2cec <__aeabi_i2d>
    1d80:	e1a02000 	mov	r2, r0
    1d84:	e1a03001 	mov	r3, r1
    1d88:	e1a00004 	mov	r0, r4
    1d8c:	e1a01005 	mov	r1, r5
    1d90:	eb000307 	bl	29b4 <__aeabi_dsub>
    1d94:	e1a02000 	mov	r2, r0
    1d98:	e1a03001 	mov	r3, r1
    1d9c:	e1a00002 	mov	r0, r2
    1da0:	e1a01003 	mov	r1, r3
    1da4:	e3a02000 	mov	r2, #0
    1da8:	e3a03a02 	mov	r3, #8192	; 0x2000
    1dac:	e344306d 	movt	r3, #16493	; 0x406d
    1db0:	eb0004a8 	bl	3058 <__aeabi_ddiv>
    1db4:	e1a02000 	mov	r2, r0
    1db8:	e1a03001 	mov	r3, r1
    1dbc:	e1a00002 	mov	r0, r2
    1dc0:	e1a01003 	mov	r1, r3
    1dc4:	e3a02000 	mov	r2, #0
    1dc8:	e3a03000 	mov	r3, #0
    1dcc:	e3443059 	movt	r3, #16473	; 0x4059
    1dd0:	eb0003fc 	bl	2dc8 <__aeabi_dmul>
    1dd4:	e1a02000 	mov	r2, r0
    1dd8:	e1a03001 	mov	r3, r1
    1ddc:	e14b22f4 	strd	r2, [r11, #-36]	; 0xffffffdc
            percent2 = UpdatePID(&pidObj, error);
    1de0:	e24b304c 	sub	r3, r11, #76	; 0x4c
    1de4:	e1a00003 	mov	r0, r3
    1de8:	e14b22d4 	ldrd	r2, [r11, #-36]	; 0xffffffdc
    1dec:	eb0000b5 	bl	20c8 <UpdatePID>
    1df0:	e14b01f4 	strd	r0, [r11, #-20]	; 0xffffffec

            per1 = DigitSeparator((int)percent);
    1df4:	e3043738 	movw	r3, #18232	; 0x4738
    1df8:	e3403000 	movt	r3, #0
    1dfc:	e5933000 	ldr	r3, [r3]
    1e00:	e1a00003 	mov	r0, r3
    1e04:	eb000754 	bl	3b5c <__aeabi_f2iz>
    1e08:	e1a03000 	mov	r3, r0
    1e0c:	e1a00003 	mov	r0, r3
    1e10:	ebfff953 	bl	364 <DigitSeparator>
    1e14:	e54b005c 	strb	r0, [r11, #-92]	; 0xffffffa4
    1e18:	e7e73450 	ubfx	r3, r0, #8, #8
    1e1c:	e54b305b 	strb	r3, [r11, #-91]	; 0xffffffa5
    1e20:	e7e73850 	ubfx	r3, r0, #16, #8
    1e24:	e54b305a 	strb	r3, [r11, #-90]	; 0xffffffa6
    1e28:	e7e73c50 	ubfx	r3, r0, #24, #8
    1e2c:	e54b3059 	strb	r3, [r11, #-89]	; 0xffffffa7
    1e30:	e51b305c 	ldr	r3, [r11, #-92]	; 0xffffffa4
    1e34:	e50b3050 	str	r3, [r11, #-80]	; 0xffffffb0
            if(percent < 0)
    1e38:	e3043738 	movw	r3, #18232	; 0x4738
    1e3c:	e3403000 	movt	r3, #0
    1e40:	e5933000 	ldr	r3, [r3]
    1e44:	e1a00003 	mov	r0, r3
    1e48:	e3a01000 	mov	r1, #0
    1e4c:	eb00072a 	bl	3afc <__aeabi_fcmplt>
    1e50:	e1a03000 	mov	r3, r0
    1e54:	e3530000 	cmp	r3, #0
    1e58:	0a000008 	beq	1e80 <main+0x28c>
            {
                percent = percent2 * -1;
    1e5c:	e14b01d4 	ldrd	r0, [r11, #-20]	; 0xffffffec
    1e60:	eb000567 	bl	3404 <__aeabi_d2f>
    1e64:	e1a03000 	mov	r3, r0
    1e68:	e2232102 	eor	r2, r3, #-2147483648	; 0x80000000
    1e6c:	e3043738 	movw	r3, #18232	; 0x4738
    1e70:	e3403000 	movt	r3, #0
    1e74:	e5832000 	str	r2, [r3]
                put_jtag('-');
    1e78:	e3a0002d 	mov	r0, #45	; 0x2d
    1e7c:	ebfff8f6 	bl	25c <put_jtag>
            }
            put_jtag(GetDigit(per1.thousands));
    1e80:	e55b3050 	ldrb	r3, [r11, #-80]	; 0xffffffb0
    1e84:	e1a00003 	mov	r0, r3
    1e88:	ebfff91e 	bl	308 <GetDigit>
    1e8c:	e1a03000 	mov	r3, r0
    1e90:	e1a00003 	mov	r0, r3
    1e94:	ebfff8f0 	bl	25c <put_jtag>
            put_jtag(GetDigit(per1.hundreds));
    1e98:	e55b304f 	ldrb	r3, [r11, #-79]	; 0xffffffb1
    1e9c:	e1a00003 	mov	r0, r3
    1ea0:	ebfff918 	bl	308 <GetDigit>
    1ea4:	e1a03000 	mov	r3, r0
    1ea8:	e1a00003 	mov	r0, r3
    1eac:	ebfff8ea 	bl	25c <put_jtag>
            put_jtag(GetDigit(per1.tens));
    1eb0:	e55b304e 	ldrb	r3, [r11, #-78]	; 0xffffffb2
    1eb4:	e1a00003 	mov	r0, r3
    1eb8:	ebfff912 	bl	308 <GetDigit>
    1ebc:	e1a03000 	mov	r3, r0
    1ec0:	e1a00003 	mov	r0, r3
    1ec4:	ebfff8e4 	bl	25c <put_jtag>
            put_jtag(GetDigit(per1.ones));
    1ec8:	e55b304d 	ldrb	r3, [r11, #-77]	; 0xffffffb3
    1ecc:	e1a00003 	mov	r0, r3
    1ed0:	ebfff90c 	bl	308 <GetDigit>
    1ed4:	e1a03000 	mov	r3, r0
    1ed8:	e1a00003 	mov	r0, r3
    1edc:	ebfff8de 	bl	25c <put_jtag>
            put_jtag('\n');
    1ee0:	e3a0000a 	mov	r0, #10
    1ee4:	ebfff8dc 	bl	25c <put_jtag>

            per2 = DigitSeparator((int)percent2);
    1ee8:	e14b01d4 	ldrd	r0, [r11, #-20]	; 0xffffffec
    1eec:	eb00052d 	bl	33a8 <__aeabi_d2iz>
    1ef0:	e1a03000 	mov	r3, r0
    1ef4:	e1a00003 	mov	r0, r3
    1ef8:	ebfff919 	bl	364 <DigitSeparator>
    1efc:	e54b005c 	strb	r0, [r11, #-92]	; 0xffffffa4
    1f00:	e7e73450 	ubfx	r3, r0, #8, #8
    1f04:	e54b305b 	strb	r3, [r11, #-91]	; 0xffffffa5
    1f08:	e7e73850 	ubfx	r3, r0, #16, #8
    1f0c:	e54b305a 	strb	r3, [r11, #-90]	; 0xffffffa6
    1f10:	e7e73c50 	ubfx	r3, r0, #24, #8
    1f14:	e54b3059 	strb	r3, [r11, #-89]	; 0xffffffa7
    1f18:	e51b305c 	ldr	r3, [r11, #-92]	; 0xffffffa4
    1f1c:	e50b3054 	str	r3, [r11, #-84]	; 0xffffffac
            if(percent2 < 0)
    1f20:	e14b01d4 	ldrd	r0, [r11, #-20]	; 0xffffffec
    1f24:	e3a02000 	mov	r2, #0
    1f28:	e3a03000 	mov	r3, #0
    1f2c:	eb000505 	bl	3348 <__aeabi_dcmplt>
    1f30:	e1a03000 	mov	r3, r0
    1f34:	e3530000 	cmp	r3, #0
    1f38:	0a000006 	beq	1f58 <main+0x364>
            {
                percent2 = percent2 * -1;
    1f3c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    1f40:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    1f44:	e51b3010 	ldr	r3, [r11, #-16]
    1f48:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000
    1f4c:	e50b3010 	str	r3, [r11, #-16]
                put_jtag('-');
    1f50:	e3a0002d 	mov	r0, #45	; 0x2d
    1f54:	ebfff8c0 	bl	25c <put_jtag>
            }
            put_jtag(GetDigit(per2.thousands));
    1f58:	e55b3054 	ldrb	r3, [r11, #-84]	; 0xffffffac
    1f5c:	e1a00003 	mov	r0, r3
    1f60:	ebfff8e8 	bl	308 <GetDigit>
    1f64:	e1a03000 	mov	r3, r0
    1f68:	e1a00003 	mov	r0, r3
    1f6c:	ebfff8ba 	bl	25c <put_jtag>
            put_jtag(GetDigit(per2.hundreds));
    1f70:	e55b3053 	ldrb	r3, [r11, #-83]	; 0xffffffad
    1f74:	e1a00003 	mov	r0, r3
    1f78:	ebfff8e2 	bl	308 <GetDigit>
    1f7c:	e1a03000 	mov	r3, r0
    1f80:	e1a00003 	mov	r0, r3
    1f84:	ebfff8b4 	bl	25c <put_jtag>
            put_jtag(GetDigit(per2.tens));
    1f88:	e55b3052 	ldrb	r3, [r11, #-82]	; 0xffffffae
    1f8c:	e1a00003 	mov	r0, r3
    1f90:	ebfff8dc 	bl	308 <GetDigit>
    1f94:	e1a03000 	mov	r3, r0
    1f98:	e1a00003 	mov	r0, r3
    1f9c:	ebfff8ae 	bl	25c <put_jtag>
            put_jtag(GetDigit(per2.ones));
    1fa0:	e55b3051 	ldrb	r3, [r11, #-81]	; 0xffffffaf
    1fa4:	e1a00003 	mov	r0, r3
    1fa8:	ebfff8d6 	bl	308 <GetDigit>
    1fac:	e1a03000 	mov	r3, r0
    1fb0:	e1a00003 	mov	r0, r3
    1fb4:	ebfff8a8 	bl	25c <put_jtag>
            put_jtag('\n');
    1fb8:	e3a0000a 	mov	r0, #10
    1fbc:	ebfff8a6 	bl	25c <put_jtag>
            put_jtag('\n');
    1fc0:	e3a0000a 	mov	r0, #10
    1fc4:	ebfff8a4 	bl	25c <put_jtag>
            put_jtag('\n');
    1fc8:	e3a0000a 	mov	r0, #10
    1fcc:	ebfff8a2 	bl	25c <put_jtag>

            percent = (float) percent2 / 100;
    1fd0:	e14b01d4 	ldrd	r0, [r11, #-20]	; 0xffffffec
    1fd4:	eb00050a 	bl	3404 <__aeabi_d2f>
    1fd8:	e1a03000 	mov	r3, r0
    1fdc:	e1a00003 	mov	r0, r3
    1fe0:	e3a01000 	mov	r1, #0
    1fe4:	e34412c8 	movt	r1, #17096	; 0x42c8
    1fe8:	eb00063e 	bl	38e8 <__aeabi_fdiv>
    1fec:	e1a03000 	mov	r3, r0
    1ff0:	e1a02003 	mov	r2, r3
    1ff4:	e3043738 	movw	r3, #18232	; 0x4738
    1ff8:	e3403000 	movt	r3, #0
    1ffc:	e5832000 	str	r2, [r3]
        }

        /*******************************************************************************************
        KEYBOARD:
        *******************************************************************************************/
		if(ps2Interrupt == 1)
    2000:	e304373c 	movw	r3, #18236	; 0x473c
    2004:	e3403000 	movt	r3, #0
    2008:	e5933000 	ldr	r3, [r3]
    200c:	e3530001 	cmp	r3, #1
    2010:	1a00000e 	bne	2050 <main+0x45c>
		{
			ps2Interrupt = 0;
    2014:	e304373c 	movw	r3, #18236	; 0x473c
    2018:	e3403000 	movt	r3, #0
    201c:	e3a02000 	mov	r2, #0
    2020:	e5832000 	str	r2, [r3]
          	PS2_Read();
    2024:	eb000069 	bl	21d0 <PS2_Read>

          	if(goodKey == 1)
    2028:	e3043754 	movw	r3, #18260	; 0x4754
    202c:	e3403000 	movt	r3, #0
    2030:	e5933000 	ldr	r3, [r3]
    2034:	e3530001 	cmp	r3, #1
    2038:	1a000004 	bne	2050 <main+0x45c>
            {
              	Key();
    203c:	ebfffd95 	bl	1698 <Key>
                goodKey = 0;
    2040:	e3043754 	movw	r3, #18260	; 0x4754
    2044:	e3403000 	movt	r3, #0
    2048:	e3a02000 	mov	r2, #0
    204c:	e5832000 	str	r2, [r3]
		}

        /*******************************************************************************************
        MONITOR:
        *******************************************************************************************/
		if(monitorInterrupt == 1)
    2050:	e3043744 	movw	r3, #18244	; 0x4744
    2054:	e3403000 	movt	r3, #0
    2058:	e5933000 	ldr	r3, [r3]
    205c:	e3530001 	cmp	r3, #1
    2060:	1a000003 	bne	2074 <main+0x480>
		{
			monitorInterrupt = 0;
    2064:	e3043744 	movw	r3, #18244	; 0x4744
    2068:	e3403000 	movt	r3, #0
    206c:	e3a02000 	mov	r2, #0
    2070:	e5832000 	str	r2, [r3]
		}

        /*******************************************************************************************
        ENCODER:
        *******************************************************************************************/
		if(encoderInterrupt == 1)
    2074:	e3043740 	movw	r3, #18240	; 0x4740
    2078:	e3403000 	movt	r3, #0
    207c:	e5933000 	ldr	r3, [r3]
    2080:	e3530001 	cmp	r3, #1
    2084:	1a000004 	bne	209c <main+0x4a8>
		{
			encoderInterrupt = 0;
    2088:	e3043740 	movw	r3, #18240	; 0x4740
    208c:	e3403000 	movt	r3, #0
    2090:	e3a02000 	mov	r2, #0
    2094:	e5832000 	str	r2, [r3]
			GetActualRpm();
    2098:	ebfff9aa 	bl	748 <GetActualRpm>
		}

        /*******************************************************************************************
        ADC:
        *******************************************************************************************/
        if(adcInterrupt == 1)
    209c:	e3043748 	movw	r3, #18248	; 0x4748
    20a0:	e3403000 	movt	r3, #0
    20a4:	e5933000 	ldr	r3, [r3]
    20a8:	e3530001 	cmp	r3, #1
    20ac:	1afffef5 	bne	1c88 <main+0x94>
        {
            adcInterrupt = 0; // disable flag
    20b0:	e3043748 	movw	r3, #18248	; 0x4748
    20b4:	e3403000 	movt	r3, #0
    20b8:	e3a02000 	mov	r2, #0
    20bc:	e5832000 	str	r2, [r3]
            ADC_Get();
    20c0:	ebfff910 	bl	508 <ADC_Get>
        }
	}
    20c4:	eafffeef 	b	1c88 <main+0x94>

000020c8 <UpdatePID>:
	int _end_ = 0;
  	return _end_;
}

double UpdatePID(SPid * pid, double error)
{
    20c8:	e92d4800 	push	{r11, lr}
    20cc:	e28db004 	add	r11, sp, #4
    20d0:	e24dd020 	sub	sp, sp, #32
    20d4:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
    20d8:	e14b22f4 	strd	r2, [r11, #-36]	; 0xffffffdc
    double pTerm, iTerm;
    pTerm = pid->pGain * error; // calculate the proportional term
    20dc:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    20e0:	e1c322d0 	ldrd	r2, [r3, #32]
    20e4:	e1a00002 	mov	r0, r2
    20e8:	e1a01003 	mov	r1, r3
    20ec:	e14b22d4 	ldrd	r2, [r11, #-36]	; 0xffffffdc
    20f0:	eb000334 	bl	2dc8 <__aeabi_dmul>
    20f4:	e1a02000 	mov	r2, r0
    20f8:	e1a03001 	mov	r3, r1
    20fc:	e14b20fc 	strd	r2, [r11, #-12]
    // calculate the integral state with appropriate limiting
    pid->iState += error;
    2100:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    2104:	e1c320d0 	ldrd	r2, [r3]
    2108:	e1a00002 	mov	r0, r2
    210c:	e1a01003 	mov	r1, r3
    2110:	e14b22d4 	ldrd	r2, [r11, #-36]	; 0xffffffdc
    2114:	eb000227 	bl	29b8 <__adddf3>
    2118:	e1a02000 	mov	r2, r0
    211c:	e1a03001 	mov	r3, r1
    2120:	e51b1018 	ldr	r1, [r11, #-24]	; 0xffffffe8
    2124:	e1c120f0 	strd	r2, [r1]
    if (pid->iState > pid->iMax)
    2128:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    212c:	e1c300d0 	ldrd	r0, [r3]
    2130:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    2134:	e1c320d8 	ldrd	r2, [r3, #8]
    2138:	eb000494 	bl	3390 <__aeabi_dcmpgt>
    213c:	e1a03000 	mov	r3, r0
    2140:	e3530000 	cmp	r3, #0
    2144:	0a000004 	beq	215c <UpdatePID+0x94>
        pid->iState = pid->iMax;
    2148:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    214c:	e1c320d8 	ldrd	r2, [r3, #8]
    2150:	e51b1018 	ldr	r1, [r11, #-24]	; 0xffffffe8
    2154:	e1c120f0 	strd	r2, [r1]
    2158:	ea00000b 	b	218c <UpdatePID+0xc4>

    else if (pid->iState < pid->iMin)
    215c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    2160:	e1c300d0 	ldrd	r0, [r3]
    2164:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    2168:	e1c321d0 	ldrd	r2, [r3, #16]
    216c:	eb000475 	bl	3348 <__aeabi_dcmplt>
    2170:	e1a03000 	mov	r3, r0
    2174:	e3530000 	cmp	r3, #0
    2178:	0a000003 	beq	218c <UpdatePID+0xc4>
        pid->iState = pid->iMin;
    217c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    2180:	e1c321d0 	ldrd	r2, [r3, #16]
    2184:	e51b1018 	ldr	r1, [r11, #-24]	; 0xffffffe8
    2188:	e1c120f0 	strd	r2, [r1]

    iTerm = pid->iGain * pid->iState; // calculate the integral term
    218c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    2190:	e1c301d8 	ldrd	r0, [r3, #24]
    2194:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    2198:	e1c320d0 	ldrd	r2, [r3]
    219c:	eb000309 	bl	2dc8 <__aeabi_dmul>
    21a0:	e1a02000 	mov	r2, r0
    21a4:	e1a03001 	mov	r3, r1
    21a8:	e14b21f4 	strd	r2, [r11, #-20]	; 0xffffffec
    return pTerm + iTerm;
    21ac:	e14b00dc 	ldrd	r0, [r11, #-12]
    21b0:	e14b21d4 	ldrd	r2, [r11, #-20]	; 0xffffffec
    21b4:	eb0001ff 	bl	29b8 <__adddf3>
    21b8:	e1a02000 	mov	r2, r0
    21bc:	e1a03001 	mov	r3, r1
}
    21c0:	e1a00002 	mov	r0, r2
    21c4:	e1a01003 	mov	r1, r3
    21c8:	e24bd004 	sub	sp, r11, #4
    21cc:	e8bd8800 	pop	{r11, pc}

000021d0 <PS2_Read>:
extern int keyData;     //declared in keypad.c
extern int goodKey;     //declared in main.c

//**Function Code**//
void PS2_Read(void)
{
    21d0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    21d4:	e28db000 	add	r11, sp, #0
    21d8:	e24dd01c 	sub	sp, sp, #28
    volatile int* PS2_ptr = (int*) PS2_BASE;
    21dc:	e3a03c01 	mov	r3, #256	; 0x100
    21e0:	e34f3f20 	movt	r3, #65312	; 0xff20
    21e4:	e50b300c 	str	r3, [r11, #-12]
    int ps2data;
    static char flag = 0;   //holds if release accured
    char waiting = 1;
    21e8:	e3a03001 	mov	r3, #1
    21ec:	e54b3005 	strb	r3, [r11, #-5]
    int trash = 0;          //holds current PS2 read
    21f0:	e3a03000 	mov	r3, #0
    21f4:	e50b3010 	str	r3, [r11, #-16]
    int ravail;             //holds if unread data
    int rvalid;

    while(waiting == 1)                              //if unread data
    21f8:	ea000030 	b	22c0 <PS2_Read+0xf0>
    {
        ps2data = *(PS2_ptr);
    21fc:	e51b300c 	ldr	r3, [r11, #-12]
    2200:	e5933000 	ldr	r3, [r3]
    2204:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
        ravail = (ps2data & 0xFFFF0000) >> 16;
    2208:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    220c:	e1a03823 	lsr	r3, r3, #16
    2210:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
        rvalid = (ps2data & 0x8000) >> 15;
    2214:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    2218:	e2033902 	and	r3, r3, #32768	; 0x8000
    221c:	e1a037c3 	asr	r3, r3, #15
    2220:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4

        if(ravail == 0)
    2224:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    2228:	e3530000 	cmp	r3, #0
    222c:	0a000027 	beq	22d0 <PS2_Read+0x100>
            return;

        if(rvalid == 1)
    2230:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    2234:	e3530001 	cmp	r3, #1
    2238:	1a000020 	bne	22c0 <PS2_Read+0xf0>
        {
            trash = ps2data & 0xFF;             //read data
    223c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    2240:	e6ef3073 	uxtb	r3, r3
    2244:	e50b3010 	str	r3, [r11, #-16]
            if(flag == 1)                      //if flag set
    2248:	e304375c 	movw	r3, #18268	; 0x475c
    224c:	e3403000 	movt	r3, #0
    2250:	e5d33000 	ldrb	r3, [r3]
    2254:	e3530001 	cmp	r3, #1
    2258:	1a00000d 	bne	2294 <PS2_Read+0xc4>
            {
                keyData = trash;                  //keep data
    225c:	e3043734 	movw	r3, #18228	; 0x4734
    2260:	e3403000 	movt	r3, #0
    2264:	e51b2010 	ldr	r2, [r11, #-16]
    2268:	e5832000 	str	r2, [r3]
                flag = 0;                         //clear local flag
    226c:	e304375c 	movw	r3, #18268	; 0x475c
    2270:	e3403000 	movt	r3, #0
    2274:	e3a02000 	mov	r2, #0
    2278:	e5c32000 	strb	r2, [r3]
                goodKey = 1;                      //set global flag
    227c:	e3043754 	movw	r3, #18260	; 0x4754
    2280:	e3403000 	movt	r3, #0
    2284:	e3a02001 	mov	r2, #1
    2288:	e5832000 	str	r2, [r3]
                waiting = 0;                      //clear loop control
    228c:	e3a03000 	mov	r3, #0
    2290:	e54b3005 	strb	r3, [r11, #-5]
            }
            if(trash == 0xF0)                   //if date is break code
    2294:	e51b3010 	ldr	r3, [r11, #-16]
    2298:	e35300f0 	cmp	r3, #240	; 0xf0
    229c:	1a000007 	bne	22c0 <PS2_Read+0xf0>
            {
                flag = 1;                         //set local flag
    22a0:	e304375c 	movw	r3, #18268	; 0x475c
    22a4:	e3403000 	movt	r3, #0
    22a8:	e3a02001 	mov	r2, #1
    22ac:	e5c32000 	strb	r2, [r3]
                keyData = 0;                      //clear data
    22b0:	e3043734 	movw	r3, #18228	; 0x4734
    22b4:	e3403000 	movt	r3, #0
    22b8:	e3a02000 	mov	r2, #0
    22bc:	e5832000 	str	r2, [r3]
    char waiting = 1;
    int trash = 0;          //holds current PS2 read
    int ravail;             //holds if unread data
    int rvalid;

    while(waiting == 1)                              //if unread data
    22c0:	e55b3005 	ldrb	r3, [r11, #-5]
    22c4:	e3530001 	cmp	r3, #1
    22c8:	0affffcb 	beq	21fc <PS2_Read+0x2c>
    22cc:	ea000000 	b	22d4 <PS2_Read+0x104>
        ps2data = *(PS2_ptr);
        ravail = (ps2data & 0xFFFF0000) >> 16;
        rvalid = (ps2data & 0x8000) >> 15;

        if(ravail == 0)
            return;
    22d0:	e1a00000 	nop			; (mov r0, r0)
                flag = 1;                         //set local flag
                keyData = 0;                      //clear data
            }
        }
    }
}
    22d4:	e28bd000 	add	sp, r11, #0
    22d8:	e8bd0800 	ldmfd	sp!, {r11}
    22dc:	e12fff1e 	bx	lr

000022e0 <SetPWM>:
/***************************************************************************************************
Function Definitions:
***************************************************************************************************/

void SetPWM(unsigned int period, double percent)
{
    22e0:	e92d4800 	push	{r11, lr}
    22e4:	e28db004 	add	r11, sp, #4
    22e8:	e24dd020 	sub	sp, sp, #32
    22ec:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
    22f0:	e14b22f4 	strd	r2, [r11, #-36]	; 0xffffffdc
    volatile int* HPSTimer1Ptr = (int*) HPS_TIMER1_BASE;
    22f4:	e3a03a09 	mov	r3, #36864	; 0x9000
    22f8:	e34f3fc0 	movt	r3, #65472	; 0xffc0
    22fc:	e50b3008 	str	r3, [r11, #-8]
    period = period * 100;
    2300:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    2304:	e3a02064 	mov	r2, #100	; 0x64
    2308:	e0030392 	mul	r3, r2, r3
    230c:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
    double math = period * percent;
    2310:	e51b0018 	ldr	r0, [r11, #-24]	; 0xffffffe8
    2314:	eb00026b 	bl	2cc8 <__aeabi_ui2d>
    2318:	e1a02000 	mov	r2, r0
    231c:	e1a03001 	mov	r3, r1
    2320:	e1a00002 	mov	r0, r2
    2324:	e1a01003 	mov	r1, r3
    2328:	e14b22d4 	ldrd	r2, [r11, #-36]	; 0xffffffdc
    232c:	eb0002a5 	bl	2dc8 <__aeabi_dmul>
    2330:	e1a02000 	mov	r2, r0
    2334:	e1a03001 	mov	r3, r1
    2338:	e14b21f4 	strd	r2, [r11, #-20]	; 0xffffffec

    /************************************************
    HPS Timer:
    ************************************************/
    *(HPSTimer1Ptr + 2) &= ~(1 << 0); // E = 0
    233c:	e51b3008 	ldr	r3, [r11, #-8]
    2340:	e2833008 	add	r3, r3, #8
    2344:	e51b2008 	ldr	r2, [r11, #-8]
    2348:	e2822008 	add	r2, r2, #8
    234c:	e5922000 	ldr	r2, [r2]
    2350:	e3c22001 	bic	r2, r2, #1
    2354:	e5832000 	str	r2, [r3]
    *(HPSTimer1Ptr) = (int)math; // load value
    2358:	e14b01d4 	ldrd	r0, [r11, #-20]	; 0xffffffec
    235c:	eb000411 	bl	33a8 <__aeabi_d2iz>
    2360:	e1a02000 	mov	r2, r0
    2364:	e51b3008 	ldr	r3, [r11, #-8]
    2368:	e5832000 	str	r2, [r3]
    *(HPSTimer1Ptr + 2) |= (1 << 1); // M = 1
    236c:	e51b3008 	ldr	r3, [r11, #-8]
    2370:	e2833008 	add	r3, r3, #8
    2374:	e51b2008 	ldr	r2, [r11, #-8]
    2378:	e2822008 	add	r2, r2, #8
    237c:	e5922000 	ldr	r2, [r2]
    2380:	e3822002 	orr	r2, r2, #2
    2384:	e5832000 	str	r2, [r3]
    *(HPSTimer1Ptr + 2) |= (1 << 0); // E = 1
    2388:	e51b3008 	ldr	r3, [r11, #-8]
    238c:	e2833008 	add	r3, r3, #8
    2390:	e51b2008 	ldr	r2, [r11, #-8]
    2394:	e2822008 	add	r2, r2, #8
    2398:	e5922000 	ldr	r2, [r2]
    239c:	e3822001 	orr	r2, r2, #1
    23a0:	e5832000 	str	r2, [r3]
}
    23a4:	e24bd004 	sub	sp, r11, #4
    23a8:	e8bd8800 	pop	{r11, pc}

000023ac <PWM_Setup>:

void PWM_Setup(void)
{
    23ac:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    23b0:	e28db000 	add	r11, sp, #0
    23b4:	e24dd00c 	sub	sp, sp, #12
    volatile int* GPIOPtr = (int*)JP1_BASE;
    23b8:	e3a03060 	mov	r3, #96	; 0x60
    23bc:	e34f3f20 	movt	r3, #65312	; 0xff20
    23c0:	e50b3008 	str	r3, [r11, #-8]
    *(GPIOPtr + 1) |= (1 << 1); // D1 output
    23c4:	e51b3008 	ldr	r3, [r11, #-8]
    23c8:	e2833004 	add	r3, r3, #4
    23cc:	e51b2008 	ldr	r2, [r11, #-8]
    23d0:	e2822004 	add	r2, r2, #4
    23d4:	e5922000 	ldr	r2, [r2]
    23d8:	e3822002 	orr	r2, r2, #2
    23dc:	e5832000 	str	r2, [r3]
    23e0:	e28bd000 	add	sp, r11, #0
    23e4:	e8bd0800 	ldmfd	sp!, {r11}
    23e8:	e12fff1e 	bx	lr

000023ec <GetCharacter>:
struct Monitor actrpm;
struct Monitor current;


char GetCharacter(int key)
{
    23ec:	e92d0810 	push	{r4, r11}
    23f0:	e28db004 	add	r11, sp, #4
    23f4:	e24dd038 	sub	sp, sp, #56	; 0x38
    23f8:	e50b0038 	str	r0, [r11, #-56]	; 0xffffffc8
	const int array[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
    23fc:	e3043238 	movw	r3, #16952	; 0x4238
    2400:	e3403000 	movt	r3, #0
    2404:	e24bc030 	sub	r12, r11, #48	; 0x30
    2408:	e1a04003 	mov	r4, r3
    240c:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
    2410:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
    2414:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
    2418:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
    241c:	e8940003 	ldm	r4, {r0, r1}
    2420:	e88c0003 	stm	r12, {r0, r1}
	char ckey = array[key];
    2424:	e51b2038 	ldr	r2, [r11, #-56]	; 0xffffffc8
    2428:	e3e0302b 	mvn	r3, #43	; 0x2b
    242c:	e1a02102 	lsl	r2, r2, #2
    2430:	e24b1004 	sub	r1, r11, #4
    2434:	e0812002 	add	r2, r1, r2
    2438:	e0823003 	add	r3, r2, r3
    243c:	e5933000 	ldr	r3, [r3]
    2440:	e54b3005 	strb	r3, [r11, #-5]
	return ckey;
    2444:	e55b3005 	ldrb	r3, [r11, #-5]
}
    2448:	e1a00003 	mov	r0, r3
    244c:	e24bd004 	sub	sp, r11, #4
    2450:	e8bd0810 	pop	{r4, r11}
    2454:	e12fff1e 	bx	lr

00002458 <Clear_inprpm>:

void Clear_inprpm(void)
{
    2458:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    245c:	e28db000 	add	r11, sp, #0
	inprpm.iHundred = 0;
    2460:	e3043770 	movw	r3, #18288	; 0x4770
    2464:	e3403000 	movt	r3, #0
    2468:	e3a02000 	mov	r2, #0
    246c:	e5832000 	str	r2, [r3]
	inprpm.iTen = 0;
    2470:	e3043770 	movw	r3, #18288	; 0x4770
    2474:	e3403000 	movt	r3, #0
    2478:	e3a02000 	mov	r2, #0
    247c:	e5832004 	str	r2, [r3, #4]
	inprpm.iOne = 0;
    2480:	e3043770 	movw	r3, #18288	; 0x4770
    2484:	e3403000 	movt	r3, #0
    2488:	e3a02000 	mov	r2, #0
    248c:	e5832008 	str	r2, [r3, #8]
	inprpm.iTotal = 0;
    2490:	e3043770 	movw	r3, #18288	; 0x4770
    2494:	e3403000 	movt	r3, #0
    2498:	e3a02000 	mov	r2, #0
    249c:	e583200c 	str	r2, [r3, #12]

	inprpm.cHundred = ' ';
    24a0:	e3043770 	movw	r3, #18288	; 0x4770
    24a4:	e3403000 	movt	r3, #0
    24a8:	e3a02020 	mov	r2, #32
    24ac:	e5c32010 	strb	r2, [r3, #16]
	inprpm.cTen = ' ';
    24b0:	e3043770 	movw	r3, #18288	; 0x4770
    24b4:	e3403000 	movt	r3, #0
    24b8:	e3a02020 	mov	r2, #32
    24bc:	e5c32011 	strb	r2, [r3, #17]
	inprpm.cOne = ' ';
    24c0:	e3043770 	movw	r3, #18288	; 0x4770
    24c4:	e3403000 	movt	r3, #0
    24c8:	e3a02020 	mov	r2, #32
    24cc:	e5c32012 	strb	r2, [r3, #18]
	inprpm.cTotal[0] = ' ';
    24d0:	e3043770 	movw	r3, #18288	; 0x4770
    24d4:	e3403000 	movt	r3, #0
    24d8:	e3a02020 	mov	r2, #32
    24dc:	e5c32013 	strb	r2, [r3, #19]
	inprpm.cTotal[1] = ' ';
    24e0:	e3043770 	movw	r3, #18288	; 0x4770
    24e4:	e3403000 	movt	r3, #0
    24e8:	e3a02020 	mov	r2, #32
    24ec:	e5c32014 	strb	r2, [r3, #20]
	inprpm.cTotal[2] = ' ';
    24f0:	e3043770 	movw	r3, #18288	; 0x4770
    24f4:	e3403000 	movt	r3, #0
    24f8:	e3a02020 	mov	r2, #32
    24fc:	e5c32015 	strb	r2, [r3, #21]
}
    2500:	e28bd000 	add	sp, r11, #0
    2504:	e8bd0800 	ldmfd	sp!, {r11}
    2508:	e12fff1e 	bx	lr

0000250c <Total_inprpm>:

void Total_inprpm(void)
{
    250c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    2510:	e28db000 	add	r11, sp, #0
    2514:	e24dd00c 	sub	sp, sp, #12
	int hundred = inprpm.iHundred;
    2518:	e3043770 	movw	r3, #18288	; 0x4770
    251c:	e3403000 	movt	r3, #0
    2520:	e5933000 	ldr	r3, [r3]
    2524:	e50b3008 	str	r3, [r11, #-8]
	int ten = inprpm.iTen;
    2528:	e3043770 	movw	r3, #18288	; 0x4770
    252c:	e3403000 	movt	r3, #0
    2530:	e5933004 	ldr	r3, [r3, #4]
    2534:	e50b300c 	str	r3, [r11, #-12]

	hundred = inprpm.iHundred * 100;
    2538:	e3043770 	movw	r3, #18288	; 0x4770
    253c:	e3403000 	movt	r3, #0
    2540:	e5933000 	ldr	r3, [r3]
    2544:	e3a02064 	mov	r2, #100	; 0x64
    2548:	e0030392 	mul	r3, r2, r3
    254c:	e50b3008 	str	r3, [r11, #-8]
	ten = inprpm.iTen * 10;
    2550:	e3043770 	movw	r3, #18288	; 0x4770
    2554:	e3403000 	movt	r3, #0
    2558:	e5932004 	ldr	r2, [r3, #4]
    255c:	e1a03002 	mov	r3, r2
    2560:	e1a03103 	lsl	r3, r3, #2
    2564:	e0833002 	add	r3, r3, r2
    2568:	e1a03083 	lsl	r3, r3, #1
    256c:	e50b300c 	str	r3, [r11, #-12]
	inprpm.iTotal = hundred + ten + inprpm.iOne;
    2570:	e51b2008 	ldr	r2, [r11, #-8]
    2574:	e51b300c 	ldr	r3, [r11, #-12]
    2578:	e0822003 	add	r2, r2, r3
    257c:	e3043770 	movw	r3, #18288	; 0x4770
    2580:	e3403000 	movt	r3, #0
    2584:	e5933008 	ldr	r3, [r3, #8]
    2588:	e0822003 	add	r2, r2, r3
    258c:	e3043770 	movw	r3, #18288	; 0x4770
    2590:	e3403000 	movt	r3, #0
    2594:	e583200c 	str	r2, [r3, #12]
}
    2598:	e28bd000 	add	sp, r11, #0
    259c:	e8bd0800 	ldmfd	sp!, {r11}
    25a0:	e12fff1e 	bx	lr

000025a4 <InitializeStructs>:

//**Function Code**//
void InitializeStructs(void)
{
    25a4:	e92d0810 	push	{r4, r11}
    25a8:	e28db004 	add	r11, sp, #4
	inprpm.iHundred = 0;
    25ac:	e3043770 	movw	r3, #18288	; 0x4770
    25b0:	e3403000 	movt	r3, #0
    25b4:	e3a02000 	mov	r2, #0
    25b8:	e5832000 	str	r2, [r3]
	inprpm.iTen = 0;
    25bc:	e3043770 	movw	r3, #18288	; 0x4770
    25c0:	e3403000 	movt	r3, #0
    25c4:	e3a02000 	mov	r2, #0
    25c8:	e5832004 	str	r2, [r3, #4]
	inprpm.iOne = 0;
    25cc:	e3043770 	movw	r3, #18288	; 0x4770
    25d0:	e3403000 	movt	r3, #0
    25d4:	e3a02000 	mov	r2, #0
    25d8:	e5832008 	str	r2, [r3, #8]
	inprpm.iTotal = 0;
    25dc:	e3043770 	movw	r3, #18288	; 0x4770
    25e0:	e3403000 	movt	r3, #0
    25e4:	e3a02000 	mov	r2, #0
    25e8:	e583200c 	str	r2, [r3, #12]

	inprpm.cHundred = ' ';
    25ec:	e3043770 	movw	r3, #18288	; 0x4770
    25f0:	e3403000 	movt	r3, #0
    25f4:	e3a02020 	mov	r2, #32
    25f8:	e5c32010 	strb	r2, [r3, #16]
	inprpm.cTen = ' ';
    25fc:	e3043770 	movw	r3, #18288	; 0x4770
    2600:	e3403000 	movt	r3, #0
    2604:	e3a02020 	mov	r2, #32
    2608:	e5c32011 	strb	r2, [r3, #17]
	inprpm.cOne = ' ';
    260c:	e3043770 	movw	r3, #18288	; 0x4770
    2610:	e3403000 	movt	r3, #0
    2614:	e3a02020 	mov	r2, #32
    2618:	e5c32012 	strb	r2, [r3, #18]
	inprpm.cTotal[0] = ' ';
    261c:	e3043770 	movw	r3, #18288	; 0x4770
    2620:	e3403000 	movt	r3, #0
    2624:	e3a02020 	mov	r2, #32
    2628:	e5c32013 	strb	r2, [r3, #19]
	inprpm.cTotal[1] = ' ';
    262c:	e3043770 	movw	r3, #18288	; 0x4770
    2630:	e3403000 	movt	r3, #0
    2634:	e3a02020 	mov	r2, #32
    2638:	e5c32014 	strb	r2, [r3, #20]
	inprpm.cTotal[2] = ' ';
    263c:	e3043770 	movw	r3, #18288	; 0x4770
    2640:	e3403000 	movt	r3, #0
    2644:	e3a02020 	mov	r2, #32
    2648:	e5c32015 	strb	r2, [r3, #21]

	setrpm = inprpm;
    264c:	e3042788 	movw	r2, #18312	; 0x4788
    2650:	e3402000 	movt	r2, #0
    2654:	e3043770 	movw	r3, #18288	; 0x4770
    2658:	e3403000 	movt	r3, #0
    265c:	e1a0c002 	mov	r12, r2
    2660:	e1a04003 	mov	r4, r3
    2664:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
    2668:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
    266c:	e8940003 	ldm	r4, {r0, r1}
    2670:	e88c0003 	stm	r12, {r0, r1}
	actrpm = inprpm;
    2674:	e30427a0 	movw	r2, #18336	; 0x47a0
    2678:	e3402000 	movt	r2, #0
    267c:	e3043770 	movw	r3, #18288	; 0x4770
    2680:	e3403000 	movt	r3, #0
    2684:	e1a0c002 	mov	r12, r2
    2688:	e1a04003 	mov	r4, r3
    268c:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
    2690:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
    2694:	e8940003 	ldm	r4, {r0, r1}
    2698:	e88c0003 	stm	r12, {r0, r1}
}
    269c:	e24bd004 	sub	sp, r11, #4
    26a0:	e8bd0810 	pop	{r4, r11}
    26a4:	e12fff1e 	bx	lr

000026a8 <RPM_Splitter>:

struct Monitor RPM_Splitter(long value)
{
    26a8:	e92d0810 	push	{r4, r11}
    26ac:	e28db004 	add	r11, sp, #4
    26b0:	e24dd020 	sub	sp, sp, #32
    26b4:	e50b0020 	str	r0, [r11, #-32]	; 0xffffffe0
    26b8:	e50b1024 	str	r1, [r11, #-36]	; 0xffffffdc
    struct Monitor structure;
	structure.iHundred = 0;
    26bc:	e3a03000 	mov	r3, #0
    26c0:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
	structure.iTen = 0;
    26c4:	e3a03000 	mov	r3, #0
    26c8:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
	structure.iOne = 0;
    26cc:	e3a03000 	mov	r3, #0
    26d0:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	structure.iTotal = 0;
    26d4:	e3a03000 	mov	r3, #0
    26d8:	e50b3010 	str	r3, [r11, #-16]

	structure.cHundred = ' ';
    26dc:	e3a03020 	mov	r3, #32
    26e0:	e54b300c 	strb	r3, [r11, #-12]
	structure.cTen = ' ';
    26e4:	e3a03020 	mov	r3, #32
    26e8:	e54b300b 	strb	r3, [r11, #-11]
	structure.cOne = ' ';
    26ec:	e3a03020 	mov	r3, #32
    26f0:	e54b300a 	strb	r3, [r11, #-10]
	structure.cTotal[0] = ' ';
    26f4:	e3a03020 	mov	r3, #32
    26f8:	e54b3009 	strb	r3, [r11, #-9]
	structure.cTotal[1] = ' ';
    26fc:	e3a03020 	mov	r3, #32
    2700:	e54b3008 	strb	r3, [r11, #-8]
	structure.cTotal[2] = ' ';
    2704:	e3a03020 	mov	r3, #32
    2708:	e54b3007 	strb	r3, [r11, #-7]

    structure.iHundred  = (value / 100);
    270c:	e51b2024 	ldr	r2, [r11, #-36]	; 0xffffffdc
    2710:	e308351f 	movw	r3, #34079	; 0x851f
    2714:	e34531eb 	movt	r3, #20971	; 0x51eb
    2718:	e0c31293 	smull	r1, r3, r3, r2
    271c:	e1a012c3 	asr	r1, r3, #5
    2720:	e1a03fc2 	asr	r3, r2, #31
    2724:	e0633001 	rsb	r3, r3, r1
    2728:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
    structure.iTen      = ((value % 100) / 10);
    272c:	e51b2024 	ldr	r2, [r11, #-36]	; 0xffffffdc
    2730:	e308351f 	movw	r3, #34079	; 0x851f
    2734:	e34531eb 	movt	r3, #20971	; 0x51eb
    2738:	e0c31293 	smull	r1, r3, r3, r2
    273c:	e1a012c3 	asr	r1, r3, #5
    2740:	e1a03fc2 	asr	r3, r2, #31
    2744:	e0633001 	rsb	r3, r3, r1
    2748:	e3a01064 	mov	r1, #100	; 0x64
    274c:	e0030391 	mul	r3, r1, r3
    2750:	e0633002 	rsb	r3, r3, r2
    2754:	e3062667 	movw	r2, #26215	; 0x6667
    2758:	e3462666 	movt	r2, #26214	; 0x6666
    275c:	e0c21392 	smull	r1, r2, r2, r3
    2760:	e1a02142 	asr	r2, r2, #2
    2764:	e1a03fc3 	asr	r3, r3, #31
    2768:	e0633002 	rsb	r3, r3, r2
    276c:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
    structure.iOne      = ((value % 100)% 10);
    2770:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    2774:	e308251f 	movw	r2, #34079	; 0x851f
    2778:	e34521eb 	movt	r2, #20971	; 0x51eb
    277c:	e0c21392 	smull	r1, r2, r2, r3
    2780:	e1a012c2 	asr	r1, r2, #5
    2784:	e1a02fc3 	asr	r2, r3, #31
    2788:	e0622001 	rsb	r2, r2, r1
    278c:	e3a01064 	mov	r1, #100	; 0x64
    2790:	e0020291 	mul	r2, r1, r2
    2794:	e0622003 	rsb	r2, r2, r3
    2798:	e3063667 	movw	r3, #26215	; 0x6667
    279c:	e3463666 	movt	r3, #26214	; 0x6666
    27a0:	e0c31293 	smull	r1, r3, r3, r2
    27a4:	e1a01143 	asr	r1, r3, #2
    27a8:	e1a03fc2 	asr	r3, r2, #31
    27ac:	e0631001 	rsb	r1, r3, r1
    27b0:	e1a03001 	mov	r3, r1
    27b4:	e1a03103 	lsl	r3, r3, #2
    27b8:	e0833001 	add	r3, r3, r1
    27bc:	e1a03083 	lsl	r3, r3, #1
    27c0:	e0631002 	rsb	r1, r3, r2
    27c4:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
    structure.iTotal	= value;
    27c8:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    27cc:	e50b3010 	str	r3, [r11, #-16]

    return structure;
    27d0:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    27d4:	e1a0c003 	mov	r12, r3
    27d8:	e24b401c 	sub	r4, r11, #28
    27dc:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
    27e0:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
    27e4:	e8940003 	ldm	r4, {r0, r1}
    27e8:	e88c0003 	stm	r12, {r0, r1}
}
    27ec:	e51b0020 	ldr	r0, [r11, #-32]	; 0xffffffe0
    27f0:	e24bd004 	sub	sp, r11, #4
    27f4:	e8bd0810 	pop	{r4, r11}
    27f8:	e12fff1e 	bx	lr

000027fc <RPM_Characters>:

struct Monitor RPM_Characters (struct Monitor structure)
{
    27fc:	e24dd010 	sub	sp, sp, #16
    2800:	e92d4810 	push	{r4, r11, lr}
    2804:	e28db008 	add	r11, sp, #8
    2808:	e24dd00c 	sub	sp, sp, #12
    280c:	e50b0010 	str	r0, [r11, #-16]
    2810:	e28b0008 	add	r0, r11, #8
    2814:	e880000e 	stm	r0, {r1, r2, r3}
	structure.cTotal[0] = GetCharacter(structure.iHundred);
    2818:	e59b3008 	ldr	r3, [r11, #8]
    281c:	e1a00003 	mov	r0, r3
    2820:	ebfffef1 	bl	23ec <GetCharacter>
    2824:	e1a03000 	mov	r3, r0
    2828:	e5cb301b 	strb	r3, [r11, #27]
	structure.cTotal[1] = GetCharacter(structure.iTen);
    282c:	e59b300c 	ldr	r3, [r11, #12]
    2830:	e1a00003 	mov	r0, r3
    2834:	ebfffeec 	bl	23ec <GetCharacter>
    2838:	e1a03000 	mov	r3, r0
    283c:	e5cb301c 	strb	r3, [r11, #28]
	structure.cTotal[2] = GetCharacter(structure.iOne);
    2840:	e59b3010 	ldr	r3, [r11, #16]
    2844:	e1a00003 	mov	r0, r3
    2848:	ebfffee7 	bl	23ec <GetCharacter>
    284c:	e1a03000 	mov	r3, r0
    2850:	e5cb301d 	strb	r3, [r11, #29]
	return structure;
    2854:	e51b3010 	ldr	r3, [r11, #-16]
    2858:	e1a0c003 	mov	r12, r3
    285c:	e28b4008 	add	r4, r11, #8
    2860:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
    2864:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
    2868:	e8940003 	ldm	r4, {r0, r1}
    286c:	e88c0003 	stm	r12, {r0, r1}
}
    2870:	e51b0010 	ldr	r0, [r11, #-16]
    2874:	e24bd008 	sub	sp, r11, #8
    2878:	e8bd4810 	pop	{r4, r11, lr}
    287c:	e28dd010 	add	sp, sp, #16
    2880:	e12fff1e 	bx	lr

00002884 <VGA_box>:
//**Includes**//
#include "vga.h"
#include "address_map.h"
//**Function Code**//
void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
    2884:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    2888:	e28db000 	add	r11, sp, #0
    288c:	e24dd024 	sub	sp, sp, #36	; 0x24
    2890:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
    2894:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
    2898:	e50b2020 	str	r2, [r11, #-32]	; 0xffffffe0
    289c:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
	int pixel_ptr, row, col;

	for (row = y1; row <= y2; row++)		
    28a0:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    28a4:	e50b3008 	str	r3, [r11, #-8]
    28a8:	ea000017 	b	290c <VGA_box+0x88>
	{
		for (col = x1; col <= x2; ++col)
    28ac:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    28b0:	e50b300c 	str	r3, [r11, #-12]
    28b4:	ea00000d 	b	28f0 <VGA_box+0x6c>
		{
			pixel_ptr = FPGA_ONCHIP_BASE + (row << 10) + (col << 1);
    28b8:	e51b3008 	ldr	r3, [r11, #-8]
    28bc:	e1a03503 	lsl	r3, r3, #10
    28c0:	e1a02003 	mov	r2, r3
    28c4:	e51b300c 	ldr	r3, [r11, #-12]
    28c8:	e1a03083 	lsl	r3, r3, #1
    28cc:	e0823003 	add	r3, r2, r3
    28d0:	e2833332 	add	r3, r3, #-939524096	; 0xc8000000
    28d4:	e50b3010 	str	r3, [r11, #-16]
			*(short *)pixel_ptr = pixel_color;		// set pixel color
    28d8:	e51b3010 	ldr	r3, [r11, #-16]
    28dc:	e1db20b4 	ldrh	r2, [r11, #4]
    28e0:	e1c320b0 	strh	r2, [r3]
{
	int pixel_ptr, row, col;

	for (row = y1; row <= y2; row++)		
	{
		for (col = x1; col <= x2; ++col)
    28e4:	e51b300c 	ldr	r3, [r11, #-12]
    28e8:	e2833001 	add	r3, r3, #1
    28ec:	e50b300c 	str	r3, [r11, #-12]
    28f0:	e51b200c 	ldr	r2, [r11, #-12]
    28f4:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    28f8:	e1520003 	cmp	r2, r3
    28fc:	daffffed 	ble	28b8 <VGA_box+0x34>
//**Function Code**//
void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
	int pixel_ptr, row, col;

	for (row = y1; row <= y2; row++)		
    2900:	e51b3008 	ldr	r3, [r11, #-8]
    2904:	e2833001 	add	r3, r3, #1
    2908:	e50b3008 	str	r3, [r11, #-8]
    290c:	e51b2008 	ldr	r2, [r11, #-8]
    2910:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    2914:	e1520003 	cmp	r2, r3
    2918:	daffffe3 	ble	28ac <VGA_box+0x28>
		{
			pixel_ptr = FPGA_ONCHIP_BASE + (row << 10) + (col << 1);
			*(short *)pixel_ptr = pixel_color;		// set pixel color
		}
	}
} 
    291c:	e28bd000 	add	sp, r11, #0
    2920:	e8bd0800 	ldmfd	sp!, {r11}
    2924:	e12fff1e 	bx	lr

00002928 <VGA_text>:

void VGA_text(int x, int y, char* text_ptr)
{
    2928:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    292c:	e28db000 	add	r11, sp, #0
    2930:	e24dd01c 	sub	sp, sp, #28
    2934:	e50b0010 	str	r0, [r11, #-16]
    2938:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
    293c:	e50b2018 	str	r2, [r11, #-24]	; 0xffffffe8
	int offset;
  	volatile char* character_buffer = (char *) FPGA_CHAR_BASE;	// VGA character buffer
    2940:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    2944:	e50b300c 	str	r3, [r11, #-12]

	offset = (y << 7) + x;
    2948:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    294c:	e1a02383 	lsl	r2, r3, #7
    2950:	e51b3010 	ldr	r3, [r11, #-16]
    2954:	e0823003 	add	r3, r2, r3
    2958:	e50b3008 	str	r3, [r11, #-8]
	while ( *(text_ptr) )
    295c:	ea00000b 	b	2990 <VGA_text+0x68>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
    2960:	e51b3008 	ldr	r3, [r11, #-8]
    2964:	e51b200c 	ldr	r2, [r11, #-12]
    2968:	e0823003 	add	r3, r2, r3
    296c:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    2970:	e5d22000 	ldrb	r2, [r2]
    2974:	e5c32000 	strb	r2, [r3]
		++text_ptr;
    2978:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    297c:	e2833001 	add	r3, r3, #1
    2980:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
		++offset;
    2984:	e51b3008 	ldr	r3, [r11, #-8]
    2988:	e2833001 	add	r3, r3, #1
    298c:	e50b3008 	str	r3, [r11, #-8]
{
	int offset;
  	volatile char* character_buffer = (char *) FPGA_CHAR_BASE;	// VGA character buffer

	offset = (y << 7) + x;
	while ( *(text_ptr) )
    2990:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    2994:	e5d33000 	ldrb	r3, [r3]
    2998:	e3530000 	cmp	r3, #0
    299c:	1affffef 	bne	2960 <VGA_text+0x38>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
		++text_ptr;
		++offset;
	}
}
    29a0:	e28bd000 	add	sp, r11, #0
    29a4:	e8bd0800 	ldmfd	sp!, {r11}
    29a8:	e12fff1e 	bx	lr

000029ac <__aeabi_drsub>:
    29ac:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    29b0:	ea000000 	b	29b8 <__adddf3>

000029b4 <__aeabi_dsub>:
    29b4:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

000029b8 <__adddf3>:
    29b8:	e92d4030 	push	{r4, r5, lr}
    29bc:	e1a04081 	lsl	r4, r1, #1
    29c0:	e1a05083 	lsl	r5, r3, #1
    29c4:	e1340005 	teq	r4, r5
    29c8:	01300002 	teqeq	r0, r2
    29cc:	1194c000 	orrsne	r12, r4, r0
    29d0:	1195c002 	orrsne	r12, r5, r2
    29d4:	11f0cac4 	mvnsne	r12, r4, asr #21
    29d8:	11f0cac5 	mvnsne	r12, r5, asr #21
    29dc:	0a00008c 	beq	2c14 <__adddf3+0x25c>
    29e0:	e1a04aa4 	lsr	r4, r4, #21
    29e4:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    29e8:	b2655000 	rsblt	r5, r5, #0
    29ec:	da000006 	ble	2a0c <__adddf3+0x54>
    29f0:	e0844005 	add	r4, r4, r5
    29f4:	e0202002 	eor	r2, r0, r2
    29f8:	e0213003 	eor	r3, r1, r3
    29fc:	e0220000 	eor	r0, r2, r0
    2a00:	e0231001 	eor	r1, r3, r1
    2a04:	e0202002 	eor	r2, r0, r2
    2a08:	e0213003 	eor	r3, r1, r3
    2a0c:	e3550036 	cmp	r5, #54	; 0x36
    2a10:	88bd4030 	pophi	{r4, r5, lr}
    2a14:	812fff1e 	bxhi	lr
    2a18:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    2a1c:	e1a01601 	lsl	r1, r1, #12
    2a20:	e3a0c601 	mov	r12, #1048576	; 0x100000
    2a24:	e18c1621 	orr	r1, r12, r1, lsr #12
    2a28:	0a000001 	beq	2a34 <__adddf3+0x7c>
    2a2c:	e2700000 	rsbs	r0, r0, #0
    2a30:	e2e11000 	rsc	r1, r1, #0
    2a34:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    2a38:	e1a03603 	lsl	r3, r3, #12
    2a3c:	e18c3623 	orr	r3, r12, r3, lsr #12
    2a40:	0a000001 	beq	2a4c <__adddf3+0x94>
    2a44:	e2722000 	rsbs	r2, r2, #0
    2a48:	e2e33000 	rsc	r3, r3, #0
    2a4c:	e1340005 	teq	r4, r5
    2a50:	0a000069 	beq	2bfc <__adddf3+0x244>
    2a54:	e2444001 	sub	r4, r4, #1
    2a58:	e275e020 	rsbs	lr, r5, #32
    2a5c:	ba000005 	blt	2a78 <__adddf3+0xc0>
    2a60:	e1a0ce12 	lsl	r12, r2, lr
    2a64:	e0900532 	adds	r0, r0, r2, lsr r5
    2a68:	e2a11000 	adc	r1, r1, #0
    2a6c:	e0900e13 	adds	r0, r0, r3, lsl lr
    2a70:	e0b11553 	adcs	r1, r1, r3, asr r5
    2a74:	ea000006 	b	2a94 <__adddf3+0xdc>
    2a78:	e2455020 	sub	r5, r5, #32
    2a7c:	e28ee020 	add	lr, lr, #32
    2a80:	e3520001 	cmp	r2, #1
    2a84:	e1a0ce13 	lsl	r12, r3, lr
    2a88:	238cc002 	orrcs	r12, r12, #2
    2a8c:	e0900553 	adds	r0, r0, r3, asr r5
    2a90:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    2a94:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    2a98:	5a000002 	bpl	2aa8 <__adddf3+0xf0>
    2a9c:	e27cc000 	rsbs	r12, r12, #0
    2aa0:	e2f00000 	rscs	r0, r0, #0
    2aa4:	e2e11000 	rsc	r1, r1, #0
    2aa8:	e3510601 	cmp	r1, #1048576	; 0x100000
    2aac:	3a00000f 	bcc	2af0 <__adddf3+0x138>
    2ab0:	e3510602 	cmp	r1, #2097152	; 0x200000
    2ab4:	3a000006 	bcc	2ad4 <__adddf3+0x11c>
    2ab8:	e1b010a1 	lsrs	r1, r1, #1
    2abc:	e1b00060 	rrxs	r0, r0
    2ac0:	e1a0c06c 	rrx	r12, r12
    2ac4:	e2844001 	add	r4, r4, #1
    2ac8:	e1a02a84 	lsl	r2, r4, #21
    2acc:	e3720501 	cmn	r2, #4194304	; 0x400000
    2ad0:	2a00006b 	bcs	2c84 <__adddf3+0x2cc>
    2ad4:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    2ad8:	01b0c0a0 	lsrseq	r12, r0, #1
    2adc:	e2b00000 	adcs	r0, r0, #0
    2ae0:	e0a11a04 	adc	r1, r1, r4, lsl #20
    2ae4:	e1811005 	orr	r1, r1, r5
    2ae8:	e8bd4030 	pop	{r4, r5, lr}
    2aec:	e12fff1e 	bx	lr
    2af0:	e1b0c08c 	lsls	r12, r12, #1
    2af4:	e0b00000 	adcs	r0, r0, r0
    2af8:	e0a11001 	adc	r1, r1, r1
    2afc:	e3110601 	tst	r1, #1048576	; 0x100000
    2b00:	e2444001 	sub	r4, r4, #1
    2b04:	1afffff2 	bne	2ad4 <__adddf3+0x11c>
    2b08:	e3310000 	teq	r1, #0
    2b0c:	13a03014 	movne	r3, #20
    2b10:	03a03034 	moveq	r3, #52	; 0x34
    2b14:	01a01000 	moveq	r1, r0
    2b18:	03a00000 	moveq	r0, #0
    2b1c:	e1a02001 	mov	r2, r1
    2b20:	e3520801 	cmp	r2, #65536	; 0x10000
    2b24:	21a02822 	lsrcs	r2, r2, #16
    2b28:	22433010 	subcs	r3, r3, #16
    2b2c:	e3520c01 	cmp	r2, #256	; 0x100
    2b30:	21a02422 	lsrcs	r2, r2, #8
    2b34:	22433008 	subcs	r3, r3, #8
    2b38:	e3520010 	cmp	r2, #16
    2b3c:	21a02222 	lsrcs	r2, r2, #4
    2b40:	22433004 	subcs	r3, r3, #4
    2b44:	e3520004 	cmp	r2, #4
    2b48:	22433002 	subcs	r3, r3, #2
    2b4c:	304330a2 	subcc	r3, r3, r2, lsr #1
    2b50:	e04331a2 	sub	r3, r3, r2, lsr #3
    2b54:	e2532020 	subs	r2, r3, #32
    2b58:	aa000007 	bge	2b7c <__adddf3+0x1c4>
    2b5c:	e292200c 	adds	r2, r2, #12
    2b60:	da000004 	ble	2b78 <__adddf3+0x1c0>
    2b64:	e282c014 	add	r12, r2, #20
    2b68:	e262200c 	rsb	r2, r2, #12
    2b6c:	e1a00c11 	lsl	r0, r1, r12
    2b70:	e1a01231 	lsr	r1, r1, r2
    2b74:	ea000004 	b	2b8c <__adddf3+0x1d4>
    2b78:	e2822014 	add	r2, r2, #20
    2b7c:	d262c020 	rsble	r12, r2, #32
    2b80:	e1a01211 	lsl	r1, r1, r2
    2b84:	d1811c30 	orrle	r1, r1, r0, lsr r12
    2b88:	d1a00210 	lslle	r0, r0, r2
    2b8c:	e0544003 	subs	r4, r4, r3
    2b90:	a0811a04 	addge	r1, r1, r4, lsl #20
    2b94:	a1811005 	orrge	r1, r1, r5
    2b98:	a8bd4030 	popge	{r4, r5, lr}
    2b9c:	a12fff1e 	bxge	lr
    2ba0:	e1e04004 	mvn	r4, r4
    2ba4:	e254401f 	subs	r4, r4, #31
    2ba8:	aa00000f 	bge	2bec <__adddf3+0x234>
    2bac:	e294400c 	adds	r4, r4, #12
    2bb0:	ca000006 	bgt	2bd0 <__adddf3+0x218>
    2bb4:	e2844014 	add	r4, r4, #20
    2bb8:	e2642020 	rsb	r2, r4, #32
    2bbc:	e1a00430 	lsr	r0, r0, r4
    2bc0:	e1800211 	orr	r0, r0, r1, lsl r2
    2bc4:	e1851431 	orr	r1, r5, r1, lsr r4
    2bc8:	e8bd4030 	pop	{r4, r5, lr}
    2bcc:	e12fff1e 	bx	lr
    2bd0:	e264400c 	rsb	r4, r4, #12
    2bd4:	e2642020 	rsb	r2, r4, #32
    2bd8:	e1a00230 	lsr	r0, r0, r2
    2bdc:	e1800411 	orr	r0, r0, r1, lsl r4
    2be0:	e1a01005 	mov	r1, r5
    2be4:	e8bd4030 	pop	{r4, r5, lr}
    2be8:	e12fff1e 	bx	lr
    2bec:	e1a00431 	lsr	r0, r1, r4
    2bf0:	e1a01005 	mov	r1, r5
    2bf4:	e8bd4030 	pop	{r4, r5, lr}
    2bf8:	e12fff1e 	bx	lr
    2bfc:	e3340000 	teq	r4, #0
    2c00:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    2c04:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    2c08:	02844001 	addeq	r4, r4, #1
    2c0c:	12455001 	subne	r5, r5, #1
    2c10:	eaffff8f 	b	2a54 <__adddf3+0x9c>
    2c14:	e1f0cac4 	mvns	r12, r4, asr #21
    2c18:	11f0cac5 	mvnsne	r12, r5, asr #21
    2c1c:	0a00001d 	beq	2c98 <__adddf3+0x2e0>
    2c20:	e1340005 	teq	r4, r5
    2c24:	01300002 	teqeq	r0, r2
    2c28:	0a000004 	beq	2c40 <__adddf3+0x288>
    2c2c:	e194c000 	orrs	r12, r4, r0
    2c30:	01a01003 	moveq	r1, r3
    2c34:	01a00002 	moveq	r0, r2
    2c38:	e8bd4030 	pop	{r4, r5, lr}
    2c3c:	e12fff1e 	bx	lr
    2c40:	e1310003 	teq	r1, r3
    2c44:	13a01000 	movne	r1, #0
    2c48:	13a00000 	movne	r0, #0
    2c4c:	18bd4030 	popne	{r4, r5, lr}
    2c50:	112fff1e 	bxne	lr
    2c54:	e1b0caa4 	lsrs	r12, r4, #21
    2c58:	1a000004 	bne	2c70 <__adddf3+0x2b8>
    2c5c:	e1b00080 	lsls	r0, r0, #1
    2c60:	e0b11001 	adcs	r1, r1, r1
    2c64:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    2c68:	e8bd4030 	pop	{r4, r5, lr}
    2c6c:	e12fff1e 	bx	lr
    2c70:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    2c74:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    2c78:	38bd4030 	popcc	{r4, r5, lr}
    2c7c:	312fff1e 	bxcc	lr
    2c80:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    2c84:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    2c88:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    2c8c:	e3a00000 	mov	r0, #0
    2c90:	e8bd4030 	pop	{r4, r5, lr}
    2c94:	e12fff1e 	bx	lr
    2c98:	e1f0cac4 	mvns	r12, r4, asr #21
    2c9c:	11a01003 	movne	r1, r3
    2ca0:	11a00002 	movne	r0, r2
    2ca4:	01f0cac5 	mvnseq	r12, r5, asr #21
    2ca8:	11a03001 	movne	r3, r1
    2cac:	11a02000 	movne	r2, r0
    2cb0:	e1904601 	orrs	r4, r0, r1, lsl #12
    2cb4:	01925603 	orrseq	r5, r2, r3, lsl #12
    2cb8:	01310003 	teqeq	r1, r3
    2cbc:	13811702 	orrne	r1, r1, #524288	; 0x80000
    2cc0:	e8bd4030 	pop	{r4, r5, lr}
    2cc4:	e12fff1e 	bx	lr

00002cc8 <__aeabi_ui2d>:
    2cc8:	e3300000 	teq	r0, #0
    2ccc:	03a01000 	moveq	r1, #0
    2cd0:	012fff1e 	bxeq	lr
    2cd4:	e92d4030 	push	{r4, r5, lr}
    2cd8:	e3a04b01 	mov	r4, #1024	; 0x400
    2cdc:	e2844032 	add	r4, r4, #50	; 0x32
    2ce0:	e3a05000 	mov	r5, #0
    2ce4:	e3a01000 	mov	r1, #0
    2ce8:	eaffff86 	b	2b08 <__adddf3+0x150>

00002cec <__aeabi_i2d>:
    2cec:	e3300000 	teq	r0, #0
    2cf0:	03a01000 	moveq	r1, #0
    2cf4:	012fff1e 	bxeq	lr
    2cf8:	e92d4030 	push	{r4, r5, lr}
    2cfc:	e3a04b01 	mov	r4, #1024	; 0x400
    2d00:	e2844032 	add	r4, r4, #50	; 0x32
    2d04:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    2d08:	42600000 	rsbmi	r0, r0, #0
    2d0c:	e3a01000 	mov	r1, #0
    2d10:	eaffff7c 	b	2b08 <__adddf3+0x150>

00002d14 <__aeabi_f2d>:
    2d14:	e1b02080 	lsls	r2, r0, #1
    2d18:	e1a011c2 	asr	r1, r2, #3
    2d1c:	e1a01061 	rrx	r1, r1
    2d20:	e1a00e02 	lsl	r0, r2, #28
    2d24:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    2d28:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    2d2c:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    2d30:	112fff1e 	bxne	lr
    2d34:	e3320000 	teq	r2, #0
    2d38:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    2d3c:	012fff1e 	bxeq	lr
    2d40:	e92d4030 	push	{r4, r5, lr}
    2d44:	e3a04d0e 	mov	r4, #896	; 0x380
    2d48:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    2d4c:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    2d50:	eaffff6c 	b	2b08 <__adddf3+0x150>

00002d54 <__aeabi_ul2d>:
    2d54:	e1902001 	orrs	r2, r0, r1
    2d58:	012fff1e 	bxeq	lr
    2d5c:	e92d4030 	push	{r4, r5, lr}
    2d60:	e3a05000 	mov	r5, #0
    2d64:	ea000006 	b	2d84 <__aeabi_l2d+0x1c>

00002d68 <__aeabi_l2d>:
    2d68:	e1902001 	orrs	r2, r0, r1
    2d6c:	012fff1e 	bxeq	lr
    2d70:	e92d4030 	push	{r4, r5, lr}
    2d74:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    2d78:	5a000001 	bpl	2d84 <__aeabi_l2d+0x1c>
    2d7c:	e2700000 	rsbs	r0, r0, #0
    2d80:	e2e11000 	rsc	r1, r1, #0
    2d84:	e3a04b01 	mov	r4, #1024	; 0x400
    2d88:	e2844032 	add	r4, r4, #50	; 0x32
    2d8c:	e1b0cb21 	lsrs	r12, r1, #22
    2d90:	0affff44 	beq	2aa8 <__adddf3+0xf0>
    2d94:	e3a02003 	mov	r2, #3
    2d98:	e1b0c1ac 	lsrs	r12, r12, #3
    2d9c:	12822003 	addne	r2, r2, #3
    2da0:	e1b0c1ac 	lsrs	r12, r12, #3
    2da4:	12822003 	addne	r2, r2, #3
    2da8:	e08221ac 	add	r2, r2, r12, lsr #3
    2dac:	e2623020 	rsb	r3, r2, #32
    2db0:	e1a0c310 	lsl	r12, r0, r3
    2db4:	e1a00230 	lsr	r0, r0, r2
    2db8:	e1800311 	orr	r0, r0, r1, lsl r3
    2dbc:	e1a01231 	lsr	r1, r1, r2
    2dc0:	e0844002 	add	r4, r4, r2
    2dc4:	eaffff37 	b	2aa8 <__adddf3+0xf0>

00002dc8 <__aeabi_dmul>:
    2dc8:	e92d4070 	push	{r4, r5, r6, lr}
    2dcc:	e3a0c0ff 	mov	r12, #255	; 0xff
    2dd0:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    2dd4:	e01c4a21 	ands	r4, r12, r1, lsr #20
    2dd8:	101c5a23 	andsne	r5, r12, r3, lsr #20
    2ddc:	1134000c 	teqne	r4, r12
    2de0:	1135000c 	teqne	r5, r12
    2de4:	0b000075 	bleq	2fc0 <__aeabi_dmul+0x1f8>
    2de8:	e0844005 	add	r4, r4, r5
    2dec:	e0216003 	eor	r6, r1, r3
    2df0:	e1c11a8c 	bic	r1, r1, r12, lsl #21
    2df4:	e1c33a8c 	bic	r3, r3, r12, lsl #21
    2df8:	e1905601 	orrs	r5, r0, r1, lsl #12
    2dfc:	11925603 	orrsne	r5, r2, r3, lsl #12
    2e00:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    2e04:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    2e08:	0a00001d 	beq	2e84 <__aeabi_dmul+0xbc>
    2e0c:	e08ec290 	umull	r12, lr, r0, r2
    2e10:	e3a05000 	mov	r5, #0
    2e14:	e0a5e291 	umlal	lr, r5, r1, r2
    2e18:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    2e1c:	e0a5e390 	umlal	lr, r5, r0, r3
    2e20:	e3a06000 	mov	r6, #0
    2e24:	e0a65391 	umlal	r5, r6, r1, r3
    2e28:	e33c0000 	teq	r12, #0
    2e2c:	138ee001 	orrne	lr, lr, #1
    2e30:	e24440ff 	sub	r4, r4, #255	; 0xff
    2e34:	e3560c02 	cmp	r6, #512	; 0x200
    2e38:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    2e3c:	2a000002 	bcs	2e4c <__aeabi_dmul+0x84>
    2e40:	e1b0e08e 	lsls	lr, lr, #1
    2e44:	e0b55005 	adcs	r5, r5, r5
    2e48:	e0a66006 	adc	r6, r6, r6
    2e4c:	e1821586 	orr	r1, r2, r6, lsl #11
    2e50:	e1811aa5 	orr	r1, r1, r5, lsr #21
    2e54:	e1a00585 	lsl	r0, r5, #11
    2e58:	e1800aae 	orr	r0, r0, lr, lsr #21
    2e5c:	e1a0e58e 	lsl	lr, lr, #11
    2e60:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    2e64:	835c0c07 	cmphi	r12, #1792	; 0x700
    2e68:	8a000011 	bhi	2eb4 <__aeabi_dmul+0xec>
    2e6c:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    2e70:	01b0e0a0 	lsrseq	lr, r0, #1
    2e74:	e2b00000 	adcs	r0, r0, #0
    2e78:	e0a11a04 	adc	r1, r1, r4, lsl #20
    2e7c:	e8bd4070 	pop	{r4, r5, r6, lr}
    2e80:	e12fff1e 	bx	lr
    2e84:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    2e88:	e1861001 	orr	r1, r6, r1
    2e8c:	e1800002 	orr	r0, r0, r2
    2e90:	e0211003 	eor	r1, r1, r3
    2e94:	e05440ac 	subs	r4, r4, r12, lsr #1
    2e98:	c074500c 	rsbsgt	r5, r4, r12
    2e9c:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    2ea0:	c8bd4070 	popgt	{r4, r5, r6, lr}
    2ea4:	c12fff1e 	bxgt	lr
    2ea8:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    2eac:	e3a0e000 	mov	lr, #0
    2eb0:	e2544001 	subs	r4, r4, #1
    2eb4:	ca00005d 	bgt	3030 <__aeabi_dmul+0x268>
    2eb8:	e3740036 	cmn	r4, #54	; 0x36
    2ebc:	d3a00000 	movle	r0, #0
    2ec0:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    2ec4:	d8bd4070 	pople	{r4, r5, r6, lr}
    2ec8:	d12fff1e 	bxle	lr
    2ecc:	e2644000 	rsb	r4, r4, #0
    2ed0:	e2544020 	subs	r4, r4, #32
    2ed4:	aa00001a 	bge	2f44 <__aeabi_dmul+0x17c>
    2ed8:	e294400c 	adds	r4, r4, #12
    2edc:	ca00000c 	bgt	2f14 <__aeabi_dmul+0x14c>
    2ee0:	e2844014 	add	r4, r4, #20
    2ee4:	e2645020 	rsb	r5, r4, #32
    2ee8:	e1a03510 	lsl	r3, r0, r5
    2eec:	e1a00430 	lsr	r0, r0, r4
    2ef0:	e1800511 	orr	r0, r0, r1, lsl r5
    2ef4:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    2ef8:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    2efc:	e0900fa3 	adds	r0, r0, r3, lsr #31
    2f00:	e0a21431 	adc	r1, r2, r1, lsr r4
    2f04:	e19ee083 	orrs	lr, lr, r3, lsl #1
    2f08:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    2f0c:	e8bd4070 	pop	{r4, r5, r6, lr}
    2f10:	e12fff1e 	bx	lr
    2f14:	e264400c 	rsb	r4, r4, #12
    2f18:	e2645020 	rsb	r5, r4, #32
    2f1c:	e1a03410 	lsl	r3, r0, r4
    2f20:	e1a00530 	lsr	r0, r0, r5
    2f24:	e1800411 	orr	r0, r0, r1, lsl r4
    2f28:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    2f2c:	e0900fa3 	adds	r0, r0, r3, lsr #31
    2f30:	e2a11000 	adc	r1, r1, #0
    2f34:	e19ee083 	orrs	lr, lr, r3, lsl #1
    2f38:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    2f3c:	e8bd4070 	pop	{r4, r5, r6, lr}
    2f40:	e12fff1e 	bx	lr
    2f44:	e2645020 	rsb	r5, r4, #32
    2f48:	e18ee510 	orr	lr, lr, r0, lsl r5
    2f4c:	e1a03430 	lsr	r3, r0, r4
    2f50:	e1833511 	orr	r3, r3, r1, lsl r5
    2f54:	e1a00431 	lsr	r0, r1, r4
    2f58:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    2f5c:	e1c00431 	bic	r0, r0, r1, lsr r4
    2f60:	e0800fa3 	add	r0, r0, r3, lsr #31
    2f64:	e19ee083 	orrs	lr, lr, r3, lsl #1
    2f68:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    2f6c:	e8bd4070 	pop	{r4, r5, r6, lr}
    2f70:	e12fff1e 	bx	lr
    2f74:	e3340000 	teq	r4, #0
    2f78:	1a000008 	bne	2fa0 <__aeabi_dmul+0x1d8>
    2f7c:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    2f80:	e1b00080 	lsls	r0, r0, #1
    2f84:	e0a11001 	adc	r1, r1, r1
    2f88:	e3110601 	tst	r1, #1048576	; 0x100000
    2f8c:	02444001 	subeq	r4, r4, #1
    2f90:	0afffffa 	beq	2f80 <__aeabi_dmul+0x1b8>
    2f94:	e1811006 	orr	r1, r1, r6
    2f98:	e3350000 	teq	r5, #0
    2f9c:	112fff1e 	bxne	lr
    2fa0:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    2fa4:	e1b02082 	lsls	r2, r2, #1
    2fa8:	e0a33003 	adc	r3, r3, r3
    2fac:	e3130601 	tst	r3, #1048576	; 0x100000
    2fb0:	02455001 	subeq	r5, r5, #1
    2fb4:	0afffffa 	beq	2fa4 <__aeabi_dmul+0x1dc>
    2fb8:	e1833006 	orr	r3, r3, r6
    2fbc:	e12fff1e 	bx	lr
    2fc0:	e134000c 	teq	r4, r12
    2fc4:	e00c5a23 	and	r5, r12, r3, lsr #20
    2fc8:	1135000c 	teqne	r5, r12
    2fcc:	0a000007 	beq	2ff0 <__aeabi_dmul+0x228>
    2fd0:	e1906081 	orrs	r6, r0, r1, lsl #1
    2fd4:	11926083 	orrsne	r6, r2, r3, lsl #1
    2fd8:	1affffe5 	bne	2f74 <__aeabi_dmul+0x1ac>
    2fdc:	e0211003 	eor	r1, r1, r3
    2fe0:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    2fe4:	e3a00000 	mov	r0, #0
    2fe8:	e8bd4070 	pop	{r4, r5, r6, lr}
    2fec:	e12fff1e 	bx	lr
    2ff0:	e1906081 	orrs	r6, r0, r1, lsl #1
    2ff4:	01a00002 	moveq	r0, r2
    2ff8:	01a01003 	moveq	r1, r3
    2ffc:	11926083 	orrsne	r6, r2, r3, lsl #1
    3000:	0a000010 	beq	3048 <__aeabi_dmul+0x280>
    3004:	e134000c 	teq	r4, r12
    3008:	1a000001 	bne	3014 <__aeabi_dmul+0x24c>
    300c:	e1906601 	orrs	r6, r0, r1, lsl #12
    3010:	1a00000c 	bne	3048 <__aeabi_dmul+0x280>
    3014:	e135000c 	teq	r5, r12
    3018:	1a000003 	bne	302c <__aeabi_dmul+0x264>
    301c:	e1926603 	orrs	r6, r2, r3, lsl #12
    3020:	11a00002 	movne	r0, r2
    3024:	11a01003 	movne	r1, r3
    3028:	1a000006 	bne	3048 <__aeabi_dmul+0x280>
    302c:	e0211003 	eor	r1, r1, r3
    3030:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    3034:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    3038:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    303c:	e3a00000 	mov	r0, #0
    3040:	e8bd4070 	pop	{r4, r5, r6, lr}
    3044:	e12fff1e 	bx	lr
    3048:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    304c:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    3050:	e8bd4070 	pop	{r4, r5, r6, lr}
    3054:	e12fff1e 	bx	lr

00003058 <__aeabi_ddiv>:
    3058:	e92d4070 	push	{r4, r5, r6, lr}
    305c:	e3a0c0ff 	mov	r12, #255	; 0xff
    3060:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    3064:	e01c4a21 	ands	r4, r12, r1, lsr #20
    3068:	101c5a23 	andsne	r5, r12, r3, lsr #20
    306c:	1134000c 	teqne	r4, r12
    3070:	1135000c 	teqne	r5, r12
    3074:	0b00005e 	bleq	31f4 <__aeabi_ddiv+0x19c>
    3078:	e0444005 	sub	r4, r4, r5
    307c:	e021e003 	eor	lr, r1, r3
    3080:	e1925603 	orrs	r5, r2, r3, lsl #12
    3084:	e1a01601 	lsl	r1, r1, #12
    3088:	0a00004c 	beq	31c0 <__aeabi_ddiv+0x168>
    308c:	e1a03603 	lsl	r3, r3, #12
    3090:	e3a05201 	mov	r5, #268435456	; 0x10000000
    3094:	e1853223 	orr	r3, r5, r3, lsr #4
    3098:	e1833c22 	orr	r3, r3, r2, lsr #24
    309c:	e1a02402 	lsl	r2, r2, #8
    30a0:	e1855221 	orr	r5, r5, r1, lsr #4
    30a4:	e1855c20 	orr	r5, r5, r0, lsr #24
    30a8:	e1a06400 	lsl	r6, r0, #8
    30ac:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    30b0:	e1550003 	cmp	r5, r3
    30b4:	01560002 	cmpeq	r6, r2
    30b8:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    30bc:	e2844c03 	add	r4, r4, #768	; 0x300
    30c0:	2a000001 	bcs	30cc <__aeabi_ddiv+0x74>
    30c4:	e1b030a3 	lsrs	r3, r3, #1
    30c8:	e1a02062 	rrx	r2, r2
    30cc:	e0566002 	subs	r6, r6, r2
    30d0:	e0c55003 	sbc	r5, r5, r3
    30d4:	e1b030a3 	lsrs	r3, r3, #1
    30d8:	e1a02062 	rrx	r2, r2
    30dc:	e3a00601 	mov	r0, #1048576	; 0x100000
    30e0:	e3a0c702 	mov	r12, #524288	; 0x80000
    30e4:	e056e002 	subs	lr, r6, r2
    30e8:	e0d5e003 	sbcs	lr, r5, r3
    30ec:	20466002 	subcs	r6, r6, r2
    30f0:	21a0500e 	movcs	r5, lr
    30f4:	2180000c 	orrcs	r0, r0, r12
    30f8:	e1b030a3 	lsrs	r3, r3, #1
    30fc:	e1a02062 	rrx	r2, r2
    3100:	e056e002 	subs	lr, r6, r2
    3104:	e0d5e003 	sbcs	lr, r5, r3
    3108:	20466002 	subcs	r6, r6, r2
    310c:	21a0500e 	movcs	r5, lr
    3110:	218000ac 	orrcs	r0, r0, r12, lsr #1
    3114:	e1b030a3 	lsrs	r3, r3, #1
    3118:	e1a02062 	rrx	r2, r2
    311c:	e056e002 	subs	lr, r6, r2
    3120:	e0d5e003 	sbcs	lr, r5, r3
    3124:	20466002 	subcs	r6, r6, r2
    3128:	21a0500e 	movcs	r5, lr
    312c:	2180012c 	orrcs	r0, r0, r12, lsr #2
    3130:	e1b030a3 	lsrs	r3, r3, #1
    3134:	e1a02062 	rrx	r2, r2
    3138:	e056e002 	subs	lr, r6, r2
    313c:	e0d5e003 	sbcs	lr, r5, r3
    3140:	20466002 	subcs	r6, r6, r2
    3144:	21a0500e 	movcs	r5, lr
    3148:	218001ac 	orrcs	r0, r0, r12, lsr #3
    314c:	e195e006 	orrs	lr, r5, r6
    3150:	0a00000d 	beq	318c <__aeabi_ddiv+0x134>
    3154:	e1a05205 	lsl	r5, r5, #4
    3158:	e1855e26 	orr	r5, r5, r6, lsr #28
    315c:	e1a06206 	lsl	r6, r6, #4
    3160:	e1a03183 	lsl	r3, r3, #3
    3164:	e1833ea2 	orr	r3, r3, r2, lsr #29
    3168:	e1a02182 	lsl	r2, r2, #3
    316c:	e1b0c22c 	lsrs	r12, r12, #4
    3170:	1affffdb 	bne	30e4 <__aeabi_ddiv+0x8c>
    3174:	e3110601 	tst	r1, #1048576	; 0x100000
    3178:	1a000006 	bne	3198 <__aeabi_ddiv+0x140>
    317c:	e1811000 	orr	r1, r1, r0
    3180:	e3a00000 	mov	r0, #0
    3184:	e3a0c102 	mov	r12, #-2147483648	; 0x80000000
    3188:	eaffffd5 	b	30e4 <__aeabi_ddiv+0x8c>
    318c:	e3110601 	tst	r1, #1048576	; 0x100000
    3190:	01811000 	orreq	r1, r1, r0
    3194:	03a00000 	moveq	r0, #0
    3198:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    319c:	835c0c07 	cmphi	r12, #1792	; 0x700
    31a0:	8affff43 	bhi	2eb4 <__aeabi_dmul+0xec>
    31a4:	e055c003 	subs	r12, r5, r3
    31a8:	0056c002 	subseq	r12, r6, r2
    31ac:	01b0c0a0 	lsrseq	r12, r0, #1
    31b0:	e2b00000 	adcs	r0, r0, #0
    31b4:	e0a11a04 	adc	r1, r1, r4, lsl #20
    31b8:	e8bd4070 	pop	{r4, r5, r6, lr}
    31bc:	e12fff1e 	bx	lr
    31c0:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    31c4:	e18e1621 	orr	r1, lr, r1, lsr #12
    31c8:	e09440ac 	adds	r4, r4, r12, lsr #1
    31cc:	c074500c 	rsbsgt	r5, r4, r12
    31d0:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    31d4:	c8bd4070 	popgt	{r4, r5, r6, lr}
    31d8:	c12fff1e 	bxgt	lr
    31dc:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    31e0:	e3a0e000 	mov	lr, #0
    31e4:	e2544001 	subs	r4, r4, #1
    31e8:	eaffff31 	b	2eb4 <__aeabi_dmul+0xec>
    31ec:	e185e006 	orr	lr, r5, r6
    31f0:	eaffff2f 	b	2eb4 <__aeabi_dmul+0xec>
    31f4:	e00c5a23 	and	r5, r12, r3, lsr #20
    31f8:	e134000c 	teq	r4, r12
    31fc:	0135000c 	teqeq	r5, r12
    3200:	0affff90 	beq	3048 <__aeabi_dmul+0x280>
    3204:	e134000c 	teq	r4, r12
    3208:	1a000006 	bne	3228 <__aeabi_ddiv+0x1d0>
    320c:	e1904601 	orrs	r4, r0, r1, lsl #12
    3210:	1affff8c 	bne	3048 <__aeabi_dmul+0x280>
    3214:	e135000c 	teq	r5, r12
    3218:	1affff83 	bne	302c <__aeabi_dmul+0x264>
    321c:	e1a00002 	mov	r0, r2
    3220:	e1a01003 	mov	r1, r3
    3224:	eaffff87 	b	3048 <__aeabi_dmul+0x280>
    3228:	e135000c 	teq	r5, r12
    322c:	1a000004 	bne	3244 <__aeabi_ddiv+0x1ec>
    3230:	e1925603 	orrs	r5, r2, r3, lsl #12
    3234:	0affff68 	beq	2fdc <__aeabi_dmul+0x214>
    3238:	e1a00002 	mov	r0, r2
    323c:	e1a01003 	mov	r1, r3
    3240:	eaffff80 	b	3048 <__aeabi_dmul+0x280>
    3244:	e1906081 	orrs	r6, r0, r1, lsl #1
    3248:	11926083 	orrsne	r6, r2, r3, lsl #1
    324c:	1affff48 	bne	2f74 <__aeabi_dmul+0x1ac>
    3250:	e1904081 	orrs	r4, r0, r1, lsl #1
    3254:	1affff74 	bne	302c <__aeabi_dmul+0x264>
    3258:	e1925083 	orrs	r5, r2, r3, lsl #1
    325c:	1affff5e 	bne	2fdc <__aeabi_dmul+0x214>
    3260:	eaffff78 	b	3048 <__aeabi_dmul+0x280>

00003264 <__gedf2>:
    3264:	e3e0c000 	mvn	r12, #0
    3268:	ea000002 	b	3278 <__cmpdf2+0x4>

0000326c <__ledf2>:
    326c:	e3a0c001 	mov	r12, #1
    3270:	ea000000 	b	3278 <__cmpdf2+0x4>

00003274 <__cmpdf2>:
    3274:	e3a0c001 	mov	r12, #1
    3278:	e52dc004 	push	{r12}		; (str r12, [sp, #-4]!)
    327c:	e1a0c081 	lsl	r12, r1, #1
    3280:	e1f0cacc 	mvns	r12, r12, asr #21
    3284:	e1a0c083 	lsl	r12, r3, #1
    3288:	11f0cacc 	mvnsne	r12, r12, asr #21
    328c:	0a00000e 	beq	32cc <__cmpdf2+0x58>
    3290:	e28dd004 	add	sp, sp, #4
    3294:	e190c081 	orrs	r12, r0, r1, lsl #1
    3298:	0192c083 	orrseq	r12, r2, r3, lsl #1
    329c:	11310003 	teqne	r1, r3
    32a0:	01300002 	teqeq	r0, r2
    32a4:	03a00000 	moveq	r0, #0
    32a8:	012fff1e 	bxeq	lr
    32ac:	e3700000 	cmn	r0, #0
    32b0:	e1310003 	teq	r1, r3
    32b4:	51510003 	cmppl	r1, r3
    32b8:	01500002 	cmpeq	r0, r2
    32bc:	21a00fc3 	asrcs	r0, r3, #31
    32c0:	31e00fc3 	mvncc	r0, r3, asr #31
    32c4:	e3800001 	orr	r0, r0, #1
    32c8:	e12fff1e 	bx	lr
    32cc:	e1a0c081 	lsl	r12, r1, #1
    32d0:	e1f0cacc 	mvns	r12, r12, asr #21
    32d4:	1a000001 	bne	32e0 <__cmpdf2+0x6c>
    32d8:	e190c601 	orrs	r12, r0, r1, lsl #12
    32dc:	1a000004 	bne	32f4 <__cmpdf2+0x80>
    32e0:	e1a0c083 	lsl	r12, r3, #1
    32e4:	e1f0cacc 	mvns	r12, r12, asr #21
    32e8:	1affffe8 	bne	3290 <__cmpdf2+0x1c>
    32ec:	e192c603 	orrs	r12, r2, r3, lsl #12
    32f0:	0affffe6 	beq	3290 <__cmpdf2+0x1c>
    32f4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    32f8:	e12fff1e 	bx	lr

000032fc <__aeabi_cdrcmple>:
    32fc:	e1a0c000 	mov	r12, r0
    3300:	e1a00002 	mov	r0, r2
    3304:	e1a0200c 	mov	r2, r12
    3308:	e1a0c001 	mov	r12, r1
    330c:	e1a01003 	mov	r1, r3
    3310:	e1a0300c 	mov	r3, r12
    3314:	eaffffff 	b	3318 <__aeabi_cdcmpeq>

00003318 <__aeabi_cdcmpeq>:
    3318:	e92d4001 	push	{r0, lr}
    331c:	ebffffd4 	bl	3274 <__cmpdf2>
    3320:	e3500000 	cmp	r0, #0
    3324:	43700000 	cmnmi	r0, #0
    3328:	e8bd4001 	pop	{r0, lr}
    332c:	e12fff1e 	bx	lr

00003330 <__aeabi_dcmpeq>:
    3330:	e52de008 	str	lr, [sp, #-8]!
    3334:	ebfffff7 	bl	3318 <__aeabi_cdcmpeq>
    3338:	03a00001 	moveq	r0, #1
    333c:	13a00000 	movne	r0, #0
    3340:	e49de008 	ldr	lr, [sp], #8
    3344:	e12fff1e 	bx	lr

00003348 <__aeabi_dcmplt>:
    3348:	e52de008 	str	lr, [sp, #-8]!
    334c:	ebfffff1 	bl	3318 <__aeabi_cdcmpeq>
    3350:	33a00001 	movcc	r0, #1
    3354:	23a00000 	movcs	r0, #0
    3358:	e49de008 	ldr	lr, [sp], #8
    335c:	e12fff1e 	bx	lr

00003360 <__aeabi_dcmple>:
    3360:	e52de008 	str	lr, [sp, #-8]!
    3364:	ebffffeb 	bl	3318 <__aeabi_cdcmpeq>
    3368:	93a00001 	movls	r0, #1
    336c:	83a00000 	movhi	r0, #0
    3370:	e49de008 	ldr	lr, [sp], #8
    3374:	e12fff1e 	bx	lr

00003378 <__aeabi_dcmpge>:
    3378:	e52de008 	str	lr, [sp, #-8]!
    337c:	ebffffde 	bl	32fc <__aeabi_cdrcmple>
    3380:	93a00001 	movls	r0, #1
    3384:	83a00000 	movhi	r0, #0
    3388:	e49de008 	ldr	lr, [sp], #8
    338c:	e12fff1e 	bx	lr

00003390 <__aeabi_dcmpgt>:
    3390:	e52de008 	str	lr, [sp, #-8]!
    3394:	ebffffd8 	bl	32fc <__aeabi_cdrcmple>
    3398:	33a00001 	movcc	r0, #1
    339c:	23a00000 	movcs	r0, #0
    33a0:	e49de008 	ldr	lr, [sp], #8
    33a4:	e12fff1e 	bx	lr

000033a8 <__aeabi_d2iz>:
    33a8:	e1a02081 	lsl	r2, r1, #1
    33ac:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    33b0:	2a00000c 	bcs	33e8 <__aeabi_d2iz+0x40>
    33b4:	5a000009 	bpl	33e0 <__aeabi_d2iz+0x38>
    33b8:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    33bc:	e0532ac2 	subs	r2, r3, r2, asr #21
    33c0:	9a00000a 	bls	33f0 <__aeabi_d2iz+0x48>
    33c4:	e1a03581 	lsl	r3, r1, #11
    33c8:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    33cc:	e1833aa0 	orr	r3, r3, r0, lsr #21
    33d0:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    33d4:	e1a00233 	lsr	r0, r3, r2
    33d8:	12600000 	rsbne	r0, r0, #0
    33dc:	e12fff1e 	bx	lr
    33e0:	e3a00000 	mov	r0, #0
    33e4:	e12fff1e 	bx	lr
    33e8:	e1900601 	orrs	r0, r0, r1, lsl #12
    33ec:	1a000002 	bne	33fc <__aeabi_d2iz+0x54>
    33f0:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    33f4:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    33f8:	e12fff1e 	bx	lr
    33fc:	e3a00000 	mov	r0, #0
    3400:	e12fff1e 	bx	lr

00003404 <__aeabi_d2f>:
    3404:	e1a02081 	lsl	r2, r1, #1
    3408:	e2523207 	subs	r3, r2, #1879048192	; 0x70000000
    340c:	2253c602 	subscs	r12, r3, #2097152	; 0x200000
    3410:	227cc57f 	rsbscs	r12, r12, #532676608	; 0x1fc00000
    3414:	9a000006 	bls	3434 <__aeabi_d2f+0x30>
    3418:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    341c:	e1a02180 	lsl	r2, r0, #3
    3420:	e18c0ea0 	orr	r0, r12, r0, lsr #29
    3424:	e3520102 	cmp	r2, #-2147483648	; 0x80000000
    3428:	e0a00103 	adc	r0, r0, r3, lsl #2
    342c:	03c00001 	biceq	r0, r0, #1
    3430:	e12fff1e 	bx	lr
    3434:	e3110101 	tst	r1, #1073741824	; 0x40000000
    3438:	1a00000f 	bne	347c <__aeabi_d2f+0x78>
    343c:	e293262e 	adds	r2, r3, #48234496	; 0x2e00000
    3440:	b2010102 	andlt	r0, r1, #-2147483648	; 0x80000000
    3444:	b12fff1e 	bxlt	lr
    3448:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    344c:	e1a02aa2 	lsr	r2, r2, #21
    3450:	e2622018 	rsb	r2, r2, #24
    3454:	e262c020 	rsb	r12, r2, #32
    3458:	e1b03c10 	lsls	r3, r0, r12
    345c:	e1a00230 	lsr	r0, r0, r2
    3460:	13800001 	orrne	r0, r0, #1
    3464:	e1a03581 	lsl	r3, r1, #11
    3468:	e1a035a3 	lsr	r3, r3, #11
    346c:	e1800c13 	orr	r0, r0, r3, lsl r12
    3470:	e1a03233 	lsr	r3, r3, r2
    3474:	e1a03083 	lsl	r3, r3, #1
    3478:	eaffffe6 	b	3418 <__aeabi_d2f+0x14>
    347c:	e1f03ac2 	mvns	r3, r2, asr #21
    3480:	1a000003 	bne	3494 <__aeabi_d2f+0x90>
    3484:	e1903601 	orrs	r3, r0, r1, lsl #12
    3488:	13a0047f 	movne	r0, #2130706432	; 0x7f000000
    348c:	13800503 	orrne	r0, r0, #12582912	; 0xc00000
    3490:	112fff1e 	bxne	lr
    3494:	e2010102 	and	r0, r1, #-2147483648	; 0x80000000
    3498:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    349c:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    34a0:	e12fff1e 	bx	lr

000034a4 <__aeabi_frsub>:
    34a4:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
    34a8:	ea000000 	b	34b0 <__addsf3>

000034ac <__aeabi_fsub>:
    34ac:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000

000034b0 <__addsf3>:
    34b0:	e1b02080 	lsls	r2, r0, #1
    34b4:	11b03081 	lslsne	r3, r1, #1
    34b8:	11320003 	teqne	r2, r3
    34bc:	11f0cc42 	mvnsne	r12, r2, asr #24
    34c0:	11f0cc43 	mvnsne	r12, r3, asr #24
    34c4:	0a000047 	beq	35e8 <__addsf3+0x138>
    34c8:	e1a02c22 	lsr	r2, r2, #24
    34cc:	e0723c23 	rsbs	r3, r2, r3, lsr #24
    34d0:	c0822003 	addgt	r2, r2, r3
    34d4:	c0201001 	eorgt	r1, r0, r1
    34d8:	c0210000 	eorgt	r0, r1, r0
    34dc:	c0201001 	eorgt	r1, r0, r1
    34e0:	b2633000 	rsblt	r3, r3, #0
    34e4:	e3530019 	cmp	r3, #25
    34e8:	812fff1e 	bxhi	lr
    34ec:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    34f0:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    34f4:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
    34f8:	12600000 	rsbne	r0, r0, #0
    34fc:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    3500:	e3811502 	orr	r1, r1, #8388608	; 0x800000
    3504:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
    3508:	12611000 	rsbne	r1, r1, #0
    350c:	e1320003 	teq	r2, r3
    3510:	0a00002e 	beq	35d0 <__addsf3+0x120>
    3514:	e2422001 	sub	r2, r2, #1
    3518:	e0900351 	adds	r0, r0, r1, asr r3
    351c:	e2633020 	rsb	r3, r3, #32
    3520:	e1a01311 	lsl	r1, r1, r3
    3524:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    3528:	5a000001 	bpl	3534 <__addsf3+0x84>
    352c:	e2711000 	rsbs	r1, r1, #0
    3530:	e2e00000 	rsc	r0, r0, #0
    3534:	e3500502 	cmp	r0, #8388608	; 0x800000
    3538:	3a00000b 	bcc	356c <__addsf3+0xbc>
    353c:	e3500401 	cmp	r0, #16777216	; 0x1000000
    3540:	3a000004 	bcc	3558 <__addsf3+0xa8>
    3544:	e1b000a0 	lsrs	r0, r0, #1
    3548:	e1a01061 	rrx	r1, r1
    354c:	e2822001 	add	r2, r2, #1
    3550:	e35200fe 	cmp	r2, #254	; 0xfe
    3554:	2a000038 	bcs	363c <__addsf3+0x18c>
    3558:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    355c:	e0a00b82 	adc	r0, r0, r2, lsl #23
    3560:	03c00001 	biceq	r0, r0, #1
    3564:	e1800003 	orr	r0, r0, r3
    3568:	e12fff1e 	bx	lr
    356c:	e1b01081 	lsls	r1, r1, #1
    3570:	e0a00000 	adc	r0, r0, r0
    3574:	e3100502 	tst	r0, #8388608	; 0x800000
    3578:	e2422001 	sub	r2, r2, #1
    357c:	1afffff5 	bne	3558 <__addsf3+0xa8>
    3580:	e1b0c620 	lsrs	r12, r0, #12
    3584:	01a00600 	lsleq	r0, r0, #12
    3588:	0242200c 	subeq	r2, r2, #12
    358c:	e31008ff 	tst	r0, #16711680	; 0xff0000
    3590:	01a00400 	lsleq	r0, r0, #8
    3594:	02422008 	subeq	r2, r2, #8
    3598:	e310060f 	tst	r0, #15728640	; 0xf00000
    359c:	01a00200 	lsleq	r0, r0, #4
    35a0:	02422004 	subeq	r2, r2, #4
    35a4:	e3100503 	tst	r0, #12582912	; 0xc00000
    35a8:	01a00100 	lsleq	r0, r0, #2
    35ac:	02422002 	subeq	r2, r2, #2
    35b0:	e3500502 	cmp	r0, #8388608	; 0x800000
    35b4:	31a00080 	lslcc	r0, r0, #1
    35b8:	e2d22000 	sbcs	r2, r2, #0
    35bc:	a0800b82 	addge	r0, r0, r2, lsl #23
    35c0:	b2622000 	rsblt	r2, r2, #0
    35c4:	a1800003 	orrge	r0, r0, r3
    35c8:	b1830230 	orrlt	r0, r3, r0, lsr r2
    35cc:	e12fff1e 	bx	lr
    35d0:	e3320000 	teq	r2, #0
    35d4:	e2211502 	eor	r1, r1, #8388608	; 0x800000
    35d8:	02200502 	eoreq	r0, r0, #8388608	; 0x800000
    35dc:	02822001 	addeq	r2, r2, #1
    35e0:	12433001 	subne	r3, r3, #1
    35e4:	eaffffca 	b	3514 <__addsf3+0x64>
    35e8:	e1a03081 	lsl	r3, r1, #1
    35ec:	e1f0cc42 	mvns	r12, r2, asr #24
    35f0:	11f0cc43 	mvnsne	r12, r3, asr #24
    35f4:	0a000013 	beq	3648 <__addsf3+0x198>
    35f8:	e1320003 	teq	r2, r3
    35fc:	0a000002 	beq	360c <__addsf3+0x15c>
    3600:	e3320000 	teq	r2, #0
    3604:	01a00001 	moveq	r0, r1
    3608:	e12fff1e 	bx	lr
    360c:	e1300001 	teq	r0, r1
    3610:	13a00000 	movne	r0, #0
    3614:	112fff1e 	bxne	lr
    3618:	e31204ff 	tst	r2, #-16777216	; 0xff000000
    361c:	1a000002 	bne	362c <__addsf3+0x17c>
    3620:	e1b00080 	lsls	r0, r0, #1
    3624:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
    3628:	e12fff1e 	bx	lr
    362c:	e2922402 	adds	r2, r2, #33554432	; 0x2000000
    3630:	32800502 	addcc	r0, r0, #8388608	; 0x800000
    3634:	312fff1e 	bxcc	lr
    3638:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    363c:	e383047f 	orr	r0, r3, #2130706432	; 0x7f000000
    3640:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    3644:	e12fff1e 	bx	lr
    3648:	e1f02c42 	mvns	r2, r2, asr #24
    364c:	11a00001 	movne	r0, r1
    3650:	01f03c43 	mvnseq	r3, r3, asr #24
    3654:	11a01000 	movne	r1, r0
    3658:	e1b02480 	lsls	r2, r0, #9
    365c:	01b03481 	lslseq	r3, r1, #9
    3660:	01300001 	teqeq	r0, r1
    3664:	13800501 	orrne	r0, r0, #4194304	; 0x400000
    3668:	e12fff1e 	bx	lr

0000366c <__aeabi_ui2f>:
    366c:	e3a03000 	mov	r3, #0
    3670:	ea000001 	b	367c <__aeabi_i2f+0x8>

00003674 <__aeabi_i2f>:
    3674:	e2103102 	ands	r3, r0, #-2147483648	; 0x80000000
    3678:	42600000 	rsbmi	r0, r0, #0
    367c:	e1b0c000 	movs	r12, r0
    3680:	012fff1e 	bxeq	lr
    3684:	e383344b 	orr	r3, r3, #1258291200	; 0x4b000000
    3688:	e1a01000 	mov	r1, r0
    368c:	e3a00000 	mov	r0, #0
    3690:	ea00000f 	b	36d4 <__aeabi_l2f+0x30>

00003694 <__aeabi_ul2f>:
    3694:	e1902001 	orrs	r2, r0, r1
    3698:	012fff1e 	bxeq	lr
    369c:	e3a03000 	mov	r3, #0
    36a0:	ea000005 	b	36bc <__aeabi_l2f+0x18>

000036a4 <__aeabi_l2f>:
    36a4:	e1902001 	orrs	r2, r0, r1
    36a8:	012fff1e 	bxeq	lr
    36ac:	e2113102 	ands	r3, r1, #-2147483648	; 0x80000000
    36b0:	5a000001 	bpl	36bc <__aeabi_l2f+0x18>
    36b4:	e2700000 	rsbs	r0, r0, #0
    36b8:	e2e11000 	rsc	r1, r1, #0
    36bc:	e1b0c001 	movs	r12, r1
    36c0:	01a0c000 	moveq	r12, r0
    36c4:	01a01000 	moveq	r1, r0
    36c8:	03a00000 	moveq	r0, #0
    36cc:	e383345b 	orr	r3, r3, #1526726656	; 0x5b000000
    36d0:	02433201 	subeq	r3, r3, #268435456	; 0x10000000
    36d4:	e2433502 	sub	r3, r3, #8388608	; 0x800000
    36d8:	e3a02017 	mov	r2, #23
    36dc:	e35c0801 	cmp	r12, #65536	; 0x10000
    36e0:	21a0c82c 	lsrcs	r12, r12, #16
    36e4:	22422010 	subcs	r2, r2, #16
    36e8:	e35c0c01 	cmp	r12, #256	; 0x100
    36ec:	21a0c42c 	lsrcs	r12, r12, #8
    36f0:	22422008 	subcs	r2, r2, #8
    36f4:	e35c0010 	cmp	r12, #16
    36f8:	21a0c22c 	lsrcs	r12, r12, #4
    36fc:	22422004 	subcs	r2, r2, #4
    3700:	e35c0004 	cmp	r12, #4
    3704:	22422002 	subcs	r2, r2, #2
    3708:	304220ac 	subcc	r2, r2, r12, lsr #1
    370c:	e05221ac 	subs	r2, r2, r12, lsr #3
    3710:	e0433b82 	sub	r3, r3, r2, lsl #23
    3714:	ba000006 	blt	3734 <__aeabi_l2f+0x90>
    3718:	e0833211 	add	r3, r3, r1, lsl r2
    371c:	e1a0c210 	lsl	r12, r0, r2
    3720:	e2622020 	rsb	r2, r2, #32
    3724:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    3728:	e0a30230 	adc	r0, r3, r0, lsr r2
    372c:	03c00001 	biceq	r0, r0, #1
    3730:	e12fff1e 	bx	lr
    3734:	e2822020 	add	r2, r2, #32
    3738:	e1a0c211 	lsl	r12, r1, r2
    373c:	e2622020 	rsb	r2, r2, #32
    3740:	e190008c 	orrs	r0, r0, r12, lsl #1
    3744:	e0a30231 	adc	r0, r3, r1, lsr r2
    3748:	01c00fac 	biceq	r0, r0, r12, lsr #31
    374c:	e12fff1e 	bx	lr

00003750 <__aeabi_fmul>:
    3750:	e3a0c0ff 	mov	r12, #255	; 0xff
    3754:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    3758:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    375c:	1132000c 	teqne	r2, r12
    3760:	1133000c 	teqne	r3, r12
    3764:	0a00003e 	beq	3864 <__aeabi_fmul+0x114>
    3768:	e0822003 	add	r2, r2, r3
    376c:	e020c001 	eor	r12, r0, r1
    3770:	e1b00480 	lsls	r0, r0, #9
    3774:	11b01481 	lslsne	r1, r1, #9
    3778:	0a000010 	beq	37c0 <__aeabi_fmul+0x70>
    377c:	e3a03302 	mov	r3, #134217728	; 0x8000000
    3780:	e18302a0 	orr	r0, r3, r0, lsr #5
    3784:	e18312a1 	orr	r1, r3, r1, lsr #5
    3788:	e0813190 	umull	r3, r1, r0, r1
    378c:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    3790:	e3510502 	cmp	r1, #8388608	; 0x800000
    3794:	31a01081 	lslcc	r1, r1, #1
    3798:	31811fa3 	orrcc	r1, r1, r3, lsr #31
    379c:	31a03083 	lslcc	r3, r3, #1
    37a0:	e1800001 	orr	r0, r0, r1
    37a4:	e2c2207f 	sbc	r2, r2, #127	; 0x7f
    37a8:	e35200fd 	cmp	r2, #253	; 0xfd
    37ac:	8a00000f 	bhi	37f0 <__aeabi_fmul+0xa0>
    37b0:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    37b4:	e0a00b82 	adc	r0, r0, r2, lsl #23
    37b8:	03c00001 	biceq	r0, r0, #1
    37bc:	e12fff1e 	bx	lr
    37c0:	e3300000 	teq	r0, #0
    37c4:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    37c8:	01a01481 	lsleq	r1, r1, #9
    37cc:	e18c04a0 	orr	r0, r12, r0, lsr #9
    37d0:	e18004a1 	orr	r0, r0, r1, lsr #9
    37d4:	e252207f 	subs	r2, r2, #127	; 0x7f
    37d8:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    37dc:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    37e0:	c12fff1e 	bxgt	lr
    37e4:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    37e8:	e3a03000 	mov	r3, #0
    37ec:	e2522001 	subs	r2, r2, #1
    37f0:	ca000035 	bgt	38cc <__aeabi_fmul+0x17c>
    37f4:	e3720019 	cmn	r2, #25
    37f8:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
    37fc:	d12fff1e 	bxle	lr
    3800:	e2622000 	rsb	r2, r2, #0
    3804:	e1b01080 	lsls	r1, r0, #1
    3808:	e1a01231 	lsr	r1, r1, r2
    380c:	e2622020 	rsb	r2, r2, #32
    3810:	e1a0c210 	lsl	r12, r0, r2
    3814:	e1b00061 	rrxs	r0, r1
    3818:	e2a00000 	adc	r0, r0, #0
    381c:	e193308c 	orrs	r3, r3, r12, lsl #1
    3820:	01c00fac 	biceq	r0, r0, r12, lsr #31
    3824:	e12fff1e 	bx	lr
    3828:	e3320000 	teq	r2, #0
    382c:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    3830:	01a00080 	lsleq	r0, r0, #1
    3834:	03100502 	tsteq	r0, #8388608	; 0x800000
    3838:	02422001 	subeq	r2, r2, #1
    383c:	0afffffb 	beq	3830 <__aeabi_fmul+0xe0>
    3840:	e180000c 	orr	r0, r0, r12
    3844:	e3330000 	teq	r3, #0
    3848:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    384c:	01a01081 	lsleq	r1, r1, #1
    3850:	03110502 	tsteq	r1, #8388608	; 0x800000
    3854:	02433001 	subeq	r3, r3, #1
    3858:	0afffffb 	beq	384c <__aeabi_fmul+0xfc>
    385c:	e181100c 	orr	r1, r1, r12
    3860:	eaffffc0 	b	3768 <__aeabi_fmul+0x18>
    3864:	e00c3ba1 	and	r3, r12, r1, lsr #23
    3868:	e132000c 	teq	r2, r12
    386c:	1133000c 	teqne	r3, r12
    3870:	0a000005 	beq	388c <__aeabi_fmul+0x13c>
    3874:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    3878:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    387c:	1affffe9 	bne	3828 <__aeabi_fmul+0xd8>
    3880:	e0200001 	eor	r0, r0, r1
    3884:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    3888:	e12fff1e 	bx	lr
    388c:	e3300000 	teq	r0, #0
    3890:	13300102 	teqne	r0, #-2147483648	; 0x80000000
    3894:	01a00001 	moveq	r0, r1
    3898:	13310000 	teqne	r1, #0
    389c:	13310102 	teqne	r1, #-2147483648	; 0x80000000
    38a0:	0a00000d 	beq	38dc <__aeabi_fmul+0x18c>
    38a4:	e132000c 	teq	r2, r12
    38a8:	1a000001 	bne	38b4 <__aeabi_fmul+0x164>
    38ac:	e1b02480 	lsls	r2, r0, #9
    38b0:	1a000009 	bne	38dc <__aeabi_fmul+0x18c>
    38b4:	e133000c 	teq	r3, r12
    38b8:	1a000002 	bne	38c8 <__aeabi_fmul+0x178>
    38bc:	e1b03481 	lsls	r3, r1, #9
    38c0:	11a00001 	movne	r0, r1
    38c4:	1a000004 	bne	38dc <__aeabi_fmul+0x18c>
    38c8:	e0200001 	eor	r0, r0, r1
    38cc:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    38d0:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    38d4:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    38d8:	e12fff1e 	bx	lr
    38dc:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    38e0:	e3800503 	orr	r0, r0, #12582912	; 0xc00000
    38e4:	e12fff1e 	bx	lr

000038e8 <__aeabi_fdiv>:
    38e8:	e3a0c0ff 	mov	r12, #255	; 0xff
    38ec:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    38f0:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    38f4:	1132000c 	teqne	r2, r12
    38f8:	1133000c 	teqne	r3, r12
    38fc:	0a00003a 	beq	39ec <__aeabi_fdiv+0x104>
    3900:	e0422003 	sub	r2, r2, r3
    3904:	e020c001 	eor	r12, r0, r1
    3908:	e1b01481 	lsls	r1, r1, #9
    390c:	e1a00480 	lsl	r0, r0, #9
    3910:	0a00001c 	beq	3988 <__aeabi_fdiv+0xa0>
    3914:	e3a03201 	mov	r3, #268435456	; 0x10000000
    3918:	e1831221 	orr	r1, r3, r1, lsr #4
    391c:	e1833220 	orr	r3, r3, r0, lsr #4
    3920:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    3924:	e1530001 	cmp	r3, r1
    3928:	31a03083 	lslcc	r3, r3, #1
    392c:	e2a2207d 	adc	r2, r2, #125	; 0x7d
    3930:	e3a0c502 	mov	r12, #8388608	; 0x800000
    3934:	e1530001 	cmp	r3, r1
    3938:	20433001 	subcs	r3, r3, r1
    393c:	2180000c 	orrcs	r0, r0, r12
    3940:	e15300a1 	cmp	r3, r1, lsr #1
    3944:	204330a1 	subcs	r3, r3, r1, lsr #1
    3948:	218000ac 	orrcs	r0, r0, r12, lsr #1
    394c:	e1530121 	cmp	r3, r1, lsr #2
    3950:	20433121 	subcs	r3, r3, r1, lsr #2
    3954:	2180012c 	orrcs	r0, r0, r12, lsr #2
    3958:	e15301a1 	cmp	r3, r1, lsr #3
    395c:	204331a1 	subcs	r3, r3, r1, lsr #3
    3960:	218001ac 	orrcs	r0, r0, r12, lsr #3
    3964:	e1b03203 	lsls	r3, r3, #4
    3968:	11b0c22c 	lsrsne	r12, r12, #4
    396c:	1afffff0 	bne	3934 <__aeabi_fdiv+0x4c>
    3970:	e35200fd 	cmp	r2, #253	; 0xfd
    3974:	8affff9d 	bhi	37f0 <__aeabi_fmul+0xa0>
    3978:	e1530001 	cmp	r3, r1
    397c:	e0a00b82 	adc	r0, r0, r2, lsl #23
    3980:	03c00001 	biceq	r0, r0, #1
    3984:	e12fff1e 	bx	lr
    3988:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    398c:	e18c04a0 	orr	r0, r12, r0, lsr #9
    3990:	e292207f 	adds	r2, r2, #127	; 0x7f
    3994:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    3998:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    399c:	c12fff1e 	bxgt	lr
    39a0:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    39a4:	e3a03000 	mov	r3, #0
    39a8:	e2522001 	subs	r2, r2, #1
    39ac:	eaffff8f 	b	37f0 <__aeabi_fmul+0xa0>
    39b0:	e3320000 	teq	r2, #0
    39b4:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    39b8:	01a00080 	lsleq	r0, r0, #1
    39bc:	03100502 	tsteq	r0, #8388608	; 0x800000
    39c0:	02422001 	subeq	r2, r2, #1
    39c4:	0afffffb 	beq	39b8 <__aeabi_fdiv+0xd0>
    39c8:	e180000c 	orr	r0, r0, r12
    39cc:	e3330000 	teq	r3, #0
    39d0:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    39d4:	01a01081 	lsleq	r1, r1, #1
    39d8:	03110502 	tsteq	r1, #8388608	; 0x800000
    39dc:	02433001 	subeq	r3, r3, #1
    39e0:	0afffffb 	beq	39d4 <__aeabi_fdiv+0xec>
    39e4:	e181100c 	orr	r1, r1, r12
    39e8:	eaffffc4 	b	3900 <__aeabi_fdiv+0x18>
    39ec:	e00c3ba1 	and	r3, r12, r1, lsr #23
    39f0:	e132000c 	teq	r2, r12
    39f4:	1a000005 	bne	3a10 <__aeabi_fdiv+0x128>
    39f8:	e1b02480 	lsls	r2, r0, #9
    39fc:	1affffb6 	bne	38dc <__aeabi_fmul+0x18c>
    3a00:	e133000c 	teq	r3, r12
    3a04:	1affffaf 	bne	38c8 <__aeabi_fmul+0x178>
    3a08:	e1a00001 	mov	r0, r1
    3a0c:	eaffffb2 	b	38dc <__aeabi_fmul+0x18c>
    3a10:	e133000c 	teq	r3, r12
    3a14:	1a000003 	bne	3a28 <__aeabi_fdiv+0x140>
    3a18:	e1b03481 	lsls	r3, r1, #9
    3a1c:	0affff97 	beq	3880 <__aeabi_fmul+0x130>
    3a20:	e1a00001 	mov	r0, r1
    3a24:	eaffffac 	b	38dc <__aeabi_fmul+0x18c>
    3a28:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    3a2c:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    3a30:	1affffde 	bne	39b0 <__aeabi_fdiv+0xc8>
    3a34:	e3d02102 	bics	r2, r0, #-2147483648	; 0x80000000
    3a38:	1affffa2 	bne	38c8 <__aeabi_fmul+0x178>
    3a3c:	e3d13102 	bics	r3, r1, #-2147483648	; 0x80000000
    3a40:	1affff8e 	bne	3880 <__aeabi_fmul+0x130>
    3a44:	eaffffa4 	b	38dc <__aeabi_fmul+0x18c>

00003a48 <__gesf2>:
    3a48:	e3e0c000 	mvn	r12, #0
    3a4c:	ea000002 	b	3a5c <__cmpsf2+0x4>

00003a50 <__lesf2>:
    3a50:	e3a0c001 	mov	r12, #1
    3a54:	ea000000 	b	3a5c <__cmpsf2+0x4>

00003a58 <__cmpsf2>:
    3a58:	e3a0c001 	mov	r12, #1
    3a5c:	e52dc004 	push	{r12}		; (str r12, [sp, #-4]!)
    3a60:	e1a02080 	lsl	r2, r0, #1
    3a64:	e1a03081 	lsl	r3, r1, #1
    3a68:	e1f0cc42 	mvns	r12, r2, asr #24
    3a6c:	11f0cc43 	mvnsne	r12, r3, asr #24
    3a70:	0a000007 	beq	3a94 <__cmpsf2+0x3c>
    3a74:	e28dd004 	add	sp, sp, #4
    3a78:	e192c0a3 	orrs	r12, r2, r3, lsr #1
    3a7c:	11300001 	teqne	r0, r1
    3a80:	50520003 	subspl	r0, r2, r3
    3a84:	81a00fc1 	asrhi	r0, r1, #31
    3a88:	31e00fc1 	mvncc	r0, r1, asr #31
    3a8c:	13800001 	orrne	r0, r0, #1
    3a90:	e12fff1e 	bx	lr
    3a94:	e1f0cc42 	mvns	r12, r2, asr #24
    3a98:	1a000001 	bne	3aa4 <__cmpsf2+0x4c>
    3a9c:	e1b0c480 	lsls	r12, r0, #9
    3aa0:	1a000003 	bne	3ab4 <__cmpsf2+0x5c>
    3aa4:	e1f0cc43 	mvns	r12, r3, asr #24
    3aa8:	1afffff1 	bne	3a74 <__cmpsf2+0x1c>
    3aac:	e1b0c481 	lsls	r12, r1, #9
    3ab0:	0affffef 	beq	3a74 <__cmpsf2+0x1c>
    3ab4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    3ab8:	e12fff1e 	bx	lr

00003abc <__aeabi_cfrcmple>:
    3abc:	e1a0c000 	mov	r12, r0
    3ac0:	e1a00001 	mov	r0, r1
    3ac4:	e1a0100c 	mov	r1, r12
    3ac8:	eaffffff 	b	3acc <__aeabi_cfcmpeq>

00003acc <__aeabi_cfcmpeq>:
    3acc:	e92d400f 	push	{r0, r1, r2, r3, lr}
    3ad0:	ebffffe0 	bl	3a58 <__cmpsf2>
    3ad4:	e3500000 	cmp	r0, #0
    3ad8:	43700000 	cmnmi	r0, #0
    3adc:	e8bd400f 	pop	{r0, r1, r2, r3, lr}
    3ae0:	e12fff1e 	bx	lr

00003ae4 <__aeabi_fcmpeq>:
    3ae4:	e52de008 	str	lr, [sp, #-8]!
    3ae8:	ebfffff7 	bl	3acc <__aeabi_cfcmpeq>
    3aec:	03a00001 	moveq	r0, #1
    3af0:	13a00000 	movne	r0, #0
    3af4:	e49de008 	ldr	lr, [sp], #8
    3af8:	e12fff1e 	bx	lr

00003afc <__aeabi_fcmplt>:
    3afc:	e52de008 	str	lr, [sp, #-8]!
    3b00:	ebfffff1 	bl	3acc <__aeabi_cfcmpeq>
    3b04:	33a00001 	movcc	r0, #1
    3b08:	23a00000 	movcs	r0, #0
    3b0c:	e49de008 	ldr	lr, [sp], #8
    3b10:	e12fff1e 	bx	lr

00003b14 <__aeabi_fcmple>:
    3b14:	e52de008 	str	lr, [sp, #-8]!
    3b18:	ebffffeb 	bl	3acc <__aeabi_cfcmpeq>
    3b1c:	93a00001 	movls	r0, #1
    3b20:	83a00000 	movhi	r0, #0
    3b24:	e49de008 	ldr	lr, [sp], #8
    3b28:	e12fff1e 	bx	lr

00003b2c <__aeabi_fcmpge>:
    3b2c:	e52de008 	str	lr, [sp, #-8]!
    3b30:	ebffffe1 	bl	3abc <__aeabi_cfrcmple>
    3b34:	93a00001 	movls	r0, #1
    3b38:	83a00000 	movhi	r0, #0
    3b3c:	e49de008 	ldr	lr, [sp], #8
    3b40:	e12fff1e 	bx	lr

00003b44 <__aeabi_fcmpgt>:
    3b44:	e52de008 	str	lr, [sp, #-8]!
    3b48:	ebffffdb 	bl	3abc <__aeabi_cfrcmple>
    3b4c:	33a00001 	movcc	r0, #1
    3b50:	23a00000 	movcs	r0, #0
    3b54:	e49de008 	ldr	lr, [sp], #8
    3b58:	e12fff1e 	bx	lr

00003b5c <__aeabi_f2iz>:
    3b5c:	e1a02080 	lsl	r2, r0, #1
    3b60:	e352047f 	cmp	r2, #2130706432	; 0x7f000000
    3b64:	3a000008 	bcc	3b8c <__aeabi_f2iz+0x30>
    3b68:	e3a0309e 	mov	r3, #158	; 0x9e
    3b6c:	e0532c22 	subs	r2, r3, r2, lsr #24
    3b70:	9a000007 	bls	3b94 <__aeabi_f2iz+0x38>
    3b74:	e1a03400 	lsl	r3, r0, #8
    3b78:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    3b7c:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    3b80:	e1a00233 	lsr	r0, r3, r2
    3b84:	12600000 	rsbne	r0, r0, #0
    3b88:	e12fff1e 	bx	lr
    3b8c:	e3a00000 	mov	r0, #0
    3b90:	e12fff1e 	bx	lr
    3b94:	e3720061 	cmn	r2, #97	; 0x61
    3b98:	1a000001 	bne	3ba4 <__aeabi_f2iz+0x48>
    3b9c:	e1b02480 	lsls	r2, r0, #9
    3ba0:	1a000002 	bne	3bb0 <__aeabi_f2iz+0x54>
    3ba4:	e2100102 	ands	r0, r0, #-2147483648	; 0x80000000
    3ba8:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    3bac:	e12fff1e 	bx	lr
    3bb0:	e3a00000 	mov	r0, #0
    3bb4:	e12fff1e 	bx	lr

00003bb8 <atexit>:
    3bb8:	e1a01000 	mov	r1, r0
    3bbc:	e3a00000 	mov	r0, #0
    3bc0:	e92d4008 	push	{r3, lr}
    3bc4:	e1a02000 	mov	r2, r0
    3bc8:	e1a03000 	mov	r3, r0
    3bcc:	eb00005b 	bl	3d40 <__register_exitproc>
    3bd0:	e8bd4008 	pop	{r3, lr}
    3bd4:	e12fff1e 	bx	lr

00003bd8 <exit>:
    3bd8:	e92d4008 	push	{r3, lr}
    3bdc:	e3a01000 	mov	r1, #0
    3be0:	e1a04000 	mov	r4, r0
    3be4:	eb000092 	bl	3e34 <__call_exitprocs>
    3be8:	e59f3018 	ldr	r3, [pc, #24]	; 3c08 <exit+0x30>
    3bec:	e5930000 	ldr	r0, [r3]
    3bf0:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    3bf4:	e3530000 	cmp	r3, #0
    3bf8:	11a0e00f 	movne	lr, pc
    3bfc:	112fff13 	bxne	r3
    3c00:	e1a00004 	mov	r0, r4
    3c04:	eb000116 	bl	4064 <_exit>
    3c08:	00004260 	.word	0x00004260

00003c0c <memset>:
    3c0c:	e3520003 	cmp	r2, #3
    3c10:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    3c14:	e20110ff 	and	r1, r1, #255	; 0xff
    3c18:	8a000008 	bhi	3c40 <memset+0x34>
    3c1c:	e3520000 	cmp	r2, #0
    3c20:	0a000004 	beq	3c38 <memset+0x2c>
    3c24:	e1a03000 	mov	r3, r0
    3c28:	e0822000 	add	r2, r2, r0
    3c2c:	e4c31001 	strb	r1, [r3], #1
    3c30:	e1530002 	cmp	r3, r2
    3c34:	1afffffc 	bne	3c2c <memset+0x20>
    3c38:	e8bd0010 	ldmfd	sp!, {r4}
    3c3c:	e12fff1e 	bx	lr
    3c40:	e3100003 	tst	r0, #3
    3c44:	e0802002 	add	r2, r0, r2
    3c48:	0a000007 	beq	3c6c <memset+0x60>
    3c4c:	e280c001 	add	r12, r0, #1
    3c50:	e20c3003 	and	r3, r12, #3
    3c54:	e3530000 	cmp	r3, #0
    3c58:	e54c1001 	strb	r1, [r12, #-1]
    3c5c:	e1a0300c 	mov	r3, r12
    3c60:	e28cc001 	add	r12, r12, #1
    3c64:	1afffff9 	bne	3c50 <memset+0x44>
    3c68:	ea000000 	b	3c70 <memset+0x64>
    3c6c:	e1a03000 	mov	r3, r0
    3c70:	e0634002 	rsb	r4, r3, r2
    3c74:	e081c401 	add	r12, r1, r1, lsl #8
    3c78:	e354003f 	cmp	r4, #63	; 0x3f
    3c7c:	e08cc80c 	add	r12, r12, r12, lsl #16
    3c80:	da00001a 	ble	3cf0 <memset+0xe4>
    3c84:	e583c000 	str	r12, [r3]
    3c88:	e583c004 	str	r12, [r3, #4]
    3c8c:	e583c008 	str	r12, [r3, #8]
    3c90:	e583c00c 	str	r12, [r3, #12]
    3c94:	e583c010 	str	r12, [r3, #16]
    3c98:	e583c014 	str	r12, [r3, #20]
    3c9c:	e583c018 	str	r12, [r3, #24]
    3ca0:	e583c01c 	str	r12, [r3, #28]
    3ca4:	e583c020 	str	r12, [r3, #32]
    3ca8:	e583c024 	str	r12, [r3, #36]	; 0x24
    3cac:	e583c028 	str	r12, [r3, #40]	; 0x28
    3cb0:	e583c02c 	str	r12, [r3, #44]	; 0x2c
    3cb4:	e583c030 	str	r12, [r3, #48]	; 0x30
    3cb8:	e583c034 	str	r12, [r3, #52]	; 0x34
    3cbc:	e583c038 	str	r12, [r3, #56]	; 0x38
    3cc0:	e583c03c 	str	r12, [r3, #60]	; 0x3c
    3cc4:	e2833040 	add	r3, r3, #64	; 0x40
    3cc8:	e0634002 	rsb	r4, r3, r2
    3ccc:	e354003f 	cmp	r4, #63	; 0x3f
    3cd0:	caffffeb 	bgt	3c84 <memset+0x78>
    3cd4:	ea000005 	b	3cf0 <memset+0xe4>
    3cd8:	e583c000 	str	r12, [r3]
    3cdc:	e583c004 	str	r12, [r3, #4]
    3ce0:	e583c008 	str	r12, [r3, #8]
    3ce4:	e583c00c 	str	r12, [r3, #12]
    3ce8:	e2833010 	add	r3, r3, #16
    3cec:	e0634002 	rsb	r4, r3, r2
    3cf0:	e354000f 	cmp	r4, #15
    3cf4:	cafffff7 	bgt	3cd8 <memset+0xcc>
    3cf8:	e3540003 	cmp	r4, #3
    3cfc:	da000006 	ble	3d1c <memset+0x110>
    3d00:	e2834004 	add	r4, r3, #4
    3d04:	e0643002 	rsb	r3, r4, r2
    3d08:	e3530003 	cmp	r3, #3
    3d0c:	e504c004 	str	r12, [r4, #-4]
    3d10:	e1a03004 	mov	r3, r4
    3d14:	e2844004 	add	r4, r4, #4
    3d18:	cafffff9 	bgt	3d04 <memset+0xf8>
    3d1c:	e1520003 	cmp	r2, r3
    3d20:	9affffc4 	bls	3c38 <memset+0x2c>
    3d24:	e2833001 	add	r3, r3, #1
    3d28:	e2822001 	add	r2, r2, #1
    3d2c:	e5431001 	strb	r1, [r3, #-1]
    3d30:	e2833001 	add	r3, r3, #1
    3d34:	e1530002 	cmp	r3, r2
    3d38:	1afffffb 	bne	3d2c <memset+0x120>
    3d3c:	eaffffbd 	b	3c38 <memset+0x2c>

00003d40 <__register_exitproc>:
    3d40:	e59fc0e4 	ldr	r12, [pc, #228]	; 3e2c <__register_exitproc+0xec>
    3d44:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    3d48:	e59c4000 	ldr	r4, [r12]
    3d4c:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    3d50:	e35c0000 	cmp	r12, #0
    3d54:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    3d58:	e59c5004 	ldr	r5, [r12, #4]
    3d5c:	0584c148 	streq	r12, [r4, #328]	; 0x148
    3d60:	e355001f 	cmp	r5, #31
    3d64:	e24dd010 	sub	sp, sp, #16
    3d68:	e1a06000 	mov	r6, r0
    3d6c:	da000015 	ble	3dc8 <__register_exitproc+0x88>
    3d70:	e59f00b8 	ldr	r0, [pc, #184]	; 3e30 <__register_exitproc+0xf0>
    3d74:	e3500000 	cmp	r0, #0
    3d78:	1a000001 	bne	3d84 <__register_exitproc+0x44>
    3d7c:	e3e00000 	mvn	r0, #0
    3d80:	ea000018 	b	3de8 <__register_exitproc+0xa8>
    3d84:	e3a00e19 	mov	r0, #400	; 0x190
    3d88:	e58d100c 	str	r1, [sp, #12]
    3d8c:	e58d2008 	str	r2, [sp, #8]
    3d90:	e58d3004 	str	r3, [sp, #4]
    3d94:	e320f000 	nop	{0}
    3d98:	e250c000 	subs	r12, r0, #0
    3d9c:	e59d100c 	ldr	r1, [sp, #12]
    3da0:	e59d2008 	ldr	r2, [sp, #8]
    3da4:	e59d3004 	ldr	r3, [sp, #4]
    3da8:	0afffff3 	beq	3d7c <__register_exitproc+0x3c>
    3dac:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    3db0:	e3a00000 	mov	r0, #0
    3db4:	e58c0004 	str	r0, [r12, #4]
    3db8:	e58c5000 	str	r5, [r12]
    3dbc:	e584c148 	str	r12, [r4, #328]	; 0x148
    3dc0:	e58c0188 	str	r0, [r12, #392]	; 0x188
    3dc4:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    3dc8:	e3560000 	cmp	r6, #0
    3dcc:	e59c4004 	ldr	r4, [r12, #4]
    3dd0:	1a000007 	bne	3df4 <__register_exitproc+0xb4>
    3dd4:	e2843002 	add	r3, r4, #2
    3dd8:	e2844001 	add	r4, r4, #1
    3ddc:	e78c1103 	str	r1, [r12, r3, lsl #2]
    3de0:	e58c4004 	str	r4, [r12, #4]
    3de4:	e3a00000 	mov	r0, #0
    3de8:	e28dd010 	add	sp, sp, #16
    3dec:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    3df0:	e12fff1e 	bx	lr
    3df4:	e3a00001 	mov	r0, #1
    3df8:	e1a00410 	lsl	r0, r0, r4
    3dfc:	e08c8104 	add	r8, r12, r4, lsl #2
    3e00:	e3560002 	cmp	r6, #2
    3e04:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    3e08:	e5883108 	str	r3, [r8, #264]	; 0x108
    3e0c:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    3e10:	e1877000 	orr	r7, r7, r0
    3e14:	01830000 	orreq	r0, r3, r0
    3e18:	e1a05008 	mov	r5, r8
    3e1c:	e5882088 	str	r2, [r8, #136]	; 0x88
    3e20:	e58c7188 	str	r7, [r12, #392]	; 0x188
    3e24:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    3e28:	eaffffe9 	b	3dd4 <__register_exitproc+0x94>
    3e2c:	00004260 	.word	0x00004260
    3e30:	00000000 	.word	0x00000000

00003e34 <__call_exitprocs>:
    3e34:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    3e38:	e59f3168 	ldr	r3, [pc, #360]	; 3fa8 <__call_exitprocs+0x174>
    3e3c:	e5933000 	ldr	r3, [r3]
    3e40:	e24dd014 	sub	sp, sp, #20
    3e44:	e58d3004 	str	r3, [sp, #4]
    3e48:	e2833f52 	add	r3, r3, #328	; 0x148
    3e4c:	e58d0008 	str	r0, [sp, #8]
    3e50:	e58d300c 	str	r3, [sp, #12]
    3e54:	e1a07001 	mov	r7, r1
    3e58:	e3a08001 	mov	r8, #1
    3e5c:	e59d3004 	ldr	r3, [sp, #4]
    3e60:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    3e64:	e3560000 	cmp	r6, #0
    3e68:	e59db00c 	ldr	r11, [sp, #12]
    3e6c:	0a000033 	beq	3f40 <__call_exitprocs+0x10c>
    3e70:	e5965004 	ldr	r5, [r6, #4]
    3e74:	e2554001 	subs	r4, r5, #1
    3e78:	5286a088 	addpl	r10, r6, #136	; 0x88
    3e7c:	5285501f 	addpl	r5, r5, #31
    3e80:	508a5105 	addpl	r5, r10, r5, lsl #2
    3e84:	5a000007 	bpl	3ea8 <__call_exitprocs+0x74>
    3e88:	ea000029 	b	3f34 <__call_exitprocs+0x100>
    3e8c:	e5953000 	ldr	r3, [r5]
    3e90:	e1530007 	cmp	r3, r7
    3e94:	0a000005 	beq	3eb0 <__call_exitprocs+0x7c>
    3e98:	e2444001 	sub	r4, r4, #1
    3e9c:	e3740001 	cmn	r4, #1
    3ea0:	e2455004 	sub	r5, r5, #4
    3ea4:	0a000022 	beq	3f34 <__call_exitprocs+0x100>
    3ea8:	e3570000 	cmp	r7, #0
    3eac:	1afffff6 	bne	3e8c <__call_exitprocs+0x58>
    3eb0:	e5963004 	ldr	r3, [r6, #4]
    3eb4:	e06a2005 	rsb	r2, r10, r5
    3eb8:	e2433001 	sub	r3, r3, #1
    3ebc:	e0862002 	add	r2, r6, r2
    3ec0:	e1530004 	cmp	r3, r4
    3ec4:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    3ec8:	13a01000 	movne	r1, #0
    3ecc:	05864004 	streq	r4, [r6, #4]
    3ed0:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    3ed4:	e3530000 	cmp	r3, #0
    3ed8:	0affffee 	beq	3e98 <__call_exitprocs+0x64>
    3edc:	e1a02418 	lsl	r2, r8, r4
    3ee0:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    3ee4:	e1120001 	tst	r2, r1
    3ee8:	e5969004 	ldr	r9, [r6, #4]
    3eec:	0a000016 	beq	3f4c <__call_exitprocs+0x118>
    3ef0:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    3ef4:	e1120001 	tst	r2, r1
    3ef8:	1a000016 	bne	3f58 <__call_exitprocs+0x124>
    3efc:	e59d0008 	ldr	r0, [sp, #8]
    3f00:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    3f04:	e1a0e00f 	mov	lr, pc
    3f08:	e12fff13 	bx	r3
    3f0c:	e5963004 	ldr	r3, [r6, #4]
    3f10:	e1530009 	cmp	r3, r9
    3f14:	1affffd0 	bne	3e5c <__call_exitprocs+0x28>
    3f18:	e59b3000 	ldr	r3, [r11]
    3f1c:	e1530006 	cmp	r3, r6
    3f20:	1affffcd 	bne	3e5c <__call_exitprocs+0x28>
    3f24:	e2444001 	sub	r4, r4, #1
    3f28:	e3740001 	cmn	r4, #1
    3f2c:	e2455004 	sub	r5, r5, #4
    3f30:	1affffdc 	bne	3ea8 <__call_exitprocs+0x74>
    3f34:	e59f1070 	ldr	r1, [pc, #112]	; 3fac <__call_exitprocs+0x178>
    3f38:	e3510000 	cmp	r1, #0
    3f3c:	1a000009 	bne	3f68 <__call_exitprocs+0x134>
    3f40:	e28dd014 	add	sp, sp, #20
    3f44:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    3f48:	e12fff1e 	bx	lr
    3f4c:	e1a0e00f 	mov	lr, pc
    3f50:	e12fff13 	bx	r3
    3f54:	eaffffec 	b	3f0c <__call_exitprocs+0xd8>
    3f58:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    3f5c:	e1a0e00f 	mov	lr, pc
    3f60:	e12fff13 	bx	r3
    3f64:	eaffffe8 	b	3f0c <__call_exitprocs+0xd8>
    3f68:	e5963004 	ldr	r3, [r6, #4]
    3f6c:	e3530000 	cmp	r3, #0
    3f70:	e5963000 	ldr	r3, [r6]
    3f74:	1a000008 	bne	3f9c <__call_exitprocs+0x168>
    3f78:	e3530000 	cmp	r3, #0
    3f7c:	0a000006 	beq	3f9c <__call_exitprocs+0x168>
    3f80:	e1a00006 	mov	r0, r6
    3f84:	e58b3000 	str	r3, [r11]
    3f88:	e320f000 	nop	{0}
    3f8c:	e59b6000 	ldr	r6, [r11]
    3f90:	e3560000 	cmp	r6, #0
    3f94:	1affffb5 	bne	3e70 <__call_exitprocs+0x3c>
    3f98:	eaffffe8 	b	3f40 <__call_exitprocs+0x10c>
    3f9c:	e1a0b006 	mov	r11, r6
    3fa0:	e1a06003 	mov	r6, r3
    3fa4:	eafffff9 	b	3f90 <__call_exitprocs+0x15c>
    3fa8:	00004260 	.word	0x00004260
    3fac:	00000000 	.word	0x00000000

00003fb0 <register_fini>:
    3fb0:	e92d4008 	push	{r3, lr}
    3fb4:	e59f3010 	ldr	r3, [pc, #16]	; 3fcc <register_fini+0x1c>
    3fb8:	e3530000 	cmp	r3, #0
    3fbc:	159f000c 	ldrne	r0, [pc, #12]	; 3fd0 <register_fini+0x20>
    3fc0:	1bfffefc 	blne	3bb8 <atexit>
    3fc4:	e8bd4008 	pop	{r3, lr}
    3fc8:	e12fff1e 	bx	lr
    3fcc:	00004288 	.word	0x00004288
    3fd0:	00003fd4 	.word	0x00003fd4

00003fd4 <__libc_fini_array>:
    3fd4:	e92d4038 	push	{r3, r4, r5, lr}
    3fd8:	e59f5030 	ldr	r5, [pc, #48]	; 4010 <__libc_fini_array+0x3c>
    3fdc:	e59f4030 	ldr	r4, [pc, #48]	; 4014 <__libc_fini_array+0x40>
    3fe0:	e0654004 	rsb	r4, r5, r4
    3fe4:	e1b04144 	asrs	r4, r4, #2
    3fe8:	10855104 	addne	r5, r5, r4, lsl #2
    3fec:	0a000004 	beq	4004 <__libc_fini_array+0x30>
    3ff0:	e5353004 	ldr	r3, [r5, #-4]!
    3ff4:	e1a0e00f 	mov	lr, pc
    3ff8:	e12fff13 	bx	r3
    3ffc:	e2544001 	subs	r4, r4, #1
    4000:	1afffffa 	bne	3ff0 <__libc_fini_array+0x1c>
    4004:	eb00009f 	bl	4288 <__libc_fini>
    4008:	e8bd4038 	pop	{r3, r4, r5, lr}
    400c:	e12fff1e 	bx	lr
    4010:	000042a0 	.word	0x000042a0
    4014:	000042a4 	.word	0x000042a4

00004018 <__cs3_premain>:
    4018:	e92d4008 	push	{r3, lr}
    401c:	eb000017 	bl	4080 <__libc_init_array>
    4020:	e59f3030 	ldr	r3, [pc, #48]	; 4058 <__cs3_premain+0x40>
    4024:	e3530000 	cmp	r3, #0
    4028:	15930000 	ldrne	r0, [r3]
    402c:	01a00003 	moveq	r0, r3
    4030:	e59f3024 	ldr	r3, [pc, #36]	; 405c <__cs3_premain+0x44>
    4034:	e3530000 	cmp	r3, #0
    4038:	15931000 	ldrne	r1, [r3]
    403c:	01a01003 	moveq	r1, r3
    4040:	e3a02000 	mov	r2, #0
    4044:	ebfff6ea 	bl	1bf4 <main>
    4048:	e59f3010 	ldr	r3, [pc, #16]	; 4060 <__cs3_premain+0x48>
    404c:	e3530000 	cmp	r3, #0
    4050:	1bfffee0 	blne	3bd8 <exit>
    4054:	eafffffe 	b	4054 <__cs3_premain+0x3c>
	...
    4060:	00003bd8 	.word	0x00003bd8

00004064 <_exit>:
    4064:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    4068:	e3a00018 	mov	r0, #24
    406c:	e59f1004 	ldr	r1, [pc, #4]	; 4078 <_exit+0x14>
    4070:	ef123456 	svc	0x00123456
    4074:	eafffffe 	b	4074 <_exit+0x10>
    4078:	00020026 	.word	0x00020026

0000407c <__cs3_isr_interrupt>:
    407c:	eafffffe 	b	407c <__cs3_isr_interrupt>

00004080 <__libc_init_array>:
    4080:	e92d4070 	push	{r4, r5, r6, lr}
    4084:	e59f506c 	ldr	r5, [pc, #108]	; 40f8 <__libc_init_array+0x78>
    4088:	e59f606c 	ldr	r6, [pc, #108]	; 40fc <__libc_init_array+0x7c>
    408c:	e0656006 	rsb	r6, r5, r6
    4090:	e1b06146 	asrs	r6, r6, #2
    4094:	12455004 	subne	r5, r5, #4
    4098:	13a04000 	movne	r4, #0
    409c:	0a000005 	beq	40b8 <__libc_init_array+0x38>
    40a0:	e5b53004 	ldr	r3, [r5, #4]!
    40a4:	e2844001 	add	r4, r4, #1
    40a8:	e1a0e00f 	mov	lr, pc
    40ac:	e12fff13 	bx	r3
    40b0:	e1560004 	cmp	r6, r4
    40b4:	1afffff9 	bne	40a0 <__libc_init_array+0x20>
    40b8:	e59f5040 	ldr	r5, [pc, #64]	; 4100 <__libc_init_array+0x80>
    40bc:	e59f6040 	ldr	r6, [pc, #64]	; 4104 <__libc_init_array+0x84>
    40c0:	e0656006 	rsb	r6, r5, r6
    40c4:	eb000067 	bl	4268 <_init>
    40c8:	e1b06146 	asrs	r6, r6, #2
    40cc:	12455004 	subne	r5, r5, #4
    40d0:	13a04000 	movne	r4, #0
    40d4:	0a000005 	beq	40f0 <__libc_init_array+0x70>
    40d8:	e5b53004 	ldr	r3, [r5, #4]!
    40dc:	e2844001 	add	r4, r4, #1
    40e0:	e1a0e00f 	mov	lr, pc
    40e4:	e12fff13 	bx	r3
    40e8:	e1560004 	cmp	r6, r4
    40ec:	1afffff9 	bne	40d8 <__libc_init_array+0x58>
    40f0:	e8bd4070 	pop	{r4, r5, r6, lr}
    40f4:	e12fff1e 	bx	lr
    40f8:	00004280 	.word	0x00004280
    40fc:	00004280 	.word	0x00004280
    4100:	00004280 	.word	0x00004280
    4104:	00004288 	.word	0x00004288

Disassembly of section .rodata:

00004110 <_global_impure_ptr-0x150>:
    4110:	33323130 	.word	0x33323130
    4114:	37363534 	.word	0x37363534
    4118:	42413938 	.word	0x42413938
    411c:	46454443 	.word	0x46454443
    4120:	204d5052 	.word	0x204d5052
    4124:	75706e49 	.word	0x75706e49
    4128:	00003a74 	.word	0x00003a74
	...
    4148:	20746553 	.word	0x20746553
    414c:	3a4d5052 	.word	0x3a4d5052
	...
    4170:	75746341 	.word	0x75746341
    4174:	52206c61 	.word	0x52206c61
    4178:	003a4d50 	.word	0x003a4d50
	...
    4198:	72727543 	.word	0x72727543
    419c:	3a746e65 	.word	0x3a746e65
	...
    41c0:	20202020 	.word	0x20202020
    41c4:	00202020 	.word	0x00202020
	...
    41e8:	4d505220 	.word	0x4d505220
	...
    421c:	40690000 	.word	0x40690000
    4220:	00000000 	.word	0x00000000
    4224:	c0690000 	.word	0xc0690000
    4228:	00000000 	.word	0x00000000
    422c:	3fe00000 	.word	0x3fe00000
    4230:	9999999a 	.word	0x9999999a
    4234:	3fb99999 	.word	0x3fb99999
    4238:	00000030 	.word	0x00000030
    423c:	00000031 	.word	0x00000031
    4240:	00000032 	.word	0x00000032
    4244:	00000033 	.word	0x00000033
    4248:	00000034 	.word	0x00000034
    424c:	00000035 	.word	0x00000035
    4250:	00000036 	.word	0x00000036
    4254:	00000037 	.word	0x00000037
    4258:	00000038 	.word	0x00000038
    425c:	00000039 	.word	0x00000039

00004260 <_global_impure_ptr>:
    4260:	000042c8 00000043                       .B..C...

00004268 <_init>:
    4268:	e1a0c00d 	mov	r12, sp
    426c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    4270:	e24cb004 	sub	r11, r12, #4
    4274:	e24bd028 	sub	sp, r11, #40	; 0x28
    4278:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    427c:	e12fff1e 	bx	lr

00004280 <__init_array_start>:
    4280:	00003fb0 	.word	0x00003fb0

00004284 <__frame_dummy_init_array_entry>:
    4284:	00000208                                ....

00004288 <__libc_fini>:
    4288:	e1a0c00d 	mov	r12, sp
    428c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    4290:	e24cb004 	sub	r11, r12, #4
    4294:	e24bd028 	sub	sp, r11, #40	; 0x28
    4298:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    429c:	e12fff1e 	bx	lr

000042a0 <__fini_array_start>:
    42a0:	000001c4 	.word	0x000001c4

000042a4 <__cs3_regions>:
	...
    42b0:	000046f8 	.word	0x000046f8
    42b4:	000000d8 	.word	0x000000d8
