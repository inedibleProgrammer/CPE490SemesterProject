
C:/Users/Andrew Davies/Desktop/TooManyFixV1/main.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
       0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      20:	64 11 00 00 70 11 00 00 7c 11 00 00 88 11 00 00     d...p...|.......
      30:	94 11 00 00 28 1a 00 00 00 11 00 00 a0 11 00 00     ....(...........

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_region_zero_size_ram+0x58>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_region_zero_size_ram+0x54>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_region_zero_size_ram+0x5c>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_region_zero_size_ram+0x24>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_region_zero_size_ram+0x24>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_region_zero_size_ram+0xc>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_region_zero_size_ram+0x44>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_region_zero_size_ram+0x34>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb00063a 	bl	19c4 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00001c10 	.word	0x00001c10

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00002048 	.word	0x00002048

00000124 <__cs3_heap_start_ptr>:
     124:	000020d0 	.word	0x000020d0

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00002050 	.word	0x00002050
     170:	00002053 	.word	0x00002053
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	00002050 	.word	0x00002050
     1bc:	00002050 	.word	0x00002050
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00002050 	.word	0x00002050
     200:	00000000 	.word	0x00000000
     204:	00001ab4 	.word	0x00001ab4

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00001ab4 	.word	0x00001ab4
     250:	00002054 	.word	0x00002054
     254:	00001c10 	.word	0x00001c10
     258:	00000000 	.word	0x00000000

0000025c <main>:
char enterPress;		//used in keypad.c

//**Program Code**//

int main(void)
{
     25c:	e92d4800 	push	{r11, lr}
     260:	e28db004 	add	r11, sp, #4
	//**Initialize Interrupts**//
	disable_A9_interrupts();
     264:	eb0003d0 	bl	11ac <disable_A9_interrupts>
	set_A9_IRQ_stack();
     268:	eb0003d9 	bl	11d4 <set_A9_IRQ_stack>
	config_GIC();
     26c:	eb0003f4 	bl	1244 <config_GIC>
	configInterupt();
     270:	eb00043c 	bl	1368 <configInterupt>
	enable_A9_interrupts();
     274:	eb0003e8 	bl	121c <enable_A9_interrupts>

	//**Initialize GUI**//
	GUI_Setup();
     278:	eb00017a 	bl	868 <GUI_Setup>
	//**Initialize Structs**//
	InitializeStructs();
     27c:	eb0002f0 	bl	e44 <InitializeStructs>
     280:	ea000000 	b	288 <main+0x2c>
		{
			//put_jtag('C');
			//put_jtag('\n');
			encoderInterrupt = 0;
		}
	}
     284:	e1a00000 	nop			; (mov r0, r0)
	GUI_Setup();
	//**Initialize Structs**//
	InitializeStructs();
	while(1)
	{
		if(ps2Interrupt == 1)
     288:	e302306c 	movw	r3, #8300	; 0x206c
     28c:	e3403000 	movt	r3, #0
     290:	e5933000 	ldr	r3, [r3]
     294:	e3530001 	cmp	r3, #1
     298:	1a00000e 	bne	2d8 <main+0x7c>
		{
			ps2Interrupt = 0;
     29c:	e302306c 	movw	r3, #8300	; 0x206c
     2a0:	e3403000 	movt	r3, #0
     2a4:	e3a02000 	mov	r2, #0
     2a8:	e5832000 	str	r2, [r3]
          	PS2_Read();
     2ac:	eb00004e 	bl	3ec <PS2_Read>
          	// put_jtag('A');
          	if(goodKey == 1)
     2b0:	e3023078 	movw	r3, #8312	; 0x2078
     2b4:	e3403000 	movt	r3, #0
     2b8:	e5933000 	ldr	r3, [r3]
     2bc:	e3530001 	cmp	r3, #1
     2c0:	1a000004 	bne	2d8 <main+0x7c>
            {
              	
              	Key();
     2c4:	eb00008c 	bl	4fc <Key>
                goodKey = 0;
     2c8:	e3023078 	movw	r3, #8312	; 0x2078
     2cc:	e3403000 	movt	r3, #0
     2d0:	e3a02000 	mov	r2, #0
     2d4:	e5832000 	str	r2, [r3]
            }
		}
		if(monitorInterrupt == 1)
     2d8:	e3023074 	movw	r3, #8308	; 0x2074
     2dc:	e3403000 	movt	r3, #0
     2e0:	e5933000 	ldr	r3, [r3]
     2e4:	e3530001 	cmp	r3, #1
     2e8:	1a000003 	bne	2fc <main+0xa0>
		{
			//put_jtag('B');
			monitorInterrupt = 0;
     2ec:	e3023074 	movw	r3, #8308	; 0x2074
     2f0:	e3403000 	movt	r3, #0
     2f4:	e3a02000 	mov	r2, #0
     2f8:	e5832000 	str	r2, [r3]
		}
		if(encoderInterrupt == 1)
     2fc:	e3023070 	movw	r3, #8304	; 0x2070
     300:	e3403000 	movt	r3, #0
     304:	e5933000 	ldr	r3, [r3]
     308:	e3530001 	cmp	r3, #1
     30c:	1affffdc 	bne	284 <main+0x28>
		{
			//put_jtag('C');
			//put_jtag('\n');
			encoderInterrupt = 0;
     310:	e3023070 	movw	r3, #8304	; 0x2070
     314:	e3403000 	movt	r3, #0
     318:	e3a02000 	mov	r2, #0
     31c:	e5832000 	str	r2, [r3]
		}
	}
     320:	eaffffd7 	b	284 <main+0x28>

00000324 <HPSTimer0ISR>:

static unsigned char END = 0; // Used to read the End-Of-Interrupt register to reset timer values

//**Interrupt Service Routines**//
void HPSTimer0ISR()   //half second period
{
     324:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     328:	e28db000 	add	r11, sp, #0
     32c:	e24dd00c 	sub	sp, sp, #12
    volatile int* HPSTimer0Ptr = (int*) HPS_TIMER0_BASE;
     330:	e3a03902 	mov	r3, #32768	; 0x8000
     334:	e34f3fc0 	movt	r3, #65472	; 0xffc0
     338:	e50b3008 	str	r3, [r11, #-8]
  static char flag; //toggle flag
  
    ps2Interrupt = 1;
     33c:	e302306c 	movw	r3, #8300	; 0x206c
     340:	e3403000 	movt	r3, #0
     344:	e3a02001 	mov	r2, #1
     348:	e5832000 	str	r2, [r3]
    flag ++;
     34c:	e3023081 	movw	r3, #8321	; 0x2081
     350:	e3403000 	movt	r3, #0
     354:	e5d33000 	ldrb	r3, [r3]
     358:	e2833001 	add	r3, r3, #1
     35c:	e6ef2073 	uxtb	r2, r3
     360:	e3023081 	movw	r3, #8321	; 0x2081
     364:	e3403000 	movt	r3, #0
     368:	e5c32000 	strb	r2, [r3]
    if(flag == 1)
     36c:	e3023081 	movw	r3, #8321	; 0x2081
     370:	e3403000 	movt	r3, #0
     374:	e5d33000 	ldrb	r3, [r3]
     378:	e3530001 	cmp	r3, #1
     37c:	1a000003 	bne	390 <HPSTimer0ISR+0x6c>
    {
        encoderInterrupt = 1;
     380:	e3023070 	movw	r3, #8304	; 0x2070
     384:	e3403000 	movt	r3, #0
     388:	e3a02001 	mov	r2, #1
     38c:	e5832000 	str	r2, [r3]
    }
    if(flag == 2)
     390:	e3023081 	movw	r3, #8321	; 0x2081
     394:	e3403000 	movt	r3, #0
     398:	e5d33000 	ldrb	r3, [r3]
     39c:	e3530002 	cmp	r3, #2
     3a0:	1a000007 	bne	3c4 <HPSTimer0ISR+0xa0>
    {
        monitorInterrupt = 1;
     3a4:	e3023074 	movw	r3, #8308	; 0x2074
     3a8:	e3403000 	movt	r3, #0
     3ac:	e3a02001 	mov	r2, #1
     3b0:	e5832000 	str	r2, [r3]
        flag = 0;
     3b4:	e3023081 	movw	r3, #8321	; 0x2081
     3b8:	e3403000 	movt	r3, #0
     3bc:	e3a02000 	mov	r2, #0
     3c0:	e5c32000 	strb	r2, [r3]
    }
  
    END = *(HPSTimer0Ptr + 3);  //resets HPSTimer0
     3c4:	e51b3008 	ldr	r3, [r11, #-8]
     3c8:	e283300c 	add	r3, r3, #12
     3cc:	e5933000 	ldr	r3, [r3]
     3d0:	e6ef2073 	uxtb	r2, r3
     3d4:	e3023080 	movw	r3, #8320	; 0x2080
     3d8:	e3403000 	movt	r3, #0
     3dc:	e5c32000 	strb	r2, [r3]
}
     3e0:	e28bd000 	add	sp, r11, #0
     3e4:	e8bd0800 	ldmfd	sp!, {r11}
     3e8:	e12fff1e 	bx	lr

000003ec <PS2_Read>:
extern int keyData;     //declared in keypad.c
extern int goodKey;     //declared in main.c

//**Function Code**//
void PS2_Read(void)
{
     3ec:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     3f0:	e28db000 	add	r11, sp, #0
     3f4:	e24dd01c 	sub	sp, sp, #28
    volatile int* PS2_ptr = (int*) PS2_BASE;
     3f8:	e3a03c01 	mov	r3, #256	; 0x100
     3fc:	e34f3f20 	movt	r3, #65312	; 0xff20
     400:	e50b300c 	str	r3, [r11, #-12]
    int ps2data;
    static char flag = 0;   //holds if release accured
    char waiting = 1;
     404:	e3a03001 	mov	r3, #1
     408:	e54b3005 	strb	r3, [r11, #-5]
    int trash = 0;          //holds current PS2 read
     40c:	e3a03000 	mov	r3, #0
     410:	e50b3010 	str	r3, [r11, #-16]
    int ravail;             //holds if unread data
    int rvalid;

    while(waiting == 1)                              //if unread data
     414:	ea000030 	b	4dc <PS2_Read+0xf0>
    {
        ps2data = *(PS2_ptr);
     418:	e51b300c 	ldr	r3, [r11, #-12]
     41c:	e5933000 	ldr	r3, [r3]
     420:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
        ravail = (ps2data & 0xFFFF0000) >> 16;
     424:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     428:	e1a03823 	lsr	r3, r3, #16
     42c:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
        rvalid = (ps2data & 0x8000) >> 15;
     430:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     434:	e2033902 	and	r3, r3, #32768	; 0x8000
     438:	e1a037c3 	asr	r3, r3, #15
     43c:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4

        if(ravail == 0)
     440:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     444:	e3530000 	cmp	r3, #0
     448:	0a000027 	beq	4ec <PS2_Read+0x100>
            return;

        if(rvalid == 1)
     44c:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     450:	e3530001 	cmp	r3, #1
     454:	1a000020 	bne	4dc <PS2_Read+0xf0>
        {
            trash = ps2data & 0xFF;             //read data
     458:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     45c:	e6ef3073 	uxtb	r3, r3
     460:	e50b3010 	str	r3, [r11, #-16]
            if(flag == 1)                      //if flag set
     464:	e3023082 	movw	r3, #8322	; 0x2082
     468:	e3403000 	movt	r3, #0
     46c:	e5d33000 	ldrb	r3, [r3]
     470:	e3530001 	cmp	r3, #1
     474:	1a00000d 	bne	4b0 <PS2_Read+0xc4>
            {
                keyData = trash;                  //keep data
     478:	e3023084 	movw	r3, #8324	; 0x2084
     47c:	e3403000 	movt	r3, #0
     480:	e51b2010 	ldr	r2, [r11, #-16]
     484:	e5832000 	str	r2, [r3]
                flag = 0;                         //clear local flag
     488:	e3023082 	movw	r3, #8322	; 0x2082
     48c:	e3403000 	movt	r3, #0
     490:	e3a02000 	mov	r2, #0
     494:	e5c32000 	strb	r2, [r3]
                goodKey = 1;                      //set global flag
     498:	e3023078 	movw	r3, #8312	; 0x2078
     49c:	e3403000 	movt	r3, #0
     4a0:	e3a02001 	mov	r2, #1
     4a4:	e5832000 	str	r2, [r3]
                waiting = 0;                      //clear loop control
     4a8:	e3a03000 	mov	r3, #0
     4ac:	e54b3005 	strb	r3, [r11, #-5]
            }
            if(trash == 0xF0)                   //if date is break code
     4b0:	e51b3010 	ldr	r3, [r11, #-16]
     4b4:	e35300f0 	cmp	r3, #240	; 0xf0
     4b8:	1a000007 	bne	4dc <PS2_Read+0xf0>
            {
                flag = 1;                         //set local flag
     4bc:	e3023082 	movw	r3, #8322	; 0x2082
     4c0:	e3403000 	movt	r3, #0
     4c4:	e3a02001 	mov	r2, #1
     4c8:	e5c32000 	strb	r2, [r3]
                keyData = 0;                      //clear data
     4cc:	e3023084 	movw	r3, #8324	; 0x2084
     4d0:	e3403000 	movt	r3, #0
     4d4:	e3a02000 	mov	r2, #0
     4d8:	e5832000 	str	r2, [r3]
    char waiting = 1;
    int trash = 0;          //holds current PS2 read
    int ravail;             //holds if unread data
    int rvalid;

    while(waiting == 1)                              //if unread data
     4dc:	e55b3005 	ldrb	r3, [r11, #-5]
     4e0:	e3530001 	cmp	r3, #1
     4e4:	0affffcb 	beq	418 <PS2_Read+0x2c>
     4e8:	ea000000 	b	4f0 <PS2_Read+0x104>
        ps2data = *(PS2_ptr);
        ravail = (ps2data & 0xFFFF0000) >> 16;
        rvalid = (ps2data & 0x8000) >> 15;

        if(ravail == 0)
            return;
     4ec:	e1a00000 	nop			; (mov r0, r0)
                flag = 1;                         //set local flag
                keyData = 0;                      //clear data
            }
        }
    }
}
     4f0:	e28bd000 	add	sp, r11, #0
     4f4:	e8bd0800 	ldmfd	sp!, {r11}
     4f8:	e12fff1e 	bx	lr

000004fc <Key>:
extern char enterPress;

//**Function Code**//

void Key(void)
{
     4fc:	e92d4800 	push	{r11, lr}
     500:	e28db004 	add	r11, sp, #4
     504:	e24dd008 	sub	sp, sp, #8
	char key = GetKey(keyData);
     508:	e3023084 	movw	r3, #8324	; 0x2084
     50c:	e3403000 	movt	r3, #0
     510:	e5933000 	ldr	r3, [r3]
     514:	e1a00003 	mov	r0, r3
     518:	eb00007f 	bl	71c <GetKey>
     51c:	e1a03000 	mov	r3, r0
     520:	e54b3005 	strb	r3, [r11, #-5]
	if(key == 0xB)
     524:	e55b3005 	ldrb	r3, [r11, #-5]
     528:	e353000b 	cmp	r3, #11
     52c:	0a000075 	beq	708 <Key+0x20c>
		return;

	if(key != 0xA)
     530:	e55b3005 	ldrb	r3, [r11, #-5]
     534:	e353000a 	cmp	r3, #10
     538:	0a000038 	beq	620 <Key+0x124>
	{
		inprpm.iHundred = inprpm.iTen;
     53c:	e3023088 	movw	r3, #8328	; 0x2088
     540:	e3403000 	movt	r3, #0
     544:	e5932004 	ldr	r2, [r3, #4]
     548:	e3023088 	movw	r3, #8328	; 0x2088
     54c:	e3403000 	movt	r3, #0
     550:	e5832000 	str	r2, [r3]
		inprpm.iTen = inprpm.iOne;
     554:	e3023088 	movw	r3, #8328	; 0x2088
     558:	e3403000 	movt	r3, #0
     55c:	e5932008 	ldr	r2, [r3, #8]
     560:	e3023088 	movw	r3, #8328	; 0x2088
     564:	e3403000 	movt	r3, #0
     568:	e5832004 	str	r2, [r3, #4]
		inprpm.iOne = key;
     56c:	e55b2005 	ldrb	r2, [r11, #-5]
     570:	e3023088 	movw	r3, #8328	; 0x2088
     574:	e3403000 	movt	r3, #0
     578:	e5832008 	str	r2, [r3, #8]
		Total_inprpm();
     57c:	eb0002b9 	bl	1068 <Total_inprpm>

		inprpm.cHundred = inprpm.cTen;
     580:	e3023088 	movw	r3, #8328	; 0x2088
     584:	e3403000 	movt	r3, #0
     588:	e5d32011 	ldrb	r2, [r3, #17]
     58c:	e3023088 	movw	r3, #8328	; 0x2088
     590:	e3403000 	movt	r3, #0
     594:	e5c32010 	strb	r2, [r3, #16]
		inprpm.cTen = inprpm.cOne;
     598:	e3023088 	movw	r3, #8328	; 0x2088
     59c:	e3403000 	movt	r3, #0
     5a0:	e5d32012 	ldrb	r2, [r3, #18]
     5a4:	e3023088 	movw	r3, #8328	; 0x2088
     5a8:	e3403000 	movt	r3, #0
     5ac:	e5c32011 	strb	r2, [r3, #17]
		inprpm.cOne = GetCharacter(key);
     5b0:	e55b3005 	ldrb	r3, [r11, #-5]
     5b4:	e1a00003 	mov	r0, r3
     5b8:	eb000262 	bl	f48 <GetCharacter>
     5bc:	e1a03000 	mov	r3, r0
     5c0:	e1a02003 	mov	r2, r3
     5c4:	e3023088 	movw	r3, #8328	; 0x2088
     5c8:	e3403000 	movt	r3, #0
     5cc:	e5c32012 	strb	r2, [r3, #18]

		inprpm.cTotal[0] = inprpm.cHundred;
     5d0:	e3023088 	movw	r3, #8328	; 0x2088
     5d4:	e3403000 	movt	r3, #0
     5d8:	e5d32010 	ldrb	r2, [r3, #16]
     5dc:	e3023088 	movw	r3, #8328	; 0x2088
     5e0:	e3403000 	movt	r3, #0
     5e4:	e5c32013 	strb	r2, [r3, #19]
		inprpm.cTotal[1] = inprpm.cTen;
     5e8:	e3023088 	movw	r3, #8328	; 0x2088
     5ec:	e3403000 	movt	r3, #0
     5f0:	e5d32011 	ldrb	r2, [r3, #17]
     5f4:	e3023088 	movw	r3, #8328	; 0x2088
     5f8:	e3403000 	movt	r3, #0
     5fc:	e5c32014 	strb	r2, [r3, #20]
		inprpm.cTotal[2] = inprpm.cOne;
     600:	e3023088 	movw	r3, #8328	; 0x2088
     604:	e3403000 	movt	r3, #0
     608:	e5d32012 	ldrb	r2, [r3, #18]
     60c:	e3023088 	movw	r3, #8328	; 0x2088
     610:	e3403000 	movt	r3, #0
     614:	e5c32015 	strb	r2, [r3, #21]

		InputRPM_Write(inprpm.cTotal);
     618:	e59f00f4 	ldr	r0, [pc, #244]	; 714 <Key+0x218>
     61c:	eb000102 	bl	a2c <InputRPM_Write>
		//put_jtag(GetCharacter(inprpm.iHundred));
		//put_jtag(GetCharacter(inprpm.iTen));
		//put_jtag(GetCharacter(inprpm.iOne));
	}

	if(key == 0xA)
     620:	e55b3005 	ldrb	r3, [r11, #-5]
     624:	e353000a 	cmp	r3, #10
     628:	1a000037 	bne	70c <Key+0x210>
	{
		if(inprpm.cTotal[2] != ' ')
     62c:	e3023088 	movw	r3, #8328	; 0x2088
     630:	e3403000 	movt	r3, #0
     634:	e5d33015 	ldrb	r3, [r3, #21]
     638:	e3530020 	cmp	r3, #32
     63c:	0a000032 	beq	70c <Key+0x210>
		{
			enterPress = 1;
     640:	e302307c 	movw	r3, #8316	; 0x207c
     644:	e3403000 	movt	r3, #0
     648:	e3a02001 	mov	r2, #1
     64c:	e5c32000 	strb	r2, [r3]
			setrpm = inprpm;
     650:	e30220a0 	movw	r2, #8352	; 0x20a0
     654:	e3402000 	movt	r2, #0
     658:	e3023088 	movw	r3, #8328	; 0x2088
     65c:	e3403000 	movt	r3, #0
     660:	e1a0c002 	mov	r12, r2
     664:	e1a0e003 	mov	lr, r3
     668:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
     66c:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
     670:	e89e0003 	ldm	lr, {r0, r1}
     674:	e88c0003 	stm	r12, {r0, r1}
			InputRPM_Clear();
     678:	eb000119 	bl	ae4 <InputRPM_Clear>
			Clear_inprpm();
     67c:	eb00024c 	bl	fb4 <Clear_inprpm>

			//**Debuging**//
			put_jtag(GetCharacter(setrpm.iHundred));
     680:	e30230a0 	movw	r3, #8352	; 0x20a0
     684:	e3403000 	movt	r3, #0
     688:	e5933000 	ldr	r3, [r3]
     68c:	e1a00003 	mov	r0, r3
     690:	eb00022c 	bl	f48 <GetCharacter>
     694:	e1a03000 	mov	r3, r0
     698:	e1a00003 	mov	r0, r3
     69c:	eb00036e 	bl	145c <put_jtag>
			//put_jtag(GetCharacter(setrpm.iTen));
			//put_jtag(GetCharacter(setrpm.iOne));
			put_jtag('A');
     6a0:	e3a00041 	mov	r0, #65	; 0x41
     6a4:	eb00036c 	bl	145c <put_jtag>

			if(setrpm.iTotal > 230)
     6a8:	e30230a0 	movw	r3, #8352	; 0x20a0
     6ac:	e3403000 	movt	r3, #0
     6b0:	e593300c 	ldr	r3, [r3, #12]
     6b4:	e35300e6 	cmp	r3, #230	; 0xe6
     6b8:	da00000f 	ble	6fc <Key+0x200>
			{
				setrpm.iTotal = 230;
     6bc:	e30230a0 	movw	r3, #8352	; 0x20a0
     6c0:	e3403000 	movt	r3, #0
     6c4:	e3a020e6 	mov	r2, #230	; 0xe6
     6c8:	e583200c 	str	r2, [r3, #12]
				setrpm.cTotal[0] = '2';
     6cc:	e30230a0 	movw	r3, #8352	; 0x20a0
     6d0:	e3403000 	movt	r3, #0
     6d4:	e3a02032 	mov	r2, #50	; 0x32
     6d8:	e5c32013 	strb	r2, [r3, #19]
				setrpm.cTotal[1] = '3';
     6dc:	e30230a0 	movw	r3, #8352	; 0x20a0
     6e0:	e3403000 	movt	r3, #0
     6e4:	e3a02033 	mov	r2, #51	; 0x33
     6e8:	e5c32014 	strb	r2, [r3, #20]
				setrpm.cTotal[2] = '0';
     6ec:	e30230a0 	movw	r3, #8352	; 0x20a0
     6f0:	e3403000 	movt	r3, #0
     6f4:	e3a02030 	mov	r2, #48	; 0x30
     6f8:	e5c32015 	strb	r2, [r3, #21]
			}
			SetRPM_Write(setrpm.cTotal);
     6fc:	e59f0014 	ldr	r0, [pc, #20]	; 718 <Key+0x21c>
     700:	eb00011f 	bl	b84 <SetRPM_Write>
     704:	ea000000 	b	70c <Key+0x210>

void Key(void)
{
	char key = GetKey(keyData);
	if(key == 0xB)
		return;
     708:	e1a00000 	nop			; (mov r0, r0)
			}
			SetRPM_Write(setrpm.cTotal);
		}

	}
}
     70c:	e24bd004 	sub	sp, r11, #4
     710:	e8bd8800 	pop	{r11, pc}
     714:	0000209b 	.word	0x0000209b
     718:	000020b3 	.word	0x000020b3

0000071c <GetKey>:

char GetKey(int keyData)
{
     71c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     720:	e28db000 	add	r11, sp, #0
     724:	e24dd014 	sub	sp, sp, #20
     728:	e50b0010 	str	r0, [r11, #-16]
	char key;

	switch(keyData)
     72c:	e51b3010 	ldr	r3, [r11, #-16]
     730:	e3530072 	cmp	r3, #114	; 0x72
     734:	0a00002b 	beq	7e8 <GetKey+0xcc>
     738:	e3530072 	cmp	r3, #114	; 0x72
     73c:	ca00000d 	bgt	778 <GetKey+0x5c>
     740:	e353006b 	cmp	r3, #107	; 0x6b
     744:	0a00002d 	beq	800 <GetKey+0xe4>
     748:	e353006b 	cmp	r3, #107	; 0x6b
     74c:	ca000004 	bgt	764 <GetKey+0x48>
     750:	e353005a 	cmp	r3, #90	; 0x5a
     754:	0a000017 	beq	7b8 <GetKey+0x9c>
     758:	e3530069 	cmp	r3, #105	; 0x69
     75c:	0a00001e 	beq	7dc <GetKey+0xc0>
     760:	ea000038 	b	848 <GetKey+0x12c>
     764:	e353006c 	cmp	r3, #108	; 0x6c
     768:	0a00002d 	beq	824 <GetKey+0x108>
     76c:	e3530070 	cmp	r3, #112	; 0x70
     770:	0a000016 	beq	7d0 <GetKey+0xb4>
     774:	ea000033 	b	848 <GetKey+0x12c>
     778:	e3530075 	cmp	r3, #117	; 0x75
     77c:	0a00002b 	beq	830 <GetKey+0x114>
     780:	e3530075 	cmp	r3, #117	; 0x75
     784:	ca000004 	bgt	79c <GetKey+0x80>
     788:	e3530073 	cmp	r3, #115	; 0x73
     78c:	0a00001e 	beq	80c <GetKey+0xf0>
     790:	e3530074 	cmp	r3, #116	; 0x74
     794:	0a00001f 	beq	818 <GetKey+0xfc>
     798:	ea00002a 	b	848 <GetKey+0x12c>
     79c:	e353007d 	cmp	r3, #125	; 0x7d
     7a0:	0a000025 	beq	83c <GetKey+0x120>
     7a4:	e35300e0 	cmp	r3, #224	; 0xe0
     7a8:	0a000005 	beq	7c4 <GetKey+0xa8>
     7ac:	e353007a 	cmp	r3, #122	; 0x7a
     7b0:	0a00000f 	beq	7f4 <GetKey+0xd8>
     7b4:	ea000023 	b	848 <GetKey+0x12c>
	{
		case 0x5A:		//enter
			key = 0xA;
     7b8:	e3a0300a 	mov	r3, #10
     7bc:	e54b3005 	strb	r3, [r11, #-5]
			break;
     7c0:	ea000023 	b	854 <GetKey+0x138>
		case 0xE0:		//enter
			key = 0xA;
     7c4:	e3a0300a 	mov	r3, #10
     7c8:	e54b3005 	strb	r3, [r11, #-5]
			break;
     7cc:	ea000020 	b	854 <GetKey+0x138>
		case 0x70:		//0
			key = 0;
     7d0:	e3a03000 	mov	r3, #0
     7d4:	e54b3005 	strb	r3, [r11, #-5]
			break;
     7d8:	ea00001d 	b	854 <GetKey+0x138>
		case 0x69:		//1
			key = 1;
     7dc:	e3a03001 	mov	r3, #1
     7e0:	e54b3005 	strb	r3, [r11, #-5]
			break;
     7e4:	ea00001a 	b	854 <GetKey+0x138>
		case 0x72:		//2
			key = 2;
     7e8:	e3a03002 	mov	r3, #2
     7ec:	e54b3005 	strb	r3, [r11, #-5]
			break;
     7f0:	ea000017 	b	854 <GetKey+0x138>
		case 0x7A:		//3
			key = 3;
     7f4:	e3a03003 	mov	r3, #3
     7f8:	e54b3005 	strb	r3, [r11, #-5]
			break;
     7fc:	ea000014 	b	854 <GetKey+0x138>
		case 0x6B:		//4
			key = 4;
     800:	e3a03004 	mov	r3, #4
     804:	e54b3005 	strb	r3, [r11, #-5]
			break;
     808:	ea000011 	b	854 <GetKey+0x138>
		case 0x73:		//5
			key = 5;
     80c:	e3a03005 	mov	r3, #5
     810:	e54b3005 	strb	r3, [r11, #-5]
			break;
     814:	ea00000e 	b	854 <GetKey+0x138>
		case 0x74:		//6
			key = 6;
     818:	e3a03006 	mov	r3, #6
     81c:	e54b3005 	strb	r3, [r11, #-5]
			break;
     820:	ea00000b 	b	854 <GetKey+0x138>
		case 0x6C:		//7
			key = 7;
     824:	e3a03007 	mov	r3, #7
     828:	e54b3005 	strb	r3, [r11, #-5]
			break;
     82c:	ea000008 	b	854 <GetKey+0x138>
		case 0x75:		//8
			key = 8;
     830:	e3a03008 	mov	r3, #8
     834:	e54b3005 	strb	r3, [r11, #-5]
			break;
     838:	ea000005 	b	854 <GetKey+0x138>
		case 0x7D:		//9
			key = 9;
     83c:	e3a03009 	mov	r3, #9
     840:	e54b3005 	strb	r3, [r11, #-5]
			break;
     844:	ea000002 	b	854 <GetKey+0x138>
		default:		//invalid
			key = 0xB;
     848:	e3a0300b 	mov	r3, #11
     84c:	e54b3005 	strb	r3, [r11, #-5]
			break;
     850:	e1a00000 	nop			; (mov r0, r0)
	}
	return key;
     854:	e55b3005 	ldrb	r3, [r11, #-5]
}
     858:	e1a00003 	mov	r0, r3
     85c:	e28bd000 	add	sp, r11, #0
     860:	e8bd0800 	ldmfd	sp!, {r11}
     864:	e12fff1e 	bx	lr

00000868 <GUI_Setup>:
#define Eggplant		0x310A
#define Burgandy		0x7804

//**Function Code**//
void GUI_Setup(void)
{
     868:	e92d4800 	push	{r11, lr}
     86c:	e28db004 	add	r11, sp, #4
     870:	e24dd0a8 	sub	sp, sp, #168	; 0xa8
	VGA_box(0, 0, 319, 239, MutedNavy);				//background
     874:	e305328e 	movw	r3, #21134	; 0x528e
     878:	e58d3000 	str	r3, [sp]
     87c:	e3a00000 	mov	r0, #0
     880:	e3a01000 	mov	r1, #0
     884:	e300213f 	movw	r2, #319	; 0x13f
     888:	e3a030ef 	mov	r3, #239	; 0xef
     88c:	eb000122 	bl	d1c <VGA_box>
	VGA_box(59, 149, 261, 166, MetallicGold);		//bar's border
     890:	e30d3567 	movw	r3, #54631	; 0xd567
     894:	e34f3fff 	movt	r3, #65535	; 0xffff
     898:	e58d3000 	str	r3, [sp]
     89c:	e3a0003b 	mov	r0, #59	; 0x3b
     8a0:	e3a01095 	mov	r1, #149	; 0x95
     8a4:	e3002105 	movw	r2, #261	; 0x105
     8a8:	e3a030a6 	mov	r3, #166	; 0xa6
     8ac:	eb00011a 	bl	d1c <VGA_box>
	VGA_box(60, 150, 260, 165, Burgandy);			//bar's background
     8b0:	e3073804 	movw	r3, #30724	; 0x7804
     8b4:	e58d3000 	str	r3, [sp]
     8b8:	e3a0003c 	mov	r0, #60	; 0x3c
     8bc:	e3a01096 	mov	r1, #150	; 0x96
     8c0:	e3a02f41 	mov	r2, #260	; 0x104
     8c4:	e3a030a5 	mov	r3, #165	; 0xa5
     8c8:	eb000113 	bl	d1c <VGA_box>

	char input[40] = "RPM Input:";
     8cc:	e3012ab8 	movw	r2, #6840	; 0x1ab8
     8d0:	e3402000 	movt	r2, #0
     8d4:	e24b302c 	sub	r3, r11, #44	; 0x2c
     8d8:	e8920007 	ldm	r2, {r0, r1, r2}
     8dc:	e8a30003 	stmia	r3!, {r0, r1}
     8e0:	e1c320b0 	strh	r2, [r3]
     8e4:	e2833002 	add	r3, r3, #2
     8e8:	e1a02822 	lsr	r2, r2, #16
     8ec:	e5c32000 	strb	r2, [r3]
     8f0:	e24b2021 	sub	r2, r11, #33	; 0x21
     8f4:	e3a0301d 	mov	r3, #29
     8f8:	e1a00002 	mov	r0, r2
     8fc:	e3a01000 	mov	r1, #0
     900:	e1a02003 	mov	r2, r3
     904:	eb00032b 	bl	15b8 <memset>
	VGA_text(10, 10, input);
     908:	e24b302c 	sub	r3, r11, #44	; 0x2c
     90c:	e3a0000a 	mov	r0, #10
     910:	e3a0100a 	mov	r1, #10
     914:	e1a02003 	mov	r2, r3
     918:	eb000128 	bl	dc0 <VGA_text>
	char set[40] = "Set RPM:";
     91c:	e3012ae0 	movw	r2, #6880	; 0x1ae0
     920:	e3402000 	movt	r2, #0
     924:	e24b3054 	sub	r3, r11, #84	; 0x54
     928:	e8920007 	ldm	r2, {r0, r1, r2}
     92c:	e8a30003 	stmia	r3!, {r0, r1}
     930:	e5c32000 	strb	r2, [r3]
     934:	e24b204b 	sub	r2, r11, #75	; 0x4b
     938:	e3a0301f 	mov	r3, #31
     93c:	e1a00002 	mov	r0, r2
     940:	e3a01000 	mov	r1, #0
     944:	e1a02003 	mov	r2, r3
     948:	eb00031a 	bl	15b8 <memset>
	VGA_text(12, 13, set);
     94c:	e24b3054 	sub	r3, r11, #84	; 0x54
     950:	e3a0000c 	mov	r0, #12
     954:	e3a0100d 	mov	r1, #13
     958:	e1a02003 	mov	r2, r3
     95c:	eb000117 	bl	dc0 <VGA_text>
	char actual[40] = "Actual RPM:";
     960:	e3013b08 	movw	r3, #6920	; 0x1b08
     964:	e3403000 	movt	r3, #0
     968:	e24bc07c 	sub	r12, r11, #124	; 0x7c
     96c:	e8930007 	ldm	r3, {r0, r1, r2}
     970:	e88c0007 	stm	r12, {r0, r1, r2}
     974:	e24b3070 	sub	r3, r11, #112	; 0x70
     978:	e3a02000 	mov	r2, #0
     97c:	e5832000 	str	r2, [r3]
     980:	e2833004 	add	r3, r3, #4
     984:	e3a02000 	mov	r2, #0
     988:	e5832000 	str	r2, [r3]
     98c:	e2833004 	add	r3, r3, #4
     990:	e3a02000 	mov	r2, #0
     994:	e5832000 	str	r2, [r3]
     998:	e2833004 	add	r3, r3, #4
     99c:	e3a02000 	mov	r2, #0
     9a0:	e5832000 	str	r2, [r3]
     9a4:	e2833004 	add	r3, r3, #4
     9a8:	e3a02000 	mov	r2, #0
     9ac:	e5832000 	str	r2, [r3]
     9b0:	e2833004 	add	r3, r3, #4
     9b4:	e3a02000 	mov	r2, #0
     9b8:	e5832000 	str	r2, [r3]
     9bc:	e2833004 	add	r3, r3, #4
     9c0:	e3a02000 	mov	r2, #0
     9c4:	e5832000 	str	r2, [r3]
     9c8:	e2833004 	add	r3, r3, #4
	VGA_text(9, 16, actual);
     9cc:	e24b307c 	sub	r3, r11, #124	; 0x7c
     9d0:	e3a00009 	mov	r0, #9
     9d4:	e3a01010 	mov	r1, #16
     9d8:	e1a02003 	mov	r2, r3
     9dc:	eb0000f7 	bl	dc0 <VGA_text>
	char current[40] = "Current:";
     9e0:	e3012b30 	movw	r2, #6960	; 0x1b30
     9e4:	e3402000 	movt	r2, #0
     9e8:	e24b30a4 	sub	r3, r11, #164	; 0xa4
     9ec:	e8920007 	ldm	r2, {r0, r1, r2}
     9f0:	e8a30003 	stmia	r3!, {r0, r1}
     9f4:	e5c32000 	strb	r2, [r3]
     9f8:	e24b209b 	sub	r2, r11, #155	; 0x9b
     9fc:	e3a0301f 	mov	r3, #31
     a00:	e1a00002 	mov	r0, r2
     a04:	e3a01000 	mov	r1, #0
     a08:	e1a02003 	mov	r2, r3
     a0c:	eb0002e9 	bl	15b8 <memset>
	VGA_text(12, 19, current);
     a10:	e24b30a4 	sub	r3, r11, #164	; 0xa4
     a14:	e3a0000c 	mov	r0, #12
     a18:	e3a01013 	mov	r1, #19
     a1c:	e1a02003 	mov	r2, r3
     a20:	eb0000e6 	bl	dc0 <VGA_text>
}
     a24:	e24bd004 	sub	sp, r11, #4
     a28:	e8bd8800 	pop	{r11, pc}

00000a2c <InputRPM_Write>:

void InputRPM_Write(char* value)
{
     a2c:	e92d4800 	push	{r11, lr}
     a30:	e28db004 	add	r11, sp, #4
     a34:	e24dd030 	sub	sp, sp, #48	; 0x30
     a38:	e50b0030 	str	r0, [r11, #-48]	; 0xffffffd0
	VGA_text(21, 10, value);
     a3c:	e3a00015 	mov	r0, #21
     a40:	e3a0100a 	mov	r1, #10
     a44:	e51b2030 	ldr	r2, [r11, #-48]	; 0xffffffd0
     a48:	eb0000dc 	bl	dc0 <VGA_text>
	char rpm[40] = "RPM";
     a4c:	e3053052 	movw	r3, #20562	; 0x5052
     a50:	e340304d 	movt	r3, #77	; 0x4d
     a54:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
     a58:	e24b3028 	sub	r3, r11, #40	; 0x28
     a5c:	e3a02000 	mov	r2, #0
     a60:	e5832000 	str	r2, [r3]
     a64:	e2833004 	add	r3, r3, #4
     a68:	e3a02000 	mov	r2, #0
     a6c:	e5832000 	str	r2, [r3]
     a70:	e2833004 	add	r3, r3, #4
     a74:	e3a02000 	mov	r2, #0
     a78:	e5832000 	str	r2, [r3]
     a7c:	e2833004 	add	r3, r3, #4
     a80:	e3a02000 	mov	r2, #0
     a84:	e5832000 	str	r2, [r3]
     a88:	e2833004 	add	r3, r3, #4
     a8c:	e3a02000 	mov	r2, #0
     a90:	e5832000 	str	r2, [r3]
     a94:	e2833004 	add	r3, r3, #4
     a98:	e3a02000 	mov	r2, #0
     a9c:	e5832000 	str	r2, [r3]
     aa0:	e2833004 	add	r3, r3, #4
     aa4:	e3a02000 	mov	r2, #0
     aa8:	e5832000 	str	r2, [r3]
     aac:	e2833004 	add	r3, r3, #4
     ab0:	e3a02000 	mov	r2, #0
     ab4:	e5832000 	str	r2, [r3]
     ab8:	e2833004 	add	r3, r3, #4
     abc:	e3a02000 	mov	r2, #0
     ac0:	e5832000 	str	r2, [r3]
     ac4:	e2833004 	add	r3, r3, #4
	VGA_text(25, 10, rpm);
     ac8:	e24b302c 	sub	r3, r11, #44	; 0x2c
     acc:	e3a00019 	mov	r0, #25
     ad0:	e3a0100a 	mov	r1, #10
     ad4:	e1a02003 	mov	r2, r3
     ad8:	eb0000b8 	bl	dc0 <VGA_text>
}
     adc:	e24bd004 	sub	sp, r11, #4
     ae0:	e8bd8800 	pop	{r11, pc}

00000ae4 <InputRPM_Clear>:

void InputRPM_Clear()
{
     ae4:	e92d4800 	push	{r11, lr}
     ae8:	e28db004 	add	r11, sp, #4
     aec:	e24dd028 	sub	sp, sp, #40	; 0x28
	char clear[40] = "       ";
     af0:	e3013b58 	movw	r3, #7000	; 0x1b58
     af4:	e3403000 	movt	r3, #0
     af8:	e24b202c 	sub	r2, r11, #44	; 0x2c
     afc:	e8930003 	ldm	r3, {r0, r1}
     b00:	e8820003 	stm	r2, {r0, r1}
     b04:	e24b3024 	sub	r3, r11, #36	; 0x24
     b08:	e3a02000 	mov	r2, #0
     b0c:	e5832000 	str	r2, [r3]
     b10:	e2833004 	add	r3, r3, #4
     b14:	e3a02000 	mov	r2, #0
     b18:	e5832000 	str	r2, [r3]
     b1c:	e2833004 	add	r3, r3, #4
     b20:	e3a02000 	mov	r2, #0
     b24:	e5832000 	str	r2, [r3]
     b28:	e2833004 	add	r3, r3, #4
     b2c:	e3a02000 	mov	r2, #0
     b30:	e5832000 	str	r2, [r3]
     b34:	e2833004 	add	r3, r3, #4
     b38:	e3a02000 	mov	r2, #0
     b3c:	e5832000 	str	r2, [r3]
     b40:	e2833004 	add	r3, r3, #4
     b44:	e3a02000 	mov	r2, #0
     b48:	e5832000 	str	r2, [r3]
     b4c:	e2833004 	add	r3, r3, #4
     b50:	e3a02000 	mov	r2, #0
     b54:	e5832000 	str	r2, [r3]
     b58:	e2833004 	add	r3, r3, #4
     b5c:	e3a02000 	mov	r2, #0
     b60:	e5832000 	str	r2, [r3]
     b64:	e2833004 	add	r3, r3, #4
	VGA_text(21, 10, clear);
     b68:	e24b302c 	sub	r3, r11, #44	; 0x2c
     b6c:	e3a00015 	mov	r0, #21
     b70:	e3a0100a 	mov	r1, #10
     b74:	e1a02003 	mov	r2, r3
     b78:	eb000090 	bl	dc0 <VGA_text>
}
     b7c:	e24bd004 	sub	sp, r11, #4
     b80:	e8bd8800 	pop	{r11, pc}

00000b84 <SetRPM_Write>:

void SetRPM_Write(char* value)
{
     b84:	e92d4800 	push	{r11, lr}
     b88:	e28db004 	add	r11, sp, #4
     b8c:	e24dd030 	sub	sp, sp, #48	; 0x30
     b90:	e50b0030 	str	r0, [r11, #-48]	; 0xffffffd0
	VGA_text(21, 13, value);
     b94:	e3a00015 	mov	r0, #21
     b98:	e3a0100d 	mov	r1, #13
     b9c:	e51b2030 	ldr	r2, [r11, #-48]	; 0xffffffd0
     ba0:	eb000086 	bl	dc0 <VGA_text>
	char rpm[40] = "RPM";
     ba4:	e3053052 	movw	r3, #20562	; 0x5052
     ba8:	e340304d 	movt	r3, #77	; 0x4d
     bac:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
     bb0:	e24b3028 	sub	r3, r11, #40	; 0x28
     bb4:	e3a02000 	mov	r2, #0
     bb8:	e5832000 	str	r2, [r3]
     bbc:	e2833004 	add	r3, r3, #4
     bc0:	e3a02000 	mov	r2, #0
     bc4:	e5832000 	str	r2, [r3]
     bc8:	e2833004 	add	r3, r3, #4
     bcc:	e3a02000 	mov	r2, #0
     bd0:	e5832000 	str	r2, [r3]
     bd4:	e2833004 	add	r3, r3, #4
     bd8:	e3a02000 	mov	r2, #0
     bdc:	e5832000 	str	r2, [r3]
     be0:	e2833004 	add	r3, r3, #4
     be4:	e3a02000 	mov	r2, #0
     be8:	e5832000 	str	r2, [r3]
     bec:	e2833004 	add	r3, r3, #4
     bf0:	e3a02000 	mov	r2, #0
     bf4:	e5832000 	str	r2, [r3]
     bf8:	e2833004 	add	r3, r3, #4
     bfc:	e3a02000 	mov	r2, #0
     c00:	e5832000 	str	r2, [r3]
     c04:	e2833004 	add	r3, r3, #4
     c08:	e3a02000 	mov	r2, #0
     c0c:	e5832000 	str	r2, [r3]
     c10:	e2833004 	add	r3, r3, #4
     c14:	e3a02000 	mov	r2, #0
     c18:	e5832000 	str	r2, [r3]
     c1c:	e2833004 	add	r3, r3, #4
	VGA_text(25, 13, rpm);
     c20:	e24b302c 	sub	r3, r11, #44	; 0x2c
     c24:	e3a00019 	mov	r0, #25
     c28:	e3a0100d 	mov	r1, #13
     c2c:	e1a02003 	mov	r2, r3
     c30:	eb000062 	bl	dc0 <VGA_text>
}
     c34:	e24bd004 	sub	sp, r11, #4
     c38:	e8bd8800 	pop	{r11, pc}

00000c3c <ActualRPM_Write>:

void ActualRPM_Write(char* value)
{
     c3c:	e92d4800 	push	{r11, lr}
     c40:	e28db004 	add	r11, sp, #4
     c44:	e24dd030 	sub	sp, sp, #48	; 0x30
     c48:	e50b0030 	str	r0, [r11, #-48]	; 0xffffffd0
	VGA_text(21, 16, value);
     c4c:	e3a00015 	mov	r0, #21
     c50:	e3a01010 	mov	r1, #16
     c54:	e51b2030 	ldr	r2, [r11, #-48]	; 0xffffffd0
     c58:	eb000058 	bl	dc0 <VGA_text>
	char rpm[40] = "RPM";
     c5c:	e3053052 	movw	r3, #20562	; 0x5052
     c60:	e340304d 	movt	r3, #77	; 0x4d
     c64:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
     c68:	e24b3028 	sub	r3, r11, #40	; 0x28
     c6c:	e3a02000 	mov	r2, #0
     c70:	e5832000 	str	r2, [r3]
     c74:	e2833004 	add	r3, r3, #4
     c78:	e3a02000 	mov	r2, #0
     c7c:	e5832000 	str	r2, [r3]
     c80:	e2833004 	add	r3, r3, #4
     c84:	e3a02000 	mov	r2, #0
     c88:	e5832000 	str	r2, [r3]
     c8c:	e2833004 	add	r3, r3, #4
     c90:	e3a02000 	mov	r2, #0
     c94:	e5832000 	str	r2, [r3]
     c98:	e2833004 	add	r3, r3, #4
     c9c:	e3a02000 	mov	r2, #0
     ca0:	e5832000 	str	r2, [r3]
     ca4:	e2833004 	add	r3, r3, #4
     ca8:	e3a02000 	mov	r2, #0
     cac:	e5832000 	str	r2, [r3]
     cb0:	e2833004 	add	r3, r3, #4
     cb4:	e3a02000 	mov	r2, #0
     cb8:	e5832000 	str	r2, [r3]
     cbc:	e2833004 	add	r3, r3, #4
     cc0:	e3a02000 	mov	r2, #0
     cc4:	e5832000 	str	r2, [r3]
     cc8:	e2833004 	add	r3, r3, #4
     ccc:	e3a02000 	mov	r2, #0
     cd0:	e5832000 	str	r2, [r3]
     cd4:	e2833004 	add	r3, r3, #4
	VGA_text(25, 16, rpm);
     cd8:	e24b302c 	sub	r3, r11, #44	; 0x2c
     cdc:	e3a00019 	mov	r0, #25
     ce0:	e3a01010 	mov	r1, #16
     ce4:	e1a02003 	mov	r2, r3
     ce8:	eb000034 	bl	dc0 <VGA_text>
}
     cec:	e24bd004 	sub	sp, r11, #4
     cf0:	e8bd8800 	pop	{r11, pc}

00000cf4 <Current_Write>:

void Current_Write(char* value)
{
     cf4:	e92d4800 	push	{r11, lr}
     cf8:	e28db004 	add	r11, sp, #4
     cfc:	e24dd008 	sub	sp, sp, #8
     d00:	e50b0008 	str	r0, [r11, #-8]
	VGA_text(21, 19, value);
     d04:	e3a00015 	mov	r0, #21
     d08:	e3a01013 	mov	r1, #19
     d0c:	e51b2008 	ldr	r2, [r11, #-8]
     d10:	eb00002a 	bl	dc0 <VGA_text>
     d14:	e24bd004 	sub	sp, r11, #4
     d18:	e8bd8800 	pop	{r11, pc}

00000d1c <VGA_box>:
//**Includes**//
#include "vga.h"
#include "address_map.h"
//**Function Code**//
void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
     d1c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     d20:	e28db000 	add	r11, sp, #0
     d24:	e24dd024 	sub	sp, sp, #36	; 0x24
     d28:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
     d2c:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
     d30:	e50b2020 	str	r2, [r11, #-32]	; 0xffffffe0
     d34:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
	int pixel_ptr, row, col;

	for (row = y1; row <= y2; row++)		
     d38:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     d3c:	e50b3008 	str	r3, [r11, #-8]
     d40:	ea000017 	b	da4 <VGA_box+0x88>
	{
		for (col = x1; col <= x2; ++col)
     d44:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     d48:	e50b300c 	str	r3, [r11, #-12]
     d4c:	ea00000d 	b	d88 <VGA_box+0x6c>
		{
			pixel_ptr = FPGA_ONCHIP_BASE + (row << 10) + (col << 1);
     d50:	e51b3008 	ldr	r3, [r11, #-8]
     d54:	e1a03503 	lsl	r3, r3, #10
     d58:	e1a02003 	mov	r2, r3
     d5c:	e51b300c 	ldr	r3, [r11, #-12]
     d60:	e1a03083 	lsl	r3, r3, #1
     d64:	e0823003 	add	r3, r2, r3
     d68:	e2833332 	add	r3, r3, #-939524096	; 0xc8000000
     d6c:	e50b3010 	str	r3, [r11, #-16]
			*(short *)pixel_ptr = pixel_color;		// set pixel color
     d70:	e51b3010 	ldr	r3, [r11, #-16]
     d74:	e1db20b4 	ldrh	r2, [r11, #4]
     d78:	e1c320b0 	strh	r2, [r3]
{
	int pixel_ptr, row, col;

	for (row = y1; row <= y2; row++)		
	{
		for (col = x1; col <= x2; ++col)
     d7c:	e51b300c 	ldr	r3, [r11, #-12]
     d80:	e2833001 	add	r3, r3, #1
     d84:	e50b300c 	str	r3, [r11, #-12]
     d88:	e51b200c 	ldr	r2, [r11, #-12]
     d8c:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     d90:	e1520003 	cmp	r2, r3
     d94:	daffffed 	ble	d50 <VGA_box+0x34>
//**Function Code**//
void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
	int pixel_ptr, row, col;

	for (row = y1; row <= y2; row++)		
     d98:	e51b3008 	ldr	r3, [r11, #-8]
     d9c:	e2833001 	add	r3, r3, #1
     da0:	e50b3008 	str	r3, [r11, #-8]
     da4:	e51b2008 	ldr	r2, [r11, #-8]
     da8:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
     dac:	e1520003 	cmp	r2, r3
     db0:	daffffe3 	ble	d44 <VGA_box+0x28>
		{
			pixel_ptr = FPGA_ONCHIP_BASE + (row << 10) + (col << 1);
			*(short *)pixel_ptr = pixel_color;		// set pixel color
		}
	}
} 
     db4:	e28bd000 	add	sp, r11, #0
     db8:	e8bd0800 	ldmfd	sp!, {r11}
     dbc:	e12fff1e 	bx	lr

00000dc0 <VGA_text>:

void VGA_text(int x, int y, char* text_ptr)
{
     dc0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     dc4:	e28db000 	add	r11, sp, #0
     dc8:	e24dd01c 	sub	sp, sp, #28
     dcc:	e50b0010 	str	r0, [r11, #-16]
     dd0:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
     dd4:	e50b2018 	str	r2, [r11, #-24]	; 0xffffffe8
	int offset;
  	volatile char* character_buffer = (char *) FPGA_CHAR_BASE;	// VGA character buffer
     dd8:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
     ddc:	e50b300c 	str	r3, [r11, #-12]

	offset = (y << 7) + x;
     de0:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     de4:	e1a02383 	lsl	r2, r3, #7
     de8:	e51b3010 	ldr	r3, [r11, #-16]
     dec:	e0823003 	add	r3, r2, r3
     df0:	e50b3008 	str	r3, [r11, #-8]
	while ( *(text_ptr) )
     df4:	ea00000b 	b	e28 <VGA_text+0x68>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
     df8:	e51b3008 	ldr	r3, [r11, #-8]
     dfc:	e51b200c 	ldr	r2, [r11, #-12]
     e00:	e0823003 	add	r3, r2, r3
     e04:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     e08:	e5d22000 	ldrb	r2, [r2]
     e0c:	e5c32000 	strb	r2, [r3]
		++text_ptr;
     e10:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     e14:	e2833001 	add	r3, r3, #1
     e18:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
		++offset;
     e1c:	e51b3008 	ldr	r3, [r11, #-8]
     e20:	e2833001 	add	r3, r3, #1
     e24:	e50b3008 	str	r3, [r11, #-8]
{
	int offset;
  	volatile char* character_buffer = (char *) FPGA_CHAR_BASE;	// VGA character buffer

	offset = (y << 7) + x;
	while ( *(text_ptr) )
     e28:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     e2c:	e5d33000 	ldrb	r3, [r3]
     e30:	e3530000 	cmp	r3, #0
     e34:	1affffef 	bne	df8 <VGA_text+0x38>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
		++text_ptr;
		++offset;
	}
     e38:	e28bd000 	add	sp, r11, #0
     e3c:	e8bd0800 	ldmfd	sp!, {r11}
     e40:	e12fff1e 	bx	lr

00000e44 <InitializeStructs>:
struct RPM setrpm;
struct RPM actrpm;

//**Function Code**//
void InitializeStructs(void)
{
     e44:	e92d0810 	push	{r4, r11}
     e48:	e28db004 	add	r11, sp, #4
	inprpm.iHundred = 0;
     e4c:	e3023088 	movw	r3, #8328	; 0x2088
     e50:	e3403000 	movt	r3, #0
     e54:	e3a02000 	mov	r2, #0
     e58:	e5832000 	str	r2, [r3]
	inprpm.iTen = 0;
     e5c:	e3023088 	movw	r3, #8328	; 0x2088
     e60:	e3403000 	movt	r3, #0
     e64:	e3a02000 	mov	r2, #0
     e68:	e5832004 	str	r2, [r3, #4]
	inprpm.iOne = 0;
     e6c:	e3023088 	movw	r3, #8328	; 0x2088
     e70:	e3403000 	movt	r3, #0
     e74:	e3a02000 	mov	r2, #0
     e78:	e5832008 	str	r2, [r3, #8]
	inprpm.iTotal = 0;
     e7c:	e3023088 	movw	r3, #8328	; 0x2088
     e80:	e3403000 	movt	r3, #0
     e84:	e3a02000 	mov	r2, #0
     e88:	e583200c 	str	r2, [r3, #12]

	inprpm.cHundred = ' ';
     e8c:	e3023088 	movw	r3, #8328	; 0x2088
     e90:	e3403000 	movt	r3, #0
     e94:	e3a02020 	mov	r2, #32
     e98:	e5c32010 	strb	r2, [r3, #16]
	inprpm.cTen = ' ';
     e9c:	e3023088 	movw	r3, #8328	; 0x2088
     ea0:	e3403000 	movt	r3, #0
     ea4:	e3a02020 	mov	r2, #32
     ea8:	e5c32011 	strb	r2, [r3, #17]
	inprpm.cOne = ' ';
     eac:	e3023088 	movw	r3, #8328	; 0x2088
     eb0:	e3403000 	movt	r3, #0
     eb4:	e3a02020 	mov	r2, #32
     eb8:	e5c32012 	strb	r2, [r3, #18]
	inprpm.cTotal[0] = ' ';
     ebc:	e3023088 	movw	r3, #8328	; 0x2088
     ec0:	e3403000 	movt	r3, #0
     ec4:	e3a02020 	mov	r2, #32
     ec8:	e5c32013 	strb	r2, [r3, #19]
	inprpm.cTotal[1] = ' ';
     ecc:	e3023088 	movw	r3, #8328	; 0x2088
     ed0:	e3403000 	movt	r3, #0
     ed4:	e3a02020 	mov	r2, #32
     ed8:	e5c32014 	strb	r2, [r3, #20]
	inprpm.cTotal[2] = ' ';
     edc:	e3023088 	movw	r3, #8328	; 0x2088
     ee0:	e3403000 	movt	r3, #0
     ee4:	e3a02020 	mov	r2, #32
     ee8:	e5c32015 	strb	r2, [r3, #21]

	setrpm = inprpm;
     eec:	e30220a0 	movw	r2, #8352	; 0x20a0
     ef0:	e3402000 	movt	r2, #0
     ef4:	e3023088 	movw	r3, #8328	; 0x2088
     ef8:	e3403000 	movt	r3, #0
     efc:	e1a0c002 	mov	r12, r2
     f00:	e1a04003 	mov	r4, r3
     f04:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
     f08:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
     f0c:	e8940003 	ldm	r4, {r0, r1}
     f10:	e88c0003 	stm	r12, {r0, r1}
	actrpm = inprpm;
     f14:	e30220b8 	movw	r2, #8376	; 0x20b8
     f18:	e3402000 	movt	r2, #0
     f1c:	e3023088 	movw	r3, #8328	; 0x2088
     f20:	e3403000 	movt	r3, #0
     f24:	e1a0c002 	mov	r12, r2
     f28:	e1a04003 	mov	r4, r3
     f2c:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
     f30:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
     f34:	e8940003 	ldm	r4, {r0, r1}
     f38:	e88c0003 	stm	r12, {r0, r1}
}
     f3c:	e24bd004 	sub	sp, r11, #4
     f40:	e8bd0810 	pop	{r4, r11}
     f44:	e12fff1e 	bx	lr

00000f48 <GetCharacter>:
char GetCharacter(int key)
{
     f48:	e92d0810 	push	{r4, r11}
     f4c:	e28db004 	add	r11, sp, #4
     f50:	e24dd038 	sub	sp, sp, #56	; 0x38
     f54:	e50b0038 	str	r0, [r11, #-56]	; 0xffffffc8
	const int array[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
     f58:	e3013b80 	movw	r3, #7040	; 0x1b80
     f5c:	e3403000 	movt	r3, #0
     f60:	e24bc030 	sub	r12, r11, #48	; 0x30
     f64:	e1a04003 	mov	r4, r3
     f68:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
     f6c:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
     f70:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
     f74:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
     f78:	e8940003 	ldm	r4, {r0, r1}
     f7c:	e88c0003 	stm	r12, {r0, r1}
	char ckey = array[key];
     f80:	e51b2038 	ldr	r2, [r11, #-56]	; 0xffffffc8
     f84:	e3e0302b 	mvn	r3, #43	; 0x2b
     f88:	e1a02102 	lsl	r2, r2, #2
     f8c:	e24b1004 	sub	r1, r11, #4
     f90:	e0812002 	add	r2, r1, r2
     f94:	e0823003 	add	r3, r2, r3
     f98:	e5933000 	ldr	r3, [r3]
     f9c:	e54b3005 	strb	r3, [r11, #-5]
	return ckey;
     fa0:	e55b3005 	ldrb	r3, [r11, #-5]
}
     fa4:	e1a00003 	mov	r0, r3
     fa8:	e24bd004 	sub	sp, r11, #4
     fac:	e8bd0810 	pop	{r4, r11}
     fb0:	e12fff1e 	bx	lr

00000fb4 <Clear_inprpm>:

void Clear_inprpm(void)
{
     fb4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     fb8:	e28db000 	add	r11, sp, #0
	inprpm.iHundred = 0;
     fbc:	e3023088 	movw	r3, #8328	; 0x2088
     fc0:	e3403000 	movt	r3, #0
     fc4:	e3a02000 	mov	r2, #0
     fc8:	e5832000 	str	r2, [r3]
	inprpm.iTen = 0;
     fcc:	e3023088 	movw	r3, #8328	; 0x2088
     fd0:	e3403000 	movt	r3, #0
     fd4:	e3a02000 	mov	r2, #0
     fd8:	e5832004 	str	r2, [r3, #4]
	inprpm.iOne = 0;
     fdc:	e3023088 	movw	r3, #8328	; 0x2088
     fe0:	e3403000 	movt	r3, #0
     fe4:	e3a02000 	mov	r2, #0
     fe8:	e5832008 	str	r2, [r3, #8]
	inprpm.iTotal = 0;
     fec:	e3023088 	movw	r3, #8328	; 0x2088
     ff0:	e3403000 	movt	r3, #0
     ff4:	e3a02000 	mov	r2, #0
     ff8:	e583200c 	str	r2, [r3, #12]

	inprpm.cHundred = ' ';
     ffc:	e3023088 	movw	r3, #8328	; 0x2088
    1000:	e3403000 	movt	r3, #0
    1004:	e3a02020 	mov	r2, #32
    1008:	e5c32010 	strb	r2, [r3, #16]
	inprpm.cTen = ' ';
    100c:	e3023088 	movw	r3, #8328	; 0x2088
    1010:	e3403000 	movt	r3, #0
    1014:	e3a02020 	mov	r2, #32
    1018:	e5c32011 	strb	r2, [r3, #17]
	inprpm.cOne = ' ';
    101c:	e3023088 	movw	r3, #8328	; 0x2088
    1020:	e3403000 	movt	r3, #0
    1024:	e3a02020 	mov	r2, #32
    1028:	e5c32012 	strb	r2, [r3, #18]
	inprpm.cTotal[0] = ' ';
    102c:	e3023088 	movw	r3, #8328	; 0x2088
    1030:	e3403000 	movt	r3, #0
    1034:	e3a02020 	mov	r2, #32
    1038:	e5c32013 	strb	r2, [r3, #19]
	inprpm.cTotal[1] = ' ';
    103c:	e3023088 	movw	r3, #8328	; 0x2088
    1040:	e3403000 	movt	r3, #0
    1044:	e3a02020 	mov	r2, #32
    1048:	e5c32014 	strb	r2, [r3, #20]
	inprpm.cTotal[2] = ' ';
    104c:	e3023088 	movw	r3, #8328	; 0x2088
    1050:	e3403000 	movt	r3, #0
    1054:	e3a02020 	mov	r2, #32
    1058:	e5c32015 	strb	r2, [r3, #21]
}
    105c:	e28bd000 	add	sp, r11, #0
    1060:	e8bd0800 	ldmfd	sp!, {r11}
    1064:	e12fff1e 	bx	lr

00001068 <Total_inprpm>:

void Total_inprpm(void)
{
    1068:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    106c:	e28db000 	add	r11, sp, #0
    1070:	e24dd00c 	sub	sp, sp, #12
	int hundred = inprpm.iHundred;
    1074:	e3023088 	movw	r3, #8328	; 0x2088
    1078:	e3403000 	movt	r3, #0
    107c:	e5933000 	ldr	r3, [r3]
    1080:	e50b3008 	str	r3, [r11, #-8]
	int ten = inprpm.iTen;
    1084:	e3023088 	movw	r3, #8328	; 0x2088
    1088:	e3403000 	movt	r3, #0
    108c:	e5933004 	ldr	r3, [r3, #4]
    1090:	e50b300c 	str	r3, [r11, #-12]

	hundred = inprpm.iHundred * 100;
    1094:	e3023088 	movw	r3, #8328	; 0x2088
    1098:	e3403000 	movt	r3, #0
    109c:	e5933000 	ldr	r3, [r3]
    10a0:	e3a02064 	mov	r2, #100	; 0x64
    10a4:	e0030392 	mul	r3, r2, r3
    10a8:	e50b3008 	str	r3, [r11, #-8]
	ten = inprpm.iTen * 10;
    10ac:	e3023088 	movw	r3, #8328	; 0x2088
    10b0:	e3403000 	movt	r3, #0
    10b4:	e5932004 	ldr	r2, [r3, #4]
    10b8:	e1a03002 	mov	r3, r2
    10bc:	e1a03103 	lsl	r3, r3, #2
    10c0:	e0833002 	add	r3, r3, r2
    10c4:	e1a03083 	lsl	r3, r3, #1
    10c8:	e50b300c 	str	r3, [r11, #-12]
	inprpm.iTotal = hundred + ten + inprpm.iOne;
    10cc:	e51b2008 	ldr	r2, [r11, #-8]
    10d0:	e51b300c 	ldr	r3, [r11, #-12]
    10d4:	e0822003 	add	r2, r2, r3
    10d8:	e3023088 	movw	r3, #8328	; 0x2088
    10dc:	e3403000 	movt	r3, #0
    10e0:	e5933008 	ldr	r3, [r3, #8]
    10e4:	e0822003 	add	r2, r2, r3
    10e8:	e3023088 	movw	r3, #8328	; 0x2088
    10ec:	e3403000 	movt	r3, #0
    10f0:	e583200c 	str	r2, [r3, #12]
    10f4:	e28bd000 	add	sp, r11, #0
    10f8:	e8bd0800 	ldmfd	sp!, {r11}
    10fc:	e12fff1e 	bx	lr

00001100 <__cs3_isr_irq>:
#include "interrupt_id.h"
#include "address_map.h"

// Define the IRQ exception handler
void __attribute__ ((interrupt)) __cs3_isr_irq (void)
{
    1100:	e24ee004 	sub	lr, lr, #4
    1104:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
    1108:	e28db018 	add	r11, sp, #24
    110c:	e24dd00c 	sub	sp, sp, #12
    // Read the ICCIAR from the CPU interface in the GIC
    int address;
    int interrupt_ID;
    
    address = MPCORE_GIC_CPUIF + ICCIAR;
    1110:	e30c310c 	movw	r3, #49420	; 0xc10c
    1114:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1118:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
    interrupt_ID = *(int *)address;
    111c:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    1120:	e5933000 	ldr	r3, [r3]
    1124:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
*/

    //if(interrupt_ID == MPCORE_PRIV_TIMER_IRQ)
       // TimerISR();

    if(interrupt_ID == HPS_TIMER0_IRQ)
    1128:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    112c:	e35300c7 	cmp	r3, #199	; 0xc7
    1130:	1a000008 	bne	1158 <__cs3_isr_irq+0x58>
        HPSTimer0ISR();  
    1134:	ebfffc7a 	bl	324 <HPSTimer0ISR>
    else
        while (1);                          // if unexpected, then stay here

    // Write to the End of Interrupt Register (ICCEOIR)
    address = MPCORE_GIC_CPUIF + ICCEOIR;
    1138:	e30c3110 	movw	r3, #49424	; 0xc110
    113c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1140:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
    *(int *)address = interrupt_ID;
    1144:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    1148:	e51b2024 	ldr	r2, [r11, #-36]	; 0xffffffdc
    114c:	e5832000 	str	r2, [r3]

    return;
    1150:	e1a00000 	nop			; (mov r0, r0)
    1154:	ea000000 	b	115c <__cs3_isr_irq+0x5c>
       // TimerISR();

    if(interrupt_ID == HPS_TIMER0_IRQ)
        HPSTimer0ISR();  
    else
        while (1);                          // if unexpected, then stay here
    1158:	eafffffe 	b	1158 <__cs3_isr_irq+0x58>
    // Write to the End of Interrupt Register (ICCEOIR)
    address = MPCORE_GIC_CPUIF + ICCEOIR;
    *(int *)address = interrupt_ID;

    return;
} 
    115c:	e24bd018 	sub	sp, r11, #24
    1160:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

00001164 <__cs3_reset>:

// Define the remaining exception handlers
void __attribute__ ((interrupt)) __cs3_reset (void)
{
    1164:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1168:	e28db000 	add	r11, sp, #0
    while(1);
    116c:	eafffffe 	b	116c <__cs3_reset+0x8>

00001170 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void)
{
    1170:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1174:	e28db000 	add	r11, sp, #0
    while(1);
    1178:	eafffffe 	b	1178 <__cs3_isr_undef+0x8>

0000117c <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void)
{
    117c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1180:	e28db000 	add	r11, sp, #0
    while(1);
    1184:	eafffffe 	b	1184 <__cs3_isr_swi+0x8>

00001188 <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void)
{
    1188:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    118c:	e28db000 	add	r11, sp, #0
    while(1);
    1190:	eafffffe 	b	1190 <__cs3_isr_pabort+0x8>

00001194 <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void)
{
    1194:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1198:	e28db000 	add	r11, sp, #0
    while(1);
    119c:	eafffffe 	b	119c <__cs3_isr_dabort+0x8>

000011a0 <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void)
{
    11a0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    11a4:	e28db000 	add	r11, sp, #0
    while(1);
    11a8:	eafffffe 	b	11a8 <__cs3_isr_fiq+0x8>

000011ac <disable_A9_interrupts>:
}

void disable_A9_interrupts(void)
{
    11ac:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    11b0:	e28db000 	add	r11, sp, #0
    11b4:	e24dd00c 	sub	sp, sp, #12
    int status = 0b11010011;
    11b8:	e3a030d3 	mov	r3, #211	; 0xd3
    11bc:	e50b3008 	str	r3, [r11, #-8]
    asm("msr cpsr, %[ps]" : : [ps]"r"(status));
    11c0:	e51b3008 	ldr	r3, [r11, #-8]
    11c4:	e129f003 	msr	CPSR_fc, r3
}
    11c8:	e28bd000 	add	sp, r11, #0
    11cc:	e8bd0800 	ldmfd	sp!, {r11}
    11d0:	e12fff1e 	bx	lr

000011d4 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack(void)
{
    11d4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    11d8:	e28db000 	add	r11, sp, #0
    11dc:	e24dd00c 	sub	sp, sp, #12
    int stack, mode;
    stack = A9_ONCHIP_END - 7;      // top of A9 onchip memory, aligned to 8 bytes
    11e0:	e3e03007 	mvn	r3, #7
    11e4:	e50b3008 	str	r3, [r11, #-8]
    /* change processor to IRQ mode with interrupts disabled */
    mode = INT_DISABLE | IRQ_MODE;
    11e8:	e3a030d2 	mov	r3, #210	; 0xd2
    11ec:	e50b300c 	str	r3, [r11, #-12]
    asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
    11f0:	e51b300c 	ldr	r3, [r11, #-12]
    11f4:	e129f003 	msr	CPSR_fc, r3
    /* set banked stack pointer */
    asm("mov sp, %[ps]" : : [ps] "r" (stack));
    11f8:	e51b3008 	ldr	r3, [r11, #-8]
    11fc:	e1a0d003 	mov	sp, r3

    /* go back to SVC mode before executing subroutine return! */
    mode = INT_DISABLE | SVC_MODE;
    1200:	e3a030d3 	mov	r3, #211	; 0xd3
    1204:	e50b300c 	str	r3, [r11, #-12]
    asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
    1208:	e51b300c 	ldr	r3, [r11, #-12]
    120c:	e129f003 	msr	CPSR_fc, r3
}
    1210:	e28bd000 	add	sp, r11, #0
    1214:	e8bd0800 	ldmfd	sp!, {r11}
    1218:	e12fff1e 	bx	lr

0000121c <enable_A9_interrupts>:

void enable_A9_interrupts(void)
{
    121c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1220:	e28db000 	add	r11, sp, #0
    1224:	e24dd00c 	sub	sp, sp, #12
    int status = SVC_MODE | INT_ENABLE;
    1228:	e3a03053 	mov	r3, #83	; 0x53
    122c:	e50b3008 	str	r3, [r11, #-8]
    asm("msr cpsr, %[ps]" : : [ps]"r"(status));
    1230:	e51b3008 	ldr	r3, [r11, #-8]
    1234:	e129f003 	msr	CPSR_fc, r3
}
    1238:	e28bd000 	add	sp, r11, #0
    123c:	e8bd0800 	ldmfd	sp!, {r11}
    1240:	e12fff1e 	bx	lr

00001244 <config_GIC>:

void config_GIC(void) // STEP 3 IN SECTION 3.1 OF USING THE ARM GENERIC INTERRUPT CONTROLLER
{
    1244:	e92d4800 	push	{r11, lr}
    1248:	e28db004 	add	r11, sp, #4
    124c:	e24dd008 	sub	sp, sp, #8
    int address;
    // config_interrupt (KEYS_IRQ, CPU0);
    // config_interrupt(MPCORE_PRIV_TIMER_IRQ, CPU0);
    config_interrupt (PS2_IRQ, CPU0);
    1250:	e3a0004f 	mov	r0, #79	; 0x4f
    1254:	e3a01001 	mov	r1, #1
    1258:	eb000016 	bl	12b8 <config_interrupt>
    config_interrupt (HPS_TIMER0_IRQ, CPU0);
    125c:	e3a000c7 	mov	r0, #199	; 0xc7
    1260:	e3a01001 	mov	r1, #1
    1264:	eb000013 	bl	12b8 <config_interrupt>
    
    // Set Interrupt Priority Mask Register (ICCPMR). Enable interrupts of all priorities 
    address = MPCORE_GIC_CPUIF + ICCPMR;
    1268:	e30c3104 	movw	r3, #49412	; 0xc104
    126c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1270:	e50b3008 	str	r3, [r11, #-8]
    *(int *) address = 0xFFFF;       
    1274:	e51b3008 	ldr	r3, [r11, #-8]
    1278:	e30f2fff 	movw	r2, #65535	; 0xffff
    127c:	e5832000 	str	r2, [r3]

    // Set CPU Interface Control Register (ICCICR). Enable signaling of interrupts
    address = MPCORE_GIC_CPUIF + ICCICR;
    1280:	e3a03cc1 	mov	r3, #49408	; 0xc100
    1284:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1288:	e50b3008 	str	r3, [r11, #-8]
    *(int *) address = 1;       
    128c:	e51b3008 	ldr	r3, [r11, #-8]
    1290:	e3a02001 	mov	r2, #1
    1294:	e5832000 	str	r2, [r3]

    // Configure the Distributor Control Register (ICDDCR) to send pending interrupts to CPUs 
    address = MPCORE_GIC_DIST + ICDDCR;
    1298:	e3a03a0d 	mov	r3, #53248	; 0xd000
    129c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    12a0:	e50b3008 	str	r3, [r11, #-8]
    *(int *) address = 1;          
    12a4:	e51b3008 	ldr	r3, [r11, #-8]
    12a8:	e3a02001 	mov	r2, #1
    12ac:	e5832000 	str	r2, [r3]
}
    12b0:	e24bd004 	sub	sp, r11, #4
    12b4:	e8bd8800 	pop	{r11, pc}

000012b8 <config_interrupt>:

void config_interrupt (int N, int CPU_target)
{
    12b8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    12bc:	e28db000 	add	r11, sp, #0
    12c0:	e24dd01c 	sub	sp, sp, #28
    12c4:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
    12c8:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
    int reg_offset, index, value, address;
    
    /* Configure the Interrupt Set-Enable Registers (ICDISERn). 
     * reg_offset = (integer_div(N / 32) * 4
     * value = 1 << (N mod 32) */
    reg_offset = (N >> 3) & 0xFFFFFFFC; 
    12cc:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    12d0:	e1a031c3 	asr	r3, r3, #3
    12d4:	e3c33003 	bic	r3, r3, #3
    12d8:	e50b3008 	str	r3, [r11, #-8]
    index = N & 0x1F;
    12dc:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    12e0:	e203301f 	and	r3, r3, #31
    12e4:	e50b300c 	str	r3, [r11, #-12]
    value = 0x1 << index;
    12e8:	e3a02001 	mov	r2, #1
    12ec:	e51b300c 	ldr	r3, [r11, #-12]
    12f0:	e1a03312 	lsl	r3, r2, r3
    12f4:	e50b3010 	str	r3, [r11, #-16]
    address = MPCORE_GIC_DIST + ICDISER + reg_offset;
    12f8:	e51b3008 	ldr	r3, [r11, #-8]
    12fc:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
    1300:	e2433c03 	sub	r3, r3, #768	; 0x300
    1304:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    /* Now that we know the register address and value, set the appropriate bit */
   *(int *)address |= value;
    1308:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    130c:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    1310:	e5921000 	ldr	r1, [r2]
    1314:	e51b2010 	ldr	r2, [r11, #-16]
    1318:	e1812002 	orr	r2, r1, r2
    131c:	e5832000 	str	r2, [r3]

    /* Configure the Interrupt Processor Targets Register (ICDIPTRn)
     * reg_offset = integer_div(N / 4) * 4
     * index = N mod 4 */
    reg_offset = (N & 0xFFFFFFFC);
    1320:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1324:	e3c33003 	bic	r3, r3, #3
    1328:	e50b3008 	str	r3, [r11, #-8]
    index = N & 0x3;
    132c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1330:	e2033003 	and	r3, r3, #3
    1334:	e50b300c 	str	r3, [r11, #-12]
    address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
    1338:	e51b2008 	ldr	r2, [r11, #-8]
    133c:	e51b300c 	ldr	r3, [r11, #-12]
    1340:	e0823003 	add	r3, r2, r3
    1344:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
    1348:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    /* Now that we know the register address and value, write to (only) the appropriate byte */
    *(char *)address = (char) CPU_target;
    134c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    1350:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    1354:	e6ef2072 	uxtb	r2, r2
    1358:	e5c32000 	strb	r2, [r3]
}
    135c:	e28bd000 	add	sp, r11, #0
    1360:	e8bd0800 	ldmfd	sp!, {r11}
    1364:	e12fff1e 	bx	lr

00001368 <configInterupt>:

void configInterupt()
{
    1368:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    136c:	e28db000 	add	r11, sp, #0
    1370:	e24dd00c 	sub	sp, sp, #12
    volatile int* timerPtr = (int*) MPCORE_PRIV_TIMER;      // timer base address
    1374:	e3a03cc6 	mov	r3, #50688	; 0xc600
    1378:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    137c:	e50b3008 	str	r3, [r11, #-8]
    volatile int* HPSTimer0Ptr = (int*) HPS_TIMER0_BASE;
    1380:	e3a03902 	mov	r3, #32768	; 0x8000
    1384:	e34f3fc0 	movt	r3, #65472	; 0xffc0
    1388:	e50b300c 	str	r3, [r11, #-12]

    *(timerPtr) = 2000;             // Interrupt every 0.001s
    138c:	e51b3008 	ldr	r3, [r11, #-8]
    1390:	e3a02e7d 	mov	r2, #2000	; 0x7d0
    1394:	e5832000 	str	r2, [r3]
    *(timerPtr + 2) |= (100 << 8);  // Prescale 100
    1398:	e51b3008 	ldr	r3, [r11, #-8]
    139c:	e2833008 	add	r3, r3, #8
    13a0:	e51b2008 	ldr	r2, [r11, #-8]
    13a4:	e2822008 	add	r2, r2, #8
    13a8:	e5922000 	ldr	r2, [r2]
    13ac:	e3822b19 	orr	r2, r2, #25600	; 0x6400
    13b0:	e5832000 	str	r2, [r3]
    *(timerPtr + 2) |= 0x07;        // Turn on I, A, and E
    13b4:	e51b3008 	ldr	r3, [r11, #-8]
    13b8:	e2833008 	add	r3, r3, #8
    13bc:	e51b2008 	ldr	r2, [r11, #-8]
    13c0:	e2822008 	add	r2, r2, #8
    13c4:	e5922000 	ldr	r2, [r2]
    13c8:	e3822007 	orr	r2, r2, #7
    13cc:	e5832000 	str	r2, [r3]

    *(HPSTimer0Ptr + 2) &= ~(1 << 0);    // E = 0
    13d0:	e51b300c 	ldr	r3, [r11, #-12]
    13d4:	e2833008 	add	r3, r3, #8
    13d8:	e51b200c 	ldr	r2, [r11, #-12]
    13dc:	e2822008 	add	r2, r2, #8
    13e0:	e5922000 	ldr	r2, [r2]
    13e4:	e3c22001 	bic	r2, r2, #1
    13e8:	e5832000 	str	r2, [r3]
    *(HPSTimer0Ptr) = 50000000;         // load value
    13ec:	e51b200c 	ldr	r2, [r11, #-12]
    13f0:	e30f3080 	movw	r3, #61568	; 0xf080
    13f4:	e34032fa 	movt	r3, #762	; 0x2fa
    13f8:	e5823000 	str	r3, [r2]
    *(HPSTimer0Ptr + 2) |= (1 << 1);     // M = 1
    13fc:	e51b300c 	ldr	r3, [r11, #-12]
    1400:	e2833008 	add	r3, r3, #8
    1404:	e51b200c 	ldr	r2, [r11, #-12]
    1408:	e2822008 	add	r2, r2, #8
    140c:	e5922000 	ldr	r2, [r2]
    1410:	e3822002 	orr	r2, r2, #2
    1414:	e5832000 	str	r2, [r3]
    *(HPSTimer0Ptr + 2) |= (1 << 0);     // E = 1
    1418:	e51b300c 	ldr	r3, [r11, #-12]
    141c:	e2833008 	add	r3, r3, #8
    1420:	e51b200c 	ldr	r2, [r11, #-12]
    1424:	e2822008 	add	r2, r2, #8
    1428:	e5922000 	ldr	r2, [r2]
    142c:	e3822001 	orr	r2, r2, #1
    1430:	e5832000 	str	r2, [r3]
    *(HPSTimer0Ptr + 2) &= ~(1 << 2);    // I = 0 Active low
    1434:	e51b300c 	ldr	r3, [r11, #-12]
    1438:	e2833008 	add	r3, r3, #8
    143c:	e51b200c 	ldr	r2, [r11, #-12]
    1440:	e2822008 	add	r2, r2, #8
    1444:	e5922000 	ldr	r2, [r2]
    1448:	e3c22004 	bic	r2, r2, #4
    144c:	e5832000 	str	r2, [r3]

//  *(KEY_ptr + 2) = 0x01;       // enable interrupts for KEY0
}
    1450:	e28bd000 	add	sp, r11, #0
    1454:	e8bd0800 	ldmfd	sp!, {r11}
    1458:	e12fff1e 	bx	lr

0000145c <put_jtag>:
#include "JTAG_UART.h"
#include "address_map.h"


void put_jtag( char c )
{
    145c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1460:	e28db000 	add	r11, sp, #0
    1464:	e24dd014 	sub	sp, sp, #20
    1468:	e1a03000 	mov	r3, r0
    146c:	e54b300d 	strb	r3, [r11, #-13]
    volatile int * JTAG_UART_ptr    = (int *) JTAG_UART_BASE;   // JTAG UART address
    1470:	e3a03a01 	mov	r3, #4096	; 0x1000
    1474:	e34f3f20 	movt	r3, #65312	; 0xff20
    1478:	e50b3008 	str	r3, [r11, #-8]

    int control;
    control = *(JTAG_UART_ptr + 1);     // read the JTAG_UART control register
    147c:	e51b3008 	ldr	r3, [r11, #-8]
    1480:	e5933004 	ldr	r3, [r3, #4]
    1484:	e50b300c 	str	r3, [r11, #-12]
    if (control & 0xFFFF0000)               // if space, echo character, else ignore 
    1488:	e51b300c 	ldr	r3, [r11, #-12]
    148c:	e1a03823 	lsr	r3, r3, #16
    1490:	e1a03803 	lsl	r3, r3, #16
    1494:	e3530000 	cmp	r3, #0
    1498:	0a000002 	beq	14a8 <put_jtag+0x4c>
        *(JTAG_UART_ptr) = c;
    149c:	e55b200d 	ldrb	r2, [r11, #-13]
    14a0:	e51b3008 	ldr	r3, [r11, #-8]
    14a4:	e5832000 	str	r2, [r3]
}
    14a8:	e28bd000 	add	sp, r11, #0
    14ac:	e8bd0800 	ldmfd	sp!, {r11}
    14b0:	e12fff1e 	bx	lr

000014b4 <get_jtag>:

char get_jtag( void )
{
    14b4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    14b8:	e28db000 	add	r11, sp, #0
    14bc:	e24dd00c 	sub	sp, sp, #12
    volatile int * JTAG_UART_ptr    = (int *) JTAG_UART_BASE;   // JTAG UART address
    14c0:	e3a03a01 	mov	r3, #4096	; 0x1000
    14c4:	e34f3f20 	movt	r3, #65312	; 0xff20
    14c8:	e50b3008 	str	r3, [r11, #-8]

    int data;
    data = *(JTAG_UART_ptr);                // read the JTAG_UART data register
    14cc:	e51b3008 	ldr	r3, [r11, #-8]
    14d0:	e5933000 	ldr	r3, [r3]
    14d4:	e50b300c 	str	r3, [r11, #-12]
    if (data & 0x00008000)                  // check RVALID to see if there is new data
    14d8:	e51b300c 	ldr	r3, [r11, #-12]
    14dc:	e2033902 	and	r3, r3, #32768	; 0x8000
    14e0:	e3530000 	cmp	r3, #0
    14e4:	0a000002 	beq	14f4 <get_jtag+0x40>
        return ((char) data & 0xFF);
    14e8:	e51b300c 	ldr	r3, [r11, #-12]
    14ec:	e6ef3073 	uxtb	r3, r3
    14f0:	ea000000 	b	14f8 <get_jtag+0x44>
    else
        return ('\0');
    14f4:	e3a03000 	mov	r3, #0
}
    14f8:	e1a00003 	mov	r0, r3
    14fc:	e28bd000 	add	sp, r11, #0
    1500:	e8bd0800 	ldmfd	sp!, {r11}
    1504:	e12fff1e 	bx	lr

00001508 <GetDigit>:

char GetDigit(unsigned char value)
{
    1508:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    150c:	e28db000 	add	r11, sp, #0
    1510:	e24dd01c 	sub	sp, sp, #28
    1514:	e1a03000 	mov	r3, r0
    1518:	e54b3015 	strb	r3, [r11, #-21]	; 0xffffffeb
    char digits[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
    151c:	e3013ba8 	movw	r3, #7080	; 0x1ba8
    1520:	e3403000 	movt	r3, #0
    1524:	e24bc014 	sub	r12, r11, #20
    1528:	e5930000 	ldr	r0, [r3]
    152c:	e5931004 	ldr	r1, [r3, #4]
    1530:	e5932008 	ldr	r2, [r3, #8]
    1534:	e593300c 	ldr	r3, [r3, #12]
    1538:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}

    return digits[value];
    153c:	e55b2015 	ldrb	r2, [r11, #-21]	; 0xffffffeb
    1540:	e3e0300f 	mvn	r3, #15
    1544:	e24b1004 	sub	r1, r11, #4
    1548:	e0812002 	add	r2, r1, r2
    154c:	e0823003 	add	r3, r2, r3
    1550:	e5d33000 	ldrb	r3, [r3]
}
    1554:	e1a00003 	mov	r0, r3
    1558:	e28bd000 	add	sp, r11, #0
    155c:	e8bd0800 	ldmfd	sp!, {r11}
    1560:	e12fff1e 	bx	lr

00001564 <atexit>:
    1564:	e1a01000 	mov	r1, r0
    1568:	e3a00000 	mov	r0, #0
    156c:	e92d4008 	push	{r3, lr}
    1570:	e1a02000 	mov	r2, r0
    1574:	e1a03000 	mov	r3, r0
    1578:	eb00005b 	bl	16ec <__register_exitproc>
    157c:	e8bd4008 	pop	{r3, lr}
    1580:	e12fff1e 	bx	lr

00001584 <exit>:
    1584:	e92d4008 	push	{r3, lr}
    1588:	e3a01000 	mov	r1, #0
    158c:	e1a04000 	mov	r4, r0
    1590:	eb000092 	bl	17e0 <__call_exitprocs>
    1594:	e59f3018 	ldr	r3, [pc, #24]	; 15b4 <exit+0x30>
    1598:	e5930000 	ldr	r0, [r3]
    159c:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    15a0:	e3530000 	cmp	r3, #0
    15a4:	11a0e00f 	movne	lr, pc
    15a8:	112fff13 	bxne	r3
    15ac:	e1a00004 	mov	r0, r4
    15b0:	eb000116 	bl	1a10 <_exit>
    15b4:	00001bb8 	.word	0x00001bb8

000015b8 <memset>:
    15b8:	e3520003 	cmp	r2, #3
    15bc:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    15c0:	e20110ff 	and	r1, r1, #255	; 0xff
    15c4:	8a000008 	bhi	15ec <memset+0x34>
    15c8:	e3520000 	cmp	r2, #0
    15cc:	0a000004 	beq	15e4 <memset+0x2c>
    15d0:	e1a03000 	mov	r3, r0
    15d4:	e0822000 	add	r2, r2, r0
    15d8:	e4c31001 	strb	r1, [r3], #1
    15dc:	e1530002 	cmp	r3, r2
    15e0:	1afffffc 	bne	15d8 <memset+0x20>
    15e4:	e8bd0010 	ldmfd	sp!, {r4}
    15e8:	e12fff1e 	bx	lr
    15ec:	e3100003 	tst	r0, #3
    15f0:	e0802002 	add	r2, r0, r2
    15f4:	0a000007 	beq	1618 <memset+0x60>
    15f8:	e280c001 	add	r12, r0, #1
    15fc:	e20c3003 	and	r3, r12, #3
    1600:	e3530000 	cmp	r3, #0
    1604:	e54c1001 	strb	r1, [r12, #-1]
    1608:	e1a0300c 	mov	r3, r12
    160c:	e28cc001 	add	r12, r12, #1
    1610:	1afffff9 	bne	15fc <memset+0x44>
    1614:	ea000000 	b	161c <memset+0x64>
    1618:	e1a03000 	mov	r3, r0
    161c:	e0634002 	rsb	r4, r3, r2
    1620:	e081c401 	add	r12, r1, r1, lsl #8
    1624:	e354003f 	cmp	r4, #63	; 0x3f
    1628:	e08cc80c 	add	r12, r12, r12, lsl #16
    162c:	da00001a 	ble	169c <memset+0xe4>
    1630:	e583c000 	str	r12, [r3]
    1634:	e583c004 	str	r12, [r3, #4]
    1638:	e583c008 	str	r12, [r3, #8]
    163c:	e583c00c 	str	r12, [r3, #12]
    1640:	e583c010 	str	r12, [r3, #16]
    1644:	e583c014 	str	r12, [r3, #20]
    1648:	e583c018 	str	r12, [r3, #24]
    164c:	e583c01c 	str	r12, [r3, #28]
    1650:	e583c020 	str	r12, [r3, #32]
    1654:	e583c024 	str	r12, [r3, #36]	; 0x24
    1658:	e583c028 	str	r12, [r3, #40]	; 0x28
    165c:	e583c02c 	str	r12, [r3, #44]	; 0x2c
    1660:	e583c030 	str	r12, [r3, #48]	; 0x30
    1664:	e583c034 	str	r12, [r3, #52]	; 0x34
    1668:	e583c038 	str	r12, [r3, #56]	; 0x38
    166c:	e583c03c 	str	r12, [r3, #60]	; 0x3c
    1670:	e2833040 	add	r3, r3, #64	; 0x40
    1674:	e0634002 	rsb	r4, r3, r2
    1678:	e354003f 	cmp	r4, #63	; 0x3f
    167c:	caffffeb 	bgt	1630 <memset+0x78>
    1680:	ea000005 	b	169c <memset+0xe4>
    1684:	e583c000 	str	r12, [r3]
    1688:	e583c004 	str	r12, [r3, #4]
    168c:	e583c008 	str	r12, [r3, #8]
    1690:	e583c00c 	str	r12, [r3, #12]
    1694:	e2833010 	add	r3, r3, #16
    1698:	e0634002 	rsb	r4, r3, r2
    169c:	e354000f 	cmp	r4, #15
    16a0:	cafffff7 	bgt	1684 <memset+0xcc>
    16a4:	e3540003 	cmp	r4, #3
    16a8:	da000006 	ble	16c8 <memset+0x110>
    16ac:	e2834004 	add	r4, r3, #4
    16b0:	e0643002 	rsb	r3, r4, r2
    16b4:	e3530003 	cmp	r3, #3
    16b8:	e504c004 	str	r12, [r4, #-4]
    16bc:	e1a03004 	mov	r3, r4
    16c0:	e2844004 	add	r4, r4, #4
    16c4:	cafffff9 	bgt	16b0 <memset+0xf8>
    16c8:	e1520003 	cmp	r2, r3
    16cc:	9affffc4 	bls	15e4 <memset+0x2c>
    16d0:	e2833001 	add	r3, r3, #1
    16d4:	e2822001 	add	r2, r2, #1
    16d8:	e5431001 	strb	r1, [r3, #-1]
    16dc:	e2833001 	add	r3, r3, #1
    16e0:	e1530002 	cmp	r3, r2
    16e4:	1afffffb 	bne	16d8 <memset+0x120>
    16e8:	eaffffbd 	b	15e4 <memset+0x2c>

000016ec <__register_exitproc>:
    16ec:	e59fc0e4 	ldr	r12, [pc, #228]	; 17d8 <__register_exitproc+0xec>
    16f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    16f4:	e59c4000 	ldr	r4, [r12]
    16f8:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    16fc:	e35c0000 	cmp	r12, #0
    1700:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    1704:	e59c5004 	ldr	r5, [r12, #4]
    1708:	0584c148 	streq	r12, [r4, #328]	; 0x148
    170c:	e355001f 	cmp	r5, #31
    1710:	e24dd010 	sub	sp, sp, #16
    1714:	e1a06000 	mov	r6, r0
    1718:	da000015 	ble	1774 <__register_exitproc+0x88>
    171c:	e59f00b8 	ldr	r0, [pc, #184]	; 17dc <__register_exitproc+0xf0>
    1720:	e3500000 	cmp	r0, #0
    1724:	1a000001 	bne	1730 <__register_exitproc+0x44>
    1728:	e3e00000 	mvn	r0, #0
    172c:	ea000018 	b	1794 <__register_exitproc+0xa8>
    1730:	e3a00e19 	mov	r0, #400	; 0x190
    1734:	e58d100c 	str	r1, [sp, #12]
    1738:	e58d2008 	str	r2, [sp, #8]
    173c:	e58d3004 	str	r3, [sp, #4]
    1740:	e320f000 	nop	{0}
    1744:	e250c000 	subs	r12, r0, #0
    1748:	e59d100c 	ldr	r1, [sp, #12]
    174c:	e59d2008 	ldr	r2, [sp, #8]
    1750:	e59d3004 	ldr	r3, [sp, #4]
    1754:	0afffff3 	beq	1728 <__register_exitproc+0x3c>
    1758:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    175c:	e3a00000 	mov	r0, #0
    1760:	e58c0004 	str	r0, [r12, #4]
    1764:	e58c5000 	str	r5, [r12]
    1768:	e584c148 	str	r12, [r4, #328]	; 0x148
    176c:	e58c0188 	str	r0, [r12, #392]	; 0x188
    1770:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    1774:	e3560000 	cmp	r6, #0
    1778:	e59c4004 	ldr	r4, [r12, #4]
    177c:	1a000007 	bne	17a0 <__register_exitproc+0xb4>
    1780:	e2843002 	add	r3, r4, #2
    1784:	e2844001 	add	r4, r4, #1
    1788:	e78c1103 	str	r1, [r12, r3, lsl #2]
    178c:	e58c4004 	str	r4, [r12, #4]
    1790:	e3a00000 	mov	r0, #0
    1794:	e28dd010 	add	sp, sp, #16
    1798:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    179c:	e12fff1e 	bx	lr
    17a0:	e3a00001 	mov	r0, #1
    17a4:	e1a00410 	lsl	r0, r0, r4
    17a8:	e08c8104 	add	r8, r12, r4, lsl #2
    17ac:	e3560002 	cmp	r6, #2
    17b0:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    17b4:	e5883108 	str	r3, [r8, #264]	; 0x108
    17b8:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    17bc:	e1877000 	orr	r7, r7, r0
    17c0:	01830000 	orreq	r0, r3, r0
    17c4:	e1a05008 	mov	r5, r8
    17c8:	e5882088 	str	r2, [r8, #136]	; 0x88
    17cc:	e58c7188 	str	r7, [r12, #392]	; 0x188
    17d0:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    17d4:	eaffffe9 	b	1780 <__register_exitproc+0x94>
    17d8:	00001bb8 	.word	0x00001bb8
    17dc:	00000000 	.word	0x00000000

000017e0 <__call_exitprocs>:
    17e0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    17e4:	e59f3168 	ldr	r3, [pc, #360]	; 1954 <__call_exitprocs+0x174>
    17e8:	e5933000 	ldr	r3, [r3]
    17ec:	e24dd014 	sub	sp, sp, #20
    17f0:	e58d3004 	str	r3, [sp, #4]
    17f4:	e2833f52 	add	r3, r3, #328	; 0x148
    17f8:	e58d0008 	str	r0, [sp, #8]
    17fc:	e58d300c 	str	r3, [sp, #12]
    1800:	e1a07001 	mov	r7, r1
    1804:	e3a08001 	mov	r8, #1
    1808:	e59d3004 	ldr	r3, [sp, #4]
    180c:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    1810:	e3560000 	cmp	r6, #0
    1814:	e59db00c 	ldr	r11, [sp, #12]
    1818:	0a000033 	beq	18ec <__call_exitprocs+0x10c>
    181c:	e5965004 	ldr	r5, [r6, #4]
    1820:	e2554001 	subs	r4, r5, #1
    1824:	5286a088 	addpl	r10, r6, #136	; 0x88
    1828:	5285501f 	addpl	r5, r5, #31
    182c:	508a5105 	addpl	r5, r10, r5, lsl #2
    1830:	5a000007 	bpl	1854 <__call_exitprocs+0x74>
    1834:	ea000029 	b	18e0 <__call_exitprocs+0x100>
    1838:	e5953000 	ldr	r3, [r5]
    183c:	e1530007 	cmp	r3, r7
    1840:	0a000005 	beq	185c <__call_exitprocs+0x7c>
    1844:	e2444001 	sub	r4, r4, #1
    1848:	e3740001 	cmn	r4, #1
    184c:	e2455004 	sub	r5, r5, #4
    1850:	0a000022 	beq	18e0 <__call_exitprocs+0x100>
    1854:	e3570000 	cmp	r7, #0
    1858:	1afffff6 	bne	1838 <__call_exitprocs+0x58>
    185c:	e5963004 	ldr	r3, [r6, #4]
    1860:	e06a2005 	rsb	r2, r10, r5
    1864:	e2433001 	sub	r3, r3, #1
    1868:	e0862002 	add	r2, r6, r2
    186c:	e1530004 	cmp	r3, r4
    1870:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    1874:	13a01000 	movne	r1, #0
    1878:	05864004 	streq	r4, [r6, #4]
    187c:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    1880:	e3530000 	cmp	r3, #0
    1884:	0affffee 	beq	1844 <__call_exitprocs+0x64>
    1888:	e1a02418 	lsl	r2, r8, r4
    188c:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    1890:	e1120001 	tst	r2, r1
    1894:	e5969004 	ldr	r9, [r6, #4]
    1898:	0a000016 	beq	18f8 <__call_exitprocs+0x118>
    189c:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    18a0:	e1120001 	tst	r2, r1
    18a4:	1a000016 	bne	1904 <__call_exitprocs+0x124>
    18a8:	e59d0008 	ldr	r0, [sp, #8]
    18ac:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    18b0:	e1a0e00f 	mov	lr, pc
    18b4:	e12fff13 	bx	r3
    18b8:	e5963004 	ldr	r3, [r6, #4]
    18bc:	e1530009 	cmp	r3, r9
    18c0:	1affffd0 	bne	1808 <__call_exitprocs+0x28>
    18c4:	e59b3000 	ldr	r3, [r11]
    18c8:	e1530006 	cmp	r3, r6
    18cc:	1affffcd 	bne	1808 <__call_exitprocs+0x28>
    18d0:	e2444001 	sub	r4, r4, #1
    18d4:	e3740001 	cmn	r4, #1
    18d8:	e2455004 	sub	r5, r5, #4
    18dc:	1affffdc 	bne	1854 <__call_exitprocs+0x74>
    18e0:	e59f1070 	ldr	r1, [pc, #112]	; 1958 <__call_exitprocs+0x178>
    18e4:	e3510000 	cmp	r1, #0
    18e8:	1a000009 	bne	1914 <__call_exitprocs+0x134>
    18ec:	e28dd014 	add	sp, sp, #20
    18f0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    18f4:	e12fff1e 	bx	lr
    18f8:	e1a0e00f 	mov	lr, pc
    18fc:	e12fff13 	bx	r3
    1900:	eaffffec 	b	18b8 <__call_exitprocs+0xd8>
    1904:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    1908:	e1a0e00f 	mov	lr, pc
    190c:	e12fff13 	bx	r3
    1910:	eaffffe8 	b	18b8 <__call_exitprocs+0xd8>
    1914:	e5963004 	ldr	r3, [r6, #4]
    1918:	e3530000 	cmp	r3, #0
    191c:	e5963000 	ldr	r3, [r6]
    1920:	1a000008 	bne	1948 <__call_exitprocs+0x168>
    1924:	e3530000 	cmp	r3, #0
    1928:	0a000006 	beq	1948 <__call_exitprocs+0x168>
    192c:	e1a00006 	mov	r0, r6
    1930:	e58b3000 	str	r3, [r11]
    1934:	e320f000 	nop	{0}
    1938:	e59b6000 	ldr	r6, [r11]
    193c:	e3560000 	cmp	r6, #0
    1940:	1affffb5 	bne	181c <__call_exitprocs+0x3c>
    1944:	eaffffe8 	b	18ec <__call_exitprocs+0x10c>
    1948:	e1a0b006 	mov	r11, r6
    194c:	e1a06003 	mov	r6, r3
    1950:	eafffff9 	b	193c <__call_exitprocs+0x15c>
    1954:	00001bb8 	.word	0x00001bb8
    1958:	00000000 	.word	0x00000000

0000195c <register_fini>:
    195c:	e92d4008 	push	{r3, lr}
    1960:	e59f3010 	ldr	r3, [pc, #16]	; 1978 <register_fini+0x1c>
    1964:	e3530000 	cmp	r3, #0
    1968:	159f000c 	ldrne	r0, [pc, #12]	; 197c <register_fini+0x20>
    196c:	1bfffefc 	blne	1564 <atexit>
    1970:	e8bd4008 	pop	{r3, lr}
    1974:	e12fff1e 	bx	lr
    1978:	00001be0 	.word	0x00001be0
    197c:	00001980 	.word	0x00001980

00001980 <__libc_fini_array>:
    1980:	e92d4038 	push	{r3, r4, r5, lr}
    1984:	e59f5030 	ldr	r5, [pc, #48]	; 19bc <__libc_fini_array+0x3c>
    1988:	e59f4030 	ldr	r4, [pc, #48]	; 19c0 <__libc_fini_array+0x40>
    198c:	e0654004 	rsb	r4, r5, r4
    1990:	e1b04144 	asrs	r4, r4, #2
    1994:	10855104 	addne	r5, r5, r4, lsl #2
    1998:	0a000004 	beq	19b0 <__libc_fini_array+0x30>
    199c:	e5353004 	ldr	r3, [r5, #-4]!
    19a0:	e1a0e00f 	mov	lr, pc
    19a4:	e12fff13 	bx	r3
    19a8:	e2544001 	subs	r4, r4, #1
    19ac:	1afffffa 	bne	199c <__libc_fini_array+0x1c>
    19b0:	eb00008a 	bl	1be0 <__libc_fini>
    19b4:	e8bd4038 	pop	{r3, r4, r5, lr}
    19b8:	e12fff1e 	bx	lr
    19bc:	00001bf8 	.word	0x00001bf8
    19c0:	00001bfc 	.word	0x00001bfc

000019c4 <__cs3_premain>:
    19c4:	e92d4008 	push	{r3, lr}
    19c8:	eb000017 	bl	1a2c <__libc_init_array>
    19cc:	e59f3030 	ldr	r3, [pc, #48]	; 1a04 <__cs3_premain+0x40>
    19d0:	e3530000 	cmp	r3, #0
    19d4:	15930000 	ldrne	r0, [r3]
    19d8:	01a00003 	moveq	r0, r3
    19dc:	e59f3024 	ldr	r3, [pc, #36]	; 1a08 <__cs3_premain+0x44>
    19e0:	e3530000 	cmp	r3, #0
    19e4:	15931000 	ldrne	r1, [r3]
    19e8:	01a01003 	moveq	r1, r3
    19ec:	e3a02000 	mov	r2, #0
    19f0:	ebfffa19 	bl	25c <main>
    19f4:	e59f3010 	ldr	r3, [pc, #16]	; 1a0c <__cs3_premain+0x48>
    19f8:	e3530000 	cmp	r3, #0
    19fc:	1bfffee0 	blne	1584 <exit>
    1a00:	eafffffe 	b	1a00 <__cs3_premain+0x3c>
	...
    1a0c:	00001584 	.word	0x00001584

00001a10 <_exit>:
    1a10:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1a14:	e3a00018 	mov	r0, #24
    1a18:	e59f1004 	ldr	r1, [pc, #4]	; 1a24 <_exit+0x14>
    1a1c:	ef123456 	svc	0x00123456
    1a20:	eafffffe 	b	1a20 <_exit+0x10>
    1a24:	00020026 	.word	0x00020026

00001a28 <__cs3_isr_interrupt>:
    1a28:	eafffffe 	b	1a28 <__cs3_isr_interrupt>

00001a2c <__libc_init_array>:
    1a2c:	e92d4070 	push	{r4, r5, r6, lr}
    1a30:	e59f506c 	ldr	r5, [pc, #108]	; 1aa4 <__libc_init_array+0x78>
    1a34:	e59f606c 	ldr	r6, [pc, #108]	; 1aa8 <__libc_init_array+0x7c>
    1a38:	e0656006 	rsb	r6, r5, r6
    1a3c:	e1b06146 	asrs	r6, r6, #2
    1a40:	12455004 	subne	r5, r5, #4
    1a44:	13a04000 	movne	r4, #0
    1a48:	0a000005 	beq	1a64 <__libc_init_array+0x38>
    1a4c:	e5b53004 	ldr	r3, [r5, #4]!
    1a50:	e2844001 	add	r4, r4, #1
    1a54:	e1a0e00f 	mov	lr, pc
    1a58:	e12fff13 	bx	r3
    1a5c:	e1560004 	cmp	r6, r4
    1a60:	1afffff9 	bne	1a4c <__libc_init_array+0x20>
    1a64:	e59f5040 	ldr	r5, [pc, #64]	; 1aac <__libc_init_array+0x80>
    1a68:	e59f6040 	ldr	r6, [pc, #64]	; 1ab0 <__libc_init_array+0x84>
    1a6c:	e0656006 	rsb	r6, r5, r6
    1a70:	eb000052 	bl	1bc0 <_init>
    1a74:	e1b06146 	asrs	r6, r6, #2
    1a78:	12455004 	subne	r5, r5, #4
    1a7c:	13a04000 	movne	r4, #0
    1a80:	0a000005 	beq	1a9c <__libc_init_array+0x70>
    1a84:	e5b53004 	ldr	r3, [r5, #4]!
    1a88:	e2844001 	add	r4, r4, #1
    1a8c:	e1a0e00f 	mov	lr, pc
    1a90:	e12fff13 	bx	r3
    1a94:	e1560004 	cmp	r6, r4
    1a98:	1afffff9 	bne	1a84 <__libc_init_array+0x58>
    1a9c:	e8bd4070 	pop	{r4, r5, r6, lr}
    1aa0:	e12fff1e 	bx	lr
    1aa4:	00001bd8 	.word	0x00001bd8
    1aa8:	00001bd8 	.word	0x00001bd8
    1aac:	00001bd8 	.word	0x00001bd8
    1ab0:	00001be0 	.word	0x00001be0

Disassembly of section .rodata:

00001ab8 <_global_impure_ptr-0x100>:
    1ab8:	204d5052 	.word	0x204d5052
    1abc:	75706e49 	.word	0x75706e49
    1ac0:	00003a74 	.word	0x00003a74
	...
    1ae0:	20746553 	.word	0x20746553
    1ae4:	3a4d5052 	.word	0x3a4d5052
	...
    1b08:	75746341 	.word	0x75746341
    1b0c:	52206c61 	.word	0x52206c61
    1b10:	003a4d50 	.word	0x003a4d50
	...
    1b30:	72727543 	.word	0x72727543
    1b34:	3a746e65 	.word	0x3a746e65
	...
    1b58:	20202020 	.word	0x20202020
    1b5c:	00202020 	.word	0x00202020
	...
    1b80:	00000030 	.word	0x00000030
    1b84:	00000031 	.word	0x00000031
    1b88:	00000032 	.word	0x00000032
    1b8c:	00000033 	.word	0x00000033
    1b90:	00000034 	.word	0x00000034
    1b94:	00000035 	.word	0x00000035
    1b98:	00000036 	.word	0x00000036
    1b9c:	00000037 	.word	0x00000037
    1ba0:	00000038 	.word	0x00000038
    1ba4:	00000039 	.word	0x00000039
    1ba8:	33323130 	.word	0x33323130
    1bac:	37363534 	.word	0x37363534
    1bb0:	42413938 	.word	0x42413938
    1bb4:	46454443 	.word	0x46454443

00001bb8 <_global_impure_ptr>:
    1bb8:	00001c20 00000043                        ...C...

00001bc0 <_init>:
    1bc0:	e1a0c00d 	mov	r12, sp
    1bc4:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    1bc8:	e24cb004 	sub	r11, r12, #4
    1bcc:	e24bd028 	sub	sp, r11, #40	; 0x28
    1bd0:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    1bd4:	e12fff1e 	bx	lr

00001bd8 <__init_array_start>:
    1bd8:	0000195c 	.word	0x0000195c

00001bdc <__frame_dummy_init_array_entry>:
    1bdc:	00000208                                ....

00001be0 <__libc_fini>:
    1be0:	e1a0c00d 	mov	r12, sp
    1be4:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    1be8:	e24cb004 	sub	r11, r12, #4
    1bec:	e24bd028 	sub	sp, r11, #40	; 0x28
    1bf0:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    1bf4:	e12fff1e 	bx	lr

00001bf8 <__fini_array_start>:
    1bf8:	000001c4 	.word	0x000001c4

00001bfc <__cs3_regions>:
	...
    1c08:	00002050 	.word	0x00002050
    1c0c:	00000080 	.word	0x00000080
