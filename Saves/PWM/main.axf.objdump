
C:/Users/Andrew Davies/Desktop/PWM/main.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
       0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      20:	f8 06 00 00 04 07 00 00 10 07 00 00 1c 07 00 00     ................
      30:	28 07 00 00 24 2f 00 00 80 06 00 00 34 07 00 00     (...$/......4...

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_region_zero_size_ram+0x38>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_region_zero_size_ram+0x34>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_region_zero_size_ram+0x3c>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_region_zero_size_ram+0x4>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_region_zero_size_ram+0x4>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_region_zero_size_ram+0x24>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_region_zero_size_ram+0x14>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb000b79 	bl	2ec0 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	0000310c 	.word	0x0000310c

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00003548 	.word	0x00003548

00000124 <__cs3_heap_start_ptr>:
     124:	000035f0 	.word	0x000035f0

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00003550 	.word	0x00003550
     170:	00003553 	.word	0x00003553
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	00003550 	.word	0x00003550
     1bc:	00003550 	.word	0x00003550
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00003550 	.word	0x00003550
     200:	00000000 	.word	0x00000000
     204:	00002fb0 	.word	0x00002fb0

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00002fb0 	.word	0x00002fb0
     250:	00003554 	.word	0x00003554
     254:	00003110 	.word	0x00003110
     258:	00000000 	.word	0x00000000

0000025c <main>:
char enterPress;		//used in keypad.c

//**Program Code**//

int main(void)
{
     25c:	e92d4800 	push	{r11, lr}
     260:	e28db004 	add	r11, sp, #4
     264:	e24dd008 	sub	sp, sp, #8
	//**Initialize Interrupts**//
	disable_A9_interrupts();
     268:	eb000134 	bl	740 <disable_A9_interrupts>
	set_A9_IRQ_stack();
     26c:	eb00013d 	bl	768 <set_A9_IRQ_stack>
	config_GIC();
     270:	eb000158 	bl	7d8 <config_GIC>
	configInterupt();
     274:	eb0001a3 	bl	908 <configInterupt>
	enable_A9_interrupts();
     278:	eb00014c 	bl	7b0 <enable_A9_interrupts>

	//**Initialize GUI**//
	GUI_Setup();
     27c:	eb00039c 	bl	10f4 <GUI_Setup>
	//**Initialize PWM**//
	// PWM_Setup();

    //GPIO
    volatile int* GPIOPtr = (int*)0xFF200060;
     280:	e3a03060 	mov	r3, #96	; 0x60
     284:	e34f3f20 	movt	r3, #65312	; 0xff20
     288:	e50b3008 	str	r3, [r11, #-8]
    *(GPIOPtr + 1) |= (1 << 0); // Set D0 as output
     28c:	e51b3008 	ldr	r3, [r11, #-8]
     290:	e2833004 	add	r3, r3, #4
     294:	e51b2008 	ldr	r2, [r11, #-8]
     298:	e2822004 	add	r2, r2, #4
     29c:	e5922000 	ldr	r2, [r2]
     2a0:	e3822001 	orr	r2, r2, #1
     2a4:	e5832000 	str	r2, [r3]
     2a8:	ea000000 	b	2b0 <main+0x54>
		{
			//put_jtag('C');
			//put_jtag('\n');
			encoderInterrupt = 0;
		}
	}
     2ac:	e1a00000 	nop			; (mov r0, r0)
    *(GPIOPtr + 1) |= (1 << 0); // Set D0 as output
    // *(GPIOPtr + 1) |= 0x2; // Set D1 as output
	
	while(1)
	{
		if(ps2Interrupt == 1)
     2b0:	e303356c 	movw	r3, #13676	; 0x356c
     2b4:	e3403000 	movt	r3, #0
     2b8:	e5933000 	ldr	r3, [r3]
     2bc:	e3530001 	cmp	r3, #1
     2c0:	1a00000e 	bne	300 <main+0xa4>
		{
			ps2Interrupt = 0;
     2c4:	e303356c 	movw	r3, #13676	; 0x356c
     2c8:	e3403000 	movt	r3, #0
     2cc:	e3a02000 	mov	r2, #0
     2d0:	e5832000 	str	r2, [r3]
          	PS2_Read();
     2d4:	eb000342 	bl	fe4 <PS2_Read>
          	// put_jtag('A');
          	if(goodKey == 1)
     2d8:	e3033578 	movw	r3, #13688	; 0x3578
     2dc:	e3403000 	movt	r3, #0
     2e0:	e5933000 	ldr	r3, [r3]
     2e4:	e3530001 	cmp	r3, #1
     2e8:	1a000004 	bne	300 <main+0xa4>
            {
              	
              	Key();
     2ec:	eb0001e5 	bl	a88 <Key>
                goodKey = 0;
     2f0:	e3033578 	movw	r3, #13688	; 0x3578
     2f4:	e3403000 	movt	r3, #0
     2f8:	e3a02000 	mov	r2, #0
     2fc:	e5832000 	str	r2, [r3]
            }
		}
		if(monitorInterrupt == 1)
     300:	e3033574 	movw	r3, #13684	; 0x3574
     304:	e3403000 	movt	r3, #0
     308:	e5933000 	ldr	r3, [r3]
     30c:	e3530001 	cmp	r3, #1
     310:	1a000003 	bne	324 <main+0xc8>
		{
			//put_jtag('B');
			monitorInterrupt = 0;
     314:	e3033574 	movw	r3, #13684	; 0x3574
     318:	e3403000 	movt	r3, #0
     31c:	e3a02000 	mov	r2, #0
     320:	e5832000 	str	r2, [r3]
		}
		if(encoderInterrupt == 1)
     324:	e3033570 	movw	r3, #13680	; 0x3570
     328:	e3403000 	movt	r3, #0
     32c:	e5933000 	ldr	r3, [r3]
     330:	e3530001 	cmp	r3, #1
     334:	1affffdc 	bne	2ac <main+0x50>
		{
			//put_jtag('C');
			//put_jtag('\n');
			encoderInterrupt = 0;
     338:	e3033570 	movw	r3, #13680	; 0x3570
     33c:	e3403000 	movt	r3, #0
     340:	e3a02000 	mov	r2, #0
     344:	e5832000 	str	r2, [r3]
		}
	}
     348:	eaffffd7 	b	2ac <main+0x50>

0000034c <SetPWM>:
/***************************************************************************************************
Function Definitions:
***************************************************************************************************/

void SetPWM(unsigned int period, double percent)
{
     34c:	e92d4800 	push	{r11, lr}
     350:	e28db004 	add	r11, sp, #4
     354:	e24dd020 	sub	sp, sp, #32
     358:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
     35c:	e14b22f4 	strd	r2, [r11, #-36]	; 0xffffffdc
    volatile int* HPSTimer1Ptr = (int*) HPS_TIMER1_BASE;
     360:	e3a03a09 	mov	r3, #36864	; 0x9000
     364:	e34f3fc0 	movt	r3, #65472	; 0xffc0
     368:	e50b3008 	str	r3, [r11, #-8]
    period = period * 100;
     36c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     370:	e3a02064 	mov	r2, #100	; 0x64
     374:	e0030392 	mul	r3, r2, r3
     378:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
    double math = period * percent;
     37c:	e51b0018 	ldr	r0, [r11, #-24]	; 0xffffffe8
     380:	eb00068a 	bl	1db0 <__aeabi_ui2d>
     384:	e1a02000 	mov	r2, r0
     388:	e1a03001 	mov	r3, r1
     38c:	e1a00002 	mov	r0, r2
     390:	e1a01003 	mov	r1, r3
     394:	e14b22d4 	ldrd	r2, [r11, #-36]	; 0xffffffdc
     398:	eb0006c4 	bl	1eb0 <__aeabi_dmul>
     39c:	e1a02000 	mov	r2, r0
     3a0:	e1a03001 	mov	r3, r1
     3a4:	e14b21f4 	strd	r2, [r11, #-20]	; 0xffffffec

    /************************************************
    HPS Timer:
    ************************************************/
    *(HPSTimer1Ptr + 2) &= ~(1 << 0); // E = 0
     3a8:	e51b3008 	ldr	r3, [r11, #-8]
     3ac:	e2833008 	add	r3, r3, #8
     3b0:	e51b2008 	ldr	r2, [r11, #-8]
     3b4:	e2822008 	add	r2, r2, #8
     3b8:	e5922000 	ldr	r2, [r2]
     3bc:	e3c22001 	bic	r2, r2, #1
     3c0:	e5832000 	str	r2, [r3]
    *(HPSTimer1Ptr) = (int)math; // load value
     3c4:	e14b01d4 	ldrd	r0, [r11, #-20]	; 0xffffffec
     3c8:	eb0007df 	bl	234c <__aeabi_d2iz>
     3cc:	e1a02000 	mov	r2, r0
     3d0:	e51b3008 	ldr	r3, [r11, #-8]
     3d4:	e5832000 	str	r2, [r3]
    *(HPSTimer1Ptr + 2) |= (1 << 1); // M = 1
     3d8:	e51b3008 	ldr	r3, [r11, #-8]
     3dc:	e2833008 	add	r3, r3, #8
     3e0:	e51b2008 	ldr	r2, [r11, #-8]
     3e4:	e2822008 	add	r2, r2, #8
     3e8:	e5922000 	ldr	r2, [r2]
     3ec:	e3822002 	orr	r2, r2, #2
     3f0:	e5832000 	str	r2, [r3]
    *(HPSTimer1Ptr + 2) |= (1 << 0); // E = 1
     3f4:	e51b3008 	ldr	r3, [r11, #-8]
     3f8:	e2833008 	add	r3, r3, #8
     3fc:	e51b2008 	ldr	r2, [r11, #-8]
     400:	e2822008 	add	r2, r2, #8
     404:	e5922000 	ldr	r2, [r2]
     408:	e3822001 	orr	r2, r2, #1
     40c:	e5832000 	str	r2, [r3]
}
     410:	e24bd004 	sub	sp, r11, #4
     414:	e8bd8800 	pop	{r11, pc}

00000418 <PWM_Setup>:

void PWM_Setup(void)
{
     418:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     41c:	e28db000 	add	r11, sp, #0
     420:	e24dd00c 	sub	sp, sp, #12
    volatile int* GPIOPtr = (int*)JP1_BASE;
     424:	e3a03060 	mov	r3, #96	; 0x60
     428:	e34f3f20 	movt	r3, #65312	; 0xff20
     42c:	e50b3008 	str	r3, [r11, #-8]
    *(GPIOPtr + 1) |= (1 << 1); // D1 output
     430:	e51b3008 	ldr	r3, [r11, #-8]
     434:	e2833004 	add	r3, r3, #4
     438:	e51b2008 	ldr	r2, [r11, #-8]
     43c:	e2822004 	add	r2, r2, #4
     440:	e5922000 	ldr	r2, [r2]
     444:	e3822002 	orr	r2, r2, #2
     448:	e5832000 	str	r2, [r3]
     44c:	e28bd000 	add	sp, r11, #0
     450:	e8bd0800 	ldmfd	sp!, {r11}
     454:	e12fff1e 	bx	lr

00000458 <HPSTimer0ISR>:

static unsigned char END = 0; // Used to read the End-Of-Interrupt register to reset timer values

//**Interrupt Service Routines**//
void HPSTimer0ISR()   //half second period
{
     458:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     45c:	e28db000 	add	r11, sp, #0
     460:	e24dd00c 	sub	sp, sp, #12
    volatile int* HPSTimer0Ptr = (int*) HPS_TIMER0_BASE;
     464:	e3a03902 	mov	r3, #32768	; 0x8000
     468:	e34f3fc0 	movt	r3, #65472	; 0xffc0
     46c:	e50b3008 	str	r3, [r11, #-8]
    static char flag; //toggle flag
  
    ps2Interrupt = 1;
     470:	e303356c 	movw	r3, #13676	; 0x356c
     474:	e3403000 	movt	r3, #0
     478:	e3a02001 	mov	r2, #1
     47c:	e5832000 	str	r2, [r3]
    flag ++;
     480:	e3033598 	movw	r3, #13720	; 0x3598
     484:	e3403000 	movt	r3, #0
     488:	e5d33000 	ldrb	r3, [r3]
     48c:	e2833001 	add	r3, r3, #1
     490:	e6ef2073 	uxtb	r2, r3
     494:	e3033598 	movw	r3, #13720	; 0x3598
     498:	e3403000 	movt	r3, #0
     49c:	e5c32000 	strb	r2, [r3]
    if(flag == 1)
     4a0:	e3033598 	movw	r3, #13720	; 0x3598
     4a4:	e3403000 	movt	r3, #0
     4a8:	e5d33000 	ldrb	r3, [r3]
     4ac:	e3530001 	cmp	r3, #1
     4b0:	1a000003 	bne	4c4 <HPSTimer0ISR+0x6c>
    {
        encoderInterrupt = 1;
     4b4:	e3033570 	movw	r3, #13680	; 0x3570
     4b8:	e3403000 	movt	r3, #0
     4bc:	e3a02001 	mov	r2, #1
     4c0:	e5832000 	str	r2, [r3]
    }
    if(flag == 2)
     4c4:	e3033598 	movw	r3, #13720	; 0x3598
     4c8:	e3403000 	movt	r3, #0
     4cc:	e5d33000 	ldrb	r3, [r3]
     4d0:	e3530002 	cmp	r3, #2
     4d4:	1a000007 	bne	4f8 <HPSTimer0ISR+0xa0>
    {
        monitorInterrupt = 1;
     4d8:	e3033574 	movw	r3, #13684	; 0x3574
     4dc:	e3403000 	movt	r3, #0
     4e0:	e3a02001 	mov	r2, #1
     4e4:	e5832000 	str	r2, [r3]
        flag = 0;
     4e8:	e3033598 	movw	r3, #13720	; 0x3598
     4ec:	e3403000 	movt	r3, #0
     4f0:	e3a02000 	mov	r2, #0
     4f4:	e5c32000 	strb	r2, [r3]
    }
  
    END = *(HPSTimer0Ptr + 3);  //resets HPSTimer0
     4f8:	e51b3008 	ldr	r3, [r11, #-8]
     4fc:	e283300c 	add	r3, r3, #12
     500:	e5933000 	ldr	r3, [r3]
     504:	e6ef2073 	uxtb	r2, r3
     508:	e3033590 	movw	r3, #13712	; 0x3590
     50c:	e3403000 	movt	r3, #0
     510:	e5c32000 	strb	r2, [r3]
}
     514:	e28bd000 	add	sp, r11, #0
     518:	e8bd0800 	ldmfd	sp!, {r11}
     51c:	e12fff1e 	bx	lr

00000520 <HPSTimer1ISR>:

void HPSTimer1ISR()
{
     520:	e92d4800 	push	{r11, lr}
     524:	e28db004 	add	r11, sp, #4
     528:	e24dd008 	sub	sp, sp, #8
    volatile int* HPSTimer1Ptr = (int*) HPS_TIMER1_BASE;
     52c:	e3a03a09 	mov	r3, #36864	; 0x9000
     530:	e34f3fc0 	movt	r3, #65472	; 0xffc0
     534:	e50b3008 	str	r3, [r11, #-8]
    volatile int* GPIOPtr = (int*)JP1_BASE;
     538:	e3a03060 	mov	r3, #96	; 0x60
     53c:	e34f3f20 	movt	r3, #65312	; 0xff20
     540:	e50b300c 	str	r3, [r11, #-12]

    static int pwmToggle = 0;

    if(percent == 0)
     544:	e30335a0 	movw	r3, #13728	; 0x35a0
     548:	e3403000 	movt	r3, #0
     54c:	e5933000 	ldr	r3, [r3]
     550:	e1a00003 	mov	r0, r3
     554:	e3a01000 	mov	r1, #0
     558:	eb000922 	bl	29e8 <__aeabi_fcmpeq>
     55c:	e1a03000 	mov	r3, r0
     560:	e3530000 	cmp	r3, #0
     564:	0a000003 	beq	578 <HPSTimer1ISR+0x58>
    {
        *(GPIOPtr) = 0;
     568:	e51b300c 	ldr	r3, [r11, #-12]
     56c:	e3a02000 	mov	r2, #0
     570:	e5832000 	str	r2, [r3]
     574:	ea000038 	b	65c <HPSTimer1ISR+0x13c>
        // *(GPIOPtr) &= 0xFFFFFFFD; // 1101
    }
    else if(percent == 1.0)
     578:	e30335a0 	movw	r3, #13728	; 0x35a0
     57c:	e3403000 	movt	r3, #0
     580:	e5933000 	ldr	r3, [r3]
     584:	e1a00003 	mov	r0, r3
     588:	e3a015fe 	mov	r1, #1065353216	; 0x3f800000
     58c:	eb000915 	bl	29e8 <__aeabi_fcmpeq>
     590:	e1a03000 	mov	r3, r0
     594:	e3530000 	cmp	r3, #0
     598:	0a000003 	beq	5ac <HPSTimer1ISR+0x8c>
    {
        *(GPIOPtr) = 1;
     59c:	e51b300c 	ldr	r3, [r11, #-12]
     5a0:	e3a02001 	mov	r2, #1
     5a4:	e5832000 	str	r2, [r3]
     5a8:	ea00002b 	b	65c <HPSTimer1ISR+0x13c>
        // *(GPIOPtr) |= 0x2; // 0010
    }
    else
    {
        if(pwmToggle == 1)
     5ac:	e3033594 	movw	r3, #13716	; 0x3594
     5b0:	e3403000 	movt	r3, #0
     5b4:	e5933000 	ldr	r3, [r3]
     5b8:	e3530001 	cmp	r3, #1
     5bc:	1a000010 	bne	604 <HPSTimer1ISR+0xe4>
        {
            *(GPIOPtr) = 1; // D0 = low
     5c0:	e51b300c 	ldr	r3, [r11, #-12]
     5c4:	e3a02001 	mov	r2, #1
     5c8:	e5832000 	str	r2, [r3]
            // *(GPIOPtr) |= 0x2;
            SetPWM(1000, percent);
     5cc:	e30335a0 	movw	r3, #13728	; 0x35a0
     5d0:	e3403000 	movt	r3, #0
     5d4:	e5933000 	ldr	r3, [r3]
     5d8:	e1a00003 	mov	r0, r3
     5dc:	eb000606 	bl	1dfc <__aeabi_f2d>
     5e0:	e1a02000 	mov	r2, r0
     5e4:	e1a03001 	mov	r3, r1
     5e8:	e3a00ffa 	mov	r0, #1000	; 0x3e8
     5ec:	ebffff56 	bl	34c <SetPWM>

            pwmToggle = 0;
     5f0:	e3033594 	movw	r3, #13716	; 0x3594
     5f4:	e3403000 	movt	r3, #0
     5f8:	e3a02000 	mov	r2, #0
     5fc:	e5832000 	str	r2, [r3]
     600:	ea000015 	b	65c <HPSTimer1ISR+0x13c>
        }
        else // pwmToggle == 0
        {
            *(GPIOPtr) = 0; // D0 = high
     604:	e51b300c 	ldr	r3, [r11, #-12]
     608:	e3a02000 	mov	r2, #0
     60c:	e5832000 	str	r2, [r3]
            // *(GPIOPtr) &= 0xFFFFFFFD;
            SetPWM( 1000, (1.0 - percent) );
     610:	e30335a0 	movw	r3, #13728	; 0x35a0
     614:	e3403000 	movt	r3, #0
     618:	e5933000 	ldr	r3, [r3]
     61c:	e1a00003 	mov	r0, r3
     620:	eb0005f5 	bl	1dfc <__aeabi_f2d>
     624:	e1a02000 	mov	r2, r0
     628:	e1a03001 	mov	r3, r1
     62c:	e3a00000 	mov	r0, #0
     630:	e3a01000 	mov	r1, #0
     634:	e3431ff0 	movt	r1, #16368	; 0x3ff0
     638:	eb000517 	bl	1a9c <__aeabi_dsub>
     63c:	e1a02000 	mov	r2, r0
     640:	e1a03001 	mov	r3, r1
     644:	e3a00ffa 	mov	r0, #1000	; 0x3e8
     648:	ebffff3f 	bl	34c <SetPWM>

            pwmToggle = 1;
     64c:	e3033594 	movw	r3, #13716	; 0x3594
     650:	e3403000 	movt	r3, #0
     654:	e3a02001 	mov	r2, #1
     658:	e5832000 	str	r2, [r3]
        }
    }

    END = *(HPSTimer1Ptr + 3);
     65c:	e51b3008 	ldr	r3, [r11, #-8]
     660:	e283300c 	add	r3, r3, #12
     664:	e5933000 	ldr	r3, [r3]
     668:	e6ef2073 	uxtb	r2, r3
     66c:	e3033590 	movw	r3, #13712	; 0x3590
     670:	e3403000 	movt	r3, #0
     674:	e5c32000 	strb	r2, [r3]
}
     678:	e24bd004 	sub	sp, r11, #4
     67c:	e8bd8800 	pop	{r11, pc}

00000680 <__cs3_isr_irq>:
#include "interrupt_id.h"
#include "address_map.h"

// Define the IRQ exception handler
void __attribute__ ((interrupt)) __cs3_isr_irq (void)
{
     680:	e24ee004 	sub	lr, lr, #4
     684:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
     688:	e28db018 	add	r11, sp, #24
     68c:	e24dd00c 	sub	sp, sp, #12
    // Read the ICCIAR from the CPU interface in the GIC
    int address;
    int interrupt_ID;
    
    address = MPCORE_GIC_CPUIF + ICCIAR;
     690:	e30c310c 	movw	r3, #49420	; 0xc10c
     694:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     698:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
    interrupt_ID = *(int *)address;
     69c:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     6a0:	e5933000 	ldr	r3, [r3]
     6a4:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
*/

    //if(interrupt_ID == MPCORE_PRIV_TIMER_IRQ)
       // TimerISR();

    if(interrupt_ID == HPS_TIMER0_IRQ)
     6a8:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
     6ac:	e35300c7 	cmp	r3, #199	; 0xc7
     6b0:	1a000001 	bne	6bc <__cs3_isr_irq+0x3c>
        HPSTimer0ISR();  
     6b4:	ebffff67 	bl	458 <HPSTimer0ISR>
     6b8:	ea000005 	b	6d4 <__cs3_isr_irq+0x54>
    else if(interrupt_ID == HPS_TIMER1_IRQ)
     6bc:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
     6c0:	e35300c8 	cmp	r3, #200	; 0xc8
     6c4:	1a000001 	bne	6d0 <__cs3_isr_irq+0x50>
        HPSTimer1ISR();
     6c8:	ebffff94 	bl	520 <HPSTimer1ISR>
     6cc:	ea000000 	b	6d4 <__cs3_isr_irq+0x54>
    else
        while (1);                          // if unexpected, then stay here
     6d0:	eafffffe 	b	6d0 <__cs3_isr_irq+0x50>

    // Write to the End of Interrupt Register (ICCEOIR)
    address = MPCORE_GIC_CPUIF + ICCEOIR;
     6d4:	e30c3110 	movw	r3, #49424	; 0xc110
     6d8:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     6dc:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
    *(int *)address = interrupt_ID;
     6e0:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     6e4:	e51b2024 	ldr	r2, [r11, #-36]	; 0xffffffdc
     6e8:	e5832000 	str	r2, [r3]

    return;
     6ec:	e1a00000 	nop			; (mov r0, r0)
} 
     6f0:	e24bd018 	sub	sp, r11, #24
     6f4:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

000006f8 <__cs3_reset>:

// Define the remaining exception handlers
void __attribute__ ((interrupt)) __cs3_reset (void)
{
     6f8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     6fc:	e28db000 	add	r11, sp, #0
    while(1);
     700:	eafffffe 	b	700 <__cs3_reset+0x8>

00000704 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void)
{
     704:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     708:	e28db000 	add	r11, sp, #0
    while(1);
     70c:	eafffffe 	b	70c <__cs3_isr_undef+0x8>

00000710 <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void)
{
     710:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     714:	e28db000 	add	r11, sp, #0
    while(1);
     718:	eafffffe 	b	718 <__cs3_isr_swi+0x8>

0000071c <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void)
{
     71c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     720:	e28db000 	add	r11, sp, #0
    while(1);
     724:	eafffffe 	b	724 <__cs3_isr_pabort+0x8>

00000728 <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void)
{
     728:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     72c:	e28db000 	add	r11, sp, #0
    while(1);
     730:	eafffffe 	b	730 <__cs3_isr_dabort+0x8>

00000734 <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void)
{
     734:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     738:	e28db000 	add	r11, sp, #0
    while(1);
     73c:	eafffffe 	b	73c <__cs3_isr_fiq+0x8>

00000740 <disable_A9_interrupts>:
}

void disable_A9_interrupts(void)
{
     740:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     744:	e28db000 	add	r11, sp, #0
     748:	e24dd00c 	sub	sp, sp, #12
    int status = 0b11010011;
     74c:	e3a030d3 	mov	r3, #211	; 0xd3
     750:	e50b3008 	str	r3, [r11, #-8]
    asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     754:	e51b3008 	ldr	r3, [r11, #-8]
     758:	e129f003 	msr	CPSR_fc, r3
}
     75c:	e28bd000 	add	sp, r11, #0
     760:	e8bd0800 	ldmfd	sp!, {r11}
     764:	e12fff1e 	bx	lr

00000768 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack(void)
{
     768:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     76c:	e28db000 	add	r11, sp, #0
     770:	e24dd00c 	sub	sp, sp, #12
    int stack, mode;
    stack = A9_ONCHIP_END - 7;      // top of A9 onchip memory, aligned to 8 bytes
     774:	e3e03007 	mvn	r3, #7
     778:	e50b3008 	str	r3, [r11, #-8]
    /* change processor to IRQ mode with interrupts disabled */
    mode = INT_DISABLE | IRQ_MODE;
     77c:	e3a030d2 	mov	r3, #210	; 0xd2
     780:	e50b300c 	str	r3, [r11, #-12]
    asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     784:	e51b300c 	ldr	r3, [r11, #-12]
     788:	e129f003 	msr	CPSR_fc, r3
    /* set banked stack pointer */
    asm("mov sp, %[ps]" : : [ps] "r" (stack));
     78c:	e51b3008 	ldr	r3, [r11, #-8]
     790:	e1a0d003 	mov	sp, r3

    /* go back to SVC mode before executing subroutine return! */
    mode = INT_DISABLE | SVC_MODE;
     794:	e3a030d3 	mov	r3, #211	; 0xd3
     798:	e50b300c 	str	r3, [r11, #-12]
    asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     79c:	e51b300c 	ldr	r3, [r11, #-12]
     7a0:	e129f003 	msr	CPSR_fc, r3
}
     7a4:	e28bd000 	add	sp, r11, #0
     7a8:	e8bd0800 	ldmfd	sp!, {r11}
     7ac:	e12fff1e 	bx	lr

000007b0 <enable_A9_interrupts>:

void enable_A9_interrupts(void)
{
     7b0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     7b4:	e28db000 	add	r11, sp, #0
     7b8:	e24dd00c 	sub	sp, sp, #12
    int status = SVC_MODE | INT_ENABLE;
     7bc:	e3a03053 	mov	r3, #83	; 0x53
     7c0:	e50b3008 	str	r3, [r11, #-8]
    asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     7c4:	e51b3008 	ldr	r3, [r11, #-8]
     7c8:	e129f003 	msr	CPSR_fc, r3
}
     7cc:	e28bd000 	add	sp, r11, #0
     7d0:	e8bd0800 	ldmfd	sp!, {r11}
     7d4:	e12fff1e 	bx	lr

000007d8 <config_GIC>:

void config_GIC(void) // STEP 3 IN SECTION 3.1 OF USING THE ARM GENERIC INTERRUPT CONTROLLER
{
     7d8:	e92d4800 	push	{r11, lr}
     7dc:	e28db004 	add	r11, sp, #4
     7e0:	e24dd008 	sub	sp, sp, #8
    int address;
    // config_interrupt (KEYS_IRQ, CPU0);
    // config_interrupt(MPCORE_PRIV_TIMER_IRQ, CPU0);
    config_interrupt (PS2_IRQ, CPU0);
     7e4:	e3a0004f 	mov	r0, #79	; 0x4f
     7e8:	e3a01001 	mov	r1, #1
     7ec:	eb000019 	bl	858 <config_interrupt>
    config_interrupt (HPS_TIMER0_IRQ, CPU0);
     7f0:	e3a000c7 	mov	r0, #199	; 0xc7
     7f4:	e3a01001 	mov	r1, #1
     7f8:	eb000016 	bl	858 <config_interrupt>
    config_interrupt (HPS_TIMER1_IRQ, CPU0);
     7fc:	e3a000c8 	mov	r0, #200	; 0xc8
     800:	e3a01001 	mov	r1, #1
     804:	eb000013 	bl	858 <config_interrupt>
    
    // Set Interrupt Priority Mask Register (ICCPMR). Enable interrupts of all priorities 
    address = MPCORE_GIC_CPUIF + ICCPMR;
     808:	e30c3104 	movw	r3, #49412	; 0xc104
     80c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     810:	e50b3008 	str	r3, [r11, #-8]
    *(int *) address = 0xFFFF;       
     814:	e51b3008 	ldr	r3, [r11, #-8]
     818:	e30f2fff 	movw	r2, #65535	; 0xffff
     81c:	e5832000 	str	r2, [r3]

    // Set CPU Interface Control Register (ICCICR). Enable signaling of interrupts
    address = MPCORE_GIC_CPUIF + ICCICR;
     820:	e3a03cc1 	mov	r3, #49408	; 0xc100
     824:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     828:	e50b3008 	str	r3, [r11, #-8]
    *(int *) address = 1;       
     82c:	e51b3008 	ldr	r3, [r11, #-8]
     830:	e3a02001 	mov	r2, #1
     834:	e5832000 	str	r2, [r3]

    // Configure the Distributor Control Register (ICDDCR) to send pending interrupts to CPUs 
    address = MPCORE_GIC_DIST + ICDDCR;
     838:	e3a03a0d 	mov	r3, #53248	; 0xd000
     83c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     840:	e50b3008 	str	r3, [r11, #-8]
    *(int *) address = 1;          
     844:	e51b3008 	ldr	r3, [r11, #-8]
     848:	e3a02001 	mov	r2, #1
     84c:	e5832000 	str	r2, [r3]
}
     850:	e24bd004 	sub	sp, r11, #4
     854:	e8bd8800 	pop	{r11, pc}

00000858 <config_interrupt>:

void config_interrupt (int N, int CPU_target)
{
     858:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     85c:	e28db000 	add	r11, sp, #0
     860:	e24dd01c 	sub	sp, sp, #28
     864:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
     868:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
    int reg_offset, index, value, address;
    
    /* Configure the Interrupt Set-Enable Registers (ICDISERn). 
     * reg_offset = (integer_div(N / 32) * 4
     * value = 1 << (N mod 32) */
    reg_offset = (N >> 3) & 0xFFFFFFFC; 
     86c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     870:	e1a031c3 	asr	r3, r3, #3
     874:	e3c33003 	bic	r3, r3, #3
     878:	e50b3008 	str	r3, [r11, #-8]
    index = N & 0x1F;
     87c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     880:	e203301f 	and	r3, r3, #31
     884:	e50b300c 	str	r3, [r11, #-12]
    value = 0x1 << index;
     888:	e3a02001 	mov	r2, #1
     88c:	e51b300c 	ldr	r3, [r11, #-12]
     890:	e1a03312 	lsl	r3, r2, r3
     894:	e50b3010 	str	r3, [r11, #-16]
    address = MPCORE_GIC_DIST + ICDISER + reg_offset;
     898:	e51b3008 	ldr	r3, [r11, #-8]
     89c:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
     8a0:	e2433c03 	sub	r3, r3, #768	; 0x300
     8a4:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    /* Now that we know the register address and value, set the appropriate bit */
   *(int *)address |= value;
     8a8:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     8ac:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     8b0:	e5921000 	ldr	r1, [r2]
     8b4:	e51b2010 	ldr	r2, [r11, #-16]
     8b8:	e1812002 	orr	r2, r1, r2
     8bc:	e5832000 	str	r2, [r3]

    /* Configure the Interrupt Processor Targets Register (ICDIPTRn)
     * reg_offset = integer_div(N / 4) * 4
     * index = N mod 4 */
    reg_offset = (N & 0xFFFFFFFC);
     8c0:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     8c4:	e3c33003 	bic	r3, r3, #3
     8c8:	e50b3008 	str	r3, [r11, #-8]
    index = N & 0x3;
     8cc:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     8d0:	e2033003 	and	r3, r3, #3
     8d4:	e50b300c 	str	r3, [r11, #-12]
    address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
     8d8:	e51b2008 	ldr	r2, [r11, #-8]
     8dc:	e51b300c 	ldr	r3, [r11, #-12]
     8e0:	e0823003 	add	r3, r2, r3
     8e4:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
     8e8:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    /* Now that we know the register address and value, write to (only) the appropriate byte */
    *(char *)address = (char) CPU_target;
     8ec:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     8f0:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     8f4:	e6ef2072 	uxtb	r2, r2
     8f8:	e5c32000 	strb	r2, [r3]
}
     8fc:	e28bd000 	add	sp, r11, #0
     900:	e8bd0800 	ldmfd	sp!, {r11}
     904:	e12fff1e 	bx	lr

00000908 <configInterupt>:

void configInterupt()
{
     908:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     90c:	e28db000 	add	r11, sp, #0
     910:	e24dd014 	sub	sp, sp, #20
    volatile int* timerPtr = (int*) MPCORE_PRIV_TIMER;      // timer base address
     914:	e3a03cc6 	mov	r3, #50688	; 0xc600
     918:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     91c:	e50b3008 	str	r3, [r11, #-8]

    volatile int* HPSTimer0Ptr = (int*) HPS_TIMER0_BASE;
     920:	e3a03902 	mov	r3, #32768	; 0x8000
     924:	e34f3fc0 	movt	r3, #65472	; 0xffc0
     928:	e50b300c 	str	r3, [r11, #-12]

    volatile int* HPSTimer1Ptr = (int*) HPS_TIMER1_BASE;
     92c:	e3a03a09 	mov	r3, #36864	; 0x9000
     930:	e34f3fc0 	movt	r3, #65472	; 0xffc0
     934:	e50b3010 	str	r3, [r11, #-16]

    // Private Timer
    *(timerPtr) = 2000;             // Interrupt every 0.001s
     938:	e51b3008 	ldr	r3, [r11, #-8]
     93c:	e3a02e7d 	mov	r2, #2000	; 0x7d0
     940:	e5832000 	str	r2, [r3]
    *(timerPtr + 2) |= (100 << 8);  // Prescale 100
     944:	e51b3008 	ldr	r3, [r11, #-8]
     948:	e2833008 	add	r3, r3, #8
     94c:	e51b2008 	ldr	r2, [r11, #-8]
     950:	e2822008 	add	r2, r2, #8
     954:	e5922000 	ldr	r2, [r2]
     958:	e3822b19 	orr	r2, r2, #25600	; 0x6400
     95c:	e5832000 	str	r2, [r3]
    *(timerPtr + 2) |= 0x07;        // Turn on I, A, and E
     960:	e51b3008 	ldr	r3, [r11, #-8]
     964:	e2833008 	add	r3, r3, #8
     968:	e51b2008 	ldr	r2, [r11, #-8]
     96c:	e2822008 	add	r2, r2, #8
     970:	e5922000 	ldr	r2, [r2]
     974:	e3822007 	orr	r2, r2, #7
     978:	e5832000 	str	r2, [r3]

    // HPS0
    *(HPSTimer0Ptr + 2) &= ~(1 << 0);    // E = 0
     97c:	e51b300c 	ldr	r3, [r11, #-12]
     980:	e2833008 	add	r3, r3, #8
     984:	e51b200c 	ldr	r2, [r11, #-12]
     988:	e2822008 	add	r2, r2, #8
     98c:	e5922000 	ldr	r2, [r2]
     990:	e3c22001 	bic	r2, r2, #1
     994:	e5832000 	str	r2, [r3]
    *(HPSTimer0Ptr) = 25000000;         // load value
     998:	e51b200c 	ldr	r2, [r11, #-12]
     99c:	e3073840 	movw	r3, #30784	; 0x7840
     9a0:	e340317d 	movt	r3, #381	; 0x17d
     9a4:	e5823000 	str	r3, [r2]
    *(HPSTimer0Ptr + 2) |= (1 << 1);     // M = 1
     9a8:	e51b300c 	ldr	r3, [r11, #-12]
     9ac:	e2833008 	add	r3, r3, #8
     9b0:	e51b200c 	ldr	r2, [r11, #-12]
     9b4:	e2822008 	add	r2, r2, #8
     9b8:	e5922000 	ldr	r2, [r2]
     9bc:	e3822002 	orr	r2, r2, #2
     9c0:	e5832000 	str	r2, [r3]
    *(HPSTimer0Ptr + 2) |= (1 << 0);     // E = 1
     9c4:	e51b300c 	ldr	r3, [r11, #-12]
     9c8:	e2833008 	add	r3, r3, #8
     9cc:	e51b200c 	ldr	r2, [r11, #-12]
     9d0:	e2822008 	add	r2, r2, #8
     9d4:	e5922000 	ldr	r2, [r2]
     9d8:	e3822001 	orr	r2, r2, #1
     9dc:	e5832000 	str	r2, [r3]
    *(HPSTimer0Ptr + 2) &= ~(1 << 2);    // I = 0 Active low
     9e0:	e51b300c 	ldr	r3, [r11, #-12]
     9e4:	e2833008 	add	r3, r3, #8
     9e8:	e51b200c 	ldr	r2, [r11, #-12]
     9ec:	e2822008 	add	r2, r2, #8
     9f0:	e5922000 	ldr	r2, [r2]
     9f4:	e3c22004 	bic	r2, r2, #4
     9f8:	e5832000 	str	r2, [r3]

    // HPS1
    *(HPSTimer1Ptr + 2) &= ~(1 << 0); // E = 0
     9fc:	e51b3010 	ldr	r3, [r11, #-16]
     a00:	e2833008 	add	r3, r3, #8
     a04:	e51b2010 	ldr	r2, [r11, #-16]
     a08:	e2822008 	add	r2, r2, #8
     a0c:	e5922000 	ldr	r2, [r2]
     a10:	e3c22001 	bic	r2, r2, #1
     a14:	e5832000 	str	r2, [r3]
    *(HPSTimer1Ptr) = 1000000; // load value
     a18:	e51b2010 	ldr	r2, [r11, #-16]
     a1c:	e3043240 	movw	r3, #16960	; 0x4240
     a20:	e340300f 	movt	r3, #15
     a24:	e5823000 	str	r3, [r2]
    *(HPSTimer1Ptr + 2) |= (1 << 1); // M = 1
     a28:	e51b3010 	ldr	r3, [r11, #-16]
     a2c:	e2833008 	add	r3, r3, #8
     a30:	e51b2010 	ldr	r2, [r11, #-16]
     a34:	e2822008 	add	r2, r2, #8
     a38:	e5922000 	ldr	r2, [r2]
     a3c:	e3822002 	orr	r2, r2, #2
     a40:	e5832000 	str	r2, [r3]
    *(HPSTimer1Ptr + 2) |= (1 << 0); // E = 1
     a44:	e51b3010 	ldr	r3, [r11, #-16]
     a48:	e2833008 	add	r3, r3, #8
     a4c:	e51b2010 	ldr	r2, [r11, #-16]
     a50:	e2822008 	add	r2, r2, #8
     a54:	e5922000 	ldr	r2, [r2]
     a58:	e3822001 	orr	r2, r2, #1
     a5c:	e5832000 	str	r2, [r3]
    *(HPSTimer1Ptr + 2) &= ~(1 << 2); // I = 0
     a60:	e51b3010 	ldr	r3, [r11, #-16]
     a64:	e2833008 	add	r3, r3, #8
     a68:	e51b2010 	ldr	r2, [r11, #-16]
     a6c:	e2822008 	add	r2, r2, #8
     a70:	e5922000 	ldr	r2, [r2]
     a74:	e3c22004 	bic	r2, r2, #4
     a78:	e5832000 	str	r2, [r3]

//  *(KEY_ptr + 2) = 0x01;       // enable interrupts for KEY0
}
     a7c:	e28bd000 	add	sp, r11, #0
     a80:	e8bd0800 	ldmfd	sp!, {r11}
     a84:	e12fff1e 	bx	lr

00000a88 <Key>:
extern char enterPress;

//**Function Code**//

void Key(void)
{
     a88:	e92d4800 	push	{r11, lr}
     a8c:	e28db004 	add	r11, sp, #4
     a90:	e24dd008 	sub	sp, sp, #8
	char key = GetKey(keyData);
     a94:	e303359c 	movw	r3, #13724	; 0x359c
     a98:	e3403000 	movt	r3, #0
     a9c:	e5933000 	ldr	r3, [r3]
     aa0:	e1a00003 	mov	r0, r3
     aa4:	eb00008c 	bl	cdc <GetKey>
     aa8:	e1a03000 	mov	r3, r0
     aac:	e54b3005 	strb	r3, [r11, #-5]

	if(key == 0xD)		//invalid key
     ab0:	e55b3005 	ldrb	r3, [r11, #-5]
     ab4:	e353000d 	cmp	r3, #13
     ab8:	0a000082 	beq	cc8 <Key+0x240>
		return;

	if( (key != 0xA) && (key != 0xB) && (key != 0xC) )	//is integer
     abc:	e55b3005 	ldrb	r3, [r11, #-5]
     ac0:	e353000a 	cmp	r3, #10
     ac4:	0a00003f 	beq	bc8 <Key+0x140>
     ac8:	e55b3005 	ldrb	r3, [r11, #-5]
     acc:	e353000b 	cmp	r3, #11
     ad0:	0a00003c 	beq	bc8 <Key+0x140>
     ad4:	e55b3005 	ldrb	r3, [r11, #-5]
     ad8:	e353000c 	cmp	r3, #12
     adc:	0a000039 	beq	bc8 <Key+0x140>
	{
		inprpm.iHundred = inprpm.iTen;
     ae0:	e30335a8 	movw	r3, #13736	; 0x35a8
     ae4:	e3403000 	movt	r3, #0
     ae8:	e5932004 	ldr	r2, [r3, #4]
     aec:	e30335a8 	movw	r3, #13736	; 0x35a8
     af0:	e3403000 	movt	r3, #0
     af4:	e5832000 	str	r2, [r3]
		inprpm.iTen = inprpm.iOne;
     af8:	e30335a8 	movw	r3, #13736	; 0x35a8
     afc:	e3403000 	movt	r3, #0
     b00:	e5932008 	ldr	r2, [r3, #8]
     b04:	e30335a8 	movw	r3, #13736	; 0x35a8
     b08:	e3403000 	movt	r3, #0
     b0c:	e5832004 	str	r2, [r3, #4]
		inprpm.iOne = key;
     b10:	e55b2005 	ldrb	r2, [r11, #-5]
     b14:	e30335a8 	movw	r3, #13736	; 0x35a8
     b18:	e3403000 	movt	r3, #0
     b1c:	e5832008 	str	r2, [r3, #8]
		Total_inprpm();
     b20:	eb000332 	bl	17f0 <Total_inprpm>

		inprpm.cHundred = inprpm.cTen;
     b24:	e30335a8 	movw	r3, #13736	; 0x35a8
     b28:	e3403000 	movt	r3, #0
     b2c:	e5d32011 	ldrb	r2, [r3, #17]
     b30:	e30335a8 	movw	r3, #13736	; 0x35a8
     b34:	e3403000 	movt	r3, #0
     b38:	e5c32010 	strb	r2, [r3, #16]
		inprpm.cTen = inprpm.cOne;
     b3c:	e30335a8 	movw	r3, #13736	; 0x35a8
     b40:	e3403000 	movt	r3, #0
     b44:	e5d32012 	ldrb	r2, [r3, #18]
     b48:	e30335a8 	movw	r3, #13736	; 0x35a8
     b4c:	e3403000 	movt	r3, #0
     b50:	e5c32011 	strb	r2, [r3, #17]
		inprpm.cOne = GetCharacter(key);
     b54:	e55b3005 	ldrb	r3, [r11, #-5]
     b58:	e1a00003 	mov	r0, r3
     b5c:	eb0002db 	bl	16d0 <GetCharacter>
     b60:	e1a03000 	mov	r3, r0
     b64:	e1a02003 	mov	r2, r3
     b68:	e30335a8 	movw	r3, #13736	; 0x35a8
     b6c:	e3403000 	movt	r3, #0
     b70:	e5c32012 	strb	r2, [r3, #18]

		inprpm.cTotal[0] = inprpm.cHundred;
     b74:	e30335a8 	movw	r3, #13736	; 0x35a8
     b78:	e3403000 	movt	r3, #0
     b7c:	e5d32010 	ldrb	r2, [r3, #16]
     b80:	e30335a8 	movw	r3, #13736	; 0x35a8
     b84:	e3403000 	movt	r3, #0
     b88:	e5c32013 	strb	r2, [r3, #19]
		inprpm.cTotal[1] = inprpm.cTen;
     b8c:	e30335a8 	movw	r3, #13736	; 0x35a8
     b90:	e3403000 	movt	r3, #0
     b94:	e5d32011 	ldrb	r2, [r3, #17]
     b98:	e30335a8 	movw	r3, #13736	; 0x35a8
     b9c:	e3403000 	movt	r3, #0
     ba0:	e5c32014 	strb	r2, [r3, #20]
		inprpm.cTotal[2] = inprpm.cOne;
     ba4:	e30335a8 	movw	r3, #13736	; 0x35a8
     ba8:	e3403000 	movt	r3, #0
     bac:	e5d32012 	ldrb	r2, [r3, #18]
     bb0:	e30335a8 	movw	r3, #13736	; 0x35a8
     bb4:	e3403000 	movt	r3, #0
     bb8:	e5c32015 	strb	r2, [r3, #21]

		InputRPM_Write(inprpm.cTotal);
     bbc:	e59f0110 	ldr	r0, [pc, #272]	; cd4 <Key+0x24c>
     bc0:	eb0001bc 	bl	12b8 <InputRPM_Write>
		return;
     bc4:	ea000040 	b	ccc <Key+0x244>
	}

	if(key == 0xA)			//enter pressed
     bc8:	e55b3005 	ldrb	r3, [r11, #-5]
     bcc:	e353000a 	cmp	r3, #10
     bd0:	1a00003d 	bne	ccc <Key+0x244>
	{
		if(inprpm.cTotal[2] != ' ')
     bd4:	e30335a8 	movw	r3, #13736	; 0x35a8
     bd8:	e3403000 	movt	r3, #0
     bdc:	e5d33015 	ldrb	r3, [r3, #21]
     be0:	e3530020 	cmp	r3, #32
     be4:	0a000038 	beq	ccc <Key+0x244>
		{
			enterPress = 1;
     be8:	e303357c 	movw	r3, #13692	; 0x357c
     bec:	e3403000 	movt	r3, #0
     bf0:	e3a02001 	mov	r2, #1
     bf4:	e5c32000 	strb	r2, [r3]
			setrpm = inprpm;
     bf8:	e30325c0 	movw	r2, #13760	; 0x35c0
     bfc:	e3402000 	movt	r2, #0
     c00:	e30335a8 	movw	r3, #13736	; 0x35a8
     c04:	e3403000 	movt	r3, #0
     c08:	e1a0c002 	mov	r12, r2
     c0c:	e1a0e003 	mov	lr, r3
     c10:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
     c14:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
     c18:	e89e0003 	ldm	lr, {r0, r1}
     c1c:	e88c0003 	stm	r12, {r0, r1}
			InputRPM_Clear();
     c20:	eb0001d2 	bl	1370 <InputRPM_Clear>
			Clear_inprpm();
     c24:	eb0002c4 	bl	173c <Clear_inprpm>

			if(setrpm.iTotal > 233)
     c28:	e30335c0 	movw	r3, #13760	; 0x35c0
     c2c:	e3403000 	movt	r3, #0
     c30:	e593300c 	ldr	r3, [r3, #12]
     c34:	e35300e9 	cmp	r3, #233	; 0xe9
     c38:	da00000f 	ble	c7c <Key+0x1f4>
			{
				setrpm.iTotal = 233;
     c3c:	e30335c0 	movw	r3, #13760	; 0x35c0
     c40:	e3403000 	movt	r3, #0
     c44:	e3a020e9 	mov	r2, #233	; 0xe9
     c48:	e583200c 	str	r2, [r3, #12]
				setrpm.cTotal[0] = '2';
     c4c:	e30335c0 	movw	r3, #13760	; 0x35c0
     c50:	e3403000 	movt	r3, #0
     c54:	e3a02032 	mov	r2, #50	; 0x32
     c58:	e5c32013 	strb	r2, [r3, #19]
				setrpm.cTotal[1] = '3';
     c5c:	e30335c0 	movw	r3, #13760	; 0x35c0
     c60:	e3403000 	movt	r3, #0
     c64:	e3a02033 	mov	r2, #51	; 0x33
     c68:	e5c32014 	strb	r2, [r3, #20]
				setrpm.cTotal[2] = '3';
     c6c:	e30335c0 	movw	r3, #13760	; 0x35c0
     c70:	e3403000 	movt	r3, #0
     c74:	e3a02033 	mov	r2, #51	; 0x33
     c78:	e5c32015 	strb	r2, [r3, #21]
			}
			SetRPM_Write(setrpm.cTotal);
     c7c:	e59f0054 	ldr	r0, [pc, #84]	; cd8 <Key+0x250>
     c80:	eb0001e2 	bl	1410 <SetRPM_Write>
			percent = setrpm.iTotal / (float) 233;
     c84:	e30335c0 	movw	r3, #13760	; 0x35c0
     c88:	e3403000 	movt	r3, #0
     c8c:	e593300c 	ldr	r3, [r3, #12]
     c90:	e1a00003 	mov	r0, r3
     c94:	eb000637 	bl	2578 <__aeabi_i2f>
     c98:	e1a03000 	mov	r3, r0
     c9c:	e1a00003 	mov	r0, r3
     ca0:	e3a01000 	mov	r1, #0
     ca4:	e3441369 	movt	r1, #17257	; 0x4369
     ca8:	eb0006cf 	bl	27ec <__aeabi_fdiv>
     cac:	e1a03000 	mov	r3, r0
     cb0:	e1a02003 	mov	r2, r3
     cb4:	e30335a0 	movw	r3, #13728	; 0x35a0
     cb8:	e3403000 	movt	r3, #0
     cbc:	e5832000 	str	r2, [r3]
			return;
     cc0:	e1a00000 	nop			; (mov r0, r0)
     cc4:	ea000000 	b	ccc <Key+0x244>
void Key(void)
{
	char key = GetKey(keyData);

	if(key == 0xD)		//invalid key
		return;
     cc8:	e1a00000 	nop			; (mov r0, r0)
	{
		*GPIOPtr &= 0xFFFFFFF7;
		*GPIOPtr |= 0x4;
	}
	*/
}
     ccc:	e24bd004 	sub	sp, r11, #4
     cd0:	e8bd8800 	pop	{r11, pc}
     cd4:	000035bb 	.word	0x000035bb
     cd8:	000035d3 	.word	0x000035d3

00000cdc <GetKey>:

char GetKey(int keyData)
{
     cdc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     ce0:	e28db000 	add	r11, sp, #0
     ce4:	e24dd014 	sub	sp, sp, #20
     ce8:	e50b0010 	str	r0, [r11, #-16]
	char key;

	switch(keyData)
     cec:	e51b3010 	ldr	r3, [r11, #-16]
     cf0:	e243305a 	sub	r3, r3, #90	; 0x5a
     cf4:	e3530086 	cmp	r3, #134	; 0x86
     cf8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
     cfc:	ea0000b0 	b	fc4 <GetKey+0x2e8>
     d00:	00000f1c 	.word	0x00000f1c
     d04:	00000fc4 	.word	0x00000fc4
     d08:	00000fc4 	.word	0x00000fc4
     d0c:	00000fc4 	.word	0x00000fc4
     d10:	00000fc4 	.word	0x00000fc4
     d14:	00000fc4 	.word	0x00000fc4
     d18:	00000fc4 	.word	0x00000fc4
     d1c:	00000fc4 	.word	0x00000fc4
     d20:	00000fc4 	.word	0x00000fc4
     d24:	00000fc4 	.word	0x00000fc4
     d28:	00000fc4 	.word	0x00000fc4
     d2c:	00000fc4 	.word	0x00000fc4
     d30:	00000fc4 	.word	0x00000fc4
     d34:	00000fc4 	.word	0x00000fc4
     d38:	00000fc4 	.word	0x00000fc4
     d3c:	00000f40 	.word	0x00000f40
     d40:	00000fc4 	.word	0x00000fc4
     d44:	00000f64 	.word	0x00000f64
     d48:	00000f88 	.word	0x00000f88
     d4c:	00000fc4 	.word	0x00000fc4
     d50:	00000fc4 	.word	0x00000fc4
     d54:	00000fc4 	.word	0x00000fc4
     d58:	00000f34 	.word	0x00000f34
     d5c:	00000fc4 	.word	0x00000fc4
     d60:	00000f4c 	.word	0x00000f4c
     d64:	00000f70 	.word	0x00000f70
     d68:	00000f7c 	.word	0x00000f7c
     d6c:	00000f94 	.word	0x00000f94
     d70:	00000fc4 	.word	0x00000fc4
     d74:	00000fc4 	.word	0x00000fc4
     d78:	00000fc4 	.word	0x00000fc4
     d7c:	00000fac 	.word	0x00000fac
     d80:	00000f58 	.word	0x00000f58
     d84:	00000fb8 	.word	0x00000fb8
     d88:	00000fc4 	.word	0x00000fc4
     d8c:	00000fa0 	.word	0x00000fa0
     d90:	00000fc4 	.word	0x00000fc4
     d94:	00000fc4 	.word	0x00000fc4
     d98:	00000fc4 	.word	0x00000fc4
     d9c:	00000fc4 	.word	0x00000fc4
     da0:	00000fc4 	.word	0x00000fc4
     da4:	00000fc4 	.word	0x00000fc4
     da8:	00000fc4 	.word	0x00000fc4
     dac:	00000fc4 	.word	0x00000fc4
     db0:	00000fc4 	.word	0x00000fc4
     db4:	00000fc4 	.word	0x00000fc4
     db8:	00000fc4 	.word	0x00000fc4
     dbc:	00000fc4 	.word	0x00000fc4
     dc0:	00000fc4 	.word	0x00000fc4
     dc4:	00000fc4 	.word	0x00000fc4
     dc8:	00000fc4 	.word	0x00000fc4
     dcc:	00000fc4 	.word	0x00000fc4
     dd0:	00000fc4 	.word	0x00000fc4
     dd4:	00000fc4 	.word	0x00000fc4
     dd8:	00000fc4 	.word	0x00000fc4
     ddc:	00000fc4 	.word	0x00000fc4
     de0:	00000fc4 	.word	0x00000fc4
     de4:	00000fc4 	.word	0x00000fc4
     de8:	00000fc4 	.word	0x00000fc4
     dec:	00000fc4 	.word	0x00000fc4
     df0:	00000fc4 	.word	0x00000fc4
     df4:	00000fc4 	.word	0x00000fc4
     df8:	00000fc4 	.word	0x00000fc4
     dfc:	00000fc4 	.word	0x00000fc4
     e00:	00000fc4 	.word	0x00000fc4
     e04:	00000fc4 	.word	0x00000fc4
     e08:	00000fc4 	.word	0x00000fc4
     e0c:	00000fc4 	.word	0x00000fc4
     e10:	00000fc4 	.word	0x00000fc4
     e14:	00000fc4 	.word	0x00000fc4
     e18:	00000fc4 	.word	0x00000fc4
     e1c:	00000fc4 	.word	0x00000fc4
     e20:	00000fc4 	.word	0x00000fc4
     e24:	00000fc4 	.word	0x00000fc4
     e28:	00000fc4 	.word	0x00000fc4
     e2c:	00000fc4 	.word	0x00000fc4
     e30:	00000fc4 	.word	0x00000fc4
     e34:	00000fc4 	.word	0x00000fc4
     e38:	00000fc4 	.word	0x00000fc4
     e3c:	00000fc4 	.word	0x00000fc4
     e40:	00000fc4 	.word	0x00000fc4
     e44:	00000fc4 	.word	0x00000fc4
     e48:	00000fc4 	.word	0x00000fc4
     e4c:	00000fc4 	.word	0x00000fc4
     e50:	00000fc4 	.word	0x00000fc4
     e54:	00000fc4 	.word	0x00000fc4
     e58:	00000fc4 	.word	0x00000fc4
     e5c:	00000fc4 	.word	0x00000fc4
     e60:	00000fc4 	.word	0x00000fc4
     e64:	00000fc4 	.word	0x00000fc4
     e68:	00000fc4 	.word	0x00000fc4
     e6c:	00000fc4 	.word	0x00000fc4
     e70:	00000fc4 	.word	0x00000fc4
     e74:	00000fc4 	.word	0x00000fc4
     e78:	00000fc4 	.word	0x00000fc4
     e7c:	00000fc4 	.word	0x00000fc4
     e80:	00000fc4 	.word	0x00000fc4
     e84:	00000fc4 	.word	0x00000fc4
     e88:	00000fc4 	.word	0x00000fc4
     e8c:	00000fc4 	.word	0x00000fc4
     e90:	00000fc4 	.word	0x00000fc4
     e94:	00000fc4 	.word	0x00000fc4
     e98:	00000fc4 	.word	0x00000fc4
     e9c:	00000fc4 	.word	0x00000fc4
     ea0:	00000fc4 	.word	0x00000fc4
     ea4:	00000fc4 	.word	0x00000fc4
     ea8:	00000fc4 	.word	0x00000fc4
     eac:	00000fc4 	.word	0x00000fc4
     eb0:	00000fc4 	.word	0x00000fc4
     eb4:	00000fc4 	.word	0x00000fc4
     eb8:	00000fc4 	.word	0x00000fc4
     ebc:	00000fc4 	.word	0x00000fc4
     ec0:	00000fc4 	.word	0x00000fc4
     ec4:	00000fc4 	.word	0x00000fc4
     ec8:	00000fc4 	.word	0x00000fc4
     ecc:	00000fc4 	.word	0x00000fc4
     ed0:	00000fc4 	.word	0x00000fc4
     ed4:	00000fc4 	.word	0x00000fc4
     ed8:	00000fc4 	.word	0x00000fc4
     edc:	00000fc4 	.word	0x00000fc4
     ee0:	00000fc4 	.word	0x00000fc4
     ee4:	00000fc4 	.word	0x00000fc4
     ee8:	00000fc4 	.word	0x00000fc4
     eec:	00000fc4 	.word	0x00000fc4
     ef0:	00000fc4 	.word	0x00000fc4
     ef4:	00000fc4 	.word	0x00000fc4
     ef8:	00000fc4 	.word	0x00000fc4
     efc:	00000fc4 	.word	0x00000fc4
     f00:	00000fc4 	.word	0x00000fc4
     f04:	00000fc4 	.word	0x00000fc4
     f08:	00000fc4 	.word	0x00000fc4
     f0c:	00000fc4 	.word	0x00000fc4
     f10:	00000fc4 	.word	0x00000fc4
     f14:	00000fc4 	.word	0x00000fc4
     f18:	00000f28 	.word	0x00000f28
	{
		case 0x5A:		//enter
			key = 0xA;
     f1c:	e3a0300a 	mov	r3, #10
     f20:	e54b3005 	strb	r3, [r11, #-5]
			break;
     f24:	ea000029 	b	fd0 <GetKey+0x2f4>
		case 0xE0:		//enter
			key = 0xA;
     f28:	e3a0300a 	mov	r3, #10
     f2c:	e54b3005 	strb	r3, [r11, #-5]
			break;
     f30:	ea000026 	b	fd0 <GetKey+0x2f4>
		case 0x70:		//0
			key = 0;
     f34:	e3a03000 	mov	r3, #0
     f38:	e54b3005 	strb	r3, [r11, #-5]
			break;
     f3c:	ea000023 	b	fd0 <GetKey+0x2f4>
		case 0x69:		//1
			key = 1;
     f40:	e3a03001 	mov	r3, #1
     f44:	e54b3005 	strb	r3, [r11, #-5]
			break;
     f48:	ea000020 	b	fd0 <GetKey+0x2f4>
		case 0x72:		//2
			key = 2;
     f4c:	e3a03002 	mov	r3, #2
     f50:	e54b3005 	strb	r3, [r11, #-5]
			break;
     f54:	ea00001d 	b	fd0 <GetKey+0x2f4>
		case 0x7A:		//3
			key = 3;
     f58:	e3a03003 	mov	r3, #3
     f5c:	e54b3005 	strb	r3, [r11, #-5]
			break;
     f60:	ea00001a 	b	fd0 <GetKey+0x2f4>
		case 0x6B:		//4
			key = 4;
     f64:	e3a03004 	mov	r3, #4
     f68:	e54b3005 	strb	r3, [r11, #-5]
			break;
     f6c:	ea000017 	b	fd0 <GetKey+0x2f4>
		case 0x73:		//5
			key = 5;
     f70:	e3a03005 	mov	r3, #5
     f74:	e54b3005 	strb	r3, [r11, #-5]
			break;
     f78:	ea000014 	b	fd0 <GetKey+0x2f4>
		case 0x74:		//6
			key = 6;
     f7c:	e3a03006 	mov	r3, #6
     f80:	e54b3005 	strb	r3, [r11, #-5]
			break;
     f84:	ea000011 	b	fd0 <GetKey+0x2f4>
		case 0x6C:		//7
			key = 7;
     f88:	e3a03007 	mov	r3, #7
     f8c:	e54b3005 	strb	r3, [r11, #-5]
			break;
     f90:	ea00000e 	b	fd0 <GetKey+0x2f4>
		case 0x75:		//8
			key = 8;
     f94:	e3a03008 	mov	r3, #8
     f98:	e54b3005 	strb	r3, [r11, #-5]
			break;
     f9c:	ea00000b 	b	fd0 <GetKey+0x2f4>
		case 0x7D:		//9
			key = 9;
     fa0:	e3a03009 	mov	r3, #9
     fa4:	e54b3005 	strb	r3, [r11, #-5]
			break;
     fa8:	ea000008 	b	fd0 <GetKey+0x2f4>
		case 0x79:		//+
			key = 0xB;
     fac:	e3a0300b 	mov	r3, #11
     fb0:	e54b3005 	strb	r3, [r11, #-5]
			break;
     fb4:	ea000005 	b	fd0 <GetKey+0x2f4>
		case 0x7B:		//-
			key = 0xC;
     fb8:	e3a0300c 	mov	r3, #12
     fbc:	e54b3005 	strb	r3, [r11, #-5]
			break;
     fc0:	ea000002 	b	fd0 <GetKey+0x2f4>
		default:		//invalid
			key = 0xD;
     fc4:	e3a0300d 	mov	r3, #13
     fc8:	e54b3005 	strb	r3, [r11, #-5]
			break;
     fcc:	e1a00000 	nop			; (mov r0, r0)
	}
	return key;
     fd0:	e55b3005 	ldrb	r3, [r11, #-5]
}
     fd4:	e1a00003 	mov	r0, r3
     fd8:	e28bd000 	add	sp, r11, #0
     fdc:	e8bd0800 	ldmfd	sp!, {r11}
     fe0:	e12fff1e 	bx	lr

00000fe4 <PS2_Read>:
extern int keyData;     //declared in keypad.c
extern int goodKey;     //declared in main.c

//**Function Code**//
void PS2_Read(void)
{
     fe4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     fe8:	e28db000 	add	r11, sp, #0
     fec:	e24dd01c 	sub	sp, sp, #28
    volatile int* PS2_ptr = (int*) PS2_BASE;
     ff0:	e3a03c01 	mov	r3, #256	; 0x100
     ff4:	e34f3f20 	movt	r3, #65312	; 0xff20
     ff8:	e50b300c 	str	r3, [r11, #-12]
    int ps2data;
    static char flag = 0;   //holds if release accured
    char waiting = 1;
     ffc:	e3a03001 	mov	r3, #1
    1000:	e54b3005 	strb	r3, [r11, #-5]
    int trash = 0;          //holds current PS2 read
    1004:	e3a03000 	mov	r3, #0
    1008:	e50b3010 	str	r3, [r11, #-16]
    int ravail;             //holds if unread data
    int rvalid;

    while(waiting == 1)                              //if unread data
    100c:	ea000030 	b	10d4 <PS2_Read+0xf0>
    {
        ps2data = *(PS2_ptr);
    1010:	e51b300c 	ldr	r3, [r11, #-12]
    1014:	e5933000 	ldr	r3, [r3]
    1018:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
        ravail = (ps2data & 0xFFFF0000) >> 16;
    101c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    1020:	e1a03823 	lsr	r3, r3, #16
    1024:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
        rvalid = (ps2data & 0x8000) >> 15;
    1028:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    102c:	e2033902 	and	r3, r3, #32768	; 0x8000
    1030:	e1a037c3 	asr	r3, r3, #15
    1034:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4

        if(ravail == 0)
    1038:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    103c:	e3530000 	cmp	r3, #0
    1040:	0a000027 	beq	10e4 <PS2_Read+0x100>
            return;

        if(rvalid == 1)
    1044:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    1048:	e3530001 	cmp	r3, #1
    104c:	1a000020 	bne	10d4 <PS2_Read+0xf0>
        {
            trash = ps2data & 0xFF;             //read data
    1050:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    1054:	e6ef3073 	uxtb	r3, r3
    1058:	e50b3010 	str	r3, [r11, #-16]
            if(flag == 1)                      //if flag set
    105c:	e30335a4 	movw	r3, #13732	; 0x35a4
    1060:	e3403000 	movt	r3, #0
    1064:	e5d33000 	ldrb	r3, [r3]
    1068:	e3530001 	cmp	r3, #1
    106c:	1a00000d 	bne	10a8 <PS2_Read+0xc4>
            {
                keyData = trash;                  //keep data
    1070:	e303359c 	movw	r3, #13724	; 0x359c
    1074:	e3403000 	movt	r3, #0
    1078:	e51b2010 	ldr	r2, [r11, #-16]
    107c:	e5832000 	str	r2, [r3]
                flag = 0;                         //clear local flag
    1080:	e30335a4 	movw	r3, #13732	; 0x35a4
    1084:	e3403000 	movt	r3, #0
    1088:	e3a02000 	mov	r2, #0
    108c:	e5c32000 	strb	r2, [r3]
                goodKey = 1;                      //set global flag
    1090:	e3033578 	movw	r3, #13688	; 0x3578
    1094:	e3403000 	movt	r3, #0
    1098:	e3a02001 	mov	r2, #1
    109c:	e5832000 	str	r2, [r3]
                waiting = 0;                      //clear loop control
    10a0:	e3a03000 	mov	r3, #0
    10a4:	e54b3005 	strb	r3, [r11, #-5]
            }
            if(trash == 0xF0)                   //if date is break code
    10a8:	e51b3010 	ldr	r3, [r11, #-16]
    10ac:	e35300f0 	cmp	r3, #240	; 0xf0
    10b0:	1a000007 	bne	10d4 <PS2_Read+0xf0>
            {
                flag = 1;                         //set local flag
    10b4:	e30335a4 	movw	r3, #13732	; 0x35a4
    10b8:	e3403000 	movt	r3, #0
    10bc:	e3a02001 	mov	r2, #1
    10c0:	e5c32000 	strb	r2, [r3]
                keyData = 0;                      //clear data
    10c4:	e303359c 	movw	r3, #13724	; 0x359c
    10c8:	e3403000 	movt	r3, #0
    10cc:	e3a02000 	mov	r2, #0
    10d0:	e5832000 	str	r2, [r3]
    char waiting = 1;
    int trash = 0;          //holds current PS2 read
    int ravail;             //holds if unread data
    int rvalid;

    while(waiting == 1)                              //if unread data
    10d4:	e55b3005 	ldrb	r3, [r11, #-5]
    10d8:	e3530001 	cmp	r3, #1
    10dc:	0affffcb 	beq	1010 <PS2_Read+0x2c>
    10e0:	ea000000 	b	10e8 <PS2_Read+0x104>
        ps2data = *(PS2_ptr);
        ravail = (ps2data & 0xFFFF0000) >> 16;
        rvalid = (ps2data & 0x8000) >> 15;

        if(ravail == 0)
            return;
    10e4:	e1a00000 	nop			; (mov r0, r0)
                flag = 1;                         //set local flag
                keyData = 0;                      //clear data
            }
        }
    }
}
    10e8:	e28bd000 	add	sp, r11, #0
    10ec:	e8bd0800 	ldmfd	sp!, {r11}
    10f0:	e12fff1e 	bx	lr

000010f4 <GUI_Setup>:
#define Eggplant		0x310A
#define Burgandy		0x7804

//**Function Code**//
void GUI_Setup(void)
{
    10f4:	e92d4800 	push	{r11, lr}
    10f8:	e28db004 	add	r11, sp, #4
    10fc:	e24dd0a8 	sub	sp, sp, #168	; 0xa8
	VGA_box(0, 0, 319, 239, MutedNavy);				//background
    1100:	e305328e 	movw	r3, #21134	; 0x528e
    1104:	e58d3000 	str	r3, [sp]
    1108:	e3a00000 	mov	r0, #0
    110c:	e3a01000 	mov	r1, #0
    1110:	e300213f 	movw	r2, #319	; 0x13f
    1114:	e3a030ef 	mov	r3, #239	; 0xef
    1118:	eb000122 	bl	15a8 <VGA_box>
	VGA_box(59, 149, 261, 166, MetallicGold);		//bar's border
    111c:	e30d3567 	movw	r3, #54631	; 0xd567
    1120:	e34f3fff 	movt	r3, #65535	; 0xffff
    1124:	e58d3000 	str	r3, [sp]
    1128:	e3a0003b 	mov	r0, #59	; 0x3b
    112c:	e3a01095 	mov	r1, #149	; 0x95
    1130:	e3002105 	movw	r2, #261	; 0x105
    1134:	e3a030a6 	mov	r3, #166	; 0xa6
    1138:	eb00011a 	bl	15a8 <VGA_box>
	VGA_box(60, 150, 260, 165, Burgandy);			//bar's background
    113c:	e3073804 	movw	r3, #30724	; 0x7804
    1140:	e58d3000 	str	r3, [sp]
    1144:	e3a0003c 	mov	r0, #60	; 0x3c
    1148:	e3a01096 	mov	r1, #150	; 0x96
    114c:	e3a02f41 	mov	r2, #260	; 0x104
    1150:	e3a030a5 	mov	r3, #165	; 0xa5
    1154:	eb000113 	bl	15a8 <VGA_box>

	char input[40] = "RPM Input:";
    1158:	e3022fb4 	movw	r2, #12212	; 0x2fb4
    115c:	e3402000 	movt	r2, #0
    1160:	e24b302c 	sub	r3, r11, #44	; 0x2c
    1164:	e8920007 	ldm	r2, {r0, r1, r2}
    1168:	e8a30003 	stmia	r3!, {r0, r1}
    116c:	e1c320b0 	strh	r2, [r3]
    1170:	e2833002 	add	r3, r3, #2
    1174:	e1a02822 	lsr	r2, r2, #16
    1178:	e5c32000 	strb	r2, [r3]
    117c:	e24b2021 	sub	r2, r11, #33	; 0x21
    1180:	e3a0301d 	mov	r3, #29
    1184:	e1a00002 	mov	r0, r2
    1188:	e3a01000 	mov	r1, #0
    118c:	e1a02003 	mov	r2, r3
    1190:	eb000647 	bl	2ab4 <memset>
	VGA_text(10, 10, input);
    1194:	e24b302c 	sub	r3, r11, #44	; 0x2c
    1198:	e3a0000a 	mov	r0, #10
    119c:	e3a0100a 	mov	r1, #10
    11a0:	e1a02003 	mov	r2, r3
    11a4:	eb000128 	bl	164c <VGA_text>
	char set[40] = "Set RPM:";
    11a8:	e3022fdc 	movw	r2, #12252	; 0x2fdc
    11ac:	e3402000 	movt	r2, #0
    11b0:	e24b3054 	sub	r3, r11, #84	; 0x54
    11b4:	e8920007 	ldm	r2, {r0, r1, r2}
    11b8:	e8a30003 	stmia	r3!, {r0, r1}
    11bc:	e5c32000 	strb	r2, [r3]
    11c0:	e24b204b 	sub	r2, r11, #75	; 0x4b
    11c4:	e3a0301f 	mov	r3, #31
    11c8:	e1a00002 	mov	r0, r2
    11cc:	e3a01000 	mov	r1, #0
    11d0:	e1a02003 	mov	r2, r3
    11d4:	eb000636 	bl	2ab4 <memset>
	VGA_text(12, 13, set);
    11d8:	e24b3054 	sub	r3, r11, #84	; 0x54
    11dc:	e3a0000c 	mov	r0, #12
    11e0:	e3a0100d 	mov	r1, #13
    11e4:	e1a02003 	mov	r2, r3
    11e8:	eb000117 	bl	164c <VGA_text>
	char actual[40] = "Actual RPM:";
    11ec:	e3033004 	movw	r3, #12292	; 0x3004
    11f0:	e3403000 	movt	r3, #0
    11f4:	e24bc07c 	sub	r12, r11, #124	; 0x7c
    11f8:	e8930007 	ldm	r3, {r0, r1, r2}
    11fc:	e88c0007 	stm	r12, {r0, r1, r2}
    1200:	e24b3070 	sub	r3, r11, #112	; 0x70
    1204:	e3a02000 	mov	r2, #0
    1208:	e5832000 	str	r2, [r3]
    120c:	e2833004 	add	r3, r3, #4
    1210:	e3a02000 	mov	r2, #0
    1214:	e5832000 	str	r2, [r3]
    1218:	e2833004 	add	r3, r3, #4
    121c:	e3a02000 	mov	r2, #0
    1220:	e5832000 	str	r2, [r3]
    1224:	e2833004 	add	r3, r3, #4
    1228:	e3a02000 	mov	r2, #0
    122c:	e5832000 	str	r2, [r3]
    1230:	e2833004 	add	r3, r3, #4
    1234:	e3a02000 	mov	r2, #0
    1238:	e5832000 	str	r2, [r3]
    123c:	e2833004 	add	r3, r3, #4
    1240:	e3a02000 	mov	r2, #0
    1244:	e5832000 	str	r2, [r3]
    1248:	e2833004 	add	r3, r3, #4
    124c:	e3a02000 	mov	r2, #0
    1250:	e5832000 	str	r2, [r3]
    1254:	e2833004 	add	r3, r3, #4
	VGA_text(9, 16, actual);
    1258:	e24b307c 	sub	r3, r11, #124	; 0x7c
    125c:	e3a00009 	mov	r0, #9
    1260:	e3a01010 	mov	r1, #16
    1264:	e1a02003 	mov	r2, r3
    1268:	eb0000f7 	bl	164c <VGA_text>
	char current[40] = "Current:";
    126c:	e303202c 	movw	r2, #12332	; 0x302c
    1270:	e3402000 	movt	r2, #0
    1274:	e24b30a4 	sub	r3, r11, #164	; 0xa4
    1278:	e8920007 	ldm	r2, {r0, r1, r2}
    127c:	e8a30003 	stmia	r3!, {r0, r1}
    1280:	e5c32000 	strb	r2, [r3]
    1284:	e24b209b 	sub	r2, r11, #155	; 0x9b
    1288:	e3a0301f 	mov	r3, #31
    128c:	e1a00002 	mov	r0, r2
    1290:	e3a01000 	mov	r1, #0
    1294:	e1a02003 	mov	r2, r3
    1298:	eb000605 	bl	2ab4 <memset>
	VGA_text(12, 19, current);
    129c:	e24b30a4 	sub	r3, r11, #164	; 0xa4
    12a0:	e3a0000c 	mov	r0, #12
    12a4:	e3a01013 	mov	r1, #19
    12a8:	e1a02003 	mov	r2, r3
    12ac:	eb0000e6 	bl	164c <VGA_text>
}
    12b0:	e24bd004 	sub	sp, r11, #4
    12b4:	e8bd8800 	pop	{r11, pc}

000012b8 <InputRPM_Write>:

void InputRPM_Write(char* value)
{
    12b8:	e92d4800 	push	{r11, lr}
    12bc:	e28db004 	add	r11, sp, #4
    12c0:	e24dd030 	sub	sp, sp, #48	; 0x30
    12c4:	e50b0030 	str	r0, [r11, #-48]	; 0xffffffd0
	VGA_text(21, 10, value);
    12c8:	e3a00015 	mov	r0, #21
    12cc:	e3a0100a 	mov	r1, #10
    12d0:	e51b2030 	ldr	r2, [r11, #-48]	; 0xffffffd0
    12d4:	eb0000dc 	bl	164c <VGA_text>
	char rpm[40] = "RPM";
    12d8:	e3053052 	movw	r3, #20562	; 0x5052
    12dc:	e340304d 	movt	r3, #77	; 0x4d
    12e0:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
    12e4:	e24b3028 	sub	r3, r11, #40	; 0x28
    12e8:	e3a02000 	mov	r2, #0
    12ec:	e5832000 	str	r2, [r3]
    12f0:	e2833004 	add	r3, r3, #4
    12f4:	e3a02000 	mov	r2, #0
    12f8:	e5832000 	str	r2, [r3]
    12fc:	e2833004 	add	r3, r3, #4
    1300:	e3a02000 	mov	r2, #0
    1304:	e5832000 	str	r2, [r3]
    1308:	e2833004 	add	r3, r3, #4
    130c:	e3a02000 	mov	r2, #0
    1310:	e5832000 	str	r2, [r3]
    1314:	e2833004 	add	r3, r3, #4
    1318:	e3a02000 	mov	r2, #0
    131c:	e5832000 	str	r2, [r3]
    1320:	e2833004 	add	r3, r3, #4
    1324:	e3a02000 	mov	r2, #0
    1328:	e5832000 	str	r2, [r3]
    132c:	e2833004 	add	r3, r3, #4
    1330:	e3a02000 	mov	r2, #0
    1334:	e5832000 	str	r2, [r3]
    1338:	e2833004 	add	r3, r3, #4
    133c:	e3a02000 	mov	r2, #0
    1340:	e5832000 	str	r2, [r3]
    1344:	e2833004 	add	r3, r3, #4
    1348:	e3a02000 	mov	r2, #0
    134c:	e5832000 	str	r2, [r3]
    1350:	e2833004 	add	r3, r3, #4
	VGA_text(25, 10, rpm);
    1354:	e24b302c 	sub	r3, r11, #44	; 0x2c
    1358:	e3a00019 	mov	r0, #25
    135c:	e3a0100a 	mov	r1, #10
    1360:	e1a02003 	mov	r2, r3
    1364:	eb0000b8 	bl	164c <VGA_text>
}
    1368:	e24bd004 	sub	sp, r11, #4
    136c:	e8bd8800 	pop	{r11, pc}

00001370 <InputRPM_Clear>:

void InputRPM_Clear()
{
    1370:	e92d4800 	push	{r11, lr}
    1374:	e28db004 	add	r11, sp, #4
    1378:	e24dd028 	sub	sp, sp, #40	; 0x28
	char clear[40] = "       ";
    137c:	e3033054 	movw	r3, #12372	; 0x3054
    1380:	e3403000 	movt	r3, #0
    1384:	e24b202c 	sub	r2, r11, #44	; 0x2c
    1388:	e8930003 	ldm	r3, {r0, r1}
    138c:	e8820003 	stm	r2, {r0, r1}
    1390:	e24b3024 	sub	r3, r11, #36	; 0x24
    1394:	e3a02000 	mov	r2, #0
    1398:	e5832000 	str	r2, [r3]
    139c:	e2833004 	add	r3, r3, #4
    13a0:	e3a02000 	mov	r2, #0
    13a4:	e5832000 	str	r2, [r3]
    13a8:	e2833004 	add	r3, r3, #4
    13ac:	e3a02000 	mov	r2, #0
    13b0:	e5832000 	str	r2, [r3]
    13b4:	e2833004 	add	r3, r3, #4
    13b8:	e3a02000 	mov	r2, #0
    13bc:	e5832000 	str	r2, [r3]
    13c0:	e2833004 	add	r3, r3, #4
    13c4:	e3a02000 	mov	r2, #0
    13c8:	e5832000 	str	r2, [r3]
    13cc:	e2833004 	add	r3, r3, #4
    13d0:	e3a02000 	mov	r2, #0
    13d4:	e5832000 	str	r2, [r3]
    13d8:	e2833004 	add	r3, r3, #4
    13dc:	e3a02000 	mov	r2, #0
    13e0:	e5832000 	str	r2, [r3]
    13e4:	e2833004 	add	r3, r3, #4
    13e8:	e3a02000 	mov	r2, #0
    13ec:	e5832000 	str	r2, [r3]
    13f0:	e2833004 	add	r3, r3, #4
	VGA_text(21, 10, clear);
    13f4:	e24b302c 	sub	r3, r11, #44	; 0x2c
    13f8:	e3a00015 	mov	r0, #21
    13fc:	e3a0100a 	mov	r1, #10
    1400:	e1a02003 	mov	r2, r3
    1404:	eb000090 	bl	164c <VGA_text>
}
    1408:	e24bd004 	sub	sp, r11, #4
    140c:	e8bd8800 	pop	{r11, pc}

00001410 <SetRPM_Write>:

void SetRPM_Write(char* value)
{
    1410:	e92d4800 	push	{r11, lr}
    1414:	e28db004 	add	r11, sp, #4
    1418:	e24dd030 	sub	sp, sp, #48	; 0x30
    141c:	e50b0030 	str	r0, [r11, #-48]	; 0xffffffd0
	VGA_text(21, 13, value);
    1420:	e3a00015 	mov	r0, #21
    1424:	e3a0100d 	mov	r1, #13
    1428:	e51b2030 	ldr	r2, [r11, #-48]	; 0xffffffd0
    142c:	eb000086 	bl	164c <VGA_text>
	char rpm[40] = "RPM";
    1430:	e3053052 	movw	r3, #20562	; 0x5052
    1434:	e340304d 	movt	r3, #77	; 0x4d
    1438:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
    143c:	e24b3028 	sub	r3, r11, #40	; 0x28
    1440:	e3a02000 	mov	r2, #0
    1444:	e5832000 	str	r2, [r3]
    1448:	e2833004 	add	r3, r3, #4
    144c:	e3a02000 	mov	r2, #0
    1450:	e5832000 	str	r2, [r3]
    1454:	e2833004 	add	r3, r3, #4
    1458:	e3a02000 	mov	r2, #0
    145c:	e5832000 	str	r2, [r3]
    1460:	e2833004 	add	r3, r3, #4
    1464:	e3a02000 	mov	r2, #0
    1468:	e5832000 	str	r2, [r3]
    146c:	e2833004 	add	r3, r3, #4
    1470:	e3a02000 	mov	r2, #0
    1474:	e5832000 	str	r2, [r3]
    1478:	e2833004 	add	r3, r3, #4
    147c:	e3a02000 	mov	r2, #0
    1480:	e5832000 	str	r2, [r3]
    1484:	e2833004 	add	r3, r3, #4
    1488:	e3a02000 	mov	r2, #0
    148c:	e5832000 	str	r2, [r3]
    1490:	e2833004 	add	r3, r3, #4
    1494:	e3a02000 	mov	r2, #0
    1498:	e5832000 	str	r2, [r3]
    149c:	e2833004 	add	r3, r3, #4
    14a0:	e3a02000 	mov	r2, #0
    14a4:	e5832000 	str	r2, [r3]
    14a8:	e2833004 	add	r3, r3, #4
	VGA_text(25, 13, rpm);
    14ac:	e24b302c 	sub	r3, r11, #44	; 0x2c
    14b0:	e3a00019 	mov	r0, #25
    14b4:	e3a0100d 	mov	r1, #13
    14b8:	e1a02003 	mov	r2, r3
    14bc:	eb000062 	bl	164c <VGA_text>
}
    14c0:	e24bd004 	sub	sp, r11, #4
    14c4:	e8bd8800 	pop	{r11, pc}

000014c8 <ActualRPM_Write>:

void ActualRPM_Write(char* value)
{
    14c8:	e92d4800 	push	{r11, lr}
    14cc:	e28db004 	add	r11, sp, #4
    14d0:	e24dd030 	sub	sp, sp, #48	; 0x30
    14d4:	e50b0030 	str	r0, [r11, #-48]	; 0xffffffd0
	VGA_text(21, 16, value);
    14d8:	e3a00015 	mov	r0, #21
    14dc:	e3a01010 	mov	r1, #16
    14e0:	e51b2030 	ldr	r2, [r11, #-48]	; 0xffffffd0
    14e4:	eb000058 	bl	164c <VGA_text>
	char rpm[40] = "RPM";
    14e8:	e3053052 	movw	r3, #20562	; 0x5052
    14ec:	e340304d 	movt	r3, #77	; 0x4d
    14f0:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
    14f4:	e24b3028 	sub	r3, r11, #40	; 0x28
    14f8:	e3a02000 	mov	r2, #0
    14fc:	e5832000 	str	r2, [r3]
    1500:	e2833004 	add	r3, r3, #4
    1504:	e3a02000 	mov	r2, #0
    1508:	e5832000 	str	r2, [r3]
    150c:	e2833004 	add	r3, r3, #4
    1510:	e3a02000 	mov	r2, #0
    1514:	e5832000 	str	r2, [r3]
    1518:	e2833004 	add	r3, r3, #4
    151c:	e3a02000 	mov	r2, #0
    1520:	e5832000 	str	r2, [r3]
    1524:	e2833004 	add	r3, r3, #4
    1528:	e3a02000 	mov	r2, #0
    152c:	e5832000 	str	r2, [r3]
    1530:	e2833004 	add	r3, r3, #4
    1534:	e3a02000 	mov	r2, #0
    1538:	e5832000 	str	r2, [r3]
    153c:	e2833004 	add	r3, r3, #4
    1540:	e3a02000 	mov	r2, #0
    1544:	e5832000 	str	r2, [r3]
    1548:	e2833004 	add	r3, r3, #4
    154c:	e3a02000 	mov	r2, #0
    1550:	e5832000 	str	r2, [r3]
    1554:	e2833004 	add	r3, r3, #4
    1558:	e3a02000 	mov	r2, #0
    155c:	e5832000 	str	r2, [r3]
    1560:	e2833004 	add	r3, r3, #4
	VGA_text(25, 16, rpm);
    1564:	e24b302c 	sub	r3, r11, #44	; 0x2c
    1568:	e3a00019 	mov	r0, #25
    156c:	e3a01010 	mov	r1, #16
    1570:	e1a02003 	mov	r2, r3
    1574:	eb000034 	bl	164c <VGA_text>
}
    1578:	e24bd004 	sub	sp, r11, #4
    157c:	e8bd8800 	pop	{r11, pc}

00001580 <Current_Write>:

void Current_Write(char* value)
{
    1580:	e92d4800 	push	{r11, lr}
    1584:	e28db004 	add	r11, sp, #4
    1588:	e24dd008 	sub	sp, sp, #8
    158c:	e50b0008 	str	r0, [r11, #-8]
	VGA_text(21, 19, value);
    1590:	e3a00015 	mov	r0, #21
    1594:	e3a01013 	mov	r1, #19
    1598:	e51b2008 	ldr	r2, [r11, #-8]
    159c:	eb00002a 	bl	164c <VGA_text>
    15a0:	e24bd004 	sub	sp, r11, #4
    15a4:	e8bd8800 	pop	{r11, pc}

000015a8 <VGA_box>:
//**Includes**//
#include "vga.h"
#include "address_map.h"
//**Function Code**//
void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
    15a8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    15ac:	e28db000 	add	r11, sp, #0
    15b0:	e24dd024 	sub	sp, sp, #36	; 0x24
    15b4:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
    15b8:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
    15bc:	e50b2020 	str	r2, [r11, #-32]	; 0xffffffe0
    15c0:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
	int pixel_ptr, row, col;

	for (row = y1; row <= y2; row++)		
    15c4:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    15c8:	e50b3008 	str	r3, [r11, #-8]
    15cc:	ea000017 	b	1630 <VGA_box+0x88>
	{
		for (col = x1; col <= x2; ++col)
    15d0:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    15d4:	e50b300c 	str	r3, [r11, #-12]
    15d8:	ea00000d 	b	1614 <VGA_box+0x6c>
		{
			pixel_ptr = FPGA_ONCHIP_BASE + (row << 10) + (col << 1);
    15dc:	e51b3008 	ldr	r3, [r11, #-8]
    15e0:	e1a03503 	lsl	r3, r3, #10
    15e4:	e1a02003 	mov	r2, r3
    15e8:	e51b300c 	ldr	r3, [r11, #-12]
    15ec:	e1a03083 	lsl	r3, r3, #1
    15f0:	e0823003 	add	r3, r2, r3
    15f4:	e2833332 	add	r3, r3, #-939524096	; 0xc8000000
    15f8:	e50b3010 	str	r3, [r11, #-16]
			*(short *)pixel_ptr = pixel_color;		// set pixel color
    15fc:	e51b3010 	ldr	r3, [r11, #-16]
    1600:	e1db20b4 	ldrh	r2, [r11, #4]
    1604:	e1c320b0 	strh	r2, [r3]
{
	int pixel_ptr, row, col;

	for (row = y1; row <= y2; row++)		
	{
		for (col = x1; col <= x2; ++col)
    1608:	e51b300c 	ldr	r3, [r11, #-12]
    160c:	e2833001 	add	r3, r3, #1
    1610:	e50b300c 	str	r3, [r11, #-12]
    1614:	e51b200c 	ldr	r2, [r11, #-12]
    1618:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    161c:	e1520003 	cmp	r2, r3
    1620:	daffffed 	ble	15dc <VGA_box+0x34>
//**Function Code**//
void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
	int pixel_ptr, row, col;

	for (row = y1; row <= y2; row++)		
    1624:	e51b3008 	ldr	r3, [r11, #-8]
    1628:	e2833001 	add	r3, r3, #1
    162c:	e50b3008 	str	r3, [r11, #-8]
    1630:	e51b2008 	ldr	r2, [r11, #-8]
    1634:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    1638:	e1520003 	cmp	r2, r3
    163c:	daffffe3 	ble	15d0 <VGA_box+0x28>
		{
			pixel_ptr = FPGA_ONCHIP_BASE + (row << 10) + (col << 1);
			*(short *)pixel_ptr = pixel_color;		// set pixel color
		}
	}
} 
    1640:	e28bd000 	add	sp, r11, #0
    1644:	e8bd0800 	ldmfd	sp!, {r11}
    1648:	e12fff1e 	bx	lr

0000164c <VGA_text>:

void VGA_text(int x, int y, char* text_ptr)
{
    164c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1650:	e28db000 	add	r11, sp, #0
    1654:	e24dd01c 	sub	sp, sp, #28
    1658:	e50b0010 	str	r0, [r11, #-16]
    165c:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
    1660:	e50b2018 	str	r2, [r11, #-24]	; 0xffffffe8
	int offset;
  	volatile char* character_buffer = (char *) FPGA_CHAR_BASE;	// VGA character buffer
    1664:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    1668:	e50b300c 	str	r3, [r11, #-12]

	offset = (y << 7) + x;
    166c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    1670:	e1a02383 	lsl	r2, r3, #7
    1674:	e51b3010 	ldr	r3, [r11, #-16]
    1678:	e0823003 	add	r3, r2, r3
    167c:	e50b3008 	str	r3, [r11, #-8]
	while ( *(text_ptr) )
    1680:	ea00000b 	b	16b4 <VGA_text+0x68>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
    1684:	e51b3008 	ldr	r3, [r11, #-8]
    1688:	e51b200c 	ldr	r2, [r11, #-12]
    168c:	e0823003 	add	r3, r2, r3
    1690:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    1694:	e5d22000 	ldrb	r2, [r2]
    1698:	e5c32000 	strb	r2, [r3]
		++text_ptr;
    169c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    16a0:	e2833001 	add	r3, r3, #1
    16a4:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
		++offset;
    16a8:	e51b3008 	ldr	r3, [r11, #-8]
    16ac:	e2833001 	add	r3, r3, #1
    16b0:	e50b3008 	str	r3, [r11, #-8]
{
	int offset;
  	volatile char* character_buffer = (char *) FPGA_CHAR_BASE;	// VGA character buffer

	offset = (y << 7) + x;
	while ( *(text_ptr) )
    16b4:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    16b8:	e5d33000 	ldrb	r3, [r3]
    16bc:	e3530000 	cmp	r3, #0
    16c0:	1affffef 	bne	1684 <VGA_text+0x38>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
		++text_ptr;
		++offset;
	}
    16c4:	e28bd000 	add	sp, r11, #0
    16c8:	e8bd0800 	ldmfd	sp!, {r11}
    16cc:	e12fff1e 	bx	lr

000016d0 <GetCharacter>:
struct RPM setrpm;
struct RPM actrpm;


char GetCharacter(int key)
{
    16d0:	e92d0810 	push	{r4, r11}
    16d4:	e28db004 	add	r11, sp, #4
    16d8:	e24dd038 	sub	sp, sp, #56	; 0x38
    16dc:	e50b0038 	str	r0, [r11, #-56]	; 0xffffffc8
	const int array[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
    16e0:	e303307c 	movw	r3, #12412	; 0x307c
    16e4:	e3403000 	movt	r3, #0
    16e8:	e24bc030 	sub	r12, r11, #48	; 0x30
    16ec:	e1a04003 	mov	r4, r3
    16f0:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
    16f4:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
    16f8:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
    16fc:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
    1700:	e8940003 	ldm	r4, {r0, r1}
    1704:	e88c0003 	stm	r12, {r0, r1}
	char ckey = array[key];
    1708:	e51b2038 	ldr	r2, [r11, #-56]	; 0xffffffc8
    170c:	e3e0302b 	mvn	r3, #43	; 0x2b
    1710:	e1a02102 	lsl	r2, r2, #2
    1714:	e24b1004 	sub	r1, r11, #4
    1718:	e0812002 	add	r2, r1, r2
    171c:	e0823003 	add	r3, r2, r3
    1720:	e5933000 	ldr	r3, [r3]
    1724:	e54b3005 	strb	r3, [r11, #-5]
	return ckey;
    1728:	e55b3005 	ldrb	r3, [r11, #-5]
}
    172c:	e1a00003 	mov	r0, r3
    1730:	e24bd004 	sub	sp, r11, #4
    1734:	e8bd0810 	pop	{r4, r11}
    1738:	e12fff1e 	bx	lr

0000173c <Clear_inprpm>:

void Clear_inprpm(void)
{
    173c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1740:	e28db000 	add	r11, sp, #0
	inprpm.iHundred = 0;
    1744:	e30335a8 	movw	r3, #13736	; 0x35a8
    1748:	e3403000 	movt	r3, #0
    174c:	e3a02000 	mov	r2, #0
    1750:	e5832000 	str	r2, [r3]
	inprpm.iTen = 0;
    1754:	e30335a8 	movw	r3, #13736	; 0x35a8
    1758:	e3403000 	movt	r3, #0
    175c:	e3a02000 	mov	r2, #0
    1760:	e5832004 	str	r2, [r3, #4]
	inprpm.iOne = 0;
    1764:	e30335a8 	movw	r3, #13736	; 0x35a8
    1768:	e3403000 	movt	r3, #0
    176c:	e3a02000 	mov	r2, #0
    1770:	e5832008 	str	r2, [r3, #8]
	inprpm.iTotal = 0;
    1774:	e30335a8 	movw	r3, #13736	; 0x35a8
    1778:	e3403000 	movt	r3, #0
    177c:	e3a02000 	mov	r2, #0
    1780:	e583200c 	str	r2, [r3, #12]

	inprpm.cHundred = ' ';
    1784:	e30335a8 	movw	r3, #13736	; 0x35a8
    1788:	e3403000 	movt	r3, #0
    178c:	e3a02020 	mov	r2, #32
    1790:	e5c32010 	strb	r2, [r3, #16]
	inprpm.cTen = ' ';
    1794:	e30335a8 	movw	r3, #13736	; 0x35a8
    1798:	e3403000 	movt	r3, #0
    179c:	e3a02020 	mov	r2, #32
    17a0:	e5c32011 	strb	r2, [r3, #17]
	inprpm.cOne = ' ';
    17a4:	e30335a8 	movw	r3, #13736	; 0x35a8
    17a8:	e3403000 	movt	r3, #0
    17ac:	e3a02020 	mov	r2, #32
    17b0:	e5c32012 	strb	r2, [r3, #18]
	inprpm.cTotal[0] = ' ';
    17b4:	e30335a8 	movw	r3, #13736	; 0x35a8
    17b8:	e3403000 	movt	r3, #0
    17bc:	e3a02020 	mov	r2, #32
    17c0:	e5c32013 	strb	r2, [r3, #19]
	inprpm.cTotal[1] = ' ';
    17c4:	e30335a8 	movw	r3, #13736	; 0x35a8
    17c8:	e3403000 	movt	r3, #0
    17cc:	e3a02020 	mov	r2, #32
    17d0:	e5c32014 	strb	r2, [r3, #20]
	inprpm.cTotal[2] = ' ';
    17d4:	e30335a8 	movw	r3, #13736	; 0x35a8
    17d8:	e3403000 	movt	r3, #0
    17dc:	e3a02020 	mov	r2, #32
    17e0:	e5c32015 	strb	r2, [r3, #21]
}
    17e4:	e28bd000 	add	sp, r11, #0
    17e8:	e8bd0800 	ldmfd	sp!, {r11}
    17ec:	e12fff1e 	bx	lr

000017f0 <Total_inprpm>:

void Total_inprpm(void)
{
    17f0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    17f4:	e28db000 	add	r11, sp, #0
    17f8:	e24dd00c 	sub	sp, sp, #12
	int hundred = inprpm.iHundred;
    17fc:	e30335a8 	movw	r3, #13736	; 0x35a8
    1800:	e3403000 	movt	r3, #0
    1804:	e5933000 	ldr	r3, [r3]
    1808:	e50b3008 	str	r3, [r11, #-8]
	int ten = inprpm.iTen;
    180c:	e30335a8 	movw	r3, #13736	; 0x35a8
    1810:	e3403000 	movt	r3, #0
    1814:	e5933004 	ldr	r3, [r3, #4]
    1818:	e50b300c 	str	r3, [r11, #-12]

	hundred = inprpm.iHundred * 100;
    181c:	e30335a8 	movw	r3, #13736	; 0x35a8
    1820:	e3403000 	movt	r3, #0
    1824:	e5933000 	ldr	r3, [r3]
    1828:	e3a02064 	mov	r2, #100	; 0x64
    182c:	e0030392 	mul	r3, r2, r3
    1830:	e50b3008 	str	r3, [r11, #-8]
	ten = inprpm.iTen * 10;
    1834:	e30335a8 	movw	r3, #13736	; 0x35a8
    1838:	e3403000 	movt	r3, #0
    183c:	e5932004 	ldr	r2, [r3, #4]
    1840:	e1a03002 	mov	r3, r2
    1844:	e1a03103 	lsl	r3, r3, #2
    1848:	e0833002 	add	r3, r3, r2
    184c:	e1a03083 	lsl	r3, r3, #1
    1850:	e50b300c 	str	r3, [r11, #-12]
	inprpm.iTotal = hundred + ten + inprpm.iOne;
    1854:	e51b2008 	ldr	r2, [r11, #-8]
    1858:	e51b300c 	ldr	r3, [r11, #-12]
    185c:	e0822003 	add	r2, r2, r3
    1860:	e30335a8 	movw	r3, #13736	; 0x35a8
    1864:	e3403000 	movt	r3, #0
    1868:	e5933008 	ldr	r3, [r3, #8]
    186c:	e0822003 	add	r2, r2, r3
    1870:	e30335a8 	movw	r3, #13736	; 0x35a8
    1874:	e3403000 	movt	r3, #0
    1878:	e583200c 	str	r2, [r3, #12]
}
    187c:	e28bd000 	add	sp, r11, #0
    1880:	e8bd0800 	ldmfd	sp!, {r11}
    1884:	e12fff1e 	bx	lr

00001888 <InitializeStructs>:

//**Function Code**//
void InitializeStructs(void)
{
    1888:	e92d0810 	push	{r4, r11}
    188c:	e28db004 	add	r11, sp, #4
	inprpm.iHundred = 0;
    1890:	e30335a8 	movw	r3, #13736	; 0x35a8
    1894:	e3403000 	movt	r3, #0
    1898:	e3a02000 	mov	r2, #0
    189c:	e5832000 	str	r2, [r3]
	inprpm.iTen = 0;
    18a0:	e30335a8 	movw	r3, #13736	; 0x35a8
    18a4:	e3403000 	movt	r3, #0
    18a8:	e3a02000 	mov	r2, #0
    18ac:	e5832004 	str	r2, [r3, #4]
	inprpm.iOne = 0;
    18b0:	e30335a8 	movw	r3, #13736	; 0x35a8
    18b4:	e3403000 	movt	r3, #0
    18b8:	e3a02000 	mov	r2, #0
    18bc:	e5832008 	str	r2, [r3, #8]
	inprpm.iTotal = 0;
    18c0:	e30335a8 	movw	r3, #13736	; 0x35a8
    18c4:	e3403000 	movt	r3, #0
    18c8:	e3a02000 	mov	r2, #0
    18cc:	e583200c 	str	r2, [r3, #12]

	inprpm.cHundred = ' ';
    18d0:	e30335a8 	movw	r3, #13736	; 0x35a8
    18d4:	e3403000 	movt	r3, #0
    18d8:	e3a02020 	mov	r2, #32
    18dc:	e5c32010 	strb	r2, [r3, #16]
	inprpm.cTen = ' ';
    18e0:	e30335a8 	movw	r3, #13736	; 0x35a8
    18e4:	e3403000 	movt	r3, #0
    18e8:	e3a02020 	mov	r2, #32
    18ec:	e5c32011 	strb	r2, [r3, #17]
	inprpm.cOne = ' ';
    18f0:	e30335a8 	movw	r3, #13736	; 0x35a8
    18f4:	e3403000 	movt	r3, #0
    18f8:	e3a02020 	mov	r2, #32
    18fc:	e5c32012 	strb	r2, [r3, #18]
	inprpm.cTotal[0] = ' ';
    1900:	e30335a8 	movw	r3, #13736	; 0x35a8
    1904:	e3403000 	movt	r3, #0
    1908:	e3a02020 	mov	r2, #32
    190c:	e5c32013 	strb	r2, [r3, #19]
	inprpm.cTotal[1] = ' ';
    1910:	e30335a8 	movw	r3, #13736	; 0x35a8
    1914:	e3403000 	movt	r3, #0
    1918:	e3a02020 	mov	r2, #32
    191c:	e5c32014 	strb	r2, [r3, #20]
	inprpm.cTotal[2] = ' ';
    1920:	e30335a8 	movw	r3, #13736	; 0x35a8
    1924:	e3403000 	movt	r3, #0
    1928:	e3a02020 	mov	r2, #32
    192c:	e5c32015 	strb	r2, [r3, #21]

	setrpm = inprpm;
    1930:	e30325c0 	movw	r2, #13760	; 0x35c0
    1934:	e3402000 	movt	r2, #0
    1938:	e30335a8 	movw	r3, #13736	; 0x35a8
    193c:	e3403000 	movt	r3, #0
    1940:	e1a0c002 	mov	r12, r2
    1944:	e1a04003 	mov	r4, r3
    1948:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
    194c:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
    1950:	e8940003 	ldm	r4, {r0, r1}
    1954:	e88c0003 	stm	r12, {r0, r1}
	actrpm = inprpm;
    1958:	e30325d8 	movw	r2, #13784	; 0x35d8
    195c:	e3402000 	movt	r2, #0
    1960:	e30335a8 	movw	r3, #13736	; 0x35a8
    1964:	e3403000 	movt	r3, #0
    1968:	e1a0c002 	mov	r12, r2
    196c:	e1a04003 	mov	r4, r3
    1970:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
    1974:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
    1978:	e8940003 	ldm	r4, {r0, r1}
    197c:	e88c0003 	stm	r12, {r0, r1}
    1980:	e24bd004 	sub	sp, r11, #4
    1984:	e8bd0810 	pop	{r4, r11}
    1988:	e12fff1e 	bx	lr

0000198c <put_jtag>:
#include "JTAG_UART.h"
#include "address_map.h"


void put_jtag( char c )
{
    198c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1990:	e28db000 	add	r11, sp, #0
    1994:	e24dd014 	sub	sp, sp, #20
    1998:	e1a03000 	mov	r3, r0
    199c:	e54b300d 	strb	r3, [r11, #-13]
    volatile int * JTAG_UART_ptr    = (int *) JTAG_UART_BASE;   // JTAG UART address
    19a0:	e3a03a01 	mov	r3, #4096	; 0x1000
    19a4:	e34f3f20 	movt	r3, #65312	; 0xff20
    19a8:	e50b3008 	str	r3, [r11, #-8]

    int control;
    control = *(JTAG_UART_ptr + 1);     // read the JTAG_UART control register
    19ac:	e51b3008 	ldr	r3, [r11, #-8]
    19b0:	e5933004 	ldr	r3, [r3, #4]
    19b4:	e50b300c 	str	r3, [r11, #-12]
    if (control & 0xFFFF0000)               // if space, echo character, else ignore 
    19b8:	e51b300c 	ldr	r3, [r11, #-12]
    19bc:	e1a03823 	lsr	r3, r3, #16
    19c0:	e1a03803 	lsl	r3, r3, #16
    19c4:	e3530000 	cmp	r3, #0
    19c8:	0a000002 	beq	19d8 <put_jtag+0x4c>
        *(JTAG_UART_ptr) = c;
    19cc:	e55b200d 	ldrb	r2, [r11, #-13]
    19d0:	e51b3008 	ldr	r3, [r11, #-8]
    19d4:	e5832000 	str	r2, [r3]
}
    19d8:	e28bd000 	add	sp, r11, #0
    19dc:	e8bd0800 	ldmfd	sp!, {r11}
    19e0:	e12fff1e 	bx	lr

000019e4 <get_jtag>:

char get_jtag( void )
{
    19e4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    19e8:	e28db000 	add	r11, sp, #0
    19ec:	e24dd00c 	sub	sp, sp, #12
    volatile int * JTAG_UART_ptr    = (int *) JTAG_UART_BASE;   // JTAG UART address
    19f0:	e3a03a01 	mov	r3, #4096	; 0x1000
    19f4:	e34f3f20 	movt	r3, #65312	; 0xff20
    19f8:	e50b3008 	str	r3, [r11, #-8]

    int data;
    data = *(JTAG_UART_ptr);                // read the JTAG_UART data register
    19fc:	e51b3008 	ldr	r3, [r11, #-8]
    1a00:	e5933000 	ldr	r3, [r3]
    1a04:	e50b300c 	str	r3, [r11, #-12]
    if (data & 0x00008000)                  // check RVALID to see if there is new data
    1a08:	e51b300c 	ldr	r3, [r11, #-12]
    1a0c:	e2033902 	and	r3, r3, #32768	; 0x8000
    1a10:	e3530000 	cmp	r3, #0
    1a14:	0a000002 	beq	1a24 <get_jtag+0x40>
        return ((char) data & 0xFF);
    1a18:	e51b300c 	ldr	r3, [r11, #-12]
    1a1c:	e6ef3073 	uxtb	r3, r3
    1a20:	ea000000 	b	1a28 <get_jtag+0x44>
    else
        return ('\0');
    1a24:	e3a03000 	mov	r3, #0
}
    1a28:	e1a00003 	mov	r0, r3
    1a2c:	e28bd000 	add	sp, r11, #0
    1a30:	e8bd0800 	ldmfd	sp!, {r11}
    1a34:	e12fff1e 	bx	lr

00001a38 <GetDigit>:

char GetDigit(unsigned char value)
{
    1a38:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1a3c:	e28db000 	add	r11, sp, #0
    1a40:	e24dd01c 	sub	sp, sp, #28
    1a44:	e1a03000 	mov	r3, r0
    1a48:	e54b3015 	strb	r3, [r11, #-21]	; 0xffffffeb
    char digits[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
    1a4c:	e30330a4 	movw	r3, #12452	; 0x30a4
    1a50:	e3403000 	movt	r3, #0
    1a54:	e24bc014 	sub	r12, r11, #20
    1a58:	e5930000 	ldr	r0, [r3]
    1a5c:	e5931004 	ldr	r1, [r3, #4]
    1a60:	e5932008 	ldr	r2, [r3, #8]
    1a64:	e593300c 	ldr	r3, [r3, #12]
    1a68:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}

    return digits[value];
    1a6c:	e55b2015 	ldrb	r2, [r11, #-21]	; 0xffffffeb
    1a70:	e3e0300f 	mvn	r3, #15
    1a74:	e24b1004 	sub	r1, r11, #4
    1a78:	e0812002 	add	r2, r1, r2
    1a7c:	e0823003 	add	r3, r2, r3
    1a80:	e5d33000 	ldrb	r3, [r3]
}
    1a84:	e1a00003 	mov	r0, r3
    1a88:	e28bd000 	add	sp, r11, #0
    1a8c:	e8bd0800 	ldmfd	sp!, {r11}
    1a90:	e12fff1e 	bx	lr

00001a94 <__aeabi_drsub>:
    1a94:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    1a98:	ea000000 	b	1aa0 <__adddf3>

00001a9c <__aeabi_dsub>:
    1a9c:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

00001aa0 <__adddf3>:
    1aa0:	e92d4030 	push	{r4, r5, lr}
    1aa4:	e1a04081 	lsl	r4, r1, #1
    1aa8:	e1a05083 	lsl	r5, r3, #1
    1aac:	e1340005 	teq	r4, r5
    1ab0:	01300002 	teqeq	r0, r2
    1ab4:	1194c000 	orrsne	r12, r4, r0
    1ab8:	1195c002 	orrsne	r12, r5, r2
    1abc:	11f0cac4 	mvnsne	r12, r4, asr #21
    1ac0:	11f0cac5 	mvnsne	r12, r5, asr #21
    1ac4:	0a00008c 	beq	1cfc <__adddf3+0x25c>
    1ac8:	e1a04aa4 	lsr	r4, r4, #21
    1acc:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    1ad0:	b2655000 	rsblt	r5, r5, #0
    1ad4:	da000006 	ble	1af4 <__adddf3+0x54>
    1ad8:	e0844005 	add	r4, r4, r5
    1adc:	e0202002 	eor	r2, r0, r2
    1ae0:	e0213003 	eor	r3, r1, r3
    1ae4:	e0220000 	eor	r0, r2, r0
    1ae8:	e0231001 	eor	r1, r3, r1
    1aec:	e0202002 	eor	r2, r0, r2
    1af0:	e0213003 	eor	r3, r1, r3
    1af4:	e3550036 	cmp	r5, #54	; 0x36
    1af8:	88bd4030 	pophi	{r4, r5, lr}
    1afc:	812fff1e 	bxhi	lr
    1b00:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    1b04:	e1a01601 	lsl	r1, r1, #12
    1b08:	e3a0c601 	mov	r12, #1048576	; 0x100000
    1b0c:	e18c1621 	orr	r1, r12, r1, lsr #12
    1b10:	0a000001 	beq	1b1c <__adddf3+0x7c>
    1b14:	e2700000 	rsbs	r0, r0, #0
    1b18:	e2e11000 	rsc	r1, r1, #0
    1b1c:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    1b20:	e1a03603 	lsl	r3, r3, #12
    1b24:	e18c3623 	orr	r3, r12, r3, lsr #12
    1b28:	0a000001 	beq	1b34 <__adddf3+0x94>
    1b2c:	e2722000 	rsbs	r2, r2, #0
    1b30:	e2e33000 	rsc	r3, r3, #0
    1b34:	e1340005 	teq	r4, r5
    1b38:	0a000069 	beq	1ce4 <__adddf3+0x244>
    1b3c:	e2444001 	sub	r4, r4, #1
    1b40:	e275e020 	rsbs	lr, r5, #32
    1b44:	ba000005 	blt	1b60 <__adddf3+0xc0>
    1b48:	e1a0ce12 	lsl	r12, r2, lr
    1b4c:	e0900532 	adds	r0, r0, r2, lsr r5
    1b50:	e2a11000 	adc	r1, r1, #0
    1b54:	e0900e13 	adds	r0, r0, r3, lsl lr
    1b58:	e0b11553 	adcs	r1, r1, r3, asr r5
    1b5c:	ea000006 	b	1b7c <__adddf3+0xdc>
    1b60:	e2455020 	sub	r5, r5, #32
    1b64:	e28ee020 	add	lr, lr, #32
    1b68:	e3520001 	cmp	r2, #1
    1b6c:	e1a0ce13 	lsl	r12, r3, lr
    1b70:	238cc002 	orrcs	r12, r12, #2
    1b74:	e0900553 	adds	r0, r0, r3, asr r5
    1b78:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    1b7c:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1b80:	5a000002 	bpl	1b90 <__adddf3+0xf0>
    1b84:	e27cc000 	rsbs	r12, r12, #0
    1b88:	e2f00000 	rscs	r0, r0, #0
    1b8c:	e2e11000 	rsc	r1, r1, #0
    1b90:	e3510601 	cmp	r1, #1048576	; 0x100000
    1b94:	3a00000f 	bcc	1bd8 <__adddf3+0x138>
    1b98:	e3510602 	cmp	r1, #2097152	; 0x200000
    1b9c:	3a000006 	bcc	1bbc <__adddf3+0x11c>
    1ba0:	e1b010a1 	lsrs	r1, r1, #1
    1ba4:	e1b00060 	rrxs	r0, r0
    1ba8:	e1a0c06c 	rrx	r12, r12
    1bac:	e2844001 	add	r4, r4, #1
    1bb0:	e1a02a84 	lsl	r2, r4, #21
    1bb4:	e3720501 	cmn	r2, #4194304	; 0x400000
    1bb8:	2a00006b 	bcs	1d6c <__adddf3+0x2cc>
    1bbc:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    1bc0:	01b0c0a0 	lsrseq	r12, r0, #1
    1bc4:	e2b00000 	adcs	r0, r0, #0
    1bc8:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1bcc:	e1811005 	orr	r1, r1, r5
    1bd0:	e8bd4030 	pop	{r4, r5, lr}
    1bd4:	e12fff1e 	bx	lr
    1bd8:	e1b0c08c 	lsls	r12, r12, #1
    1bdc:	e0b00000 	adcs	r0, r0, r0
    1be0:	e0a11001 	adc	r1, r1, r1
    1be4:	e3110601 	tst	r1, #1048576	; 0x100000
    1be8:	e2444001 	sub	r4, r4, #1
    1bec:	1afffff2 	bne	1bbc <__adddf3+0x11c>
    1bf0:	e3310000 	teq	r1, #0
    1bf4:	13a03014 	movne	r3, #20
    1bf8:	03a03034 	moveq	r3, #52	; 0x34
    1bfc:	01a01000 	moveq	r1, r0
    1c00:	03a00000 	moveq	r0, #0
    1c04:	e1a02001 	mov	r2, r1
    1c08:	e3520801 	cmp	r2, #65536	; 0x10000
    1c0c:	21a02822 	lsrcs	r2, r2, #16
    1c10:	22433010 	subcs	r3, r3, #16
    1c14:	e3520c01 	cmp	r2, #256	; 0x100
    1c18:	21a02422 	lsrcs	r2, r2, #8
    1c1c:	22433008 	subcs	r3, r3, #8
    1c20:	e3520010 	cmp	r2, #16
    1c24:	21a02222 	lsrcs	r2, r2, #4
    1c28:	22433004 	subcs	r3, r3, #4
    1c2c:	e3520004 	cmp	r2, #4
    1c30:	22433002 	subcs	r3, r3, #2
    1c34:	304330a2 	subcc	r3, r3, r2, lsr #1
    1c38:	e04331a2 	sub	r3, r3, r2, lsr #3
    1c3c:	e2532020 	subs	r2, r3, #32
    1c40:	aa000007 	bge	1c64 <__adddf3+0x1c4>
    1c44:	e292200c 	adds	r2, r2, #12
    1c48:	da000004 	ble	1c60 <__adddf3+0x1c0>
    1c4c:	e282c014 	add	r12, r2, #20
    1c50:	e262200c 	rsb	r2, r2, #12
    1c54:	e1a00c11 	lsl	r0, r1, r12
    1c58:	e1a01231 	lsr	r1, r1, r2
    1c5c:	ea000004 	b	1c74 <__adddf3+0x1d4>
    1c60:	e2822014 	add	r2, r2, #20
    1c64:	d262c020 	rsble	r12, r2, #32
    1c68:	e1a01211 	lsl	r1, r1, r2
    1c6c:	d1811c30 	orrle	r1, r1, r0, lsr r12
    1c70:	d1a00210 	lslle	r0, r0, r2
    1c74:	e0544003 	subs	r4, r4, r3
    1c78:	a0811a04 	addge	r1, r1, r4, lsl #20
    1c7c:	a1811005 	orrge	r1, r1, r5
    1c80:	a8bd4030 	popge	{r4, r5, lr}
    1c84:	a12fff1e 	bxge	lr
    1c88:	e1e04004 	mvn	r4, r4
    1c8c:	e254401f 	subs	r4, r4, #31
    1c90:	aa00000f 	bge	1cd4 <__adddf3+0x234>
    1c94:	e294400c 	adds	r4, r4, #12
    1c98:	ca000006 	bgt	1cb8 <__adddf3+0x218>
    1c9c:	e2844014 	add	r4, r4, #20
    1ca0:	e2642020 	rsb	r2, r4, #32
    1ca4:	e1a00430 	lsr	r0, r0, r4
    1ca8:	e1800211 	orr	r0, r0, r1, lsl r2
    1cac:	e1851431 	orr	r1, r5, r1, lsr r4
    1cb0:	e8bd4030 	pop	{r4, r5, lr}
    1cb4:	e12fff1e 	bx	lr
    1cb8:	e264400c 	rsb	r4, r4, #12
    1cbc:	e2642020 	rsb	r2, r4, #32
    1cc0:	e1a00230 	lsr	r0, r0, r2
    1cc4:	e1800411 	orr	r0, r0, r1, lsl r4
    1cc8:	e1a01005 	mov	r1, r5
    1ccc:	e8bd4030 	pop	{r4, r5, lr}
    1cd0:	e12fff1e 	bx	lr
    1cd4:	e1a00431 	lsr	r0, r1, r4
    1cd8:	e1a01005 	mov	r1, r5
    1cdc:	e8bd4030 	pop	{r4, r5, lr}
    1ce0:	e12fff1e 	bx	lr
    1ce4:	e3340000 	teq	r4, #0
    1ce8:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    1cec:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    1cf0:	02844001 	addeq	r4, r4, #1
    1cf4:	12455001 	subne	r5, r5, #1
    1cf8:	eaffff8f 	b	1b3c <__adddf3+0x9c>
    1cfc:	e1f0cac4 	mvns	r12, r4, asr #21
    1d00:	11f0cac5 	mvnsne	r12, r5, asr #21
    1d04:	0a00001d 	beq	1d80 <__adddf3+0x2e0>
    1d08:	e1340005 	teq	r4, r5
    1d0c:	01300002 	teqeq	r0, r2
    1d10:	0a000004 	beq	1d28 <__adddf3+0x288>
    1d14:	e194c000 	orrs	r12, r4, r0
    1d18:	01a01003 	moveq	r1, r3
    1d1c:	01a00002 	moveq	r0, r2
    1d20:	e8bd4030 	pop	{r4, r5, lr}
    1d24:	e12fff1e 	bx	lr
    1d28:	e1310003 	teq	r1, r3
    1d2c:	13a01000 	movne	r1, #0
    1d30:	13a00000 	movne	r0, #0
    1d34:	18bd4030 	popne	{r4, r5, lr}
    1d38:	112fff1e 	bxne	lr
    1d3c:	e1b0caa4 	lsrs	r12, r4, #21
    1d40:	1a000004 	bne	1d58 <__adddf3+0x2b8>
    1d44:	e1b00080 	lsls	r0, r0, #1
    1d48:	e0b11001 	adcs	r1, r1, r1
    1d4c:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    1d50:	e8bd4030 	pop	{r4, r5, lr}
    1d54:	e12fff1e 	bx	lr
    1d58:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    1d5c:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    1d60:	38bd4030 	popcc	{r4, r5, lr}
    1d64:	312fff1e 	bxcc	lr
    1d68:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1d6c:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    1d70:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    1d74:	e3a00000 	mov	r0, #0
    1d78:	e8bd4030 	pop	{r4, r5, lr}
    1d7c:	e12fff1e 	bx	lr
    1d80:	e1f0cac4 	mvns	r12, r4, asr #21
    1d84:	11a01003 	movne	r1, r3
    1d88:	11a00002 	movne	r0, r2
    1d8c:	01f0cac5 	mvnseq	r12, r5, asr #21
    1d90:	11a03001 	movne	r3, r1
    1d94:	11a02000 	movne	r2, r0
    1d98:	e1904601 	orrs	r4, r0, r1, lsl #12
    1d9c:	01925603 	orrseq	r5, r2, r3, lsl #12
    1da0:	01310003 	teqeq	r1, r3
    1da4:	13811702 	orrne	r1, r1, #524288	; 0x80000
    1da8:	e8bd4030 	pop	{r4, r5, lr}
    1dac:	e12fff1e 	bx	lr

00001db0 <__aeabi_ui2d>:
    1db0:	e3300000 	teq	r0, #0
    1db4:	03a01000 	moveq	r1, #0
    1db8:	012fff1e 	bxeq	lr
    1dbc:	e92d4030 	push	{r4, r5, lr}
    1dc0:	e3a04b01 	mov	r4, #1024	; 0x400
    1dc4:	e2844032 	add	r4, r4, #50	; 0x32
    1dc8:	e3a05000 	mov	r5, #0
    1dcc:	e3a01000 	mov	r1, #0
    1dd0:	eaffff86 	b	1bf0 <__adddf3+0x150>

00001dd4 <__aeabi_i2d>:
    1dd4:	e3300000 	teq	r0, #0
    1dd8:	03a01000 	moveq	r1, #0
    1ddc:	012fff1e 	bxeq	lr
    1de0:	e92d4030 	push	{r4, r5, lr}
    1de4:	e3a04b01 	mov	r4, #1024	; 0x400
    1de8:	e2844032 	add	r4, r4, #50	; 0x32
    1dec:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    1df0:	42600000 	rsbmi	r0, r0, #0
    1df4:	e3a01000 	mov	r1, #0
    1df8:	eaffff7c 	b	1bf0 <__adddf3+0x150>

00001dfc <__aeabi_f2d>:
    1dfc:	e1b02080 	lsls	r2, r0, #1
    1e00:	e1a011c2 	asr	r1, r2, #3
    1e04:	e1a01061 	rrx	r1, r1
    1e08:	e1a00e02 	lsl	r0, r2, #28
    1e0c:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    1e10:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    1e14:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    1e18:	112fff1e 	bxne	lr
    1e1c:	e3320000 	teq	r2, #0
    1e20:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    1e24:	012fff1e 	bxeq	lr
    1e28:	e92d4030 	push	{r4, r5, lr}
    1e2c:	e3a04d0e 	mov	r4, #896	; 0x380
    1e30:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1e34:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    1e38:	eaffff6c 	b	1bf0 <__adddf3+0x150>

00001e3c <__aeabi_ul2d>:
    1e3c:	e1902001 	orrs	r2, r0, r1
    1e40:	012fff1e 	bxeq	lr
    1e44:	e92d4030 	push	{r4, r5, lr}
    1e48:	e3a05000 	mov	r5, #0
    1e4c:	ea000006 	b	1e6c <__aeabi_l2d+0x1c>

00001e50 <__aeabi_l2d>:
    1e50:	e1902001 	orrs	r2, r0, r1
    1e54:	012fff1e 	bxeq	lr
    1e58:	e92d4030 	push	{r4, r5, lr}
    1e5c:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    1e60:	5a000001 	bpl	1e6c <__aeabi_l2d+0x1c>
    1e64:	e2700000 	rsbs	r0, r0, #0
    1e68:	e2e11000 	rsc	r1, r1, #0
    1e6c:	e3a04b01 	mov	r4, #1024	; 0x400
    1e70:	e2844032 	add	r4, r4, #50	; 0x32
    1e74:	e1b0cb21 	lsrs	r12, r1, #22
    1e78:	0affff44 	beq	1b90 <__adddf3+0xf0>
    1e7c:	e3a02003 	mov	r2, #3
    1e80:	e1b0c1ac 	lsrs	r12, r12, #3
    1e84:	12822003 	addne	r2, r2, #3
    1e88:	e1b0c1ac 	lsrs	r12, r12, #3
    1e8c:	12822003 	addne	r2, r2, #3
    1e90:	e08221ac 	add	r2, r2, r12, lsr #3
    1e94:	e2623020 	rsb	r3, r2, #32
    1e98:	e1a0c310 	lsl	r12, r0, r3
    1e9c:	e1a00230 	lsr	r0, r0, r2
    1ea0:	e1800311 	orr	r0, r0, r1, lsl r3
    1ea4:	e1a01231 	lsr	r1, r1, r2
    1ea8:	e0844002 	add	r4, r4, r2
    1eac:	eaffff37 	b	1b90 <__adddf3+0xf0>

00001eb0 <__aeabi_dmul>:
    1eb0:	e92d4070 	push	{r4, r5, r6, lr}
    1eb4:	e3a0c0ff 	mov	r12, #255	; 0xff
    1eb8:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    1ebc:	e01c4a21 	ands	r4, r12, r1, lsr #20
    1ec0:	101c5a23 	andsne	r5, r12, r3, lsr #20
    1ec4:	1134000c 	teqne	r4, r12
    1ec8:	1135000c 	teqne	r5, r12
    1ecc:	0b000075 	bleq	20a8 <__aeabi_dmul+0x1f8>
    1ed0:	e0844005 	add	r4, r4, r5
    1ed4:	e0216003 	eor	r6, r1, r3
    1ed8:	e1c11a8c 	bic	r1, r1, r12, lsl #21
    1edc:	e1c33a8c 	bic	r3, r3, r12, lsl #21
    1ee0:	e1905601 	orrs	r5, r0, r1, lsl #12
    1ee4:	11925603 	orrsne	r5, r2, r3, lsl #12
    1ee8:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    1eec:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    1ef0:	0a00001d 	beq	1f6c <__aeabi_dmul+0xbc>
    1ef4:	e08ec290 	umull	r12, lr, r0, r2
    1ef8:	e3a05000 	mov	r5, #0
    1efc:	e0a5e291 	umlal	lr, r5, r1, r2
    1f00:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    1f04:	e0a5e390 	umlal	lr, r5, r0, r3
    1f08:	e3a06000 	mov	r6, #0
    1f0c:	e0a65391 	umlal	r5, r6, r1, r3
    1f10:	e33c0000 	teq	r12, #0
    1f14:	138ee001 	orrne	lr, lr, #1
    1f18:	e24440ff 	sub	r4, r4, #255	; 0xff
    1f1c:	e3560c02 	cmp	r6, #512	; 0x200
    1f20:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    1f24:	2a000002 	bcs	1f34 <__aeabi_dmul+0x84>
    1f28:	e1b0e08e 	lsls	lr, lr, #1
    1f2c:	e0b55005 	adcs	r5, r5, r5
    1f30:	e0a66006 	adc	r6, r6, r6
    1f34:	e1821586 	orr	r1, r2, r6, lsl #11
    1f38:	e1811aa5 	orr	r1, r1, r5, lsr #21
    1f3c:	e1a00585 	lsl	r0, r5, #11
    1f40:	e1800aae 	orr	r0, r0, lr, lsr #21
    1f44:	e1a0e58e 	lsl	lr, lr, #11
    1f48:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    1f4c:	835c0c07 	cmphi	r12, #1792	; 0x700
    1f50:	8a000011 	bhi	1f9c <__aeabi_dmul+0xec>
    1f54:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    1f58:	01b0e0a0 	lsrseq	lr, r0, #1
    1f5c:	e2b00000 	adcs	r0, r0, #0
    1f60:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1f64:	e8bd4070 	pop	{r4, r5, r6, lr}
    1f68:	e12fff1e 	bx	lr
    1f6c:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    1f70:	e1861001 	orr	r1, r6, r1
    1f74:	e1800002 	orr	r0, r0, r2
    1f78:	e0211003 	eor	r1, r1, r3
    1f7c:	e05440ac 	subs	r4, r4, r12, lsr #1
    1f80:	c074500c 	rsbsgt	r5, r4, r12
    1f84:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    1f88:	c8bd4070 	popgt	{r4, r5, r6, lr}
    1f8c:	c12fff1e 	bxgt	lr
    1f90:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    1f94:	e3a0e000 	mov	lr, #0
    1f98:	e2544001 	subs	r4, r4, #1
    1f9c:	ca00005d 	bgt	2118 <__aeabi_dmul+0x268>
    1fa0:	e3740036 	cmn	r4, #54	; 0x36
    1fa4:	d3a00000 	movle	r0, #0
    1fa8:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    1fac:	d8bd4070 	pople	{r4, r5, r6, lr}
    1fb0:	d12fff1e 	bxle	lr
    1fb4:	e2644000 	rsb	r4, r4, #0
    1fb8:	e2544020 	subs	r4, r4, #32
    1fbc:	aa00001a 	bge	202c <__aeabi_dmul+0x17c>
    1fc0:	e294400c 	adds	r4, r4, #12
    1fc4:	ca00000c 	bgt	1ffc <__aeabi_dmul+0x14c>
    1fc8:	e2844014 	add	r4, r4, #20
    1fcc:	e2645020 	rsb	r5, r4, #32
    1fd0:	e1a03510 	lsl	r3, r0, r5
    1fd4:	e1a00430 	lsr	r0, r0, r4
    1fd8:	e1800511 	orr	r0, r0, r1, lsl r5
    1fdc:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    1fe0:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    1fe4:	e0900fa3 	adds	r0, r0, r3, lsr #31
    1fe8:	e0a21431 	adc	r1, r2, r1, lsr r4
    1fec:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1ff0:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1ff4:	e8bd4070 	pop	{r4, r5, r6, lr}
    1ff8:	e12fff1e 	bx	lr
    1ffc:	e264400c 	rsb	r4, r4, #12
    2000:	e2645020 	rsb	r5, r4, #32
    2004:	e1a03410 	lsl	r3, r0, r4
    2008:	e1a00530 	lsr	r0, r0, r5
    200c:	e1800411 	orr	r0, r0, r1, lsl r4
    2010:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    2014:	e0900fa3 	adds	r0, r0, r3, lsr #31
    2018:	e2a11000 	adc	r1, r1, #0
    201c:	e19ee083 	orrs	lr, lr, r3, lsl #1
    2020:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    2024:	e8bd4070 	pop	{r4, r5, r6, lr}
    2028:	e12fff1e 	bx	lr
    202c:	e2645020 	rsb	r5, r4, #32
    2030:	e18ee510 	orr	lr, lr, r0, lsl r5
    2034:	e1a03430 	lsr	r3, r0, r4
    2038:	e1833511 	orr	r3, r3, r1, lsl r5
    203c:	e1a00431 	lsr	r0, r1, r4
    2040:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    2044:	e1c00431 	bic	r0, r0, r1, lsr r4
    2048:	e0800fa3 	add	r0, r0, r3, lsr #31
    204c:	e19ee083 	orrs	lr, lr, r3, lsl #1
    2050:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    2054:	e8bd4070 	pop	{r4, r5, r6, lr}
    2058:	e12fff1e 	bx	lr
    205c:	e3340000 	teq	r4, #0
    2060:	1a000008 	bne	2088 <__aeabi_dmul+0x1d8>
    2064:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    2068:	e1b00080 	lsls	r0, r0, #1
    206c:	e0a11001 	adc	r1, r1, r1
    2070:	e3110601 	tst	r1, #1048576	; 0x100000
    2074:	02444001 	subeq	r4, r4, #1
    2078:	0afffffa 	beq	2068 <__aeabi_dmul+0x1b8>
    207c:	e1811006 	orr	r1, r1, r6
    2080:	e3350000 	teq	r5, #0
    2084:	112fff1e 	bxne	lr
    2088:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    208c:	e1b02082 	lsls	r2, r2, #1
    2090:	e0a33003 	adc	r3, r3, r3
    2094:	e3130601 	tst	r3, #1048576	; 0x100000
    2098:	02455001 	subeq	r5, r5, #1
    209c:	0afffffa 	beq	208c <__aeabi_dmul+0x1dc>
    20a0:	e1833006 	orr	r3, r3, r6
    20a4:	e12fff1e 	bx	lr
    20a8:	e134000c 	teq	r4, r12
    20ac:	e00c5a23 	and	r5, r12, r3, lsr #20
    20b0:	1135000c 	teqne	r5, r12
    20b4:	0a000007 	beq	20d8 <__aeabi_dmul+0x228>
    20b8:	e1906081 	orrs	r6, r0, r1, lsl #1
    20bc:	11926083 	orrsne	r6, r2, r3, lsl #1
    20c0:	1affffe5 	bne	205c <__aeabi_dmul+0x1ac>
    20c4:	e0211003 	eor	r1, r1, r3
    20c8:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    20cc:	e3a00000 	mov	r0, #0
    20d0:	e8bd4070 	pop	{r4, r5, r6, lr}
    20d4:	e12fff1e 	bx	lr
    20d8:	e1906081 	orrs	r6, r0, r1, lsl #1
    20dc:	01a00002 	moveq	r0, r2
    20e0:	01a01003 	moveq	r1, r3
    20e4:	11926083 	orrsne	r6, r2, r3, lsl #1
    20e8:	0a000010 	beq	2130 <__aeabi_dmul+0x280>
    20ec:	e134000c 	teq	r4, r12
    20f0:	1a000001 	bne	20fc <__aeabi_dmul+0x24c>
    20f4:	e1906601 	orrs	r6, r0, r1, lsl #12
    20f8:	1a00000c 	bne	2130 <__aeabi_dmul+0x280>
    20fc:	e135000c 	teq	r5, r12
    2100:	1a000003 	bne	2114 <__aeabi_dmul+0x264>
    2104:	e1926603 	orrs	r6, r2, r3, lsl #12
    2108:	11a00002 	movne	r0, r2
    210c:	11a01003 	movne	r1, r3
    2110:	1a000006 	bne	2130 <__aeabi_dmul+0x280>
    2114:	e0211003 	eor	r1, r1, r3
    2118:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    211c:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    2120:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    2124:	e3a00000 	mov	r0, #0
    2128:	e8bd4070 	pop	{r4, r5, r6, lr}
    212c:	e12fff1e 	bx	lr
    2130:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    2134:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    2138:	e8bd4070 	pop	{r4, r5, r6, lr}
    213c:	e12fff1e 	bx	lr

00002140 <__aeabi_ddiv>:
    2140:	e92d4070 	push	{r4, r5, r6, lr}
    2144:	e3a0c0ff 	mov	r12, #255	; 0xff
    2148:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    214c:	e01c4a21 	ands	r4, r12, r1, lsr #20
    2150:	101c5a23 	andsne	r5, r12, r3, lsr #20
    2154:	1134000c 	teqne	r4, r12
    2158:	1135000c 	teqne	r5, r12
    215c:	0b00005e 	bleq	22dc <__aeabi_ddiv+0x19c>
    2160:	e0444005 	sub	r4, r4, r5
    2164:	e021e003 	eor	lr, r1, r3
    2168:	e1925603 	orrs	r5, r2, r3, lsl #12
    216c:	e1a01601 	lsl	r1, r1, #12
    2170:	0a00004c 	beq	22a8 <__aeabi_ddiv+0x168>
    2174:	e1a03603 	lsl	r3, r3, #12
    2178:	e3a05201 	mov	r5, #268435456	; 0x10000000
    217c:	e1853223 	orr	r3, r5, r3, lsr #4
    2180:	e1833c22 	orr	r3, r3, r2, lsr #24
    2184:	e1a02402 	lsl	r2, r2, #8
    2188:	e1855221 	orr	r5, r5, r1, lsr #4
    218c:	e1855c20 	orr	r5, r5, r0, lsr #24
    2190:	e1a06400 	lsl	r6, r0, #8
    2194:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    2198:	e1550003 	cmp	r5, r3
    219c:	01560002 	cmpeq	r6, r2
    21a0:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    21a4:	e2844c03 	add	r4, r4, #768	; 0x300
    21a8:	2a000001 	bcs	21b4 <__aeabi_ddiv+0x74>
    21ac:	e1b030a3 	lsrs	r3, r3, #1
    21b0:	e1a02062 	rrx	r2, r2
    21b4:	e0566002 	subs	r6, r6, r2
    21b8:	e0c55003 	sbc	r5, r5, r3
    21bc:	e1b030a3 	lsrs	r3, r3, #1
    21c0:	e1a02062 	rrx	r2, r2
    21c4:	e3a00601 	mov	r0, #1048576	; 0x100000
    21c8:	e3a0c702 	mov	r12, #524288	; 0x80000
    21cc:	e056e002 	subs	lr, r6, r2
    21d0:	e0d5e003 	sbcs	lr, r5, r3
    21d4:	20466002 	subcs	r6, r6, r2
    21d8:	21a0500e 	movcs	r5, lr
    21dc:	2180000c 	orrcs	r0, r0, r12
    21e0:	e1b030a3 	lsrs	r3, r3, #1
    21e4:	e1a02062 	rrx	r2, r2
    21e8:	e056e002 	subs	lr, r6, r2
    21ec:	e0d5e003 	sbcs	lr, r5, r3
    21f0:	20466002 	subcs	r6, r6, r2
    21f4:	21a0500e 	movcs	r5, lr
    21f8:	218000ac 	orrcs	r0, r0, r12, lsr #1
    21fc:	e1b030a3 	lsrs	r3, r3, #1
    2200:	e1a02062 	rrx	r2, r2
    2204:	e056e002 	subs	lr, r6, r2
    2208:	e0d5e003 	sbcs	lr, r5, r3
    220c:	20466002 	subcs	r6, r6, r2
    2210:	21a0500e 	movcs	r5, lr
    2214:	2180012c 	orrcs	r0, r0, r12, lsr #2
    2218:	e1b030a3 	lsrs	r3, r3, #1
    221c:	e1a02062 	rrx	r2, r2
    2220:	e056e002 	subs	lr, r6, r2
    2224:	e0d5e003 	sbcs	lr, r5, r3
    2228:	20466002 	subcs	r6, r6, r2
    222c:	21a0500e 	movcs	r5, lr
    2230:	218001ac 	orrcs	r0, r0, r12, lsr #3
    2234:	e195e006 	orrs	lr, r5, r6
    2238:	0a00000d 	beq	2274 <__aeabi_ddiv+0x134>
    223c:	e1a05205 	lsl	r5, r5, #4
    2240:	e1855e26 	orr	r5, r5, r6, lsr #28
    2244:	e1a06206 	lsl	r6, r6, #4
    2248:	e1a03183 	lsl	r3, r3, #3
    224c:	e1833ea2 	orr	r3, r3, r2, lsr #29
    2250:	e1a02182 	lsl	r2, r2, #3
    2254:	e1b0c22c 	lsrs	r12, r12, #4
    2258:	1affffdb 	bne	21cc <__aeabi_ddiv+0x8c>
    225c:	e3110601 	tst	r1, #1048576	; 0x100000
    2260:	1a000006 	bne	2280 <__aeabi_ddiv+0x140>
    2264:	e1811000 	orr	r1, r1, r0
    2268:	e3a00000 	mov	r0, #0
    226c:	e3a0c102 	mov	r12, #-2147483648	; 0x80000000
    2270:	eaffffd5 	b	21cc <__aeabi_ddiv+0x8c>
    2274:	e3110601 	tst	r1, #1048576	; 0x100000
    2278:	01811000 	orreq	r1, r1, r0
    227c:	03a00000 	moveq	r0, #0
    2280:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    2284:	835c0c07 	cmphi	r12, #1792	; 0x700
    2288:	8affff43 	bhi	1f9c <__aeabi_dmul+0xec>
    228c:	e055c003 	subs	r12, r5, r3
    2290:	0056c002 	subseq	r12, r6, r2
    2294:	01b0c0a0 	lsrseq	r12, r0, #1
    2298:	e2b00000 	adcs	r0, r0, #0
    229c:	e0a11a04 	adc	r1, r1, r4, lsl #20
    22a0:	e8bd4070 	pop	{r4, r5, r6, lr}
    22a4:	e12fff1e 	bx	lr
    22a8:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    22ac:	e18e1621 	orr	r1, lr, r1, lsr #12
    22b0:	e09440ac 	adds	r4, r4, r12, lsr #1
    22b4:	c074500c 	rsbsgt	r5, r4, r12
    22b8:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    22bc:	c8bd4070 	popgt	{r4, r5, r6, lr}
    22c0:	c12fff1e 	bxgt	lr
    22c4:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    22c8:	e3a0e000 	mov	lr, #0
    22cc:	e2544001 	subs	r4, r4, #1
    22d0:	eaffff31 	b	1f9c <__aeabi_dmul+0xec>
    22d4:	e185e006 	orr	lr, r5, r6
    22d8:	eaffff2f 	b	1f9c <__aeabi_dmul+0xec>
    22dc:	e00c5a23 	and	r5, r12, r3, lsr #20
    22e0:	e134000c 	teq	r4, r12
    22e4:	0135000c 	teqeq	r5, r12
    22e8:	0affff90 	beq	2130 <__aeabi_dmul+0x280>
    22ec:	e134000c 	teq	r4, r12
    22f0:	1a000006 	bne	2310 <__aeabi_ddiv+0x1d0>
    22f4:	e1904601 	orrs	r4, r0, r1, lsl #12
    22f8:	1affff8c 	bne	2130 <__aeabi_dmul+0x280>
    22fc:	e135000c 	teq	r5, r12
    2300:	1affff83 	bne	2114 <__aeabi_dmul+0x264>
    2304:	e1a00002 	mov	r0, r2
    2308:	e1a01003 	mov	r1, r3
    230c:	eaffff87 	b	2130 <__aeabi_dmul+0x280>
    2310:	e135000c 	teq	r5, r12
    2314:	1a000004 	bne	232c <__aeabi_ddiv+0x1ec>
    2318:	e1925603 	orrs	r5, r2, r3, lsl #12
    231c:	0affff68 	beq	20c4 <__aeabi_dmul+0x214>
    2320:	e1a00002 	mov	r0, r2
    2324:	e1a01003 	mov	r1, r3
    2328:	eaffff80 	b	2130 <__aeabi_dmul+0x280>
    232c:	e1906081 	orrs	r6, r0, r1, lsl #1
    2330:	11926083 	orrsne	r6, r2, r3, lsl #1
    2334:	1affff48 	bne	205c <__aeabi_dmul+0x1ac>
    2338:	e1904081 	orrs	r4, r0, r1, lsl #1
    233c:	1affff74 	bne	2114 <__aeabi_dmul+0x264>
    2340:	e1925083 	orrs	r5, r2, r3, lsl #1
    2344:	1affff5e 	bne	20c4 <__aeabi_dmul+0x214>
    2348:	eaffff78 	b	2130 <__aeabi_dmul+0x280>

0000234c <__aeabi_d2iz>:
    234c:	e1a02081 	lsl	r2, r1, #1
    2350:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    2354:	2a00000c 	bcs	238c <__aeabi_d2iz+0x40>
    2358:	5a000009 	bpl	2384 <__aeabi_d2iz+0x38>
    235c:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    2360:	e0532ac2 	subs	r2, r3, r2, asr #21
    2364:	9a00000a 	bls	2394 <__aeabi_d2iz+0x48>
    2368:	e1a03581 	lsl	r3, r1, #11
    236c:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    2370:	e1833aa0 	orr	r3, r3, r0, lsr #21
    2374:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    2378:	e1a00233 	lsr	r0, r3, r2
    237c:	12600000 	rsbne	r0, r0, #0
    2380:	e12fff1e 	bx	lr
    2384:	e3a00000 	mov	r0, #0
    2388:	e12fff1e 	bx	lr
    238c:	e1900601 	orrs	r0, r0, r1, lsl #12
    2390:	1a000002 	bne	23a0 <__aeabi_d2iz+0x54>
    2394:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    2398:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    239c:	e12fff1e 	bx	lr
    23a0:	e3a00000 	mov	r0, #0
    23a4:	e12fff1e 	bx	lr

000023a8 <__aeabi_frsub>:
    23a8:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
    23ac:	ea000000 	b	23b4 <__addsf3>

000023b0 <__aeabi_fsub>:
    23b0:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000

000023b4 <__addsf3>:
    23b4:	e1b02080 	lsls	r2, r0, #1
    23b8:	11b03081 	lslsne	r3, r1, #1
    23bc:	11320003 	teqne	r2, r3
    23c0:	11f0cc42 	mvnsne	r12, r2, asr #24
    23c4:	11f0cc43 	mvnsne	r12, r3, asr #24
    23c8:	0a000047 	beq	24ec <__addsf3+0x138>
    23cc:	e1a02c22 	lsr	r2, r2, #24
    23d0:	e0723c23 	rsbs	r3, r2, r3, lsr #24
    23d4:	c0822003 	addgt	r2, r2, r3
    23d8:	c0201001 	eorgt	r1, r0, r1
    23dc:	c0210000 	eorgt	r0, r1, r0
    23e0:	c0201001 	eorgt	r1, r0, r1
    23e4:	b2633000 	rsblt	r3, r3, #0
    23e8:	e3530019 	cmp	r3, #25
    23ec:	812fff1e 	bxhi	lr
    23f0:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    23f4:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    23f8:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
    23fc:	12600000 	rsbne	r0, r0, #0
    2400:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    2404:	e3811502 	orr	r1, r1, #8388608	; 0x800000
    2408:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
    240c:	12611000 	rsbne	r1, r1, #0
    2410:	e1320003 	teq	r2, r3
    2414:	0a00002e 	beq	24d4 <__addsf3+0x120>
    2418:	e2422001 	sub	r2, r2, #1
    241c:	e0900351 	adds	r0, r0, r1, asr r3
    2420:	e2633020 	rsb	r3, r3, #32
    2424:	e1a01311 	lsl	r1, r1, r3
    2428:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    242c:	5a000001 	bpl	2438 <__addsf3+0x84>
    2430:	e2711000 	rsbs	r1, r1, #0
    2434:	e2e00000 	rsc	r0, r0, #0
    2438:	e3500502 	cmp	r0, #8388608	; 0x800000
    243c:	3a00000b 	bcc	2470 <__addsf3+0xbc>
    2440:	e3500401 	cmp	r0, #16777216	; 0x1000000
    2444:	3a000004 	bcc	245c <__addsf3+0xa8>
    2448:	e1b000a0 	lsrs	r0, r0, #1
    244c:	e1a01061 	rrx	r1, r1
    2450:	e2822001 	add	r2, r2, #1
    2454:	e35200fe 	cmp	r2, #254	; 0xfe
    2458:	2a000038 	bcs	2540 <__addsf3+0x18c>
    245c:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    2460:	e0a00b82 	adc	r0, r0, r2, lsl #23
    2464:	03c00001 	biceq	r0, r0, #1
    2468:	e1800003 	orr	r0, r0, r3
    246c:	e12fff1e 	bx	lr
    2470:	e1b01081 	lsls	r1, r1, #1
    2474:	e0a00000 	adc	r0, r0, r0
    2478:	e3100502 	tst	r0, #8388608	; 0x800000
    247c:	e2422001 	sub	r2, r2, #1
    2480:	1afffff5 	bne	245c <__addsf3+0xa8>
    2484:	e1b0c620 	lsrs	r12, r0, #12
    2488:	01a00600 	lsleq	r0, r0, #12
    248c:	0242200c 	subeq	r2, r2, #12
    2490:	e31008ff 	tst	r0, #16711680	; 0xff0000
    2494:	01a00400 	lsleq	r0, r0, #8
    2498:	02422008 	subeq	r2, r2, #8
    249c:	e310060f 	tst	r0, #15728640	; 0xf00000
    24a0:	01a00200 	lsleq	r0, r0, #4
    24a4:	02422004 	subeq	r2, r2, #4
    24a8:	e3100503 	tst	r0, #12582912	; 0xc00000
    24ac:	01a00100 	lsleq	r0, r0, #2
    24b0:	02422002 	subeq	r2, r2, #2
    24b4:	e3500502 	cmp	r0, #8388608	; 0x800000
    24b8:	31a00080 	lslcc	r0, r0, #1
    24bc:	e2d22000 	sbcs	r2, r2, #0
    24c0:	a0800b82 	addge	r0, r0, r2, lsl #23
    24c4:	b2622000 	rsblt	r2, r2, #0
    24c8:	a1800003 	orrge	r0, r0, r3
    24cc:	b1830230 	orrlt	r0, r3, r0, lsr r2
    24d0:	e12fff1e 	bx	lr
    24d4:	e3320000 	teq	r2, #0
    24d8:	e2211502 	eor	r1, r1, #8388608	; 0x800000
    24dc:	02200502 	eoreq	r0, r0, #8388608	; 0x800000
    24e0:	02822001 	addeq	r2, r2, #1
    24e4:	12433001 	subne	r3, r3, #1
    24e8:	eaffffca 	b	2418 <__addsf3+0x64>
    24ec:	e1a03081 	lsl	r3, r1, #1
    24f0:	e1f0cc42 	mvns	r12, r2, asr #24
    24f4:	11f0cc43 	mvnsne	r12, r3, asr #24
    24f8:	0a000013 	beq	254c <__addsf3+0x198>
    24fc:	e1320003 	teq	r2, r3
    2500:	0a000002 	beq	2510 <__addsf3+0x15c>
    2504:	e3320000 	teq	r2, #0
    2508:	01a00001 	moveq	r0, r1
    250c:	e12fff1e 	bx	lr
    2510:	e1300001 	teq	r0, r1
    2514:	13a00000 	movne	r0, #0
    2518:	112fff1e 	bxne	lr
    251c:	e31204ff 	tst	r2, #-16777216	; 0xff000000
    2520:	1a000002 	bne	2530 <__addsf3+0x17c>
    2524:	e1b00080 	lsls	r0, r0, #1
    2528:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
    252c:	e12fff1e 	bx	lr
    2530:	e2922402 	adds	r2, r2, #33554432	; 0x2000000
    2534:	32800502 	addcc	r0, r0, #8388608	; 0x800000
    2538:	312fff1e 	bxcc	lr
    253c:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    2540:	e383047f 	orr	r0, r3, #2130706432	; 0x7f000000
    2544:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    2548:	e12fff1e 	bx	lr
    254c:	e1f02c42 	mvns	r2, r2, asr #24
    2550:	11a00001 	movne	r0, r1
    2554:	01f03c43 	mvnseq	r3, r3, asr #24
    2558:	11a01000 	movne	r1, r0
    255c:	e1b02480 	lsls	r2, r0, #9
    2560:	01b03481 	lslseq	r3, r1, #9
    2564:	01300001 	teqeq	r0, r1
    2568:	13800501 	orrne	r0, r0, #4194304	; 0x400000
    256c:	e12fff1e 	bx	lr

00002570 <__aeabi_ui2f>:
    2570:	e3a03000 	mov	r3, #0
    2574:	ea000001 	b	2580 <__aeabi_i2f+0x8>

00002578 <__aeabi_i2f>:
    2578:	e2103102 	ands	r3, r0, #-2147483648	; 0x80000000
    257c:	42600000 	rsbmi	r0, r0, #0
    2580:	e1b0c000 	movs	r12, r0
    2584:	012fff1e 	bxeq	lr
    2588:	e383344b 	orr	r3, r3, #1258291200	; 0x4b000000
    258c:	e1a01000 	mov	r1, r0
    2590:	e3a00000 	mov	r0, #0
    2594:	ea00000f 	b	25d8 <__aeabi_l2f+0x30>

00002598 <__aeabi_ul2f>:
    2598:	e1902001 	orrs	r2, r0, r1
    259c:	012fff1e 	bxeq	lr
    25a0:	e3a03000 	mov	r3, #0
    25a4:	ea000005 	b	25c0 <__aeabi_l2f+0x18>

000025a8 <__aeabi_l2f>:
    25a8:	e1902001 	orrs	r2, r0, r1
    25ac:	012fff1e 	bxeq	lr
    25b0:	e2113102 	ands	r3, r1, #-2147483648	; 0x80000000
    25b4:	5a000001 	bpl	25c0 <__aeabi_l2f+0x18>
    25b8:	e2700000 	rsbs	r0, r0, #0
    25bc:	e2e11000 	rsc	r1, r1, #0
    25c0:	e1b0c001 	movs	r12, r1
    25c4:	01a0c000 	moveq	r12, r0
    25c8:	01a01000 	moveq	r1, r0
    25cc:	03a00000 	moveq	r0, #0
    25d0:	e383345b 	orr	r3, r3, #1526726656	; 0x5b000000
    25d4:	02433201 	subeq	r3, r3, #268435456	; 0x10000000
    25d8:	e2433502 	sub	r3, r3, #8388608	; 0x800000
    25dc:	e3a02017 	mov	r2, #23
    25e0:	e35c0801 	cmp	r12, #65536	; 0x10000
    25e4:	21a0c82c 	lsrcs	r12, r12, #16
    25e8:	22422010 	subcs	r2, r2, #16
    25ec:	e35c0c01 	cmp	r12, #256	; 0x100
    25f0:	21a0c42c 	lsrcs	r12, r12, #8
    25f4:	22422008 	subcs	r2, r2, #8
    25f8:	e35c0010 	cmp	r12, #16
    25fc:	21a0c22c 	lsrcs	r12, r12, #4
    2600:	22422004 	subcs	r2, r2, #4
    2604:	e35c0004 	cmp	r12, #4
    2608:	22422002 	subcs	r2, r2, #2
    260c:	304220ac 	subcc	r2, r2, r12, lsr #1
    2610:	e05221ac 	subs	r2, r2, r12, lsr #3
    2614:	e0433b82 	sub	r3, r3, r2, lsl #23
    2618:	ba000006 	blt	2638 <__aeabi_l2f+0x90>
    261c:	e0833211 	add	r3, r3, r1, lsl r2
    2620:	e1a0c210 	lsl	r12, r0, r2
    2624:	e2622020 	rsb	r2, r2, #32
    2628:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    262c:	e0a30230 	adc	r0, r3, r0, lsr r2
    2630:	03c00001 	biceq	r0, r0, #1
    2634:	e12fff1e 	bx	lr
    2638:	e2822020 	add	r2, r2, #32
    263c:	e1a0c211 	lsl	r12, r1, r2
    2640:	e2622020 	rsb	r2, r2, #32
    2644:	e190008c 	orrs	r0, r0, r12, lsl #1
    2648:	e0a30231 	adc	r0, r3, r1, lsr r2
    264c:	01c00fac 	biceq	r0, r0, r12, lsr #31
    2650:	e12fff1e 	bx	lr

00002654 <__aeabi_fmul>:
    2654:	e3a0c0ff 	mov	r12, #255	; 0xff
    2658:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    265c:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    2660:	1132000c 	teqne	r2, r12
    2664:	1133000c 	teqne	r3, r12
    2668:	0a00003e 	beq	2768 <__aeabi_fmul+0x114>
    266c:	e0822003 	add	r2, r2, r3
    2670:	e020c001 	eor	r12, r0, r1
    2674:	e1b00480 	lsls	r0, r0, #9
    2678:	11b01481 	lslsne	r1, r1, #9
    267c:	0a000010 	beq	26c4 <__aeabi_fmul+0x70>
    2680:	e3a03302 	mov	r3, #134217728	; 0x8000000
    2684:	e18302a0 	orr	r0, r3, r0, lsr #5
    2688:	e18312a1 	orr	r1, r3, r1, lsr #5
    268c:	e0813190 	umull	r3, r1, r0, r1
    2690:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    2694:	e3510502 	cmp	r1, #8388608	; 0x800000
    2698:	31a01081 	lslcc	r1, r1, #1
    269c:	31811fa3 	orrcc	r1, r1, r3, lsr #31
    26a0:	31a03083 	lslcc	r3, r3, #1
    26a4:	e1800001 	orr	r0, r0, r1
    26a8:	e2c2207f 	sbc	r2, r2, #127	; 0x7f
    26ac:	e35200fd 	cmp	r2, #253	; 0xfd
    26b0:	8a00000f 	bhi	26f4 <__aeabi_fmul+0xa0>
    26b4:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    26b8:	e0a00b82 	adc	r0, r0, r2, lsl #23
    26bc:	03c00001 	biceq	r0, r0, #1
    26c0:	e12fff1e 	bx	lr
    26c4:	e3300000 	teq	r0, #0
    26c8:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    26cc:	01a01481 	lsleq	r1, r1, #9
    26d0:	e18c04a0 	orr	r0, r12, r0, lsr #9
    26d4:	e18004a1 	orr	r0, r0, r1, lsr #9
    26d8:	e252207f 	subs	r2, r2, #127	; 0x7f
    26dc:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    26e0:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    26e4:	c12fff1e 	bxgt	lr
    26e8:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    26ec:	e3a03000 	mov	r3, #0
    26f0:	e2522001 	subs	r2, r2, #1
    26f4:	ca000035 	bgt	27d0 <__aeabi_fmul+0x17c>
    26f8:	e3720019 	cmn	r2, #25
    26fc:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
    2700:	d12fff1e 	bxle	lr
    2704:	e2622000 	rsb	r2, r2, #0
    2708:	e1b01080 	lsls	r1, r0, #1
    270c:	e1a01231 	lsr	r1, r1, r2
    2710:	e2622020 	rsb	r2, r2, #32
    2714:	e1a0c210 	lsl	r12, r0, r2
    2718:	e1b00061 	rrxs	r0, r1
    271c:	e2a00000 	adc	r0, r0, #0
    2720:	e193308c 	orrs	r3, r3, r12, lsl #1
    2724:	01c00fac 	biceq	r0, r0, r12, lsr #31
    2728:	e12fff1e 	bx	lr
    272c:	e3320000 	teq	r2, #0
    2730:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    2734:	01a00080 	lsleq	r0, r0, #1
    2738:	03100502 	tsteq	r0, #8388608	; 0x800000
    273c:	02422001 	subeq	r2, r2, #1
    2740:	0afffffb 	beq	2734 <__aeabi_fmul+0xe0>
    2744:	e180000c 	orr	r0, r0, r12
    2748:	e3330000 	teq	r3, #0
    274c:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    2750:	01a01081 	lsleq	r1, r1, #1
    2754:	03110502 	tsteq	r1, #8388608	; 0x800000
    2758:	02433001 	subeq	r3, r3, #1
    275c:	0afffffb 	beq	2750 <__aeabi_fmul+0xfc>
    2760:	e181100c 	orr	r1, r1, r12
    2764:	eaffffc0 	b	266c <__aeabi_fmul+0x18>
    2768:	e00c3ba1 	and	r3, r12, r1, lsr #23
    276c:	e132000c 	teq	r2, r12
    2770:	1133000c 	teqne	r3, r12
    2774:	0a000005 	beq	2790 <__aeabi_fmul+0x13c>
    2778:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    277c:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    2780:	1affffe9 	bne	272c <__aeabi_fmul+0xd8>
    2784:	e0200001 	eor	r0, r0, r1
    2788:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    278c:	e12fff1e 	bx	lr
    2790:	e3300000 	teq	r0, #0
    2794:	13300102 	teqne	r0, #-2147483648	; 0x80000000
    2798:	01a00001 	moveq	r0, r1
    279c:	13310000 	teqne	r1, #0
    27a0:	13310102 	teqne	r1, #-2147483648	; 0x80000000
    27a4:	0a00000d 	beq	27e0 <__aeabi_fmul+0x18c>
    27a8:	e132000c 	teq	r2, r12
    27ac:	1a000001 	bne	27b8 <__aeabi_fmul+0x164>
    27b0:	e1b02480 	lsls	r2, r0, #9
    27b4:	1a000009 	bne	27e0 <__aeabi_fmul+0x18c>
    27b8:	e133000c 	teq	r3, r12
    27bc:	1a000002 	bne	27cc <__aeabi_fmul+0x178>
    27c0:	e1b03481 	lsls	r3, r1, #9
    27c4:	11a00001 	movne	r0, r1
    27c8:	1a000004 	bne	27e0 <__aeabi_fmul+0x18c>
    27cc:	e0200001 	eor	r0, r0, r1
    27d0:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    27d4:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    27d8:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    27dc:	e12fff1e 	bx	lr
    27e0:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    27e4:	e3800503 	orr	r0, r0, #12582912	; 0xc00000
    27e8:	e12fff1e 	bx	lr

000027ec <__aeabi_fdiv>:
    27ec:	e3a0c0ff 	mov	r12, #255	; 0xff
    27f0:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    27f4:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    27f8:	1132000c 	teqne	r2, r12
    27fc:	1133000c 	teqne	r3, r12
    2800:	0a00003a 	beq	28f0 <__aeabi_fdiv+0x104>
    2804:	e0422003 	sub	r2, r2, r3
    2808:	e020c001 	eor	r12, r0, r1
    280c:	e1b01481 	lsls	r1, r1, #9
    2810:	e1a00480 	lsl	r0, r0, #9
    2814:	0a00001c 	beq	288c <__aeabi_fdiv+0xa0>
    2818:	e3a03201 	mov	r3, #268435456	; 0x10000000
    281c:	e1831221 	orr	r1, r3, r1, lsr #4
    2820:	e1833220 	orr	r3, r3, r0, lsr #4
    2824:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    2828:	e1530001 	cmp	r3, r1
    282c:	31a03083 	lslcc	r3, r3, #1
    2830:	e2a2207d 	adc	r2, r2, #125	; 0x7d
    2834:	e3a0c502 	mov	r12, #8388608	; 0x800000
    2838:	e1530001 	cmp	r3, r1
    283c:	20433001 	subcs	r3, r3, r1
    2840:	2180000c 	orrcs	r0, r0, r12
    2844:	e15300a1 	cmp	r3, r1, lsr #1
    2848:	204330a1 	subcs	r3, r3, r1, lsr #1
    284c:	218000ac 	orrcs	r0, r0, r12, lsr #1
    2850:	e1530121 	cmp	r3, r1, lsr #2
    2854:	20433121 	subcs	r3, r3, r1, lsr #2
    2858:	2180012c 	orrcs	r0, r0, r12, lsr #2
    285c:	e15301a1 	cmp	r3, r1, lsr #3
    2860:	204331a1 	subcs	r3, r3, r1, lsr #3
    2864:	218001ac 	orrcs	r0, r0, r12, lsr #3
    2868:	e1b03203 	lsls	r3, r3, #4
    286c:	11b0c22c 	lsrsne	r12, r12, #4
    2870:	1afffff0 	bne	2838 <__aeabi_fdiv+0x4c>
    2874:	e35200fd 	cmp	r2, #253	; 0xfd
    2878:	8affff9d 	bhi	26f4 <__aeabi_fmul+0xa0>
    287c:	e1530001 	cmp	r3, r1
    2880:	e0a00b82 	adc	r0, r0, r2, lsl #23
    2884:	03c00001 	biceq	r0, r0, #1
    2888:	e12fff1e 	bx	lr
    288c:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    2890:	e18c04a0 	orr	r0, r12, r0, lsr #9
    2894:	e292207f 	adds	r2, r2, #127	; 0x7f
    2898:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    289c:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    28a0:	c12fff1e 	bxgt	lr
    28a4:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    28a8:	e3a03000 	mov	r3, #0
    28ac:	e2522001 	subs	r2, r2, #1
    28b0:	eaffff8f 	b	26f4 <__aeabi_fmul+0xa0>
    28b4:	e3320000 	teq	r2, #0
    28b8:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    28bc:	01a00080 	lsleq	r0, r0, #1
    28c0:	03100502 	tsteq	r0, #8388608	; 0x800000
    28c4:	02422001 	subeq	r2, r2, #1
    28c8:	0afffffb 	beq	28bc <__aeabi_fdiv+0xd0>
    28cc:	e180000c 	orr	r0, r0, r12
    28d0:	e3330000 	teq	r3, #0
    28d4:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    28d8:	01a01081 	lsleq	r1, r1, #1
    28dc:	03110502 	tsteq	r1, #8388608	; 0x800000
    28e0:	02433001 	subeq	r3, r3, #1
    28e4:	0afffffb 	beq	28d8 <__aeabi_fdiv+0xec>
    28e8:	e181100c 	orr	r1, r1, r12
    28ec:	eaffffc4 	b	2804 <__aeabi_fdiv+0x18>
    28f0:	e00c3ba1 	and	r3, r12, r1, lsr #23
    28f4:	e132000c 	teq	r2, r12
    28f8:	1a000005 	bne	2914 <__aeabi_fdiv+0x128>
    28fc:	e1b02480 	lsls	r2, r0, #9
    2900:	1affffb6 	bne	27e0 <__aeabi_fmul+0x18c>
    2904:	e133000c 	teq	r3, r12
    2908:	1affffaf 	bne	27cc <__aeabi_fmul+0x178>
    290c:	e1a00001 	mov	r0, r1
    2910:	eaffffb2 	b	27e0 <__aeabi_fmul+0x18c>
    2914:	e133000c 	teq	r3, r12
    2918:	1a000003 	bne	292c <__aeabi_fdiv+0x140>
    291c:	e1b03481 	lsls	r3, r1, #9
    2920:	0affff97 	beq	2784 <__aeabi_fmul+0x130>
    2924:	e1a00001 	mov	r0, r1
    2928:	eaffffac 	b	27e0 <__aeabi_fmul+0x18c>
    292c:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    2930:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    2934:	1affffde 	bne	28b4 <__aeabi_fdiv+0xc8>
    2938:	e3d02102 	bics	r2, r0, #-2147483648	; 0x80000000
    293c:	1affffa2 	bne	27cc <__aeabi_fmul+0x178>
    2940:	e3d13102 	bics	r3, r1, #-2147483648	; 0x80000000
    2944:	1affff8e 	bne	2784 <__aeabi_fmul+0x130>
    2948:	eaffffa4 	b	27e0 <__aeabi_fmul+0x18c>

0000294c <__gesf2>:
    294c:	e3e0c000 	mvn	r12, #0
    2950:	ea000002 	b	2960 <__cmpsf2+0x4>

00002954 <__lesf2>:
    2954:	e3a0c001 	mov	r12, #1
    2958:	ea000000 	b	2960 <__cmpsf2+0x4>

0000295c <__cmpsf2>:
    295c:	e3a0c001 	mov	r12, #1
    2960:	e52dc004 	push	{r12}		; (str r12, [sp, #-4]!)
    2964:	e1a02080 	lsl	r2, r0, #1
    2968:	e1a03081 	lsl	r3, r1, #1
    296c:	e1f0cc42 	mvns	r12, r2, asr #24
    2970:	11f0cc43 	mvnsne	r12, r3, asr #24
    2974:	0a000007 	beq	2998 <__cmpsf2+0x3c>
    2978:	e28dd004 	add	sp, sp, #4
    297c:	e192c0a3 	orrs	r12, r2, r3, lsr #1
    2980:	11300001 	teqne	r0, r1
    2984:	50520003 	subspl	r0, r2, r3
    2988:	81a00fc1 	asrhi	r0, r1, #31
    298c:	31e00fc1 	mvncc	r0, r1, asr #31
    2990:	13800001 	orrne	r0, r0, #1
    2994:	e12fff1e 	bx	lr
    2998:	e1f0cc42 	mvns	r12, r2, asr #24
    299c:	1a000001 	bne	29a8 <__cmpsf2+0x4c>
    29a0:	e1b0c480 	lsls	r12, r0, #9
    29a4:	1a000003 	bne	29b8 <__cmpsf2+0x5c>
    29a8:	e1f0cc43 	mvns	r12, r3, asr #24
    29ac:	1afffff1 	bne	2978 <__cmpsf2+0x1c>
    29b0:	e1b0c481 	lsls	r12, r1, #9
    29b4:	0affffef 	beq	2978 <__cmpsf2+0x1c>
    29b8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    29bc:	e12fff1e 	bx	lr

000029c0 <__aeabi_cfrcmple>:
    29c0:	e1a0c000 	mov	r12, r0
    29c4:	e1a00001 	mov	r0, r1
    29c8:	e1a0100c 	mov	r1, r12
    29cc:	eaffffff 	b	29d0 <__aeabi_cfcmpeq>

000029d0 <__aeabi_cfcmpeq>:
    29d0:	e92d400f 	push	{r0, r1, r2, r3, lr}
    29d4:	ebffffe0 	bl	295c <__cmpsf2>
    29d8:	e3500000 	cmp	r0, #0
    29dc:	43700000 	cmnmi	r0, #0
    29e0:	e8bd400f 	pop	{r0, r1, r2, r3, lr}
    29e4:	e12fff1e 	bx	lr

000029e8 <__aeabi_fcmpeq>:
    29e8:	e52de008 	str	lr, [sp, #-8]!
    29ec:	ebfffff7 	bl	29d0 <__aeabi_cfcmpeq>
    29f0:	03a00001 	moveq	r0, #1
    29f4:	13a00000 	movne	r0, #0
    29f8:	e49de008 	ldr	lr, [sp], #8
    29fc:	e12fff1e 	bx	lr

00002a00 <__aeabi_fcmplt>:
    2a00:	e52de008 	str	lr, [sp, #-8]!
    2a04:	ebfffff1 	bl	29d0 <__aeabi_cfcmpeq>
    2a08:	33a00001 	movcc	r0, #1
    2a0c:	23a00000 	movcs	r0, #0
    2a10:	e49de008 	ldr	lr, [sp], #8
    2a14:	e12fff1e 	bx	lr

00002a18 <__aeabi_fcmple>:
    2a18:	e52de008 	str	lr, [sp, #-8]!
    2a1c:	ebffffeb 	bl	29d0 <__aeabi_cfcmpeq>
    2a20:	93a00001 	movls	r0, #1
    2a24:	83a00000 	movhi	r0, #0
    2a28:	e49de008 	ldr	lr, [sp], #8
    2a2c:	e12fff1e 	bx	lr

00002a30 <__aeabi_fcmpge>:
    2a30:	e52de008 	str	lr, [sp, #-8]!
    2a34:	ebffffe1 	bl	29c0 <__aeabi_cfrcmple>
    2a38:	93a00001 	movls	r0, #1
    2a3c:	83a00000 	movhi	r0, #0
    2a40:	e49de008 	ldr	lr, [sp], #8
    2a44:	e12fff1e 	bx	lr

00002a48 <__aeabi_fcmpgt>:
    2a48:	e52de008 	str	lr, [sp, #-8]!
    2a4c:	ebffffdb 	bl	29c0 <__aeabi_cfrcmple>
    2a50:	33a00001 	movcc	r0, #1
    2a54:	23a00000 	movcs	r0, #0
    2a58:	e49de008 	ldr	lr, [sp], #8
    2a5c:	e12fff1e 	bx	lr

00002a60 <atexit>:
    2a60:	e1a01000 	mov	r1, r0
    2a64:	e3a00000 	mov	r0, #0
    2a68:	e92d4008 	push	{r3, lr}
    2a6c:	e1a02000 	mov	r2, r0
    2a70:	e1a03000 	mov	r3, r0
    2a74:	eb00005b 	bl	2be8 <__register_exitproc>
    2a78:	e8bd4008 	pop	{r3, lr}
    2a7c:	e12fff1e 	bx	lr

00002a80 <exit>:
    2a80:	e92d4008 	push	{r3, lr}
    2a84:	e3a01000 	mov	r1, #0
    2a88:	e1a04000 	mov	r4, r0
    2a8c:	eb000092 	bl	2cdc <__call_exitprocs>
    2a90:	e59f3018 	ldr	r3, [pc, #24]	; 2ab0 <exit+0x30>
    2a94:	e5930000 	ldr	r0, [r3]
    2a98:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    2a9c:	e3530000 	cmp	r3, #0
    2aa0:	11a0e00f 	movne	lr, pc
    2aa4:	112fff13 	bxne	r3
    2aa8:	e1a00004 	mov	r0, r4
    2aac:	eb000116 	bl	2f0c <_exit>
    2ab0:	000030b4 	.word	0x000030b4

00002ab4 <memset>:
    2ab4:	e3520003 	cmp	r2, #3
    2ab8:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    2abc:	e20110ff 	and	r1, r1, #255	; 0xff
    2ac0:	8a000008 	bhi	2ae8 <memset+0x34>
    2ac4:	e3520000 	cmp	r2, #0
    2ac8:	0a000004 	beq	2ae0 <memset+0x2c>
    2acc:	e1a03000 	mov	r3, r0
    2ad0:	e0822000 	add	r2, r2, r0
    2ad4:	e4c31001 	strb	r1, [r3], #1
    2ad8:	e1530002 	cmp	r3, r2
    2adc:	1afffffc 	bne	2ad4 <memset+0x20>
    2ae0:	e8bd0010 	ldmfd	sp!, {r4}
    2ae4:	e12fff1e 	bx	lr
    2ae8:	e3100003 	tst	r0, #3
    2aec:	e0802002 	add	r2, r0, r2
    2af0:	0a000007 	beq	2b14 <memset+0x60>
    2af4:	e280c001 	add	r12, r0, #1
    2af8:	e20c3003 	and	r3, r12, #3
    2afc:	e3530000 	cmp	r3, #0
    2b00:	e54c1001 	strb	r1, [r12, #-1]
    2b04:	e1a0300c 	mov	r3, r12
    2b08:	e28cc001 	add	r12, r12, #1
    2b0c:	1afffff9 	bne	2af8 <memset+0x44>
    2b10:	ea000000 	b	2b18 <memset+0x64>
    2b14:	e1a03000 	mov	r3, r0
    2b18:	e0634002 	rsb	r4, r3, r2
    2b1c:	e081c401 	add	r12, r1, r1, lsl #8
    2b20:	e354003f 	cmp	r4, #63	; 0x3f
    2b24:	e08cc80c 	add	r12, r12, r12, lsl #16
    2b28:	da00001a 	ble	2b98 <memset+0xe4>
    2b2c:	e583c000 	str	r12, [r3]
    2b30:	e583c004 	str	r12, [r3, #4]
    2b34:	e583c008 	str	r12, [r3, #8]
    2b38:	e583c00c 	str	r12, [r3, #12]
    2b3c:	e583c010 	str	r12, [r3, #16]
    2b40:	e583c014 	str	r12, [r3, #20]
    2b44:	e583c018 	str	r12, [r3, #24]
    2b48:	e583c01c 	str	r12, [r3, #28]
    2b4c:	e583c020 	str	r12, [r3, #32]
    2b50:	e583c024 	str	r12, [r3, #36]	; 0x24
    2b54:	e583c028 	str	r12, [r3, #40]	; 0x28
    2b58:	e583c02c 	str	r12, [r3, #44]	; 0x2c
    2b5c:	e583c030 	str	r12, [r3, #48]	; 0x30
    2b60:	e583c034 	str	r12, [r3, #52]	; 0x34
    2b64:	e583c038 	str	r12, [r3, #56]	; 0x38
    2b68:	e583c03c 	str	r12, [r3, #60]	; 0x3c
    2b6c:	e2833040 	add	r3, r3, #64	; 0x40
    2b70:	e0634002 	rsb	r4, r3, r2
    2b74:	e354003f 	cmp	r4, #63	; 0x3f
    2b78:	caffffeb 	bgt	2b2c <memset+0x78>
    2b7c:	ea000005 	b	2b98 <memset+0xe4>
    2b80:	e583c000 	str	r12, [r3]
    2b84:	e583c004 	str	r12, [r3, #4]
    2b88:	e583c008 	str	r12, [r3, #8]
    2b8c:	e583c00c 	str	r12, [r3, #12]
    2b90:	e2833010 	add	r3, r3, #16
    2b94:	e0634002 	rsb	r4, r3, r2
    2b98:	e354000f 	cmp	r4, #15
    2b9c:	cafffff7 	bgt	2b80 <memset+0xcc>
    2ba0:	e3540003 	cmp	r4, #3
    2ba4:	da000006 	ble	2bc4 <memset+0x110>
    2ba8:	e2834004 	add	r4, r3, #4
    2bac:	e0643002 	rsb	r3, r4, r2
    2bb0:	e3530003 	cmp	r3, #3
    2bb4:	e504c004 	str	r12, [r4, #-4]
    2bb8:	e1a03004 	mov	r3, r4
    2bbc:	e2844004 	add	r4, r4, #4
    2bc0:	cafffff9 	bgt	2bac <memset+0xf8>
    2bc4:	e1520003 	cmp	r2, r3
    2bc8:	9affffc4 	bls	2ae0 <memset+0x2c>
    2bcc:	e2833001 	add	r3, r3, #1
    2bd0:	e2822001 	add	r2, r2, #1
    2bd4:	e5431001 	strb	r1, [r3, #-1]
    2bd8:	e2833001 	add	r3, r3, #1
    2bdc:	e1530002 	cmp	r3, r2
    2be0:	1afffffb 	bne	2bd4 <memset+0x120>
    2be4:	eaffffbd 	b	2ae0 <memset+0x2c>

00002be8 <__register_exitproc>:
    2be8:	e59fc0e4 	ldr	r12, [pc, #228]	; 2cd4 <__register_exitproc+0xec>
    2bec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    2bf0:	e59c4000 	ldr	r4, [r12]
    2bf4:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    2bf8:	e35c0000 	cmp	r12, #0
    2bfc:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    2c00:	e59c5004 	ldr	r5, [r12, #4]
    2c04:	0584c148 	streq	r12, [r4, #328]	; 0x148
    2c08:	e355001f 	cmp	r5, #31
    2c0c:	e24dd010 	sub	sp, sp, #16
    2c10:	e1a06000 	mov	r6, r0
    2c14:	da000015 	ble	2c70 <__register_exitproc+0x88>
    2c18:	e59f00b8 	ldr	r0, [pc, #184]	; 2cd8 <__register_exitproc+0xf0>
    2c1c:	e3500000 	cmp	r0, #0
    2c20:	1a000001 	bne	2c2c <__register_exitproc+0x44>
    2c24:	e3e00000 	mvn	r0, #0
    2c28:	ea000018 	b	2c90 <__register_exitproc+0xa8>
    2c2c:	e3a00e19 	mov	r0, #400	; 0x190
    2c30:	e58d100c 	str	r1, [sp, #12]
    2c34:	e58d2008 	str	r2, [sp, #8]
    2c38:	e58d3004 	str	r3, [sp, #4]
    2c3c:	e320f000 	nop	{0}
    2c40:	e250c000 	subs	r12, r0, #0
    2c44:	e59d100c 	ldr	r1, [sp, #12]
    2c48:	e59d2008 	ldr	r2, [sp, #8]
    2c4c:	e59d3004 	ldr	r3, [sp, #4]
    2c50:	0afffff3 	beq	2c24 <__register_exitproc+0x3c>
    2c54:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    2c58:	e3a00000 	mov	r0, #0
    2c5c:	e58c0004 	str	r0, [r12, #4]
    2c60:	e58c5000 	str	r5, [r12]
    2c64:	e584c148 	str	r12, [r4, #328]	; 0x148
    2c68:	e58c0188 	str	r0, [r12, #392]	; 0x188
    2c6c:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    2c70:	e3560000 	cmp	r6, #0
    2c74:	e59c4004 	ldr	r4, [r12, #4]
    2c78:	1a000007 	bne	2c9c <__register_exitproc+0xb4>
    2c7c:	e2843002 	add	r3, r4, #2
    2c80:	e2844001 	add	r4, r4, #1
    2c84:	e78c1103 	str	r1, [r12, r3, lsl #2]
    2c88:	e58c4004 	str	r4, [r12, #4]
    2c8c:	e3a00000 	mov	r0, #0
    2c90:	e28dd010 	add	sp, sp, #16
    2c94:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    2c98:	e12fff1e 	bx	lr
    2c9c:	e3a00001 	mov	r0, #1
    2ca0:	e1a00410 	lsl	r0, r0, r4
    2ca4:	e08c8104 	add	r8, r12, r4, lsl #2
    2ca8:	e3560002 	cmp	r6, #2
    2cac:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    2cb0:	e5883108 	str	r3, [r8, #264]	; 0x108
    2cb4:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    2cb8:	e1877000 	orr	r7, r7, r0
    2cbc:	01830000 	orreq	r0, r3, r0
    2cc0:	e1a05008 	mov	r5, r8
    2cc4:	e5882088 	str	r2, [r8, #136]	; 0x88
    2cc8:	e58c7188 	str	r7, [r12, #392]	; 0x188
    2ccc:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    2cd0:	eaffffe9 	b	2c7c <__register_exitproc+0x94>
    2cd4:	000030b4 	.word	0x000030b4
    2cd8:	00000000 	.word	0x00000000

00002cdc <__call_exitprocs>:
    2cdc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2ce0:	e59f3168 	ldr	r3, [pc, #360]	; 2e50 <__call_exitprocs+0x174>
    2ce4:	e5933000 	ldr	r3, [r3]
    2ce8:	e24dd014 	sub	sp, sp, #20
    2cec:	e58d3004 	str	r3, [sp, #4]
    2cf0:	e2833f52 	add	r3, r3, #328	; 0x148
    2cf4:	e58d0008 	str	r0, [sp, #8]
    2cf8:	e58d300c 	str	r3, [sp, #12]
    2cfc:	e1a07001 	mov	r7, r1
    2d00:	e3a08001 	mov	r8, #1
    2d04:	e59d3004 	ldr	r3, [sp, #4]
    2d08:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    2d0c:	e3560000 	cmp	r6, #0
    2d10:	e59db00c 	ldr	r11, [sp, #12]
    2d14:	0a000033 	beq	2de8 <__call_exitprocs+0x10c>
    2d18:	e5965004 	ldr	r5, [r6, #4]
    2d1c:	e2554001 	subs	r4, r5, #1
    2d20:	5286a088 	addpl	r10, r6, #136	; 0x88
    2d24:	5285501f 	addpl	r5, r5, #31
    2d28:	508a5105 	addpl	r5, r10, r5, lsl #2
    2d2c:	5a000007 	bpl	2d50 <__call_exitprocs+0x74>
    2d30:	ea000029 	b	2ddc <__call_exitprocs+0x100>
    2d34:	e5953000 	ldr	r3, [r5]
    2d38:	e1530007 	cmp	r3, r7
    2d3c:	0a000005 	beq	2d58 <__call_exitprocs+0x7c>
    2d40:	e2444001 	sub	r4, r4, #1
    2d44:	e3740001 	cmn	r4, #1
    2d48:	e2455004 	sub	r5, r5, #4
    2d4c:	0a000022 	beq	2ddc <__call_exitprocs+0x100>
    2d50:	e3570000 	cmp	r7, #0
    2d54:	1afffff6 	bne	2d34 <__call_exitprocs+0x58>
    2d58:	e5963004 	ldr	r3, [r6, #4]
    2d5c:	e06a2005 	rsb	r2, r10, r5
    2d60:	e2433001 	sub	r3, r3, #1
    2d64:	e0862002 	add	r2, r6, r2
    2d68:	e1530004 	cmp	r3, r4
    2d6c:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    2d70:	13a01000 	movne	r1, #0
    2d74:	05864004 	streq	r4, [r6, #4]
    2d78:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    2d7c:	e3530000 	cmp	r3, #0
    2d80:	0affffee 	beq	2d40 <__call_exitprocs+0x64>
    2d84:	e1a02418 	lsl	r2, r8, r4
    2d88:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    2d8c:	e1120001 	tst	r2, r1
    2d90:	e5969004 	ldr	r9, [r6, #4]
    2d94:	0a000016 	beq	2df4 <__call_exitprocs+0x118>
    2d98:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    2d9c:	e1120001 	tst	r2, r1
    2da0:	1a000016 	bne	2e00 <__call_exitprocs+0x124>
    2da4:	e59d0008 	ldr	r0, [sp, #8]
    2da8:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    2dac:	e1a0e00f 	mov	lr, pc
    2db0:	e12fff13 	bx	r3
    2db4:	e5963004 	ldr	r3, [r6, #4]
    2db8:	e1530009 	cmp	r3, r9
    2dbc:	1affffd0 	bne	2d04 <__call_exitprocs+0x28>
    2dc0:	e59b3000 	ldr	r3, [r11]
    2dc4:	e1530006 	cmp	r3, r6
    2dc8:	1affffcd 	bne	2d04 <__call_exitprocs+0x28>
    2dcc:	e2444001 	sub	r4, r4, #1
    2dd0:	e3740001 	cmn	r4, #1
    2dd4:	e2455004 	sub	r5, r5, #4
    2dd8:	1affffdc 	bne	2d50 <__call_exitprocs+0x74>
    2ddc:	e59f1070 	ldr	r1, [pc, #112]	; 2e54 <__call_exitprocs+0x178>
    2de0:	e3510000 	cmp	r1, #0
    2de4:	1a000009 	bne	2e10 <__call_exitprocs+0x134>
    2de8:	e28dd014 	add	sp, sp, #20
    2dec:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2df0:	e12fff1e 	bx	lr
    2df4:	e1a0e00f 	mov	lr, pc
    2df8:	e12fff13 	bx	r3
    2dfc:	eaffffec 	b	2db4 <__call_exitprocs+0xd8>
    2e00:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    2e04:	e1a0e00f 	mov	lr, pc
    2e08:	e12fff13 	bx	r3
    2e0c:	eaffffe8 	b	2db4 <__call_exitprocs+0xd8>
    2e10:	e5963004 	ldr	r3, [r6, #4]
    2e14:	e3530000 	cmp	r3, #0
    2e18:	e5963000 	ldr	r3, [r6]
    2e1c:	1a000008 	bne	2e44 <__call_exitprocs+0x168>
    2e20:	e3530000 	cmp	r3, #0
    2e24:	0a000006 	beq	2e44 <__call_exitprocs+0x168>
    2e28:	e1a00006 	mov	r0, r6
    2e2c:	e58b3000 	str	r3, [r11]
    2e30:	e320f000 	nop	{0}
    2e34:	e59b6000 	ldr	r6, [r11]
    2e38:	e3560000 	cmp	r6, #0
    2e3c:	1affffb5 	bne	2d18 <__call_exitprocs+0x3c>
    2e40:	eaffffe8 	b	2de8 <__call_exitprocs+0x10c>
    2e44:	e1a0b006 	mov	r11, r6
    2e48:	e1a06003 	mov	r6, r3
    2e4c:	eafffff9 	b	2e38 <__call_exitprocs+0x15c>
    2e50:	000030b4 	.word	0x000030b4
    2e54:	00000000 	.word	0x00000000

00002e58 <register_fini>:
    2e58:	e92d4008 	push	{r3, lr}
    2e5c:	e59f3010 	ldr	r3, [pc, #16]	; 2e74 <register_fini+0x1c>
    2e60:	e3530000 	cmp	r3, #0
    2e64:	159f000c 	ldrne	r0, [pc, #12]	; 2e78 <register_fini+0x20>
    2e68:	1bfffefc 	blne	2a60 <atexit>
    2e6c:	e8bd4008 	pop	{r3, lr}
    2e70:	e12fff1e 	bx	lr
    2e74:	000030dc 	.word	0x000030dc
    2e78:	00002e7c 	.word	0x00002e7c

00002e7c <__libc_fini_array>:
    2e7c:	e92d4038 	push	{r3, r4, r5, lr}
    2e80:	e59f5030 	ldr	r5, [pc, #48]	; 2eb8 <__libc_fini_array+0x3c>
    2e84:	e59f4030 	ldr	r4, [pc, #48]	; 2ebc <__libc_fini_array+0x40>
    2e88:	e0654004 	rsb	r4, r5, r4
    2e8c:	e1b04144 	asrs	r4, r4, #2
    2e90:	10855104 	addne	r5, r5, r4, lsl #2
    2e94:	0a000004 	beq	2eac <__libc_fini_array+0x30>
    2e98:	e5353004 	ldr	r3, [r5, #-4]!
    2e9c:	e1a0e00f 	mov	lr, pc
    2ea0:	e12fff13 	bx	r3
    2ea4:	e2544001 	subs	r4, r4, #1
    2ea8:	1afffffa 	bne	2e98 <__libc_fini_array+0x1c>
    2eac:	eb00008a 	bl	30dc <__libc_fini>
    2eb0:	e8bd4038 	pop	{r3, r4, r5, lr}
    2eb4:	e12fff1e 	bx	lr
    2eb8:	000030f4 	.word	0x000030f4
    2ebc:	000030f8 	.word	0x000030f8

00002ec0 <__cs3_premain>:
    2ec0:	e92d4008 	push	{r3, lr}
    2ec4:	eb000017 	bl	2f28 <__libc_init_array>
    2ec8:	e59f3030 	ldr	r3, [pc, #48]	; 2f00 <__cs3_premain+0x40>
    2ecc:	e3530000 	cmp	r3, #0
    2ed0:	15930000 	ldrne	r0, [r3]
    2ed4:	01a00003 	moveq	r0, r3
    2ed8:	e59f3024 	ldr	r3, [pc, #36]	; 2f04 <__cs3_premain+0x44>
    2edc:	e3530000 	cmp	r3, #0
    2ee0:	15931000 	ldrne	r1, [r3]
    2ee4:	01a01003 	moveq	r1, r3
    2ee8:	e3a02000 	mov	r2, #0
    2eec:	ebfff4da 	bl	25c <main>
    2ef0:	e59f3010 	ldr	r3, [pc, #16]	; 2f08 <__cs3_premain+0x48>
    2ef4:	e3530000 	cmp	r3, #0
    2ef8:	1bfffee0 	blne	2a80 <exit>
    2efc:	eafffffe 	b	2efc <__cs3_premain+0x3c>
	...
    2f08:	00002a80 	.word	0x00002a80

00002f0c <_exit>:
    2f0c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    2f10:	e3a00018 	mov	r0, #24
    2f14:	e59f1004 	ldr	r1, [pc, #4]	; 2f20 <_exit+0x14>
    2f18:	ef123456 	svc	0x00123456
    2f1c:	eafffffe 	b	2f1c <_exit+0x10>
    2f20:	00020026 	.word	0x00020026

00002f24 <__cs3_isr_interrupt>:
    2f24:	eafffffe 	b	2f24 <__cs3_isr_interrupt>

00002f28 <__libc_init_array>:
    2f28:	e92d4070 	push	{r4, r5, r6, lr}
    2f2c:	e59f506c 	ldr	r5, [pc, #108]	; 2fa0 <__libc_init_array+0x78>
    2f30:	e59f606c 	ldr	r6, [pc, #108]	; 2fa4 <__libc_init_array+0x7c>
    2f34:	e0656006 	rsb	r6, r5, r6
    2f38:	e1b06146 	asrs	r6, r6, #2
    2f3c:	12455004 	subne	r5, r5, #4
    2f40:	13a04000 	movne	r4, #0
    2f44:	0a000005 	beq	2f60 <__libc_init_array+0x38>
    2f48:	e5b53004 	ldr	r3, [r5, #4]!
    2f4c:	e2844001 	add	r4, r4, #1
    2f50:	e1a0e00f 	mov	lr, pc
    2f54:	e12fff13 	bx	r3
    2f58:	e1560004 	cmp	r6, r4
    2f5c:	1afffff9 	bne	2f48 <__libc_init_array+0x20>
    2f60:	e59f5040 	ldr	r5, [pc, #64]	; 2fa8 <__libc_init_array+0x80>
    2f64:	e59f6040 	ldr	r6, [pc, #64]	; 2fac <__libc_init_array+0x84>
    2f68:	e0656006 	rsb	r6, r5, r6
    2f6c:	eb000052 	bl	30bc <_init>
    2f70:	e1b06146 	asrs	r6, r6, #2
    2f74:	12455004 	subne	r5, r5, #4
    2f78:	13a04000 	movne	r4, #0
    2f7c:	0a000005 	beq	2f98 <__libc_init_array+0x70>
    2f80:	e5b53004 	ldr	r3, [r5, #4]!
    2f84:	e2844001 	add	r4, r4, #1
    2f88:	e1a0e00f 	mov	lr, pc
    2f8c:	e12fff13 	bx	r3
    2f90:	e1560004 	cmp	r6, r4
    2f94:	1afffff9 	bne	2f80 <__libc_init_array+0x58>
    2f98:	e8bd4070 	pop	{r4, r5, r6, lr}
    2f9c:	e12fff1e 	bx	lr
    2fa0:	000030d4 	.word	0x000030d4
    2fa4:	000030d4 	.word	0x000030d4
    2fa8:	000030d4 	.word	0x000030d4
    2fac:	000030dc 	.word	0x000030dc

Disassembly of section .rodata:

00002fb4 <_global_impure_ptr-0x100>:
    2fb4:	204d5052 	.word	0x204d5052
    2fb8:	75706e49 	.word	0x75706e49
    2fbc:	00003a74 	.word	0x00003a74
	...
    2fdc:	20746553 	.word	0x20746553
    2fe0:	3a4d5052 	.word	0x3a4d5052
	...
    3004:	75746341 	.word	0x75746341
    3008:	52206c61 	.word	0x52206c61
    300c:	003a4d50 	.word	0x003a4d50
	...
    302c:	72727543 	.word	0x72727543
    3030:	3a746e65 	.word	0x3a746e65
	...
    3054:	20202020 	.word	0x20202020
    3058:	00202020 	.word	0x00202020
	...
    307c:	00000030 	.word	0x00000030
    3080:	00000031 	.word	0x00000031
    3084:	00000032 	.word	0x00000032
    3088:	00000033 	.word	0x00000033
    308c:	00000034 	.word	0x00000034
    3090:	00000035 	.word	0x00000035
    3094:	00000036 	.word	0x00000036
    3098:	00000037 	.word	0x00000037
    309c:	00000038 	.word	0x00000038
    30a0:	00000039 	.word	0x00000039
    30a4:	33323130 	.word	0x33323130
    30a8:	37363534 	.word	0x37363534
    30ac:	42413938 	.word	0x42413938
    30b0:	46454443 	.word	0x46454443

000030b4 <_global_impure_ptr>:
    30b4:	00003120 00000043                        1..C...

000030bc <_init>:
    30bc:	e1a0c00d 	mov	r12, sp
    30c0:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    30c4:	e24cb004 	sub	r11, r12, #4
    30c8:	e24bd028 	sub	sp, r11, #40	; 0x28
    30cc:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    30d0:	e12fff1e 	bx	lr

000030d4 <__init_array_start>:
    30d4:	00002e58 	.word	0x00002e58

000030d8 <__frame_dummy_init_array_entry>:
    30d8:	00000208                                ....

000030dc <__libc_fini>:
    30dc:	e1a0c00d 	mov	r12, sp
    30e0:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    30e4:	e24cb004 	sub	r11, r12, #4
    30e8:	e24bd028 	sub	sp, r11, #40	; 0x28
    30ec:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    30f0:	e12fff1e 	bx	lr

000030f4 <__fini_array_start>:
    30f4:	000001c4 	.word	0x000001c4

000030f8 <__cs3_regions>:
	...
    3104:	00003550 	.word	0x00003550
    3108:	000000a0 	.word	0x000000a0

0000310c <__cs3_regions_end>:
    310c:	00000000 	.word	0x00000000
