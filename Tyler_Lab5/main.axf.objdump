
//gc-labfile01/LabMyDocs/tjbeine/Desktop/lab5/main.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
       0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      20:	40 00 00 00 68 19 00 00 6c 19 00 00 70 19 00 00     @...h...l...p...
      30:	74 19 00 00 64 19 00 00 78 19 00 00 7c 19 00 00     t...d...x...|...

00000040 <__cs3_reset>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb000609 	bl	1900 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00001a70 	.word	0x00001a70

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00001ea8 	.word	0x00001ea8

00000124 <__cs3_heap_start_ptr>:
     124:	00001ee8 	.word	0x00001ee8

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00001eb0 	.word	0x00001eb0
     170:	00001eb3 	.word	0x00001eb3
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	00001eb0 	.word	0x00001eb0
     1bc:	00001eb0 	.word	0x00001eb0
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00001eb0 	.word	0x00001eb0
     200:	00000000 	.word	0x00000000
     204:	00001a08 	.word	0x00001a08

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00001a08 	.word	0x00001a08
     250:	00001eb4 	.word	0x00001eb4
     254:	00001a70 	.word	0x00001a70
     258:	00000000 	.word	0x00000000

0000025c <main>:
int pos4=0;
int pos5=0;
int pos6=0;

int main(void)
{
     25c:	e92d4800 	push	{r11, lr}
     260:	e28db004 	add	r11, sp, #4
     264:	e24dd010 	sub	sp, sp, #16
	volatile int * PS2_ptr = (int *) 0xFF200100;
     268:	e3a03c01 	mov	r3, #256	; 0x100
     26c:	e34f3f20 	movt	r3, #65312	; 0xff20
     270:	e50b3008 	str	r3, [r11, #-8]
	int PS2_data, RVALID;
	
	PS2_data=*(PS2_ptr);
     274:	e51b3008 	ldr	r3, [r11, #-8]
     278:	e5933000 	ldr	r3, [r3]
     27c:	e50b300c 	str	r3, [r11, #-12]
	RVALID = PS2_data & 0x8000;
     280:	e51b300c 	ldr	r3, [r11, #-12]
     284:	e2033902 	and	r3, r3, #32768	; 0x8000
     288:	e50b3010 	str	r3, [r11, #-16]
	
	position = 1;
     28c:	e3013ecc 	movw	r3, #7884	; 0x1ecc
     290:	e3403000 	movt	r3, #0
     294:	e3a02001 	mov	r2, #1
     298:	e5832000 	str	r2, [r3]
	pos1=0;
     29c:	e3013ed0 	movw	r3, #7888	; 0x1ed0
     2a0:	e3403000 	movt	r3, #0
     2a4:	e3a02000 	mov	r2, #0
     2a8:	e5832000 	str	r2, [r3]
	pos2=0;
     2ac:	e3013ed4 	movw	r3, #7892	; 0x1ed4
     2b0:	e3403000 	movt	r3, #0
     2b4:	e3a02000 	mov	r2, #0
     2b8:	e5832000 	str	r2, [r3]
	pos3=0;
     2bc:	e3013ed8 	movw	r3, #7896	; 0x1ed8
     2c0:	e3403000 	movt	r3, #0
     2c4:	e3a02000 	mov	r2, #0
     2c8:	e5832000 	str	r2, [r3]
	pos4=0;
     2cc:	e3013edc 	movw	r3, #7900	; 0x1edc
     2d0:	e3403000 	movt	r3, #0
     2d4:	e3a02000 	mov	r2, #0
     2d8:	e5832000 	str	r2, [r3]
	pos5=0;
     2dc:	e3013ee0 	movw	r3, #7904	; 0x1ee0
     2e0:	e3403000 	movt	r3, #0
     2e4:	e3a02000 	mov	r2, #0
     2e8:	e5832000 	str	r2, [r3]
	pos6=0;
     2ec:	e3013ee4 	movw	r3, #7908	; 0x1ee4
     2f0:	e3403000 	movt	r3, #0
     2f4:	e3a02000 	mov	r2, #0
     2f8:	e5832000 	str	r2, [r3]
     2fc:	ea000000 	b	304 <main+0xa8>
		if ((PS2_data & 0xFF) == 0xF0){
			//output the value if it was pressed
			DisplayKeyboard(getKeyboardValue());
		}
	}
}
     300:	e1a00000 	nop			; (mov r0, r0)
	pos5=0;
	pos6=0;
	
while(1){	
//read the data register for the break code
PS2_data=*(PS2_ptr);
     304:	e51b3008 	ldr	r3, [r11, #-8]
     308:	e5933000 	ldr	r3, [r3]
     30c:	e50b300c 	str	r3, [r11, #-12]
	RVALID = PS2_data & 0x8000;
     310:	e51b300c 	ldr	r3, [r11, #-12]
     314:	e2033902 	and	r3, r3, #32768	; 0x8000
     318:	e50b3010 	str	r3, [r11, #-16]
	
	if(RVALID){
     31c:	e51b3010 	ldr	r3, [r11, #-16]
     320:	e3530000 	cmp	r3, #0
     324:	0afffff5 	beq	300 <main+0xa4>
		//check if key was pressed
		if ((PS2_data & 0xFF) == 0xF0){
     328:	e51b300c 	ldr	r3, [r11, #-12]
     32c:	e6ef3073 	uxtb	r3, r3
     330:	e35300f0 	cmp	r3, #240	; 0xf0
     334:	1afffff1 	bne	300 <main+0xa4>
			//output the value if it was pressed
			DisplayKeyboard(getKeyboardValue());
     338:	eb000003 	bl	34c <getKeyboardValue>
     33c:	e1a03000 	mov	r3, r0
     340:	e1a00003 	mov	r0, r3
     344:	eb000056 	bl	4a4 <DisplayKeyboard>
		}
	}
}
     348:	eaffffec 	b	300 <main+0xa4>

0000034c <getKeyboardValue>:
}

int /* keypadValue */ getKeyboardValue(){
     34c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     350:	e28db000 	add	r11, sp, #0
     354:	e24dd014 	sub	sp, sp, #20
	
	//initialize the PS2 
	volatile int value = 0;
     358:	e3a03000 	mov	r3, #0
     35c:	e50b3010 	str	r3, [r11, #-16]
	
	volatile int * PS2_ptr = (int *) 0xFF200100;
     360:	e3a03c01 	mov	r3, #256	; 0x100
     364:	e34f3f20 	movt	r3, #65312	; 0xff20
     368:	e50b3008 	str	r3, [r11, #-8]
	int PS2_data, RVALID;
	
	PS2_data=*(PS2_ptr);
     36c:	e51b3008 	ldr	r3, [r11, #-8]
     370:	e5933000 	ldr	r3, [r3]
     374:	e50b300c 	str	r3, [r11, #-12]
	// RVALID = PS2_data & 0x8000;
	
	//read the data register for the break code
	value = PS2_data & 0xFF;
     378:	e51b300c 	ldr	r3, [r11, #-12]
     37c:	e6ef3073 	uxtb	r3, r3
     380:	e50b3010 	str	r3, [r11, #-16]

	while (value == 0xF0){
     384:	ea000005 	b	3a0 <getKeyboardValue+0x54>
		PS2_data=*(PS2_ptr);
     388:	e51b3008 	ldr	r3, [r11, #-8]
     38c:	e5933000 	ldr	r3, [r3]
     390:	e50b300c 	str	r3, [r11, #-12]
		value = PS2_data & 0xFF;
     394:	e51b300c 	ldr	r3, [r11, #-12]
     398:	e6ef3073 	uxtb	r3, r3
     39c:	e50b3010 	str	r3, [r11, #-16]
	// RVALID = PS2_data & 0x8000;
	
	//read the data register for the break code
	value = PS2_data & 0xFF;

	while (value == 0xF0){
     3a0:	e51b3010 	ldr	r3, [r11, #-16]
     3a4:	e35300f0 	cmp	r3, #240	; 0xf0
     3a8:	0afffff6 	beq	388 <getKeyboardValue+0x3c>
		value = PS2_data & 0xFF;
	}


	//check if enter was pressed
	if (value == 0x5A){
     3ac:	e51b3010 	ldr	r3, [r11, #-16]
     3b0:	e353005a 	cmp	r3, #90	; 0x5a
     3b4:	1a000003 	bne	3c8 <getKeyboardValue+0x7c>
		position = 99;
     3b8:	e3013ecc 	movw	r3, #7884	; 0x1ecc
     3bc:	e3403000 	movt	r3, #0
     3c0:	e3a02063 	mov	r2, #99	; 0x63
     3c4:	e5832000 	str	r2, [r3]
		
	}
	
	//return the appropriate int value
	if (value == 0x70){
     3c8:	e51b3010 	ldr	r3, [r11, #-16]
     3cc:	e3530070 	cmp	r3, #112	; 0x70
     3d0:	1a000001 	bne	3dc <getKeyboardValue+0x90>
		return 0;
     3d4:	e3a03000 	mov	r3, #0
     3d8:	ea00002d 	b	494 <getKeyboardValue+0x148>
	}
	else if (value == 0x69){
     3dc:	e51b3010 	ldr	r3, [r11, #-16]
     3e0:	e3530069 	cmp	r3, #105	; 0x69
     3e4:	1a000001 	bne	3f0 <getKeyboardValue+0xa4>
		return 1;
     3e8:	e3a03001 	mov	r3, #1
     3ec:	ea000028 	b	494 <getKeyboardValue+0x148>
	}
	else if (value == 0x72){
     3f0:	e51b3010 	ldr	r3, [r11, #-16]
     3f4:	e3530072 	cmp	r3, #114	; 0x72
     3f8:	1a000001 	bne	404 <getKeyboardValue+0xb8>
		return 2;
     3fc:	e3a03002 	mov	r3, #2
     400:	ea000023 	b	494 <getKeyboardValue+0x148>
	}
	else if (value == 0x7A){
     404:	e51b3010 	ldr	r3, [r11, #-16]
     408:	e353007a 	cmp	r3, #122	; 0x7a
     40c:	1a000001 	bne	418 <getKeyboardValue+0xcc>
		return 3;
     410:	e3a03003 	mov	r3, #3
     414:	ea00001e 	b	494 <getKeyboardValue+0x148>
	}
	else if (value == 0x6B){
     418:	e51b3010 	ldr	r3, [r11, #-16]
     41c:	e353006b 	cmp	r3, #107	; 0x6b
     420:	1a000001 	bne	42c <getKeyboardValue+0xe0>
		return 4;
     424:	e3a03004 	mov	r3, #4
     428:	ea000019 	b	494 <getKeyboardValue+0x148>
	}
	else if (value == 0x73){
     42c:	e51b3010 	ldr	r3, [r11, #-16]
     430:	e3530073 	cmp	r3, #115	; 0x73
     434:	1a000001 	bne	440 <getKeyboardValue+0xf4>
		return 5;
     438:	e3a03005 	mov	r3, #5
     43c:	ea000014 	b	494 <getKeyboardValue+0x148>
	}
	else if (value == 0x74){
     440:	e51b3010 	ldr	r3, [r11, #-16]
     444:	e3530074 	cmp	r3, #116	; 0x74
     448:	1a000001 	bne	454 <getKeyboardValue+0x108>
		return 6;
     44c:	e3a03006 	mov	r3, #6
     450:	ea00000f 	b	494 <getKeyboardValue+0x148>
	}
	else if (value == 0x6C){
     454:	e51b3010 	ldr	r3, [r11, #-16]
     458:	e353006c 	cmp	r3, #108	; 0x6c
     45c:	1a000001 	bne	468 <getKeyboardValue+0x11c>
		return 7;
     460:	e3a03007 	mov	r3, #7
     464:	ea00000a 	b	494 <getKeyboardValue+0x148>
	}
	else if (value == 0x75){
     468:	e51b3010 	ldr	r3, [r11, #-16]
     46c:	e3530075 	cmp	r3, #117	; 0x75
     470:	1a000001 	bne	47c <getKeyboardValue+0x130>
		return 8;
     474:	e3a03008 	mov	r3, #8
     478:	ea000005 	b	494 <getKeyboardValue+0x148>
	}
	else if (value == 0x7D){
     47c:	e51b3010 	ldr	r3, [r11, #-16]
     480:	e353007d 	cmp	r3, #125	; 0x7d
     484:	1a000001 	bne	490 <getKeyboardValue+0x144>
		return 9;
     488:	e3a03009 	mov	r3, #9
     48c:	ea000000 	b	494 <getKeyboardValue+0x148>
	}
	return 567;
     490:	e3003237 	movw	r3, #567	; 0x237
}
     494:	e1a00003 	mov	r0, r3
     498:	e28bd000 	add	sp, r11, #0
     49c:	e8bd0800 	ldmfd	sp!, {r11}
     4a0:	e12fff1e 	bx	lr

000004a4 <DisplayKeyboard>:

void DisplayKeyboard(int keypadValue)
{
     4a4:	e92d4800 	push	{r11, lr}
     4a8:	e28db004 	add	r11, sp, #4
     4ac:	e24dd018 	sub	sp, sp, #24
     4b0:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
    volatile int* upperSegment   = (int*) HEX5_HEX4_BASE;
     4b4:	e3a03030 	mov	r3, #48	; 0x30
     4b8:	e34f3f20 	movt	r3, #65312	; 0xff20
     4bc:	e50b3010 	str	r3, [r11, #-16]
    volatile int* lowerSegment = (int*) HEX3_HEX0_BASE;
     4c0:	e3a03020 	mov	r3, #32
     4c4:	e34f3f20 	movt	r3, #65312	; 0xff20
     4c8:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec

    short upper = 0; //top 2 digits
     4cc:	e3a03000 	mov	r3, #0
     4d0:	e14b30b6 	strh	r3, [r11, #-6]
    int lower = 0; // bottom 4 digits
     4d4:	e3a03000 	mov	r3, #0
     4d8:	e50b300c 	str	r3, [r11, #-12]

	if (position == 99){
     4dc:	e3013ecc 	movw	r3, #7884	; 0x1ecc
     4e0:	e3403000 	movt	r3, #0
     4e4:	e5933000 	ldr	r3, [r3]
     4e8:	e3530063 	cmp	r3, #99	; 0x63
     4ec:	1a00005f 	bne	670 <DisplayKeyboard+0x1cc>
		position = 1;
     4f0:	e3013ecc 	movw	r3, #7884	; 0x1ecc
     4f4:	e3403000 	movt	r3, #0
     4f8:	e3a02001 	mov	r2, #1
     4fc:	e5832000 	str	r2, [r3]
		upper |= ( Segments (pos6) << 8);
     500:	e3013ee4 	movw	r3, #7908	; 0x1ee4
     504:	e3403000 	movt	r3, #0
     508:	e5933000 	ldr	r3, [r3]
     50c:	e6ef3073 	uxtb	r3, r3
     510:	e1a00003 	mov	r0, r3
     514:	eb00035a 	bl	1284 <Segments>
     518:	e1a03000 	mov	r3, r0
     51c:	e1a03403 	lsl	r3, r3, #8
     520:	e6ff3073 	uxth	r3, r3
     524:	e1a02003 	mov	r2, r3
     528:	e15b30b6 	ldrh	r3, [r11, #-6]
     52c:	e1823003 	orr	r3, r2, r3
     530:	e14b30b6 	strh	r3, [r11, #-6]
		upper |= ( Segments (pos5) );
     534:	e3013ee0 	movw	r3, #7904	; 0x1ee0
     538:	e3403000 	movt	r3, #0
     53c:	e5933000 	ldr	r3, [r3]
     540:	e6ef3073 	uxtb	r3, r3
     544:	e1a00003 	mov	r0, r3
     548:	eb00034d 	bl	1284 <Segments>
     54c:	e1a03000 	mov	r3, r0
     550:	e1a02003 	mov	r2, r3
     554:	e15b30b6 	ldrh	r3, [r11, #-6]
     558:	e1823003 	orr	r3, r2, r3
     55c:	e14b30b6 	strh	r3, [r11, #-6]
		lower|= ( Segments (pos4) << 24);
     560:	e3013edc 	movw	r3, #7900	; 0x1edc
     564:	e3403000 	movt	r3, #0
     568:	e5933000 	ldr	r3, [r3]
     56c:	e6ef3073 	uxtb	r3, r3
     570:	e1a00003 	mov	r0, r3
     574:	eb000342 	bl	1284 <Segments>
     578:	e1a03000 	mov	r3, r0
     57c:	e1a03c03 	lsl	r3, r3, #24
     580:	e51b200c 	ldr	r2, [r11, #-12]
     584:	e1823003 	orr	r3, r2, r3
     588:	e50b300c 	str	r3, [r11, #-12]
		lower |= ( Segments (pos3) << 16);
     58c:	e3013ed8 	movw	r3, #7896	; 0x1ed8
     590:	e3403000 	movt	r3, #0
     594:	e5933000 	ldr	r3, [r3]
     598:	e6ef3073 	uxtb	r3, r3
     59c:	e1a00003 	mov	r0, r3
     5a0:	eb000337 	bl	1284 <Segments>
     5a4:	e1a03000 	mov	r3, r0
     5a8:	e1a03803 	lsl	r3, r3, #16
     5ac:	e51b200c 	ldr	r2, [r11, #-12]
     5b0:	e1823003 	orr	r3, r2, r3
     5b4:	e50b300c 	str	r3, [r11, #-12]
		lower |= ( Segments (pos2) << 8);
     5b8:	e3013ed4 	movw	r3, #7892	; 0x1ed4
     5bc:	e3403000 	movt	r3, #0
     5c0:	e5933000 	ldr	r3, [r3]
     5c4:	e6ef3073 	uxtb	r3, r3
     5c8:	e1a00003 	mov	r0, r3
     5cc:	eb00032c 	bl	1284 <Segments>
     5d0:	e1a03000 	mov	r3, r0
     5d4:	e1a03403 	lsl	r3, r3, #8
     5d8:	e51b200c 	ldr	r2, [r11, #-12]
     5dc:	e1823003 	orr	r3, r2, r3
     5e0:	e50b300c 	str	r3, [r11, #-12]
		lower |= ( Segments (pos1) );
     5e4:	e3013ed0 	movw	r3, #7888	; 0x1ed0
     5e8:	e3403000 	movt	r3, #0
     5ec:	e5933000 	ldr	r3, [r3]
     5f0:	e6ef3073 	uxtb	r3, r3
     5f4:	e1a00003 	mov	r0, r3
     5f8:	eb000321 	bl	1284 <Segments>
     5fc:	e1a03000 	mov	r3, r0
     600:	e51b200c 	ldr	r2, [r11, #-12]
     604:	e1823003 	orr	r3, r2, r3
     608:	e50b300c 	str	r3, [r11, #-12]
		pos1=0; 
     60c:	e3013ed0 	movw	r3, #7888	; 0x1ed0
     610:	e3403000 	movt	r3, #0
     614:	e3a02000 	mov	r2, #0
     618:	e5832000 	str	r2, [r3]
		pos2=0; 
     61c:	e3013ed4 	movw	r3, #7892	; 0x1ed4
     620:	e3403000 	movt	r3, #0
     624:	e3a02000 	mov	r2, #0
     628:	e5832000 	str	r2, [r3]
		pos3=0; 
     62c:	e3013ed8 	movw	r3, #7896	; 0x1ed8
     630:	e3403000 	movt	r3, #0
     634:	e3a02000 	mov	r2, #0
     638:	e5832000 	str	r2, [r3]
		pos4=0; 
     63c:	e3013edc 	movw	r3, #7900	; 0x1edc
     640:	e3403000 	movt	r3, #0
     644:	e3a02000 	mov	r2, #0
     648:	e5832000 	str	r2, [r3]
		pos5=0; 
     64c:	e3013ee0 	movw	r3, #7904	; 0x1ee0
     650:	e3403000 	movt	r3, #0
     654:	e3a02000 	mov	r2, #0
     658:	e5832000 	str	r2, [r3]
		pos6=0; 
     65c:	e3013ee4 	movw	r3, #7908	; 0x1ee4
     660:	e3403000 	movt	r3, #0
     664:	e3a02000 	mov	r2, #0
     668:	e5832000 	str	r2, [r3]
     66c:	ea0002fc 	b	1264 <DisplayKeyboard+0xdc0>
	}
	else if (keypadValue==567){
     670:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     674:	e3003237 	movw	r3, #567	; 0x237
     678:	e1520003 	cmp	r2, r3
     67c:	1a000043 	bne	790 <DisplayKeyboard+0x2ec>
		upper |= ( Segments (pos6) << 8);
     680:	e3013ee4 	movw	r3, #7908	; 0x1ee4
     684:	e3403000 	movt	r3, #0
     688:	e5933000 	ldr	r3, [r3]
     68c:	e6ef3073 	uxtb	r3, r3
     690:	e1a00003 	mov	r0, r3
     694:	eb0002fa 	bl	1284 <Segments>
     698:	e1a03000 	mov	r3, r0
     69c:	e1a03403 	lsl	r3, r3, #8
     6a0:	e6ff3073 	uxth	r3, r3
     6a4:	e1a02003 	mov	r2, r3
     6a8:	e15b30b6 	ldrh	r3, [r11, #-6]
     6ac:	e1823003 	orr	r3, r2, r3
     6b0:	e14b30b6 	strh	r3, [r11, #-6]
		upper |= ( Segments (pos5) );
     6b4:	e3013ee0 	movw	r3, #7904	; 0x1ee0
     6b8:	e3403000 	movt	r3, #0
     6bc:	e5933000 	ldr	r3, [r3]
     6c0:	e6ef3073 	uxtb	r3, r3
     6c4:	e1a00003 	mov	r0, r3
     6c8:	eb0002ed 	bl	1284 <Segments>
     6cc:	e1a03000 	mov	r3, r0
     6d0:	e1a02003 	mov	r2, r3
     6d4:	e15b30b6 	ldrh	r3, [r11, #-6]
     6d8:	e1823003 	orr	r3, r2, r3
     6dc:	e14b30b6 	strh	r3, [r11, #-6]
		lower|= ( Segments (pos4) << 24);
     6e0:	e3013edc 	movw	r3, #7900	; 0x1edc
     6e4:	e3403000 	movt	r3, #0
     6e8:	e5933000 	ldr	r3, [r3]
     6ec:	e6ef3073 	uxtb	r3, r3
     6f0:	e1a00003 	mov	r0, r3
     6f4:	eb0002e2 	bl	1284 <Segments>
     6f8:	e1a03000 	mov	r3, r0
     6fc:	e1a03c03 	lsl	r3, r3, #24
     700:	e51b200c 	ldr	r2, [r11, #-12]
     704:	e1823003 	orr	r3, r2, r3
     708:	e50b300c 	str	r3, [r11, #-12]
		lower |= ( Segments (pos3) << 16);
     70c:	e3013ed8 	movw	r3, #7896	; 0x1ed8
     710:	e3403000 	movt	r3, #0
     714:	e5933000 	ldr	r3, [r3]
     718:	e6ef3073 	uxtb	r3, r3
     71c:	e1a00003 	mov	r0, r3
     720:	eb0002d7 	bl	1284 <Segments>
     724:	e1a03000 	mov	r3, r0
     728:	e1a03803 	lsl	r3, r3, #16
     72c:	e51b200c 	ldr	r2, [r11, #-12]
     730:	e1823003 	orr	r3, r2, r3
     734:	e50b300c 	str	r3, [r11, #-12]
		lower |= ( Segments (pos2) << 8);
     738:	e3013ed4 	movw	r3, #7892	; 0x1ed4
     73c:	e3403000 	movt	r3, #0
     740:	e5933000 	ldr	r3, [r3]
     744:	e6ef3073 	uxtb	r3, r3
     748:	e1a00003 	mov	r0, r3
     74c:	eb0002cc 	bl	1284 <Segments>
     750:	e1a03000 	mov	r3, r0
     754:	e1a03403 	lsl	r3, r3, #8
     758:	e51b200c 	ldr	r2, [r11, #-12]
     75c:	e1823003 	orr	r3, r2, r3
     760:	e50b300c 	str	r3, [r11, #-12]
		lower |= ( Segments (pos1) );
     764:	e3013ed0 	movw	r3, #7888	; 0x1ed0
     768:	e3403000 	movt	r3, #0
     76c:	e5933000 	ldr	r3, [r3]
     770:	e6ef3073 	uxtb	r3, r3
     774:	e1a00003 	mov	r0, r3
     778:	eb0002c1 	bl	1284 <Segments>
     77c:	e1a03000 	mov	r3, r0
     780:	e51b200c 	ldr	r2, [r11, #-12]
     784:	e1823003 	orr	r3, r2, r3
     788:	e50b300c 	str	r3, [r11, #-12]
     78c:	ea0002b4 	b	1264 <DisplayKeyboard+0xdc0>
	}
	
	
	//check which postion to write to then write the value to it
	else if(position==1){
     790:	e3013ecc 	movw	r3, #7884	; 0x1ecc
     794:	e3403000 	movt	r3, #0
     798:	e5933000 	ldr	r3, [r3]
     79c:	e3530001 	cmp	r3, #1
     7a0:	1a00004e 	bne	8e0 <DisplayKeyboard+0x43c>
		position = position + 1;
     7a4:	e3013ecc 	movw	r3, #7884	; 0x1ecc
     7a8:	e3403000 	movt	r3, #0
     7ac:	e5933000 	ldr	r3, [r3]
     7b0:	e2832001 	add	r2, r3, #1
     7b4:	e3013ecc 	movw	r3, #7884	; 0x1ecc
     7b8:	e3403000 	movt	r3, #0
     7bc:	e5832000 	str	r2, [r3]
		pos1 = keypadValue;
     7c0:	e3013ed0 	movw	r3, #7888	; 0x1ed0
     7c4:	e3403000 	movt	r3, #0
     7c8:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     7cc:	e5832000 	str	r2, [r3]
		upper |= ( Segments (pos6) << 8);
     7d0:	e3013ee4 	movw	r3, #7908	; 0x1ee4
     7d4:	e3403000 	movt	r3, #0
     7d8:	e5933000 	ldr	r3, [r3]
     7dc:	e6ef3073 	uxtb	r3, r3
     7e0:	e1a00003 	mov	r0, r3
     7e4:	eb0002a6 	bl	1284 <Segments>
     7e8:	e1a03000 	mov	r3, r0
     7ec:	e1a03403 	lsl	r3, r3, #8
     7f0:	e6ff3073 	uxth	r3, r3
     7f4:	e1a02003 	mov	r2, r3
     7f8:	e15b30b6 	ldrh	r3, [r11, #-6]
     7fc:	e1823003 	orr	r3, r2, r3
     800:	e14b30b6 	strh	r3, [r11, #-6]
		upper |= ( Segments (pos5) );
     804:	e3013ee0 	movw	r3, #7904	; 0x1ee0
     808:	e3403000 	movt	r3, #0
     80c:	e5933000 	ldr	r3, [r3]
     810:	e6ef3073 	uxtb	r3, r3
     814:	e1a00003 	mov	r0, r3
     818:	eb000299 	bl	1284 <Segments>
     81c:	e1a03000 	mov	r3, r0
     820:	e1a02003 	mov	r2, r3
     824:	e15b30b6 	ldrh	r3, [r11, #-6]
     828:	e1823003 	orr	r3, r2, r3
     82c:	e14b30b6 	strh	r3, [r11, #-6]
		lower|= ( Segments (pos4) << 24);
     830:	e3013edc 	movw	r3, #7900	; 0x1edc
     834:	e3403000 	movt	r3, #0
     838:	e5933000 	ldr	r3, [r3]
     83c:	e6ef3073 	uxtb	r3, r3
     840:	e1a00003 	mov	r0, r3
     844:	eb00028e 	bl	1284 <Segments>
     848:	e1a03000 	mov	r3, r0
     84c:	e1a03c03 	lsl	r3, r3, #24
     850:	e51b200c 	ldr	r2, [r11, #-12]
     854:	e1823003 	orr	r3, r2, r3
     858:	e50b300c 	str	r3, [r11, #-12]
		lower |= ( Segments (pos3) << 16);
     85c:	e3013ed8 	movw	r3, #7896	; 0x1ed8
     860:	e3403000 	movt	r3, #0
     864:	e5933000 	ldr	r3, [r3]
     868:	e6ef3073 	uxtb	r3, r3
     86c:	e1a00003 	mov	r0, r3
     870:	eb000283 	bl	1284 <Segments>
     874:	e1a03000 	mov	r3, r0
     878:	e1a03803 	lsl	r3, r3, #16
     87c:	e51b200c 	ldr	r2, [r11, #-12]
     880:	e1823003 	orr	r3, r2, r3
     884:	e50b300c 	str	r3, [r11, #-12]
		lower |= ( Segments (pos2) << 8);
     888:	e3013ed4 	movw	r3, #7892	; 0x1ed4
     88c:	e3403000 	movt	r3, #0
     890:	e5933000 	ldr	r3, [r3]
     894:	e6ef3073 	uxtb	r3, r3
     898:	e1a00003 	mov	r0, r3
     89c:	eb000278 	bl	1284 <Segments>
     8a0:	e1a03000 	mov	r3, r0
     8a4:	e1a03403 	lsl	r3, r3, #8
     8a8:	e51b200c 	ldr	r2, [r11, #-12]
     8ac:	e1823003 	orr	r3, r2, r3
     8b0:	e50b300c 	str	r3, [r11, #-12]
		lower |= ( Segments (pos1));
     8b4:	e3013ed0 	movw	r3, #7888	; 0x1ed0
     8b8:	e3403000 	movt	r3, #0
     8bc:	e5933000 	ldr	r3, [r3]
     8c0:	e6ef3073 	uxtb	r3, r3
     8c4:	e1a00003 	mov	r0, r3
     8c8:	eb00026d 	bl	1284 <Segments>
     8cc:	e1a03000 	mov	r3, r0
     8d0:	e51b200c 	ldr	r2, [r11, #-12]
     8d4:	e1823003 	orr	r3, r2, r3
     8d8:	e50b300c 	str	r3, [r11, #-12]
     8dc:	ea000260 	b	1264 <DisplayKeyboard+0xdc0>
	}
	else if (position == 2){
     8e0:	e3013ecc 	movw	r3, #7884	; 0x1ecc
     8e4:	e3403000 	movt	r3, #0
     8e8:	e5933000 	ldr	r3, [r3]
     8ec:	e3530002 	cmp	r3, #2
     8f0:	1a000054 	bne	a48 <DisplayKeyboard+0x5a4>
		position = position + 1;
     8f4:	e3013ecc 	movw	r3, #7884	; 0x1ecc
     8f8:	e3403000 	movt	r3, #0
     8fc:	e5933000 	ldr	r3, [r3]
     900:	e2832001 	add	r2, r3, #1
     904:	e3013ecc 	movw	r3, #7884	; 0x1ecc
     908:	e3403000 	movt	r3, #0
     90c:	e5832000 	str	r2, [r3]
		pos2=pos1;
     910:	e3013ed0 	movw	r3, #7888	; 0x1ed0
     914:	e3403000 	movt	r3, #0
     918:	e5932000 	ldr	r2, [r3]
     91c:	e3013ed4 	movw	r3, #7892	; 0x1ed4
     920:	e3403000 	movt	r3, #0
     924:	e5832000 	str	r2, [r3]
		pos1 = keypadValue;
     928:	e3013ed0 	movw	r3, #7888	; 0x1ed0
     92c:	e3403000 	movt	r3, #0
     930:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     934:	e5832000 	str	r2, [r3]
		upper |= ( Segments (pos6) << 8);
     938:	e3013ee4 	movw	r3, #7908	; 0x1ee4
     93c:	e3403000 	movt	r3, #0
     940:	e5933000 	ldr	r3, [r3]
     944:	e6ef3073 	uxtb	r3, r3
     948:	e1a00003 	mov	r0, r3
     94c:	eb00024c 	bl	1284 <Segments>
     950:	e1a03000 	mov	r3, r0
     954:	e1a03403 	lsl	r3, r3, #8
     958:	e6ff3073 	uxth	r3, r3
     95c:	e1a02003 	mov	r2, r3
     960:	e15b30b6 	ldrh	r3, [r11, #-6]
     964:	e1823003 	orr	r3, r2, r3
     968:	e14b30b6 	strh	r3, [r11, #-6]
		upper |= ( Segments (pos5) );
     96c:	e3013ee0 	movw	r3, #7904	; 0x1ee0
     970:	e3403000 	movt	r3, #0
     974:	e5933000 	ldr	r3, [r3]
     978:	e6ef3073 	uxtb	r3, r3
     97c:	e1a00003 	mov	r0, r3
     980:	eb00023f 	bl	1284 <Segments>
     984:	e1a03000 	mov	r3, r0
     988:	e1a02003 	mov	r2, r3
     98c:	e15b30b6 	ldrh	r3, [r11, #-6]
     990:	e1823003 	orr	r3, r2, r3
     994:	e14b30b6 	strh	r3, [r11, #-6]
		lower|= ( Segments (pos4) << 24);
     998:	e3013edc 	movw	r3, #7900	; 0x1edc
     99c:	e3403000 	movt	r3, #0
     9a0:	e5933000 	ldr	r3, [r3]
     9a4:	e6ef3073 	uxtb	r3, r3
     9a8:	e1a00003 	mov	r0, r3
     9ac:	eb000234 	bl	1284 <Segments>
     9b0:	e1a03000 	mov	r3, r0
     9b4:	e1a03c03 	lsl	r3, r3, #24
     9b8:	e51b200c 	ldr	r2, [r11, #-12]
     9bc:	e1823003 	orr	r3, r2, r3
     9c0:	e50b300c 	str	r3, [r11, #-12]
		lower |= ( Segments (pos3) << 16);
     9c4:	e3013ed8 	movw	r3, #7896	; 0x1ed8
     9c8:	e3403000 	movt	r3, #0
     9cc:	e5933000 	ldr	r3, [r3]
     9d0:	e6ef3073 	uxtb	r3, r3
     9d4:	e1a00003 	mov	r0, r3
     9d8:	eb000229 	bl	1284 <Segments>
     9dc:	e1a03000 	mov	r3, r0
     9e0:	e1a03803 	lsl	r3, r3, #16
     9e4:	e51b200c 	ldr	r2, [r11, #-12]
     9e8:	e1823003 	orr	r3, r2, r3
     9ec:	e50b300c 	str	r3, [r11, #-12]
		lower |= ( Segments (pos2) << 8);
     9f0:	e3013ed4 	movw	r3, #7892	; 0x1ed4
     9f4:	e3403000 	movt	r3, #0
     9f8:	e5933000 	ldr	r3, [r3]
     9fc:	e6ef3073 	uxtb	r3, r3
     a00:	e1a00003 	mov	r0, r3
     a04:	eb00021e 	bl	1284 <Segments>
     a08:	e1a03000 	mov	r3, r0
     a0c:	e1a03403 	lsl	r3, r3, #8
     a10:	e51b200c 	ldr	r2, [r11, #-12]
     a14:	e1823003 	orr	r3, r2, r3
     a18:	e50b300c 	str	r3, [r11, #-12]
		lower |= ( Segments (pos1));
     a1c:	e3013ed0 	movw	r3, #7888	; 0x1ed0
     a20:	e3403000 	movt	r3, #0
     a24:	e5933000 	ldr	r3, [r3]
     a28:	e6ef3073 	uxtb	r3, r3
     a2c:	e1a00003 	mov	r0, r3
     a30:	eb000213 	bl	1284 <Segments>
     a34:	e1a03000 	mov	r3, r0
     a38:	e51b200c 	ldr	r2, [r11, #-12]
     a3c:	e1823003 	orr	r3, r2, r3
     a40:	e50b300c 	str	r3, [r11, #-12]
     a44:	ea000206 	b	1264 <DisplayKeyboard+0xdc0>
	}
	else if (position == 3){
     a48:	e3013ecc 	movw	r3, #7884	; 0x1ecc
     a4c:	e3403000 	movt	r3, #0
     a50:	e5933000 	ldr	r3, [r3]
     a54:	e3530003 	cmp	r3, #3
     a58:	1a00005a 	bne	bc8 <DisplayKeyboard+0x724>
		position = position + 1;
     a5c:	e3013ecc 	movw	r3, #7884	; 0x1ecc
     a60:	e3403000 	movt	r3, #0
     a64:	e5933000 	ldr	r3, [r3]
     a68:	e2832001 	add	r2, r3, #1
     a6c:	e3013ecc 	movw	r3, #7884	; 0x1ecc
     a70:	e3403000 	movt	r3, #0
     a74:	e5832000 	str	r2, [r3]
		pos3=pos2;
     a78:	e3013ed4 	movw	r3, #7892	; 0x1ed4
     a7c:	e3403000 	movt	r3, #0
     a80:	e5932000 	ldr	r2, [r3]
     a84:	e3013ed8 	movw	r3, #7896	; 0x1ed8
     a88:	e3403000 	movt	r3, #0
     a8c:	e5832000 	str	r2, [r3]
		pos2=pos1;
     a90:	e3013ed0 	movw	r3, #7888	; 0x1ed0
     a94:	e3403000 	movt	r3, #0
     a98:	e5932000 	ldr	r2, [r3]
     a9c:	e3013ed4 	movw	r3, #7892	; 0x1ed4
     aa0:	e3403000 	movt	r3, #0
     aa4:	e5832000 	str	r2, [r3]
		pos1 = keypadValue;
     aa8:	e3013ed0 	movw	r3, #7888	; 0x1ed0
     aac:	e3403000 	movt	r3, #0
     ab0:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     ab4:	e5832000 	str	r2, [r3]
		upper |= ( Segments (pos6) << 8);
     ab8:	e3013ee4 	movw	r3, #7908	; 0x1ee4
     abc:	e3403000 	movt	r3, #0
     ac0:	e5933000 	ldr	r3, [r3]
     ac4:	e6ef3073 	uxtb	r3, r3
     ac8:	e1a00003 	mov	r0, r3
     acc:	eb0001ec 	bl	1284 <Segments>
     ad0:	e1a03000 	mov	r3, r0
     ad4:	e1a03403 	lsl	r3, r3, #8
     ad8:	e6ff3073 	uxth	r3, r3
     adc:	e1a02003 	mov	r2, r3
     ae0:	e15b30b6 	ldrh	r3, [r11, #-6]
     ae4:	e1823003 	orr	r3, r2, r3
     ae8:	e14b30b6 	strh	r3, [r11, #-6]
		upper |= ( Segments (pos5) );
     aec:	e3013ee0 	movw	r3, #7904	; 0x1ee0
     af0:	e3403000 	movt	r3, #0
     af4:	e5933000 	ldr	r3, [r3]
     af8:	e6ef3073 	uxtb	r3, r3
     afc:	e1a00003 	mov	r0, r3
     b00:	eb0001df 	bl	1284 <Segments>
     b04:	e1a03000 	mov	r3, r0
     b08:	e1a02003 	mov	r2, r3
     b0c:	e15b30b6 	ldrh	r3, [r11, #-6]
     b10:	e1823003 	orr	r3, r2, r3
     b14:	e14b30b6 	strh	r3, [r11, #-6]
		lower|= ( Segments (pos4) << 24);
     b18:	e3013edc 	movw	r3, #7900	; 0x1edc
     b1c:	e3403000 	movt	r3, #0
     b20:	e5933000 	ldr	r3, [r3]
     b24:	e6ef3073 	uxtb	r3, r3
     b28:	e1a00003 	mov	r0, r3
     b2c:	eb0001d4 	bl	1284 <Segments>
     b30:	e1a03000 	mov	r3, r0
     b34:	e1a03c03 	lsl	r3, r3, #24
     b38:	e51b200c 	ldr	r2, [r11, #-12]
     b3c:	e1823003 	orr	r3, r2, r3
     b40:	e50b300c 	str	r3, [r11, #-12]
		lower |= ( Segments (pos3) << 16);
     b44:	e3013ed8 	movw	r3, #7896	; 0x1ed8
     b48:	e3403000 	movt	r3, #0
     b4c:	e5933000 	ldr	r3, [r3]
     b50:	e6ef3073 	uxtb	r3, r3
     b54:	e1a00003 	mov	r0, r3
     b58:	eb0001c9 	bl	1284 <Segments>
     b5c:	e1a03000 	mov	r3, r0
     b60:	e1a03803 	lsl	r3, r3, #16
     b64:	e51b200c 	ldr	r2, [r11, #-12]
     b68:	e1823003 	orr	r3, r2, r3
     b6c:	e50b300c 	str	r3, [r11, #-12]
		lower |= ( Segments (pos2) << 8);
     b70:	e3013ed4 	movw	r3, #7892	; 0x1ed4
     b74:	e3403000 	movt	r3, #0
     b78:	e5933000 	ldr	r3, [r3]
     b7c:	e6ef3073 	uxtb	r3, r3
     b80:	e1a00003 	mov	r0, r3
     b84:	eb0001be 	bl	1284 <Segments>
     b88:	e1a03000 	mov	r3, r0
     b8c:	e1a03403 	lsl	r3, r3, #8
     b90:	e51b200c 	ldr	r2, [r11, #-12]
     b94:	e1823003 	orr	r3, r2, r3
     b98:	e50b300c 	str	r3, [r11, #-12]
		lower |= ( Segments (pos1));
     b9c:	e3013ed0 	movw	r3, #7888	; 0x1ed0
     ba0:	e3403000 	movt	r3, #0
     ba4:	e5933000 	ldr	r3, [r3]
     ba8:	e6ef3073 	uxtb	r3, r3
     bac:	e1a00003 	mov	r0, r3
     bb0:	eb0001b3 	bl	1284 <Segments>
     bb4:	e1a03000 	mov	r3, r0
     bb8:	e51b200c 	ldr	r2, [r11, #-12]
     bbc:	e1823003 	orr	r3, r2, r3
     bc0:	e50b300c 	str	r3, [r11, #-12]
     bc4:	ea0001a6 	b	1264 <DisplayKeyboard+0xdc0>
	}
	else if (position == 4){
     bc8:	e3013ecc 	movw	r3, #7884	; 0x1ecc
     bcc:	e3403000 	movt	r3, #0
     bd0:	e5933000 	ldr	r3, [r3]
     bd4:	e3530004 	cmp	r3, #4
     bd8:	1a000060 	bne	d60 <DisplayKeyboard+0x8bc>
		position = position + 1;
     bdc:	e3013ecc 	movw	r3, #7884	; 0x1ecc
     be0:	e3403000 	movt	r3, #0
     be4:	e5933000 	ldr	r3, [r3]
     be8:	e2832001 	add	r2, r3, #1
     bec:	e3013ecc 	movw	r3, #7884	; 0x1ecc
     bf0:	e3403000 	movt	r3, #0
     bf4:	e5832000 	str	r2, [r3]
		pos4=pos3;
     bf8:	e3013ed8 	movw	r3, #7896	; 0x1ed8
     bfc:	e3403000 	movt	r3, #0
     c00:	e5932000 	ldr	r2, [r3]
     c04:	e3013edc 	movw	r3, #7900	; 0x1edc
     c08:	e3403000 	movt	r3, #0
     c0c:	e5832000 	str	r2, [r3]
		pos3=pos2;
     c10:	e3013ed4 	movw	r3, #7892	; 0x1ed4
     c14:	e3403000 	movt	r3, #0
     c18:	e5932000 	ldr	r2, [r3]
     c1c:	e3013ed8 	movw	r3, #7896	; 0x1ed8
     c20:	e3403000 	movt	r3, #0
     c24:	e5832000 	str	r2, [r3]
		pos2=pos1;
     c28:	e3013ed0 	movw	r3, #7888	; 0x1ed0
     c2c:	e3403000 	movt	r3, #0
     c30:	e5932000 	ldr	r2, [r3]
     c34:	e3013ed4 	movw	r3, #7892	; 0x1ed4
     c38:	e3403000 	movt	r3, #0
     c3c:	e5832000 	str	r2, [r3]
		pos1 = keypadValue;
     c40:	e3013ed0 	movw	r3, #7888	; 0x1ed0
     c44:	e3403000 	movt	r3, #0
     c48:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     c4c:	e5832000 	str	r2, [r3]
		upper |= ( Segments (pos6) << 8);
     c50:	e3013ee4 	movw	r3, #7908	; 0x1ee4
     c54:	e3403000 	movt	r3, #0
     c58:	e5933000 	ldr	r3, [r3]
     c5c:	e6ef3073 	uxtb	r3, r3
     c60:	e1a00003 	mov	r0, r3
     c64:	eb000186 	bl	1284 <Segments>
     c68:	e1a03000 	mov	r3, r0
     c6c:	e1a03403 	lsl	r3, r3, #8
     c70:	e6ff3073 	uxth	r3, r3
     c74:	e1a02003 	mov	r2, r3
     c78:	e15b30b6 	ldrh	r3, [r11, #-6]
     c7c:	e1823003 	orr	r3, r2, r3
     c80:	e14b30b6 	strh	r3, [r11, #-6]
		upper |= ( Segments (pos5) );
     c84:	e3013ee0 	movw	r3, #7904	; 0x1ee0
     c88:	e3403000 	movt	r3, #0
     c8c:	e5933000 	ldr	r3, [r3]
     c90:	e6ef3073 	uxtb	r3, r3
     c94:	e1a00003 	mov	r0, r3
     c98:	eb000179 	bl	1284 <Segments>
     c9c:	e1a03000 	mov	r3, r0
     ca0:	e1a02003 	mov	r2, r3
     ca4:	e15b30b6 	ldrh	r3, [r11, #-6]
     ca8:	e1823003 	orr	r3, r2, r3
     cac:	e14b30b6 	strh	r3, [r11, #-6]
		lower|= ( Segments (pos4) << 24);
     cb0:	e3013edc 	movw	r3, #7900	; 0x1edc
     cb4:	e3403000 	movt	r3, #0
     cb8:	e5933000 	ldr	r3, [r3]
     cbc:	e6ef3073 	uxtb	r3, r3
     cc0:	e1a00003 	mov	r0, r3
     cc4:	eb00016e 	bl	1284 <Segments>
     cc8:	e1a03000 	mov	r3, r0
     ccc:	e1a03c03 	lsl	r3, r3, #24
     cd0:	e51b200c 	ldr	r2, [r11, #-12]
     cd4:	e1823003 	orr	r3, r2, r3
     cd8:	e50b300c 	str	r3, [r11, #-12]
		lower |= ( Segments (pos3) << 16);
     cdc:	e3013ed8 	movw	r3, #7896	; 0x1ed8
     ce0:	e3403000 	movt	r3, #0
     ce4:	e5933000 	ldr	r3, [r3]
     ce8:	e6ef3073 	uxtb	r3, r3
     cec:	e1a00003 	mov	r0, r3
     cf0:	eb000163 	bl	1284 <Segments>
     cf4:	e1a03000 	mov	r3, r0
     cf8:	e1a03803 	lsl	r3, r3, #16
     cfc:	e51b200c 	ldr	r2, [r11, #-12]
     d00:	e1823003 	orr	r3, r2, r3
     d04:	e50b300c 	str	r3, [r11, #-12]
		lower |= ( Segments (pos2) << 8);
     d08:	e3013ed4 	movw	r3, #7892	; 0x1ed4
     d0c:	e3403000 	movt	r3, #0
     d10:	e5933000 	ldr	r3, [r3]
     d14:	e6ef3073 	uxtb	r3, r3
     d18:	e1a00003 	mov	r0, r3
     d1c:	eb000158 	bl	1284 <Segments>
     d20:	e1a03000 	mov	r3, r0
     d24:	e1a03403 	lsl	r3, r3, #8
     d28:	e51b200c 	ldr	r2, [r11, #-12]
     d2c:	e1823003 	orr	r3, r2, r3
     d30:	e50b300c 	str	r3, [r11, #-12]
		lower |= ( Segments (pos1));
     d34:	e3013ed0 	movw	r3, #7888	; 0x1ed0
     d38:	e3403000 	movt	r3, #0
     d3c:	e5933000 	ldr	r3, [r3]
     d40:	e6ef3073 	uxtb	r3, r3
     d44:	e1a00003 	mov	r0, r3
     d48:	eb00014d 	bl	1284 <Segments>
     d4c:	e1a03000 	mov	r3, r0
     d50:	e51b200c 	ldr	r2, [r11, #-12]
     d54:	e1823003 	orr	r3, r2, r3
     d58:	e50b300c 	str	r3, [r11, #-12]
     d5c:	ea000140 	b	1264 <DisplayKeyboard+0xdc0>
	}
	else if (position == 5){
     d60:	e3013ecc 	movw	r3, #7884	; 0x1ecc
     d64:	e3403000 	movt	r3, #0
     d68:	e5933000 	ldr	r3, [r3]
     d6c:	e3530005 	cmp	r3, #5
     d70:	1a000066 	bne	f10 <DisplayKeyboard+0xa6c>
		position = position + 1;
     d74:	e3013ecc 	movw	r3, #7884	; 0x1ecc
     d78:	e3403000 	movt	r3, #0
     d7c:	e5933000 	ldr	r3, [r3]
     d80:	e2832001 	add	r2, r3, #1
     d84:	e3013ecc 	movw	r3, #7884	; 0x1ecc
     d88:	e3403000 	movt	r3, #0
     d8c:	e5832000 	str	r2, [r3]
		pos5=pos4;
     d90:	e3013edc 	movw	r3, #7900	; 0x1edc
     d94:	e3403000 	movt	r3, #0
     d98:	e5932000 	ldr	r2, [r3]
     d9c:	e3013ee0 	movw	r3, #7904	; 0x1ee0
     da0:	e3403000 	movt	r3, #0
     da4:	e5832000 	str	r2, [r3]
		pos4=pos3;
     da8:	e3013ed8 	movw	r3, #7896	; 0x1ed8
     dac:	e3403000 	movt	r3, #0
     db0:	e5932000 	ldr	r2, [r3]
     db4:	e3013edc 	movw	r3, #7900	; 0x1edc
     db8:	e3403000 	movt	r3, #0
     dbc:	e5832000 	str	r2, [r3]
		pos3=pos2;
     dc0:	e3013ed4 	movw	r3, #7892	; 0x1ed4
     dc4:	e3403000 	movt	r3, #0
     dc8:	e5932000 	ldr	r2, [r3]
     dcc:	e3013ed8 	movw	r3, #7896	; 0x1ed8
     dd0:	e3403000 	movt	r3, #0
     dd4:	e5832000 	str	r2, [r3]
		pos2=pos1;
     dd8:	e3013ed0 	movw	r3, #7888	; 0x1ed0
     ddc:	e3403000 	movt	r3, #0
     de0:	e5932000 	ldr	r2, [r3]
     de4:	e3013ed4 	movw	r3, #7892	; 0x1ed4
     de8:	e3403000 	movt	r3, #0
     dec:	e5832000 	str	r2, [r3]
		pos1 = keypadValue;
     df0:	e3013ed0 	movw	r3, #7888	; 0x1ed0
     df4:	e3403000 	movt	r3, #0
     df8:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     dfc:	e5832000 	str	r2, [r3]
		upper |= ( Segments (pos6) << 8);
     e00:	e3013ee4 	movw	r3, #7908	; 0x1ee4
     e04:	e3403000 	movt	r3, #0
     e08:	e5933000 	ldr	r3, [r3]
     e0c:	e6ef3073 	uxtb	r3, r3
     e10:	e1a00003 	mov	r0, r3
     e14:	eb00011a 	bl	1284 <Segments>
     e18:	e1a03000 	mov	r3, r0
     e1c:	e1a03403 	lsl	r3, r3, #8
     e20:	e6ff3073 	uxth	r3, r3
     e24:	e1a02003 	mov	r2, r3
     e28:	e15b30b6 	ldrh	r3, [r11, #-6]
     e2c:	e1823003 	orr	r3, r2, r3
     e30:	e14b30b6 	strh	r3, [r11, #-6]
		upper |= ( Segments (pos5) );
     e34:	e3013ee0 	movw	r3, #7904	; 0x1ee0
     e38:	e3403000 	movt	r3, #0
     e3c:	e5933000 	ldr	r3, [r3]
     e40:	e6ef3073 	uxtb	r3, r3
     e44:	e1a00003 	mov	r0, r3
     e48:	eb00010d 	bl	1284 <Segments>
     e4c:	e1a03000 	mov	r3, r0
     e50:	e1a02003 	mov	r2, r3
     e54:	e15b30b6 	ldrh	r3, [r11, #-6]
     e58:	e1823003 	orr	r3, r2, r3
     e5c:	e14b30b6 	strh	r3, [r11, #-6]
		lower|= ( Segments (pos4) << 24);
     e60:	e3013edc 	movw	r3, #7900	; 0x1edc
     e64:	e3403000 	movt	r3, #0
     e68:	e5933000 	ldr	r3, [r3]
     e6c:	e6ef3073 	uxtb	r3, r3
     e70:	e1a00003 	mov	r0, r3
     e74:	eb000102 	bl	1284 <Segments>
     e78:	e1a03000 	mov	r3, r0
     e7c:	e1a03c03 	lsl	r3, r3, #24
     e80:	e51b200c 	ldr	r2, [r11, #-12]
     e84:	e1823003 	orr	r3, r2, r3
     e88:	e50b300c 	str	r3, [r11, #-12]
		lower |= ( Segments (pos3) << 16);
     e8c:	e3013ed8 	movw	r3, #7896	; 0x1ed8
     e90:	e3403000 	movt	r3, #0
     e94:	e5933000 	ldr	r3, [r3]
     e98:	e6ef3073 	uxtb	r3, r3
     e9c:	e1a00003 	mov	r0, r3
     ea0:	eb0000f7 	bl	1284 <Segments>
     ea4:	e1a03000 	mov	r3, r0
     ea8:	e1a03803 	lsl	r3, r3, #16
     eac:	e51b200c 	ldr	r2, [r11, #-12]
     eb0:	e1823003 	orr	r3, r2, r3
     eb4:	e50b300c 	str	r3, [r11, #-12]
		lower |= ( Segments (pos2) << 8);
     eb8:	e3013ed4 	movw	r3, #7892	; 0x1ed4
     ebc:	e3403000 	movt	r3, #0
     ec0:	e5933000 	ldr	r3, [r3]
     ec4:	e6ef3073 	uxtb	r3, r3
     ec8:	e1a00003 	mov	r0, r3
     ecc:	eb0000ec 	bl	1284 <Segments>
     ed0:	e1a03000 	mov	r3, r0
     ed4:	e1a03403 	lsl	r3, r3, #8
     ed8:	e51b200c 	ldr	r2, [r11, #-12]
     edc:	e1823003 	orr	r3, r2, r3
     ee0:	e50b300c 	str	r3, [r11, #-12]
		lower |= ( Segments (pos1));
     ee4:	e3013ed0 	movw	r3, #7888	; 0x1ed0
     ee8:	e3403000 	movt	r3, #0
     eec:	e5933000 	ldr	r3, [r3]
     ef0:	e6ef3073 	uxtb	r3, r3
     ef4:	e1a00003 	mov	r0, r3
     ef8:	eb0000e1 	bl	1284 <Segments>
     efc:	e1a03000 	mov	r3, r0
     f00:	e51b200c 	ldr	r2, [r11, #-12]
     f04:	e1823003 	orr	r3, r2, r3
     f08:	e50b300c 	str	r3, [r11, #-12]
     f0c:	ea0000d4 	b	1264 <DisplayKeyboard+0xdc0>
	}
	else if (position == 6){
     f10:	e3013ecc 	movw	r3, #7884	; 0x1ecc
     f14:	e3403000 	movt	r3, #0
     f18:	e5933000 	ldr	r3, [r3]
     f1c:	e3530006 	cmp	r3, #6
     f20:	1a00006c 	bne	10d8 <DisplayKeyboard+0xc34>
		position = position + 1;
     f24:	e3013ecc 	movw	r3, #7884	; 0x1ecc
     f28:	e3403000 	movt	r3, #0
     f2c:	e5933000 	ldr	r3, [r3]
     f30:	e2832001 	add	r2, r3, #1
     f34:	e3013ecc 	movw	r3, #7884	; 0x1ecc
     f38:	e3403000 	movt	r3, #0
     f3c:	e5832000 	str	r2, [r3]
		pos6=pos5;
     f40:	e3013ee0 	movw	r3, #7904	; 0x1ee0
     f44:	e3403000 	movt	r3, #0
     f48:	e5932000 	ldr	r2, [r3]
     f4c:	e3013ee4 	movw	r3, #7908	; 0x1ee4
     f50:	e3403000 	movt	r3, #0
     f54:	e5832000 	str	r2, [r3]
		pos5=pos4;
     f58:	e3013edc 	movw	r3, #7900	; 0x1edc
     f5c:	e3403000 	movt	r3, #0
     f60:	e5932000 	ldr	r2, [r3]
     f64:	e3013ee0 	movw	r3, #7904	; 0x1ee0
     f68:	e3403000 	movt	r3, #0
     f6c:	e5832000 	str	r2, [r3]
		pos4=pos3;
     f70:	e3013ed8 	movw	r3, #7896	; 0x1ed8
     f74:	e3403000 	movt	r3, #0
     f78:	e5932000 	ldr	r2, [r3]
     f7c:	e3013edc 	movw	r3, #7900	; 0x1edc
     f80:	e3403000 	movt	r3, #0
     f84:	e5832000 	str	r2, [r3]
		pos3=pos2;
     f88:	e3013ed4 	movw	r3, #7892	; 0x1ed4
     f8c:	e3403000 	movt	r3, #0
     f90:	e5932000 	ldr	r2, [r3]
     f94:	e3013ed8 	movw	r3, #7896	; 0x1ed8
     f98:	e3403000 	movt	r3, #0
     f9c:	e5832000 	str	r2, [r3]
		pos2=pos1;
     fa0:	e3013ed0 	movw	r3, #7888	; 0x1ed0
     fa4:	e3403000 	movt	r3, #0
     fa8:	e5932000 	ldr	r2, [r3]
     fac:	e3013ed4 	movw	r3, #7892	; 0x1ed4
     fb0:	e3403000 	movt	r3, #0
     fb4:	e5832000 	str	r2, [r3]
		pos1 = keypadValue;
     fb8:	e3013ed0 	movw	r3, #7888	; 0x1ed0
     fbc:	e3403000 	movt	r3, #0
     fc0:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     fc4:	e5832000 	str	r2, [r3]
		upper |= ( Segments (pos6) << 8);
     fc8:	e3013ee4 	movw	r3, #7908	; 0x1ee4
     fcc:	e3403000 	movt	r3, #0
     fd0:	e5933000 	ldr	r3, [r3]
     fd4:	e6ef3073 	uxtb	r3, r3
     fd8:	e1a00003 	mov	r0, r3
     fdc:	eb0000a8 	bl	1284 <Segments>
     fe0:	e1a03000 	mov	r3, r0
     fe4:	e1a03403 	lsl	r3, r3, #8
     fe8:	e6ff3073 	uxth	r3, r3
     fec:	e1a02003 	mov	r2, r3
     ff0:	e15b30b6 	ldrh	r3, [r11, #-6]
     ff4:	e1823003 	orr	r3, r2, r3
     ff8:	e14b30b6 	strh	r3, [r11, #-6]
		upper |= ( Segments (pos5) );
     ffc:	e3013ee0 	movw	r3, #7904	; 0x1ee0
    1000:	e3403000 	movt	r3, #0
    1004:	e5933000 	ldr	r3, [r3]
    1008:	e6ef3073 	uxtb	r3, r3
    100c:	e1a00003 	mov	r0, r3
    1010:	eb00009b 	bl	1284 <Segments>
    1014:	e1a03000 	mov	r3, r0
    1018:	e1a02003 	mov	r2, r3
    101c:	e15b30b6 	ldrh	r3, [r11, #-6]
    1020:	e1823003 	orr	r3, r2, r3
    1024:	e14b30b6 	strh	r3, [r11, #-6]
		lower|= ( Segments (pos4) << 24);
    1028:	e3013edc 	movw	r3, #7900	; 0x1edc
    102c:	e3403000 	movt	r3, #0
    1030:	e5933000 	ldr	r3, [r3]
    1034:	e6ef3073 	uxtb	r3, r3
    1038:	e1a00003 	mov	r0, r3
    103c:	eb000090 	bl	1284 <Segments>
    1040:	e1a03000 	mov	r3, r0
    1044:	e1a03c03 	lsl	r3, r3, #24
    1048:	e51b200c 	ldr	r2, [r11, #-12]
    104c:	e1823003 	orr	r3, r2, r3
    1050:	e50b300c 	str	r3, [r11, #-12]
		lower |= ( Segments (pos3) << 16);
    1054:	e3013ed8 	movw	r3, #7896	; 0x1ed8
    1058:	e3403000 	movt	r3, #0
    105c:	e5933000 	ldr	r3, [r3]
    1060:	e6ef3073 	uxtb	r3, r3
    1064:	e1a00003 	mov	r0, r3
    1068:	eb000085 	bl	1284 <Segments>
    106c:	e1a03000 	mov	r3, r0
    1070:	e1a03803 	lsl	r3, r3, #16
    1074:	e51b200c 	ldr	r2, [r11, #-12]
    1078:	e1823003 	orr	r3, r2, r3
    107c:	e50b300c 	str	r3, [r11, #-12]
		lower |= ( Segments (pos2) << 8);
    1080:	e3013ed4 	movw	r3, #7892	; 0x1ed4
    1084:	e3403000 	movt	r3, #0
    1088:	e5933000 	ldr	r3, [r3]
    108c:	e6ef3073 	uxtb	r3, r3
    1090:	e1a00003 	mov	r0, r3
    1094:	eb00007a 	bl	1284 <Segments>
    1098:	e1a03000 	mov	r3, r0
    109c:	e1a03403 	lsl	r3, r3, #8
    10a0:	e51b200c 	ldr	r2, [r11, #-12]
    10a4:	e1823003 	orr	r3, r2, r3
    10a8:	e50b300c 	str	r3, [r11, #-12]
		lower |= ( Segments (pos1));
    10ac:	e3013ed0 	movw	r3, #7888	; 0x1ed0
    10b0:	e3403000 	movt	r3, #0
    10b4:	e5933000 	ldr	r3, [r3]
    10b8:	e6ef3073 	uxtb	r3, r3
    10bc:	e1a00003 	mov	r0, r3
    10c0:	eb00006f 	bl	1284 <Segments>
    10c4:	e1a03000 	mov	r3, r0
    10c8:	e51b200c 	ldr	r2, [r11, #-12]
    10cc:	e1823003 	orr	r3, r2, r3
    10d0:	e50b300c 	str	r3, [r11, #-12]
    10d4:	ea000062 	b	1264 <DisplayKeyboard+0xdc0>
	}
	else{
		upper |= ( Segments (pos5) << 8);
    10d8:	e3013ee0 	movw	r3, #7904	; 0x1ee0
    10dc:	e3403000 	movt	r3, #0
    10e0:	e5933000 	ldr	r3, [r3]
    10e4:	e6ef3073 	uxtb	r3, r3
    10e8:	e1a00003 	mov	r0, r3
    10ec:	eb000064 	bl	1284 <Segments>
    10f0:	e1a03000 	mov	r3, r0
    10f4:	e1a03403 	lsl	r3, r3, #8
    10f8:	e6ff3073 	uxth	r3, r3
    10fc:	e1a02003 	mov	r2, r3
    1100:	e15b30b6 	ldrh	r3, [r11, #-6]
    1104:	e1823003 	orr	r3, r2, r3
    1108:	e14b30b6 	strh	r3, [r11, #-6]
		pos6=pos5;
    110c:	e3013ee0 	movw	r3, #7904	; 0x1ee0
    1110:	e3403000 	movt	r3, #0
    1114:	e5932000 	ldr	r2, [r3]
    1118:	e3013ee4 	movw	r3, #7908	; 0x1ee4
    111c:	e3403000 	movt	r3, #0
    1120:	e5832000 	str	r2, [r3]
		upper |= ( Segments (pos4) );
    1124:	e3013edc 	movw	r3, #7900	; 0x1edc
    1128:	e3403000 	movt	r3, #0
    112c:	e5933000 	ldr	r3, [r3]
    1130:	e6ef3073 	uxtb	r3, r3
    1134:	e1a00003 	mov	r0, r3
    1138:	eb000051 	bl	1284 <Segments>
    113c:	e1a03000 	mov	r3, r0
    1140:	e1a02003 	mov	r2, r3
    1144:	e15b30b6 	ldrh	r3, [r11, #-6]
    1148:	e1823003 	orr	r3, r2, r3
    114c:	e14b30b6 	strh	r3, [r11, #-6]
		pos5=pos4;
    1150:	e3013edc 	movw	r3, #7900	; 0x1edc
    1154:	e3403000 	movt	r3, #0
    1158:	e5932000 	ldr	r2, [r3]
    115c:	e3013ee0 	movw	r3, #7904	; 0x1ee0
    1160:	e3403000 	movt	r3, #0
    1164:	e5832000 	str	r2, [r3]
		lower|= ( Segments (pos3) << 24);
    1168:	e3013ed8 	movw	r3, #7896	; 0x1ed8
    116c:	e3403000 	movt	r3, #0
    1170:	e5933000 	ldr	r3, [r3]
    1174:	e6ef3073 	uxtb	r3, r3
    1178:	e1a00003 	mov	r0, r3
    117c:	eb000040 	bl	1284 <Segments>
    1180:	e1a03000 	mov	r3, r0
    1184:	e1a03c03 	lsl	r3, r3, #24
    1188:	e51b200c 	ldr	r2, [r11, #-12]
    118c:	e1823003 	orr	r3, r2, r3
    1190:	e50b300c 	str	r3, [r11, #-12]
		pos4=pos3;
    1194:	e3013ed8 	movw	r3, #7896	; 0x1ed8
    1198:	e3403000 	movt	r3, #0
    119c:	e5932000 	ldr	r2, [r3]
    11a0:	e3013edc 	movw	r3, #7900	; 0x1edc
    11a4:	e3403000 	movt	r3, #0
    11a8:	e5832000 	str	r2, [r3]
		lower |= ( Segments (pos2) << 16);
    11ac:	e3013ed4 	movw	r3, #7892	; 0x1ed4
    11b0:	e3403000 	movt	r3, #0
    11b4:	e5933000 	ldr	r3, [r3]
    11b8:	e6ef3073 	uxtb	r3, r3
    11bc:	e1a00003 	mov	r0, r3
    11c0:	eb00002f 	bl	1284 <Segments>
    11c4:	e1a03000 	mov	r3, r0
    11c8:	e1a03803 	lsl	r3, r3, #16
    11cc:	e51b200c 	ldr	r2, [r11, #-12]
    11d0:	e1823003 	orr	r3, r2, r3
    11d4:	e50b300c 	str	r3, [r11, #-12]
		pos3=pos2;
    11d8:	e3013ed4 	movw	r3, #7892	; 0x1ed4
    11dc:	e3403000 	movt	r3, #0
    11e0:	e5932000 	ldr	r2, [r3]
    11e4:	e3013ed8 	movw	r3, #7896	; 0x1ed8
    11e8:	e3403000 	movt	r3, #0
    11ec:	e5832000 	str	r2, [r3]
		lower |= ( Segments (pos1) << 8);
    11f0:	e3013ed0 	movw	r3, #7888	; 0x1ed0
    11f4:	e3403000 	movt	r3, #0
    11f8:	e5933000 	ldr	r3, [r3]
    11fc:	e6ef3073 	uxtb	r3, r3
    1200:	e1a00003 	mov	r0, r3
    1204:	eb00001e 	bl	1284 <Segments>
    1208:	e1a03000 	mov	r3, r0
    120c:	e1a03403 	lsl	r3, r3, #8
    1210:	e51b200c 	ldr	r2, [r11, #-12]
    1214:	e1823003 	orr	r3, r2, r3
    1218:	e50b300c 	str	r3, [r11, #-12]
		pos2=pos1;
    121c:	e3013ed0 	movw	r3, #7888	; 0x1ed0
    1220:	e3403000 	movt	r3, #0
    1224:	e5932000 	ldr	r2, [r3]
    1228:	e3013ed4 	movw	r3, #7892	; 0x1ed4
    122c:	e3403000 	movt	r3, #0
    1230:	e5832000 	str	r2, [r3]
		lower |= ( Segments (keypadValue) );
    1234:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1238:	e6ef3073 	uxtb	r3, r3
    123c:	e1a00003 	mov	r0, r3
    1240:	eb00000f 	bl	1284 <Segments>
    1244:	e1a03000 	mov	r3, r0
    1248:	e51b200c 	ldr	r2, [r11, #-12]
    124c:	e1823003 	orr	r3, r2, r3
    1250:	e50b300c 	str	r3, [r11, #-12]
		pos1 = keypadValue;
    1254:	e3013ed0 	movw	r3, #7888	; 0x1ed0
    1258:	e3403000 	movt	r3, #0
    125c:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    1260:	e5832000 	str	r2, [r3]
	}
	
    *(upperSegment) = upper;
    1264:	e15b20f6 	ldrsh	r2, [r11, #-6]
    1268:	e51b3010 	ldr	r3, [r11, #-16]
    126c:	e5832000 	str	r2, [r3]
    *(lowerSegment) = lower;
    1270:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    1274:	e51b200c 	ldr	r2, [r11, #-12]
    1278:	e5832000 	str	r2, [r3]
}
    127c:	e24bd004 	sub	sp, r11, #4
    1280:	e8bd8800 	pop	{r11, pc}

00001284 <Segments>:


unsigned char Segments(unsigned char number)
{
    1284:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1288:	e28db000 	add	r11, sp, #0
    128c:	e24dd014 	sub	sp, sp, #20
    1290:	e1a03000 	mov	r3, r0
    1294:	e54b300d 	strb	r3, [r11, #-13]
    unsigned char segments;

    switch(number)
    1298:	e55b300d 	ldrb	r3, [r11, #-13]
    129c:	e3530063 	cmp	r3, #99	; 0x63
    12a0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    12a4:	ea000083 	b	14b8 <Segments+0x234>
    12a8:	00001438 	.word	0x00001438
    12ac:	00001444 	.word	0x00001444
    12b0:	00001450 	.word	0x00001450
    12b4:	0000145c 	.word	0x0000145c
    12b8:	00001468 	.word	0x00001468
    12bc:	00001474 	.word	0x00001474
    12c0:	00001480 	.word	0x00001480
    12c4:	0000148c 	.word	0x0000148c
    12c8:	00001498 	.word	0x00001498
    12cc:	000014a4 	.word	0x000014a4
    12d0:	000014b8 	.word	0x000014b8
    12d4:	000014b8 	.word	0x000014b8
    12d8:	000014b8 	.word	0x000014b8
    12dc:	000014b8 	.word	0x000014b8
    12e0:	000014b8 	.word	0x000014b8
    12e4:	000014b8 	.word	0x000014b8
    12e8:	000014b8 	.word	0x000014b8
    12ec:	000014b8 	.word	0x000014b8
    12f0:	000014b8 	.word	0x000014b8
    12f4:	000014b8 	.word	0x000014b8
    12f8:	000014b8 	.word	0x000014b8
    12fc:	000014b8 	.word	0x000014b8
    1300:	000014b8 	.word	0x000014b8
    1304:	000014b8 	.word	0x000014b8
    1308:	000014b8 	.word	0x000014b8
    130c:	000014b8 	.word	0x000014b8
    1310:	000014b8 	.word	0x000014b8
    1314:	000014b8 	.word	0x000014b8
    1318:	000014b8 	.word	0x000014b8
    131c:	000014b8 	.word	0x000014b8
    1320:	000014b8 	.word	0x000014b8
    1324:	000014b8 	.word	0x000014b8
    1328:	000014b8 	.word	0x000014b8
    132c:	000014b8 	.word	0x000014b8
    1330:	000014b8 	.word	0x000014b8
    1334:	000014b8 	.word	0x000014b8
    1338:	000014b8 	.word	0x000014b8
    133c:	000014b8 	.word	0x000014b8
    1340:	000014b8 	.word	0x000014b8
    1344:	000014b8 	.word	0x000014b8
    1348:	000014b8 	.word	0x000014b8
    134c:	000014b8 	.word	0x000014b8
    1350:	000014b8 	.word	0x000014b8
    1354:	000014b8 	.word	0x000014b8
    1358:	000014b8 	.word	0x000014b8
    135c:	000014b8 	.word	0x000014b8
    1360:	000014b8 	.word	0x000014b8
    1364:	000014b8 	.word	0x000014b8
    1368:	000014b8 	.word	0x000014b8
    136c:	000014b8 	.word	0x000014b8
    1370:	000014b8 	.word	0x000014b8
    1374:	000014b8 	.word	0x000014b8
    1378:	000014b8 	.word	0x000014b8
    137c:	000014b8 	.word	0x000014b8
    1380:	000014b8 	.word	0x000014b8
    1384:	000014b8 	.word	0x000014b8
    1388:	000014b8 	.word	0x000014b8
    138c:	000014b8 	.word	0x000014b8
    1390:	000014b8 	.word	0x000014b8
    1394:	000014b8 	.word	0x000014b8
    1398:	000014b8 	.word	0x000014b8
    139c:	000014b8 	.word	0x000014b8
    13a0:	000014b8 	.word	0x000014b8
    13a4:	000014b8 	.word	0x000014b8
    13a8:	000014b8 	.word	0x000014b8
    13ac:	000014b8 	.word	0x000014b8
    13b0:	000014b8 	.word	0x000014b8
    13b4:	000014b8 	.word	0x000014b8
    13b8:	000014b8 	.word	0x000014b8
    13bc:	000014b8 	.word	0x000014b8
    13c0:	000014b8 	.word	0x000014b8
    13c4:	000014b8 	.word	0x000014b8
    13c8:	000014b8 	.word	0x000014b8
    13cc:	000014b8 	.word	0x000014b8
    13d0:	000014b8 	.word	0x000014b8
    13d4:	000014b8 	.word	0x000014b8
    13d8:	000014b8 	.word	0x000014b8
    13dc:	000014b8 	.word	0x000014b8
    13e0:	000014b8 	.word	0x000014b8
    13e4:	000014b8 	.word	0x000014b8
    13e8:	000014b8 	.word	0x000014b8
    13ec:	000014b8 	.word	0x000014b8
    13f0:	000014b8 	.word	0x000014b8
    13f4:	000014b8 	.word	0x000014b8
    13f8:	000014b8 	.word	0x000014b8
    13fc:	000014b8 	.word	0x000014b8
    1400:	000014b8 	.word	0x000014b8
    1404:	000014b8 	.word	0x000014b8
    1408:	000014b8 	.word	0x000014b8
    140c:	000014b8 	.word	0x000014b8
    1410:	000014b8 	.word	0x000014b8
    1414:	000014b8 	.word	0x000014b8
    1418:	000014b8 	.word	0x000014b8
    141c:	000014b8 	.word	0x000014b8
    1420:	000014b8 	.word	0x000014b8
    1424:	000014b8 	.word	0x000014b8
    1428:	000014b8 	.word	0x000014b8
    142c:	000014b8 	.word	0x000014b8
    1430:	000014b8 	.word	0x000014b8
    1434:	000014b0 	.word	0x000014b0
    {
        case 0:
            segments = 0b00111111;
    1438:	e3a0303f 	mov	r3, #63	; 0x3f
    143c:	e54b3005 	strb	r3, [r11, #-5]
            break;
    1440:	ea00001c 	b	14b8 <Segments+0x234>
        case 1:
            segments = 0b00000110;
    1444:	e3a03006 	mov	r3, #6
    1448:	e54b3005 	strb	r3, [r11, #-5]
            break;
    144c:	ea000019 	b	14b8 <Segments+0x234>
        case 2:
            segments = 0b01011011;
    1450:	e3a0305b 	mov	r3, #91	; 0x5b
    1454:	e54b3005 	strb	r3, [r11, #-5]
            break;
    1458:	ea000016 	b	14b8 <Segments+0x234>
        case 3:
            segments = 0b01001111;
    145c:	e3a0304f 	mov	r3, #79	; 0x4f
    1460:	e54b3005 	strb	r3, [r11, #-5]
            break;
    1464:	ea000013 	b	14b8 <Segments+0x234>
        case 4:
            segments = 0b01100110;
    1468:	e3a03066 	mov	r3, #102	; 0x66
    146c:	e54b3005 	strb	r3, [r11, #-5]
            break;
    1470:	ea000010 	b	14b8 <Segments+0x234>
        case 5:
            segments = 0b01101101;
    1474:	e3a0306d 	mov	r3, #109	; 0x6d
    1478:	e54b3005 	strb	r3, [r11, #-5]
            break;
    147c:	ea00000d 	b	14b8 <Segments+0x234>
        case 6:
            segments = 0b01111101;
    1480:	e3a0307d 	mov	r3, #125	; 0x7d
    1484:	e54b3005 	strb	r3, [r11, #-5]
            break;
    1488:	ea00000a 	b	14b8 <Segments+0x234>
        case 7:
            segments = 0b00000111;
    148c:	e3a03007 	mov	r3, #7
    1490:	e54b3005 	strb	r3, [r11, #-5]
            break;
    1494:	ea000007 	b	14b8 <Segments+0x234>
        case 8:
            segments = 0b01111111;
    1498:	e3a0307f 	mov	r3, #127	; 0x7f
    149c:	e54b3005 	strb	r3, [r11, #-5]
            break;
    14a0:	ea000004 	b	14b8 <Segments+0x234>
        case 9:
            segments = 0b01101111;
    14a4:	e3a0306f 	mov	r3, #111	; 0x6f
    14a8:	e54b3005 	strb	r3, [r11, #-5]
            break;
    14ac:	ea000001 	b	14b8 <Segments+0x234>
		case 99:
			segments = 0b00000000;
    14b0:	e3a03000 	mov	r3, #0
    14b4:	e54b3005 	strb	r3, [r11, #-5]
    }
    return segments;
    14b8:	e55b3005 	ldrb	r3, [r11, #-5]
}
    14bc:	e1a00003 	mov	r0, r3
    14c0:	e28bd000 	add	sp, r11, #0
    14c4:	e8bd0800 	ldmfd	sp!, {r11}
    14c8:	e12fff1e 	bx	lr

000014cc <put_jtag>:
#include "JTAG_UART.h"
#include "Interrupts.h"


void put_jtag( char c )
{
    14cc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    14d0:	e28db000 	add	r11, sp, #0
    14d4:	e24dd014 	sub	sp, sp, #20
    14d8:	e1a03000 	mov	r3, r0
    14dc:	e54b300d 	strb	r3, [r11, #-13]
    volatile int * JTAG_UART_ptr    = (int *) JTAG_UART_BASE;   // JTAG UART address
    14e0:	e3a03a01 	mov	r3, #4096	; 0x1000
    14e4:	e34f3f20 	movt	r3, #65312	; 0xff20
    14e8:	e50b3008 	str	r3, [r11, #-8]

    int control;
    control = *(JTAG_UART_ptr + 1);     // read the JTAG_UART control register
    14ec:	e51b3008 	ldr	r3, [r11, #-8]
    14f0:	e5933004 	ldr	r3, [r3, #4]
    14f4:	e50b300c 	str	r3, [r11, #-12]
    if (control & 0xFFFF0000)               // if space, echo character, else ignore 
    14f8:	e51b300c 	ldr	r3, [r11, #-12]
    14fc:	e1a03823 	lsr	r3, r3, #16
    1500:	e1a03803 	lsl	r3, r3, #16
    1504:	e3530000 	cmp	r3, #0
    1508:	0a000002 	beq	1518 <put_jtag+0x4c>
        *(JTAG_UART_ptr) = c;
    150c:	e55b200d 	ldrb	r2, [r11, #-13]
    1510:	e51b3008 	ldr	r3, [r11, #-8]
    1514:	e5832000 	str	r2, [r3]
}
    1518:	e28bd000 	add	sp, r11, #0
    151c:	e8bd0800 	ldmfd	sp!, {r11}
    1520:	e12fff1e 	bx	lr

00001524 <get_jtag>:

char get_jtag( void )
{
    1524:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1528:	e28db000 	add	r11, sp, #0
    152c:	e24dd00c 	sub	sp, sp, #12
    volatile int * JTAG_UART_ptr    = (int *) JTAG_UART_BASE;   // JTAG UART address
    1530:	e3a03a01 	mov	r3, #4096	; 0x1000
    1534:	e34f3f20 	movt	r3, #65312	; 0xff20
    1538:	e50b3008 	str	r3, [r11, #-8]

    int data;
    data = *(JTAG_UART_ptr);                // read the JTAG_UART data register
    153c:	e51b3008 	ldr	r3, [r11, #-8]
    1540:	e5933000 	ldr	r3, [r3]
    1544:	e50b300c 	str	r3, [r11, #-12]
    if (data & 0x00008000)                  // check RVALID to see if there is new data
    1548:	e51b300c 	ldr	r3, [r11, #-12]
    154c:	e2033902 	and	r3, r3, #32768	; 0x8000
    1550:	e3530000 	cmp	r3, #0
    1554:	0a000002 	beq	1564 <get_jtag+0x40>
        return ((char) data & 0xFF);
    1558:	e51b300c 	ldr	r3, [r11, #-12]
    155c:	e6ef3073 	uxtb	r3, r3
    1560:	ea000000 	b	1568 <get_jtag+0x44>
    else
        return ('\0');
    1564:	e3a03000 	mov	r3, #0
}
    1568:	e1a00003 	mov	r0, r3
    156c:	e28bd000 	add	sp, r11, #0
    1570:	e8bd0800 	ldmfd	sp!, {r11}
    1574:	e12fff1e 	bx	lr

00001578 <GetDigit>:

char GetDigit(unsigned char value)
{
    1578:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    157c:	e28db000 	add	r11, sp, #0
    1580:	e24dd01c 	sub	sp, sp, #28
    1584:	e1a03000 	mov	r3, r0
    1588:	e54b3015 	strb	r3, [r11, #-21]	; 0xffffffeb
    char digits[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };
    158c:	e3012a0c 	movw	r2, #6668	; 0x1a0c
    1590:	e3402000 	movt	r2, #0
    1594:	e24b3010 	sub	r3, r11, #16
    1598:	e5920000 	ldr	r0, [r2]
    159c:	e5921004 	ldr	r1, [r2, #4]
    15a0:	e8a30003 	stmia	r3!, {r0, r1}
    15a4:	e1d220b8 	ldrh	r2, [r2, #8]
    15a8:	e1c320b0 	strh	r2, [r3]

    return digits[value];
    15ac:	e55b2015 	ldrb	r2, [r11, #-21]	; 0xffffffeb
    15b0:	e3e0300b 	mvn	r3, #11
    15b4:	e24b1004 	sub	r1, r11, #4
    15b8:	e0812002 	add	r2, r1, r2
    15bc:	e0823003 	add	r3, r2, r3
    15c0:	e5d33000 	ldrb	r3, [r3]
}
    15c4:	e1a00003 	mov	r0, r3
    15c8:	e28bd000 	add	sp, r11, #0
    15cc:	e8bd0800 	ldmfd	sp!, {r11}
    15d0:	e12fff1e 	bx	lr

000015d4 <atexit>:
    15d4:	e1a01000 	mov	r1, r0
    15d8:	e3a00000 	mov	r0, #0
    15dc:	e92d4008 	push	{r3, lr}
    15e0:	e1a02000 	mov	r2, r0
    15e4:	e1a03000 	mov	r3, r0
    15e8:	eb00000e 	bl	1628 <__register_exitproc>
    15ec:	e8bd4008 	pop	{r3, lr}
    15f0:	e12fff1e 	bx	lr

000015f4 <exit>:
    15f4:	e92d4008 	push	{r3, lr}
    15f8:	e3a01000 	mov	r1, #0
    15fc:	e1a04000 	mov	r4, r0
    1600:	eb000045 	bl	171c <__call_exitprocs>
    1604:	e59f3018 	ldr	r3, [pc, #24]	; 1624 <exit+0x30>
    1608:	e5930000 	ldr	r0, [r3]
    160c:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    1610:	e3530000 	cmp	r3, #0
    1614:	11a0e00f 	movne	lr, pc
    1618:	112fff13 	bxne	r3
    161c:	e1a00004 	mov	r0, r4
    1620:	eb0000c9 	bl	194c <_exit>
    1624:	00001a18 	.word	0x00001a18

00001628 <__register_exitproc>:
    1628:	e59fc0e4 	ldr	r12, [pc, #228]	; 1714 <__register_exitproc+0xec>
    162c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    1630:	e59c4000 	ldr	r4, [r12]
    1634:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    1638:	e35c0000 	cmp	r12, #0
    163c:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    1640:	e59c5004 	ldr	r5, [r12, #4]
    1644:	0584c148 	streq	r12, [r4, #328]	; 0x148
    1648:	e355001f 	cmp	r5, #31
    164c:	e24dd010 	sub	sp, sp, #16
    1650:	e1a06000 	mov	r6, r0
    1654:	da000015 	ble	16b0 <__register_exitproc+0x88>
    1658:	e59f00b8 	ldr	r0, [pc, #184]	; 1718 <__register_exitproc+0xf0>
    165c:	e3500000 	cmp	r0, #0
    1660:	1a000001 	bne	166c <__register_exitproc+0x44>
    1664:	e3e00000 	mvn	r0, #0
    1668:	ea000018 	b	16d0 <__register_exitproc+0xa8>
    166c:	e3a00e19 	mov	r0, #400	; 0x190
    1670:	e58d100c 	str	r1, [sp, #12]
    1674:	e58d2008 	str	r2, [sp, #8]
    1678:	e58d3004 	str	r3, [sp, #4]
    167c:	e320f000 	nop	{0}
    1680:	e250c000 	subs	r12, r0, #0
    1684:	e59d100c 	ldr	r1, [sp, #12]
    1688:	e59d2008 	ldr	r2, [sp, #8]
    168c:	e59d3004 	ldr	r3, [sp, #4]
    1690:	0afffff3 	beq	1664 <__register_exitproc+0x3c>
    1694:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    1698:	e3a00000 	mov	r0, #0
    169c:	e58c0004 	str	r0, [r12, #4]
    16a0:	e58c5000 	str	r5, [r12]
    16a4:	e584c148 	str	r12, [r4, #328]	; 0x148
    16a8:	e58c0188 	str	r0, [r12, #392]	; 0x188
    16ac:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    16b0:	e3560000 	cmp	r6, #0
    16b4:	e59c4004 	ldr	r4, [r12, #4]
    16b8:	1a000007 	bne	16dc <__register_exitproc+0xb4>
    16bc:	e2843002 	add	r3, r4, #2
    16c0:	e2844001 	add	r4, r4, #1
    16c4:	e78c1103 	str	r1, [r12, r3, lsl #2]
    16c8:	e58c4004 	str	r4, [r12, #4]
    16cc:	e3a00000 	mov	r0, #0
    16d0:	e28dd010 	add	sp, sp, #16
    16d4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    16d8:	e12fff1e 	bx	lr
    16dc:	e3a00001 	mov	r0, #1
    16e0:	e1a00410 	lsl	r0, r0, r4
    16e4:	e08c8104 	add	r8, r12, r4, lsl #2
    16e8:	e3560002 	cmp	r6, #2
    16ec:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    16f0:	e5883108 	str	r3, [r8, #264]	; 0x108
    16f4:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    16f8:	e1877000 	orr	r7, r7, r0
    16fc:	01830000 	orreq	r0, r3, r0
    1700:	e1a05008 	mov	r5, r8
    1704:	e5882088 	str	r2, [r8, #136]	; 0x88
    1708:	e58c7188 	str	r7, [r12, #392]	; 0x188
    170c:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    1710:	eaffffe9 	b	16bc <__register_exitproc+0x94>
    1714:	00001a18 	.word	0x00001a18
    1718:	00000000 	.word	0x00000000

0000171c <__call_exitprocs>:
    171c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1720:	e59f3168 	ldr	r3, [pc, #360]	; 1890 <__call_exitprocs+0x174>
    1724:	e5933000 	ldr	r3, [r3]
    1728:	e24dd014 	sub	sp, sp, #20
    172c:	e58d3004 	str	r3, [sp, #4]
    1730:	e2833f52 	add	r3, r3, #328	; 0x148
    1734:	e58d0008 	str	r0, [sp, #8]
    1738:	e58d300c 	str	r3, [sp, #12]
    173c:	e1a07001 	mov	r7, r1
    1740:	e3a08001 	mov	r8, #1
    1744:	e59d3004 	ldr	r3, [sp, #4]
    1748:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    174c:	e3560000 	cmp	r6, #0
    1750:	e59db00c 	ldr	r11, [sp, #12]
    1754:	0a000033 	beq	1828 <__call_exitprocs+0x10c>
    1758:	e5965004 	ldr	r5, [r6, #4]
    175c:	e2554001 	subs	r4, r5, #1
    1760:	5286a088 	addpl	r10, r6, #136	; 0x88
    1764:	5285501f 	addpl	r5, r5, #31
    1768:	508a5105 	addpl	r5, r10, r5, lsl #2
    176c:	5a000007 	bpl	1790 <__call_exitprocs+0x74>
    1770:	ea000029 	b	181c <__call_exitprocs+0x100>
    1774:	e5953000 	ldr	r3, [r5]
    1778:	e1530007 	cmp	r3, r7
    177c:	0a000005 	beq	1798 <__call_exitprocs+0x7c>
    1780:	e2444001 	sub	r4, r4, #1
    1784:	e3740001 	cmn	r4, #1
    1788:	e2455004 	sub	r5, r5, #4
    178c:	0a000022 	beq	181c <__call_exitprocs+0x100>
    1790:	e3570000 	cmp	r7, #0
    1794:	1afffff6 	bne	1774 <__call_exitprocs+0x58>
    1798:	e5963004 	ldr	r3, [r6, #4]
    179c:	e06a2005 	rsb	r2, r10, r5
    17a0:	e2433001 	sub	r3, r3, #1
    17a4:	e0862002 	add	r2, r6, r2
    17a8:	e1530004 	cmp	r3, r4
    17ac:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    17b0:	13a01000 	movne	r1, #0
    17b4:	05864004 	streq	r4, [r6, #4]
    17b8:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    17bc:	e3530000 	cmp	r3, #0
    17c0:	0affffee 	beq	1780 <__call_exitprocs+0x64>
    17c4:	e1a02418 	lsl	r2, r8, r4
    17c8:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    17cc:	e1120001 	tst	r2, r1
    17d0:	e5969004 	ldr	r9, [r6, #4]
    17d4:	0a000016 	beq	1834 <__call_exitprocs+0x118>
    17d8:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    17dc:	e1120001 	tst	r2, r1
    17e0:	1a000016 	bne	1840 <__call_exitprocs+0x124>
    17e4:	e59d0008 	ldr	r0, [sp, #8]
    17e8:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    17ec:	e1a0e00f 	mov	lr, pc
    17f0:	e12fff13 	bx	r3
    17f4:	e5963004 	ldr	r3, [r6, #4]
    17f8:	e1530009 	cmp	r3, r9
    17fc:	1affffd0 	bne	1744 <__call_exitprocs+0x28>
    1800:	e59b3000 	ldr	r3, [r11]
    1804:	e1530006 	cmp	r3, r6
    1808:	1affffcd 	bne	1744 <__call_exitprocs+0x28>
    180c:	e2444001 	sub	r4, r4, #1
    1810:	e3740001 	cmn	r4, #1
    1814:	e2455004 	sub	r5, r5, #4
    1818:	1affffdc 	bne	1790 <__call_exitprocs+0x74>
    181c:	e59f1070 	ldr	r1, [pc, #112]	; 1894 <__call_exitprocs+0x178>
    1820:	e3510000 	cmp	r1, #0
    1824:	1a000009 	bne	1850 <__call_exitprocs+0x134>
    1828:	e28dd014 	add	sp, sp, #20
    182c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1830:	e12fff1e 	bx	lr
    1834:	e1a0e00f 	mov	lr, pc
    1838:	e12fff13 	bx	r3
    183c:	eaffffec 	b	17f4 <__call_exitprocs+0xd8>
    1840:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    1844:	e1a0e00f 	mov	lr, pc
    1848:	e12fff13 	bx	r3
    184c:	eaffffe8 	b	17f4 <__call_exitprocs+0xd8>
    1850:	e5963004 	ldr	r3, [r6, #4]
    1854:	e3530000 	cmp	r3, #0
    1858:	e5963000 	ldr	r3, [r6]
    185c:	1a000008 	bne	1884 <__call_exitprocs+0x168>
    1860:	e3530000 	cmp	r3, #0
    1864:	0a000006 	beq	1884 <__call_exitprocs+0x168>
    1868:	e1a00006 	mov	r0, r6
    186c:	e58b3000 	str	r3, [r11]
    1870:	e320f000 	nop	{0}
    1874:	e59b6000 	ldr	r6, [r11]
    1878:	e3560000 	cmp	r6, #0
    187c:	1affffb5 	bne	1758 <__call_exitprocs+0x3c>
    1880:	eaffffe8 	b	1828 <__call_exitprocs+0x10c>
    1884:	e1a0b006 	mov	r11, r6
    1888:	e1a06003 	mov	r6, r3
    188c:	eafffff9 	b	1878 <__call_exitprocs+0x15c>
    1890:	00001a18 	.word	0x00001a18
    1894:	00000000 	.word	0x00000000

00001898 <register_fini>:
    1898:	e92d4008 	push	{r3, lr}
    189c:	e59f3010 	ldr	r3, [pc, #16]	; 18b4 <register_fini+0x1c>
    18a0:	e3530000 	cmp	r3, #0
    18a4:	159f000c 	ldrne	r0, [pc, #12]	; 18b8 <register_fini+0x20>
    18a8:	1bffff49 	blne	15d4 <atexit>
    18ac:	e8bd4008 	pop	{r3, lr}
    18b0:	e12fff1e 	bx	lr
    18b4:	00001a40 	.word	0x00001a40
    18b8:	000018bc 	.word	0x000018bc

000018bc <__libc_fini_array>:
    18bc:	e92d4038 	push	{r3, r4, r5, lr}
    18c0:	e59f5030 	ldr	r5, [pc, #48]	; 18f8 <__libc_fini_array+0x3c>
    18c4:	e59f4030 	ldr	r4, [pc, #48]	; 18fc <__libc_fini_array+0x40>
    18c8:	e0654004 	rsb	r4, r5, r4
    18cc:	e1b04144 	asrs	r4, r4, #2
    18d0:	10855104 	addne	r5, r5, r4, lsl #2
    18d4:	0a000004 	beq	18ec <__libc_fini_array+0x30>
    18d8:	e5353004 	ldr	r3, [r5, #-4]!
    18dc:	e1a0e00f 	mov	lr, pc
    18e0:	e12fff13 	bx	r3
    18e4:	e2544001 	subs	r4, r4, #1
    18e8:	1afffffa 	bne	18d8 <__libc_fini_array+0x1c>
    18ec:	eb000053 	bl	1a40 <__libc_fini>
    18f0:	e8bd4038 	pop	{r3, r4, r5, lr}
    18f4:	e12fff1e 	bx	lr
    18f8:	00001a58 	.word	0x00001a58
    18fc:	00001a5c 	.word	0x00001a5c

00001900 <__cs3_premain>:
    1900:	e92d4008 	push	{r3, lr}
    1904:	eb00001d 	bl	1980 <__libc_init_array>
    1908:	e59f3030 	ldr	r3, [pc, #48]	; 1940 <__cs3_premain+0x40>
    190c:	e3530000 	cmp	r3, #0
    1910:	15930000 	ldrne	r0, [r3]
    1914:	01a00003 	moveq	r0, r3
    1918:	e59f3024 	ldr	r3, [pc, #36]	; 1944 <__cs3_premain+0x44>
    191c:	e3530000 	cmp	r3, #0
    1920:	15931000 	ldrne	r1, [r3]
    1924:	01a01003 	moveq	r1, r3
    1928:	e3a02000 	mov	r2, #0
    192c:	ebfffa4a 	bl	25c <main>
    1930:	e59f3010 	ldr	r3, [pc, #16]	; 1948 <__cs3_premain+0x48>
    1934:	e3530000 	cmp	r3, #0
    1938:	1bffff2d 	blne	15f4 <exit>
    193c:	eafffffe 	b	193c <__cs3_premain+0x3c>
	...
    1948:	000015f4 	.word	0x000015f4

0000194c <_exit>:
    194c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1950:	e3a00018 	mov	r0, #24
    1954:	e59f1004 	ldr	r1, [pc, #4]	; 1960 <_exit+0x14>
    1958:	ef123456 	svc	0x00123456
    195c:	eafffffe 	b	195c <_exit+0x10>
    1960:	00020026 	.word	0x00020026

00001964 <__cs3_isr_interrupt>:
    1964:	eafffffe 	b	1964 <__cs3_isr_interrupt>

00001968 <__cs3_isr_undef>:
    1968:	eafffffe 	b	1968 <__cs3_isr_undef>

0000196c <__cs3_isr_swi>:
    196c:	eafffffe 	b	196c <__cs3_isr_swi>

00001970 <__cs3_isr_pabort>:
    1970:	eafffffe 	b	1970 <__cs3_isr_pabort>

00001974 <__cs3_isr_dabort>:
    1974:	eafffffe 	b	1974 <__cs3_isr_dabort>

00001978 <__cs3_isr_irq>:
    1978:	eafffffe 	b	1978 <__cs3_isr_irq>

0000197c <__cs3_isr_fiq>:
    197c:	eafffffe 	b	197c <__cs3_isr_fiq>

00001980 <__libc_init_array>:
    1980:	e92d4070 	push	{r4, r5, r6, lr}
    1984:	e59f506c 	ldr	r5, [pc, #108]	; 19f8 <__libc_init_array+0x78>
    1988:	e59f606c 	ldr	r6, [pc, #108]	; 19fc <__libc_init_array+0x7c>
    198c:	e0656006 	rsb	r6, r5, r6
    1990:	e1b06146 	asrs	r6, r6, #2
    1994:	12455004 	subne	r5, r5, #4
    1998:	13a04000 	movne	r4, #0
    199c:	0a000005 	beq	19b8 <__libc_init_array+0x38>
    19a0:	e5b53004 	ldr	r3, [r5, #4]!
    19a4:	e2844001 	add	r4, r4, #1
    19a8:	e1a0e00f 	mov	lr, pc
    19ac:	e12fff13 	bx	r3
    19b0:	e1560004 	cmp	r6, r4
    19b4:	1afffff9 	bne	19a0 <__libc_init_array+0x20>
    19b8:	e59f5040 	ldr	r5, [pc, #64]	; 1a00 <__libc_init_array+0x80>
    19bc:	e59f6040 	ldr	r6, [pc, #64]	; 1a04 <__libc_init_array+0x84>
    19c0:	e0656006 	rsb	r6, r5, r6
    19c4:	eb000015 	bl	1a20 <_init>
    19c8:	e1b06146 	asrs	r6, r6, #2
    19cc:	12455004 	subne	r5, r5, #4
    19d0:	13a04000 	movne	r4, #0
    19d4:	0a000005 	beq	19f0 <__libc_init_array+0x70>
    19d8:	e5b53004 	ldr	r3, [r5, #4]!
    19dc:	e2844001 	add	r4, r4, #1
    19e0:	e1a0e00f 	mov	lr, pc
    19e4:	e12fff13 	bx	r3
    19e8:	e1560004 	cmp	r6, r4
    19ec:	1afffff9 	bne	19d8 <__libc_init_array+0x58>
    19f0:	e8bd4070 	pop	{r4, r5, r6, lr}
    19f4:	e12fff1e 	bx	lr
    19f8:	00001a38 	.word	0x00001a38
    19fc:	00001a38 	.word	0x00001a38
    1a00:	00001a38 	.word	0x00001a38
    1a04:	00001a40 	.word	0x00001a40

Disassembly of section .rodata:

00001a0c <_global_impure_ptr-0xc>:
    1a0c:	33323130 	.word	0x33323130
    1a10:	37363534 	.word	0x37363534
    1a14:	00003938 	.word	0x00003938

00001a18 <_global_impure_ptr>:
    1a18:	00001a80 00000043                       ....C...

00001a20 <_init>:
    1a20:	e1a0c00d 	mov	r12, sp
    1a24:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    1a28:	e24cb004 	sub	r11, r12, #4
    1a2c:	e24bd028 	sub	sp, r11, #40	; 0x28
    1a30:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    1a34:	e12fff1e 	bx	lr

00001a38 <__init_array_start>:
    1a38:	00001898 	.word	0x00001898

00001a3c <__frame_dummy_init_array_entry>:
    1a3c:	00000208                                ....

00001a40 <__libc_fini>:
    1a40:	e1a0c00d 	mov	r12, sp
    1a44:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    1a48:	e24cb004 	sub	r11, r12, #4
    1a4c:	e24bd028 	sub	sp, r11, #40	; 0x28
    1a50:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    1a54:	e12fff1e 	bx	lr

00001a58 <__fini_array_start>:
    1a58:	000001c4 	.word	0x000001c4

00001a5c <__cs3_regions>:
	...
    1a68:	00001eb0 	.word	0x00001eb0
    1a6c:	00000038 	.word	0x00000038
